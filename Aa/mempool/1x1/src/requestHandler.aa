$parameter MEMPOOL_WORD_SIZE		8
$parameter MEMPOOL_PAGE_SIZE		512
$parameter LOG_MEMPOOL_PAGE_SIZE 	9
$parameter MAX_SIZE_OF_REQUEST_IN_WORDS 1024
$parameter MAX_MEMPOOL_SIZE_IN_PAGES    32

$pipe REQUEST_PIPE: $uint<64> $depth 2
$pipe RESPONSE_PIPE: $uint<64> $depth 2

$constant MEMPOOL_SIZE_MASK : $uint<32> := {MAX_MEMPOOL_SIZE_IN_PAGES - 1}
$constant MEMPOOL_SIZE_MASK_16 : $uint<16> := {MAX_MEMPOOL_SIZE_IN_PAGES - 1}
$constant MEMPOOL_BUFFER_SIZE_MASK : $uint<32> := {{MAX_MEMPOOL_SIZE_IN_PAGES * MEMPOOL_PAGE_SIZE} - 1}


$parameter ALLOC_HEAD 1
$parameter ALLOC_TAIL 2
$parameter DEALLOC    3
$parameter READ       4
$parameter WRITE      5

$storage mempool_array   : 
	$array [ {MEMPOOL_PAGE_SIZE * MAX_MEMPOOL_SIZE_IN_PAGES} ] $of $uint< {8*MEMPOOL_WORD_SIZE} >
$storage requester_array : 
	$array [ MAX_MEMPOOL_SIZE_IN_PAGES ] $of $uint< 16 >

$module [requestHandlerDaemon]
	$in () $out () $is
{

				
	// initialize pointers..
	$call mempoolAllocator ($one<1> $zero<1> $zero<1> $zero<1> $zero<16> $zero<32>) ()

	$branchblock[loop] {

		// initialize requester array to 0..
		$merge $entry init_loopback 
			$phi II := $zero<16> $on $entry nII $on init_loopback
		$endmerge
			$volatile nII := (II + 1)
			requester_array[II] := 0
			
			$if (II < {MAX_MEMPOOL_SIZE_IN_PAGES-1}) $then
				$place [init_loopback]
			$endif
		

			$merge $entry loopback $endmerge

			header := REQUEST_PIPE

			$volatile $split (header 8 16 8 32) (req_type request_tag number_of_args arg_0)
			$volatile fetch_one_more := (number_of_args > 1)

			$rreport (requestHandlerDaemon received_header_0 header req_type request_tag number_of_args arg_0)

			$guard (fetch_one_more)
				header_2 := REQUEST_PIPE
			$volatile $split (header_2 32 32) (arg_1 arg_2)

			$guard (fetch_one_more)
				$rreport (requestHandlerDaemon received_header_1 arg_1 arg_2)

			$volatile is_alloc_from_head := (req_type == ALLOC_HEAD)
			$volatile is_alloc_from_tail := (req_type == ALLOC_TAIL)
			$volatile is_dealloc 	     := (req_type == DEALLOC)
			$volatile is_read  	     := (req_type == READ)
			$volatile is_write 	     := (req_type == WRITE)
						
					
			$volatile is_alloc_dealloc := ($reduce | is_alloc_from_head is_alloc_from_tail is_dealloc)
			$guard (is_alloc_dealloc)
				$call mempoolAllocator 
					($zero<1> is_alloc_from_head is_alloc_from_tail is_dealloc request_tag arg_0)
							 	()
			$guard (is_read)
				$call memReadAndSendResponse (request_tag arg_0 arg_1 arg_2) ()
			$guard (is_write)
				$call memWriteAndSendResponse (request_tag arg_0 arg_1 arg_2) ()

			$place [loopback]
	}
}


				
$module [memReadAndSendResponse]
	$in (request_tag: $uint<16> number_of_dwords base_address stride: $uint<32>)
	$out () $is
{
	$rreport  (memReadAndSendResponse inargs request_tag number_of_dwords base_address stride)

	$volatile resp_header := ($concat $zero<8> request_tag $zero<8> number_of_dwords)
	RESPONSE_PIPE := resp_header

	$branchblock[loop] {
		$dopipeline $depth 15 $fullrate 

			$merge $entry $loopback
				$phi I := $zero<32> $on $entry nI $on $loopback
				$phi A := base_address $on $entry nA $on $loopback
			$endmerge

			$volatile nI := (I + 1)
			$volatile nA := (A + stride)
		
			$volatile continue_flag := (nI < number_of_dwords)
			$volatile A_masked := (A & MEMPOOL_BUFFER_SIZE_MASK)

			D := mempool_array[A_masked]
			RESPONSE_PIPE := D

		$while continue_flag
	}
}
 
$module [memWriteAndSendResponse]
	$in (request_tag: $uint<16> number_of_dwords base_address stride: $uint<32>)
	$out () $is
{
			
	$rreport  (memWriteAndSendResponse inargs request_tag number_of_dwords base_address stride)

	$volatile resp_header := ($concat $zero<8> request_tag $zero<8> $zero<32>)

	$branchblock[loop] {
		$dopipeline $depth 15 $fullrate 

			$merge $entry $loopback
				$phi I := $zero<32> $on $entry nI $on $loopback
				$phi A := base_address $on $entry nA $on $loopback
				$phi X := REQUEST_PIPE $on $entry, $loopback
			$endmerge

			$rreport (memWriteAndSendResponse loop_status I A X)

			$volatile nI := (I + 1)
			$volatile nA := (A + stride)
		
			$volatile continue_flag := (nI < number_of_dwords)
			$volatile A_masked := (A & MEMPOOL_BUFFER_SIZE_MASK)

			mempool_array[A_masked] := X

		$while continue_flag
	}
	RESPONSE_PIPE := resp_header
}
 
