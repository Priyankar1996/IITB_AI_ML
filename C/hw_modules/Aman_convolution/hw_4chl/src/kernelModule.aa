// Load the kernel channel into the kernel pipes
$module [loadKernel]
$in ()
$out ()
$is
{  
    
    $branchblock [load_block]
    { 
        chl_in := kernel_module_pipe
        chl_out := (kernel_module_pipe << 3)
        row_size := (chl_in + (chl_in << 1))
        
        $merge $entry loopback
        $phi chl_num := ($bitcast ($uint<16>) 0) $on $entry n_chl_num $on loopback
        $phi start_add := ($bitcast ($uint<32>) 0) $on $entry n_start_add $on loopback
        $endmerge

        ea := ((start_add + ( $bitcast ($uint<32> ) row_size)) - 1)

       $volatile last3 := ($bitcast ($uint<3>) chl_num)
       $volatile last3_0 := (last3 == 0)
       $volatile last3_1 := (last3 == 1)
       $volatile last3_2 := (last3 == 2)
       $volatile last3_3 := (last3 == 3)
       $volatile last3_4 := (last3 == 4)
       $volatile last3_5 := (last3 == 5)
       $volatile last3_6 := (last3 == 6)
       $volatile last3_7 := (last3 == 7)
       
            $dopipeline $depth 15 $buffering 2 $fullrate
            $merge $entry $loopback
            $phi mycount := start_add $on $entry nmycount $on $loopback
            $endmerge
    
            $volatile nmycount := (mycount + 1)
            fetch_addr1 := @(K[( $bitcast ($uint<32> ) 0 ) ][($bitcast ($uint<64>) mycount)])
            fetch_addr2 := @(K[( $bitcast ($uint<32> ) 0 ) ][($bitcast ($uint<64>) (mycount+ ( $bitcast ($uint<32> ) row_size)))])
            fetch_addr3 := @(K[( $bitcast ($uint<32> ) 0 ) ][($bitcast ($uint<64>) (mycount+ ( $bitcast ($uint<32> )(row_size<<1))))])
            fetch_val1 := ->(fetch_addr1)
            fetch_val2 := ->(fetch_addr2)
            fetch_val3 := ->(fetch_addr3)

            $guard (last3_0) core1_kp1 := fetch_val1
            $guard (last3_0) core1_kp2 := fetch_val2
            $guard (last3_0) core1_kp3 := fetch_val3
            $guard (last3_1) core2_kp1 := fetch_val1
            $guard (last3_1) core2_kp2 := fetch_val2
            $guard (last3_1) core2_kp3 := fetch_val3
            $guard (last3_2) core3_kp1 := fetch_val1
            $guard (last3_2) core3_kp2 := fetch_val2
            $guard (last3_2) core3_kp3 := fetch_val3
            $guard (last3_3) core4_kp1 := fetch_val1
            $guard (last3_3) core4_kp2 := fetch_val2
            $guard (last3_3) core4_kp3 := fetch_val3
            $guard (last3_4) core5_kp1 := fetch_val1
            $guard (last3_4) core5_kp2 := fetch_val2
            $guard (last3_4) core5_kp3 := fetch_val3
            $guard (last3_5) core6_kp1 := fetch_val1
            $guard (last3_5) core6_kp2 := fetch_val2
            $guard (last3_5) core6_kp3 := fetch_val3
            $guard (last3_6) core7_kp1 := fetch_val1
            $guard (last3_6) core7_kp2 := fetch_val2
            $guard (last3_6) core7_kp3 := fetch_val3
            $guard (last3_7) core8_kp1 := fetch_val1
            $guard (last3_7) core8_kp2 := fetch_val2
            $guard (last3_7) core8_kp3 := fetch_val3

            $while (mycount < ea)

        n_chl_num := (chl_num + 1)
        n_start_add := (start_add + (9*($bitcast ($uint<32>) chl_in)))
        $guard (last3_0) size_pipe1 := chl_in
        $guard (last3_1) size_pipe2 := chl_in
        $guard (last3_2) size_pipe3 := chl_in
        $guard (last3_3) size_pipe4 := chl_in
        $guard (last3_4) size_pipe5 := chl_in
        $guard (last3_5) size_pipe6 := chl_in
        $guard (last3_6) size_pipe7 := chl_in
        $guard (last3_7) size_pipe8 := chl_in

        $if (n_chl_num != chl_out) $then $place [loopback] $endif
    }
}
