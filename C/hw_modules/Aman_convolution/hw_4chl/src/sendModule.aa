
$module [sendModule] $in () $out () $is
{
    $branchblock [sendBlock]{
        rb := output_pipe
        cb := output_pipe
        chl_out := output_pipe
        max_count := ($bitcast ($uint<32>) (rb*cb))
        row_size := ($bitcast ($uint<32>) (chl_out*cb))
        three_row_size := (row_size*3)

        $dopipeline $depth 15 $buffering 2 $fullrate
        $merge $entry $loopback
        $phi address1 := ($bitcast ($uint<32>) 0) $on $entry n_address1 $on $loopback
        $phi address2 := ($bitcast ($uint<32>) row_size) $on $entry n_address2 $on $loopback
        $phi address3 := ($bitcast ($uint<32>) (row_size<<1)) $on $entry n_address3 $on $loopback
        $phi address4 := ($bitcast ($uint<32>) three_row_size) $on $entry n_address4 $on $loopback
        $phi chl := ($bitcast ($uint<16>) 0) $on $entry n_chl $on $loopback
        $phi col := ($bitcast ($uint<16>) 1) $on $entry n_col $on $loopback
        $phi row := ($bitcast ($uint<16>) 1) $on $entry n_row $on $loopback
        $endmerge

        $volatile row_change := (col == cb)

        // Check this later - odd values of row will be incorrect
        $volatile chl_change := (row_change & (row >= (rb - 3)))
        $volatile n_col := ($mux row_change 1 (col + 1))
        $volatile n_row := ($mux chl_change 1 ($mux row_change (row + N_ROWS_S) row))
        $volatile n_chl := ($mux chl_change (chl+1) chl)
        
        $volatile tmp1 := (address1 + ($bitcast ($uint<32>) chl_out))
        $volatile tmp2 := (address2 + ($bitcast ($uint<32>) chl_out))
        $volatile tmp3 := (address3 + ($bitcast ($uint<32>) chl_out))
        $volatile tmp4 := (address4 + ($bitcast ($uint<32>) chl_out))
        $volatile n_address1 := ($mux chl_change ($bitcast ($uint<32>) n_chl) ($mux row_change (tmp1+three_row_size) tmp1))
        $volatile n_address2 := ($mux chl_change (($bitcast ($uint<32>) n_chl)+row_size) ($mux row_change (tmp2+three_row_size) tmp2))
        $volatile n_address3 := ($mux chl_change (($bitcast ($uint<32>) n_chl)+(row_size<<1)) ($mux row_change (tmp3+three_row_size) tmp3))
        $volatile n_address4 := ($mux chl_change (($bitcast ($uint<32>) n_chl)+three_row_size) ($mux row_change (tmp4+three_row_size) tmp4))
        
        fetch_addr1 := @(B[( $bitcast ($uint<32> ) 0 ) ][($bitcast ($uint<64>) address1)])
        fetch_addr2 := @(B[( $bitcast ($uint<32> ) 0 ) ][($bitcast ($uint<64>) address2)])
        fetch_addr3 := @(B[( $bitcast ($uint<32> ) 0 ) ][($bitcast ($uint<64>) address3)])
        fetch_addr4 := @(B[( $bitcast ($uint<32> ) 0 ) ][($bitcast ($uint<64>) address4)])

        #define core_num 1
        #include macro_file5.aa
        #define core_num 2
        #include macro_file5.aa
        #define core_num 3
        #include macro_file5.aa
        #define core_num 4
        #include macro_file5.aa
        #define core_num 5
        #include macro_file5.aa
        #define core_num 6
        #include macro_file5.aa
        #define core_num 7
        #include macro_file5.aa
        #define core_num 8
        #include macro_file5.aa
        
        ->(fetch_addr1) := ($concat od1_1 od2_1 od3_1 od4_1 od5_1 od6_1 od7_1 od8_1)
        ->(fetch_addr2) := ($concat od1_2 od2_2 od3_2 od4_2 od5_2 od6_2 od7_2 od8_2)
        ->(fetch_addr3) := ($concat od1_3 od2_3 od3_3 od4_3 od5_3 od6_3 od7_3 od8_3)
        ->(fetch_addr4) := ($concat od1_4 od2_4 od3_4 od4_4 od5_4 od6_4 od7_4 od8_4)
//        maxpool_output_pipe := 100
        continue_flag := ((chl < (chl_out - 1)) | (~chl_change))
        $while continue_flag
        input_done_pipe := 1
    }
}
