// Perform convolution operation
$module [convolveCore ]
$in ()
$out ()
$is
{
    
    $branchblock [conv_block]
    {
        num_row := (num_out_pipe - {1+{N_ROWS_S - 1}})
        num_col := (num_out_pipe - 1)
        chl_in_read := num_out_pipe
        chl_in := (chl_in_read - 1)
        shift_val := ($bitcast ($int<16>) num_out_pipe)
        acc_in_pipe := chl_in_read
        
        $merge $entry loopback
        $endmerge
        
        $dopipeline $depth 15 $buffering 2 $fullrate
        $merge $entry $loopback
        $phi row := ($bitcast ($uint<16>) 0) $on $entry ($mux row_done (row+N_ROWS_S) row) $on $loopback
        $phi col := ($bitcast ($uint<16>) 0) $on $entry ($mux num_done ($mux col_done 0 (col + 1)) col) $on $loopback
        $phi num := ($bitcast ($uint<2>) 0) $on $entry ($mux chl_done ($mux num_done 0 (num+1)) num) $on $loopback
        $phi chl := ($bitcast ($uint<16>) 0) $on $entry ($mux chl_done 0 (chl + 1)) $on $loopback
        $endmerge
        
        //$call timer (7) (time_pipe)

        $volatile read_ip := ((col == 0) | (num == 2))
        $volatile not_read_ip := (~read_ip)
        $volatile write_input := ((col < num_col) & (num > 0))
        $volatile read_k := ((col == 0) & (row == 0))
        $volatile not_read_k := (~read_k)
        $volatile chl_done := (chl == chl_in)
        $volatile num_done := ((num == 2) & chl_done)
        $volatile col_done := (col == num_col)
        $volatile row_done := (col_done & num_done)
        $volatile out_done_flag := (row >= num_row)
        $volatile store_kernel := (out_done_flag ~& col_done)
        $volatile all_done_flag := (out_done_flag & row_done)
        
        #define num 1
        #include macro_file2.aa
        #define num 2
        #include macro_file2.aa
        #define num 3
        #include macro_file2.aa
        #define num 4
        #include macro_file2.aa
        
        #define core_num 1
        #include convInner.aa
        #define core_num 2
        #include convInner.aa
        #define core_num 3
        #include convInner.aa
        #define core_num 4
        #include convInner.aa
        #define core_num 5
        #include convInner.aa
        #define core_num 6
        #include convInner.aa
        #define core_num 7
        #include convInner.aa
        #define core_num 8
        #include convInner.aa
        
        //send_val := ($mux (acc_val < 0) 0 acc_val)
        acc_pipe1 := 
            ($concat 
            ($bitcast ($uint<8>) (acc_val1_1 >> shift_val) )
			($bitcast ($uint<8>) (acc_val2_1 >> shift_val) )
			($bitcast ($uint<8>) (acc_val3_1 >> shift_val) )
			($bitcast ($uint<8>) (acc_val4_1 >> shift_val) )
			($bitcast ($uint<8>) (acc_val5_1 >> shift_val) )
			($bitcast ($uint<8>) (acc_val6_1 >> shift_val) )
			($bitcast ($uint<8>) (acc_val7_1 >> shift_val) )
			($bitcast ($uint<8>) (acc_val8_1 >> shift_val) )
			)
        acc_pipe2 := 
            ($concat
			($bitcast ($uint<8>) (acc_val1_2 >> shift_val) )
			($bitcast ($uint<8>) (acc_val2_2 >> shift_val) )
			($bitcast ($uint<8>) (acc_val3_2 >> shift_val) )
			($bitcast ($uint<8>) (acc_val4_2 >> shift_val) )
			($bitcast ($uint<8>) (acc_val5_2 >> shift_val) )
			($bitcast ($uint<8>) (acc_val6_2 >> shift_val) )
			($bitcast ($uint<8>) (acc_val7_2 >> shift_val) )
			($bitcast ($uint<8>) (acc_val8_2 >> shift_val) )
			)

        $while (~all_done_flag)

        $place [loopback]
    }
}

$module [accumulator] $in () $out () $is
{
    $branchblock [acc_blk]
    {
        acc_count := ((acc_in_pipe * 3) - 1)
        $dopipeline $depth 15 $buffering 2 $fullrate
        $merge $entry $loopback
        $phi acc1_1 := ($bitcast ($uint<8>) 0) $on $entry ($mux num_done 0 acc_val1_1) $on $loopback
        $phi acc1_2 := ($bitcast ($uint<8>) 0) $on $entry ($mux num_done 0 acc_val1_2) $on $loopback
        $phi acc2_1 := ($bitcast ($uint<8>) 0) $on $entry ($mux num_done 0 acc_val2_1) $on $loopback
        $phi acc2_2 := ($bitcast ($uint<8>) 0) $on $entry ($mux num_done 0 acc_val2_2) $on $loopback
        $phi acc3_1 := ($bitcast ($uint<8>) 0) $on $entry ($mux num_done 0 acc_val3_1) $on $loopback
        $phi acc3_2 := ($bitcast ($uint<8>) 0) $on $entry ($mux num_done 0 acc_val3_2) $on $loopback
        $phi acc4_1 := ($bitcast ($uint<8>) 0) $on $entry ($mux num_done 0 acc_val4_1) $on $loopback
        $phi acc4_2 := ($bitcast ($uint<8>) 0) $on $entry ($mux num_done 0 acc_val4_2) $on $loopback
        $phi acc5_1 := ($bitcast ($uint<8>) 0) $on $entry ($mux num_done 0 acc_val5_1) $on $loopback
        $phi acc5_2 := ($bitcast ($uint<8>) 0) $on $entry ($mux num_done 0 acc_val5_2) $on $loopback
        $phi acc6_1 := ($bitcast ($uint<8>) 0) $on $entry ($mux num_done 0 acc_val6_1) $on $loopback
        $phi acc6_2 := ($bitcast ($uint<8>) 0) $on $entry ($mux num_done 0 acc_val6_2) $on $loopback
        $phi acc7_1 := ($bitcast ($uint<8>) 0) $on $entry ($mux num_done 0 acc_val7_1) $on $loopback
        $phi acc7_2 := ($bitcast ($uint<8>) 0) $on $entry ($mux num_done 0 acc_val7_2) $on $loopback
        $phi acc8_1 := ($bitcast ($uint<8>) 0) $on $entry ($mux num_done 0 acc_val8_1) $on $loopback
        $phi acc8_2 := ($bitcast ($uint<8>) 0) $on $entry ($mux num_done 0 acc_val8_2) $on $loopback
        $phi c_count := ($bitcast ($uint<16>) 0) $on $entry nc_count $on $loopback
        $endmerge
        
//        $call timer (8) (time_pipe)
        
        num_done := (c_count == acc_count)
        nc_count := ($mux num_done 0 (c_count+1))
        rd1 := acc_pipe1
        rd2 := acc_pipe2
        $split (rd1 8 8 8 8 8 8 8 8) (t1 t2 t3 t4 t5 t6 t7 t8)
        acc_val1_1 := (acc1_1 + t1)
        acc_val2_1 := (acc2_1 + t2)
        acc_val3_1 := (acc3_1 + t3)
        acc_val4_1 := (acc4_1 + t4)
        acc_val5_1 := (acc5_1 + t5)
        acc_val6_1 := (acc6_1 + t6)
        acc_val7_1 := (acc7_1 + t7)
        acc_val8_1 := (acc8_1 + t8)
        
        $split (rd2 8 8 8 8 8 8 8 8) (r1 r2 r3 r4 r5 r6 r7 r8)
        acc_val1_2 := (acc1_2 + r1)
        acc_val2_2 := (acc2_2 + r2)
        acc_val3_2 := (acc3_2 + r3)
        acc_val4_2 := (acc4_2 + r4)
        acc_val5_2 := (acc5_2 + r5)
        acc_val6_2 := (acc6_2 + r6)
        acc_val7_2 := (acc7_2 + r7)
        acc_val8_2 := (acc8_2 + r8)
        
        $guard (num_done) output_pipe1 := ($concat 
            acc_val1_1
			acc_val2_1
			acc_val3_1
			acc_val4_1
			acc_val5_1
			acc_val6_1
			acc_val7_1
			acc_val8_1
			)
        $guard (num_done) output_pipe2 := ($concat
			acc_val1_2
			acc_val2_2
			acc_val3_2
			acc_val4_2
			acc_val5_2
			acc_val6_2
			acc_val7_2
			acc_val8_2
			)
			
//		$guard (num_done) $call timer (9) (time_pipe)
        
        $while 1
    }
}

$module [writeBack_K] $in () $out () $is
{
    $branchblock [wb_blk]
    {
        $dopipeline $depth 15 $buffering 2 $fullrate
        $merge $entry $loopback
        $endmerge
        conv1_kp1 := tmp_conv1_kp1
        conv1_kp2 := tmp_conv1_kp2
        conv1_kp3 := tmp_conv1_kp3
        conv2_kp1 := tmp_conv2_kp1
        conv2_kp2 := tmp_conv2_kp2
        conv2_kp3 := tmp_conv2_kp3
        conv3_kp1 := tmp_conv3_kp1
        conv3_kp2 := tmp_conv3_kp2
        conv3_kp3 := tmp_conv3_kp3
        conv4_kp1 := tmp_conv4_kp1
        conv4_kp2 := tmp_conv4_kp2
        conv4_kp3 := tmp_conv4_kp3
        conv5_kp1 := tmp_conv5_kp1
        conv5_kp2 := tmp_conv5_kp2
        conv5_kp3 := tmp_conv5_kp3
        conv6_kp1 := tmp_conv6_kp1
        conv6_kp2 := tmp_conv6_kp2
        conv6_kp3 := tmp_conv6_kp3
        conv7_kp1 := tmp_conv7_kp1
        conv7_kp2 := tmp_conv7_kp2
        conv7_kp3 := tmp_conv7_kp3
        conv8_kp1 := tmp_conv8_kp1
        conv8_kp2 := tmp_conv8_kp2
        conv8_kp3 := tmp_conv8_kp3
        
        $while 1
    }
}

$module [writeBack_I] $in () $out () $is
{
    $branchblock [wb_blk]
    {
        $dopipeline $depth 15 $buffering 2 $fullrate
        $merge $entry $loopback
        $endmerge
        conv_ip1 := tmp_conv_ip1
        conv_ip2 := tmp_conv_ip2
        conv_ip3 := tmp_conv_ip3
        conv_ip4 := tmp_conv_ip4
        
        $while 1
    }
}
