#include decl.aa

#include kernelModule.aa
#include inputModule.aa

#include convCore.aa

#include sendModule.aa

$pipeline $depth 7 $buffering 1 $fullrate
$opaque $module [readModule1]
$in (index : $uint<8> address : $uint<32>)
$out (data : $uint<64>)
$is
{
    ptr := @(T[( $bitcast ($uint<32> ) index ) ][($bitcast ($uint<32>) 0)][address])
    data := ->(ptr)
}

$pipeline $depth 7 $buffering 1 $fullrate
$opaque $module [readModule2]
$in (index : $uint<8> address : $uint<32>)
$out (data : $uint<64>)
$is
{
    $call timer (5) (time_pipe)
    ptr := @(T[( $bitcast ($uint<32> ) index ) ][($bitcast ($uint<32>) 0)][address])
    data := ->(ptr)
}

$pipeline $depth 7 $buffering 1 $fullrate
$opaque $module [writeModule1]
$in (index : $uint<8> address : $uint<32> data : $uint<64>)
$out (done : $uint<1>)
$is
{
    ptr := @(T[( $bitcast ($uint<32> ) index ) ][($bitcast ($uint<32>) 0)][address])
    ->(ptr) := data
    done := (index [] 0)
}
