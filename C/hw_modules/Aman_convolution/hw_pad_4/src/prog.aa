// Aa code produced by llvm2aa (version 1.0)
$record [structx_x__SizedTensor_16K] < $array [16384] $of $uint<64> > 
$pipe maxpool_input_pipe : $uint<8> $depth 2
$pipe maxpool_output_pipe : $uint<8> $depth 2
$pipe time_pipe : $uint<64> $depth 2
$parameter NO_ACT 0
$parameter RELU 1
$storage T:structx_x__SizedTensor_16K
$storage K:structx_x__SizedTensor_16K
$storage B:structx_x__SizedTensor_16K
$module [progx_xoptx_xo_storage_initializer_] $in () $out () $is 
{
  $null
  $attribute initializer
}
$module [sendB] 
$in (size : $uint<32> )
$out ()
$is 
{
  $branchblock [body] 
  {
	//begin: basic-block entry
	$place [forx_xbodyx_xpreheader_forx_xbody]
	//begin: basic-block forx_xbody
	$merge forx_xbody_forx_xbody forx_xbodyx_xpreheader_forx_xbody
	$phi ix_x067 :=  ( $cast ($uint<32>) inc) $on forx_xbody_forx_xbody 0 $on forx_xbodyx_xpreheader_forx_xbody 
	$endmerge
	arrayidx := @(B[0][ix_x067])
	// load 
	tmp4 := ->(arrayidx)
	$split (tmp4 8 8 8 8 8 8 8 8) (conv47 conv41 conv35 conv29 conv23 conv17 conv11 conv)

	maxpool_output_pipe := conv47
	maxpool_output_pipe := conv41
	maxpool_output_pipe := conv35
	maxpool_output_pipe := conv29
	maxpool_output_pipe := conv23
	maxpool_output_pipe := conv17
	maxpool_output_pipe := conv11
	maxpool_output_pipe := conv
	inc := (ix_x067 + 1  )
	// compare instruction
	exitcond1 := (inc == size )
	$if exitcond1 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbody] $endif 
	//begin: basic-block forx_xendx_xloopexit
	$merge  forx_xbody_forx_xendx_xloopexit
	$endmerge
  }
}

$module [topModule] $in () $out() $is
{
	$seriesblock [seriesBlock]
	{
		$call configureConvolution() (rt ct chl_in rb cb chl_out rk ck shift_val op_size )
		
		$parallelblock [topBlocks]
		{
			$branchblock [time_start_block]
			{
			$call timer (1)  (start_time)
			time_pipe := start_time
			}(start_time => start_time)
			
			$call loadKernel (chl_in chl_out rk ck 1) ()
			$call convolveCore (rb cb chl_in chl_out rk ck) ()
			$call sendModule (rb cb chl_out shift_val NO_ACT ) ()
			$call access_T (rb ct chl_in chl_out rk 1) ()
			$call accumulator (chl_in ck (op_size >> 1)) ()
		}(start_time => start_time)
		
		$call timer (2)  (end_time)
		time_pipe := end_time
		$call sendB(op_size) ()
		net_time := (end_time - start_time)
		$split (net_time 32 8 8 8 8) (not_needed t4 t3 t2 t1)
		maxpool_output_pipe := t4
		maxpool_output_pipe := t3
		maxpool_output_pipe := t2
		maxpool_output_pipe := t1
	}
}

$module [configureConvolution]
$in ()
$out (add add13 shr234 add33 add43 shr80235 add63 add73 shft : $uint<16> mul233 : $uint<32> )
$is
{
	$branchblock [body] 
  {
	//begin: basic-block entry

		add := ($concat maxpool_input_pipe maxpool_input_pipe)
		add13 := (maxpool_input_pipe && maxpool_input_pipe)
		add23 := (maxpool_input_pipe && maxpool_input_pipe)
		add33 := (maxpool_input_pipe && maxpool_input_pipe)
		add43 := (maxpool_input_pipe && maxpool_input_pipe)
		add53 := (maxpool_input_pipe && maxpool_input_pipe)
		add63 := (maxpool_input_pipe && maxpool_input_pipe)
		add73 := (maxpool_input_pipe && maxpool_input_pipe)
		shft := (maxpool_input_pipe && maxpool_input_pipe)
		shr80235 := (add53 >> 3)
		shr234 := (add23 >> 3 )
		$place [entry_bbx_xnph244]
		//begin: basic-block bbx_xnph244
		$merge entry_bbx_xnph244
		$endmerge
		$call TopMult (($cast ($uint<32>) add) ($cast ($uint<32>) add13) ) (tmp2)
		tmp4 := ($cast ($uint<32>) shr234)
		$call TopMult (tmp2 tmp4) (tmp5)
		$place [bbx_xnph244_forx_xbody]
		//begin: basic-block forx_xbody
		$merge bbx_xnph244_forx_xbody forx_xbody_forx_xbody
		$phi ix_x0243 :=  0 $on bbx_xnph244_forx_xbody ( $cast ($uint<32>) inc) $on forx_xbody_forx_xbody 
		$endmerge
		arrayidx := @(T[0][ix_x0243])
		add137 := ($concat maxpool_input_pipe maxpool_input_pipe maxpool_input_pipe maxpool_input_pipe maxpool_input_pipe maxpool_input_pipe maxpool_input_pipe maxpool_input_pipe)
		->(arrayidx) := add137
		inc := (ix_x0243 + 1  )
		// compare instruction
		exitcond6 := (inc == tmp5 )
		$if exitcond6 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbody] $endif 
		//begin: basic-block bbx_xnph
		$merge forx_xbody_forx_xendx_xloopexit
		$endmerge
		tmp8 := ( $cast ($uint<32> ) (add63 * shr234))
		tmp9 := ( $cast ($uint<32> )(add53 * add73))
		tmp13 := (tmp8 * tmp9)
		$place [bbx_xnph_forx_xbody158]
		//begin: basic-block forx_xbody158
		$merge bbx_xnph_forx_xbody158 forx_xbody158_forx_xbody158
		$phi ix_x1241 :=  0 $on bbx_xnph_forx_xbody158 ( $cast ($uint<32>) inc208) $on forx_xbody158_forx_xbody158 
		$endmerge
		arrayidx205 := @(K[0][ix_x1241])
		add202 := ($concat maxpool_input_pipe maxpool_input_pipe maxpool_input_pipe maxpool_input_pipe maxpool_input_pipe maxpool_input_pipe maxpool_input_pipe maxpool_input_pipe)
		->(arrayidx205) := add202
		inc208 := (ix_x1241 + 1 )
		// compare instruction
		exitcond14 := (inc208 == tmp13 )
		$if exitcond14 $then  $place [forx_xbody158_forx_xend209x_xloopexit] $else $place [forx_xbody158_forx_xbody158] $endif 
		//begin: basic-block forx_xend209x_xloopexit
		$merge forx_xbody158_forx_xend209x_xloopexit
		$endmerge
		conv227 := ($cast ($uint<32>) add43)
		conv229 := ($cast ($uint<32>) add33)
		$call TopMult (conv227 conv229) (mul230)
		$call TopMult (mul230 ($cast ($uint<32>) shr80235)) (mul233)
	}
}



$opaque $module [TopMult] $in (in1 : $uint<32> in2 : $uint<32>) $out (output : $uint<32>)
$is
{
	output := (in1 * in2)
}
