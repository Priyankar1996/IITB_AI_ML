$record [structx_x__SizedTensor] < $array [16384] $of $uint<256> > 
$storage T:structx_x__SizedTensor

$pipeline $depth 15  $buffering 1 $fullrate
$module [fill_T]
$in (addr : $uint<64>)
$out (done : $uint<8>)
$is
{
    e1 := maxpool_input_pipe
    e2 := maxpool_input_pipe
    e3 := maxpool_input_pipe
    e4 := maxpool_input_pipe
    e5 := maxpool_input_pipe
    e6 := maxpool_input_pipe
    e7 := maxpool_input_pipe
    e8 := maxpool_input_pipe
    e9 := maxpool_input_pipe
    e10 := maxpool_input_pipe
    e11 := maxpool_input_pipe
    e12 := maxpool_input_pipe
    e13 := maxpool_input_pipe
    e14 := maxpool_input_pipe
    e15 := maxpool_input_pipe
    e16 := maxpool_input_pipe
    ptr := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][addr])
    ->(ptr) := ($concat e1 e2 e3 e4 e5 e6 e7 e8 e9 e10 e11 e12 e13 e14 e15 e16)
    done := ($bitcast ($uint<8>) e1)
}

$pipeline $depth 15  $buffering 1 $fullrate
$module [maxPool4]
$in (addr addr1 addr2 addr3 addr4 : $uint<32>)
$out (output : $uint<8>)
$is
{
    myptr1 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][addr1])
    myptr2 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][addr2])
    myptr3 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][addr3])
    myptr4 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][addr4])
    c1 := ->(myptr1)
    c2 := ->(myptr2)
    c3 := ->(myptr3)
    c4 := ->(myptr4)
    $split (c1 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16) (a11 a12 a13 a14 a15 a16 a17 a18 a19 a110 a111 a112 a113 a114 a115 a116)
    $split (c2 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16) (a21 a22 a23 a24 a25 a26 a27 a28 a29 a210 a211 a212 a213 a214 a215 a216)
    $split (c3 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16) (a31 a32 a33 a34 a35 a36 a37 a38 a39 a310 a311 a312 a313 a314 a315 a316)
    $split (c4 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16) (a41 a42 a43 a44 a45 a46 a47 a48 a49 a410 a411 a412 a413 a414 a415 a416)
    $volatile t11 := ($mux (a11 > a21) a11 a21)
    $volatile t12 := ($mux (a31 > a41) a31 a41)
    $volatile out1 := ($mux (t11 > t12) t11 t12)
    $volatile t21 := ($mux (a12 > a22) a12 a22)
    $volatile t22 := ($mux (a32 > a42) a32 a42)
    $volatile out2 := ($mux (t21 > t22) t21 t22)
    $volatile t31 := ($mux (a13 > a23) a13 a23)
    $volatile t32 := ($mux (a33 > a43) a33 a43)
    $volatile out3 := ($mux (t31 > t32) t31 t32)
    $volatile t41 := ($mux (a14 > a24) a14 a24)
    $volatile t42 := ($mux (a34 > a44) a34 a44)
    $volatile out4 := ($mux (t41 > t42) t41 t42)
    $volatile t51 := ($mux (a15 > a25) a15 a25)
    $volatile t52 := ($mux (a35 > a45) a35 a45)
    $volatile out5 := ($mux (t51 > t52) t51 t52)
    $volatile t61 := ($mux (a16 > a26) a16 a26)
    $volatile t62 := ($mux (a36 > a46) a36 a46)
    $volatile out6 := ($mux (t61 > t62) t61 t62)
    $volatile t71 := ($mux (a17 > a27) a17 a27)
    $volatile t72 := ($mux (a37 > a47) a37 a47)
    $volatile out7 := ($mux (t71 > t72) t71 t72)
    $volatile t81 := ($mux (a18 > a28) a18 a28)
    $volatile t82 := ($mux (a38 > a48) a38 a48)
    $volatile out8 := ($mux (t81 > t82) t81 t82)
    $volatile t91 := ($mux (a19 > a29) a19 a29)
    $volatile t92 := ($mux (a39 > a49) a39 a49)
    $volatile out9 := ($mux (t91 > t92) t91 t92)
    $volatile t101 := ($mux (a110 > a210) a110 a210)
    $volatile t102 := ($mux (a310 > a410) a310 a410)
    $volatile out10 := ($mux (t101 > t102) t101 t102)
    $volatile t111 := ($mux (a111 > a211) a111 a211)
    $volatile t112 := ($mux (a311 > a411) a311 a411)
    $volatile out11 := ($mux (t111 > t112) t111 t112)
    $volatile t121 := ($mux (a112 > a212) a112 a212)
    $volatile t122 := ($mux (a312 > a412) a312 a412)
    $volatile out12 := ($mux (t121 > t122) t121 t122)
    $volatile t131 := ($mux (a113 > a213) a113 a213)
    $volatile t132 := ($mux (a313 > a413) a313 a413)
    $volatile out13 := ($mux (t131 > t132) t131 t132)
    $volatile t141 := ($mux (a114 > a214) a114 a214)
    $volatile t142 := ($mux (a314 > a414) a314 a414)
    $volatile out14 := ($mux (t141 > t142) t141 t142)
    $volatile t151 := ($mux (a115 > a215) a115 a215)
    $volatile t152 := ($mux (a315 > a415) a315 a415)
    $volatile out15 := ($mux (t151 > t152) t151 t152)
    $volatile t161 := ($mux (a116 > a216) a116 a216)
    $volatile t162 := ($mux (a316 > a416) a316 a416)
    $volatile out16 := ($mux (t161 > t162) t161 t162)
    myptr5 := @(B[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][addr])
    ->(myptr5) := ($concat out1 out2 out3 out4)
    myptr6 := @(B[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][(addr+1)])
    ->(myptr6) := ($concat out5 out6 out7 out8)
    myptr7 := @(B[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][(addr+2)])
    ->(myptr7) := ($concat out9 out10 out11 out12)
    myptr8 := @(B[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][(addr+3)])
    ->(myptr8) := ($concat out13 out14 out15 out16)
    output := ($bitcast ($uint<8>) out1)
}