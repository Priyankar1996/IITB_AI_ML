$module [memFetch256] $in (addr1 addr2 addr3 addr4 : $uint<32>) $out (output : $uint<64>) $is
{
    $volatile var1 :=  ( $bitcast ($uint<64> ) addr1 )
    $volatile var2 :=  ( $bitcast ($uint<64> ) addr2 )
    $volatile var3 :=  ( $bitcast ($uint<64> ) addr3 )
    $volatile var4 :=  ( $bitcast ($uint<64> ) addr4 )
    arrayidx1 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][addr1])
    arrayidx2 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][addr2])
    arrayidx3 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][addr3])
    arrayidx4 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][addr4])
    c1 := ->(arrayidx1)
    c2 := ->(arrayidx2)
    c3 := ->(arrayidx3)
    c4 := ->(arrayidx4)
    $split (c1 16 16 16 16) (a11 a12 a13 a14)
    $split (c2 16 16 16 16) (a21 a22 a23 a24)
    $split (c3 16 16 16 16) (a31 a32 a33 a34)
    $split (c4 16 16 16 16) (a41 a42 a43 a44)
    $volatile t11 := ($mux (a11 > a21) a11 a21)
    $volatile t12 := ($mux (a31 > a41) a31 a41)
    $volatile out1 := ($mux (t11 > t12) t11 t12)
    $volatile t21 := ($mux (a12 > a22) a12 a22)
    $volatile t22 := ($mux (a32 > a42) a32 a42)
    $volatile out2 := ($mux (t21 > t22) t21 t22)
    $volatile t31 := ($mux (a13 > a23) a13 a23)
    $volatile t32 := ($mux (a33 > a43) a33 a43)
    $volatile out3 := ($mux (t31 > t32) t31 t32)
    $volatile t41 := ($mux (a14 > a24) a14 a24)
    $volatile t42 := ($mux (a34 > a44) a34 a44)
    $volatile out4 := ($mux (t41 > t42) t41 t42)
    output := ($concat out1 out2 out3 out4)
}