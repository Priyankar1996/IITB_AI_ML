// Aa code produced by llvm2aa (version 1.0)
$record [structx_x__SizedTensor_16K] < $array [16384] $of $uint<64> > 
$pipe elapsed_time_pipe : $uint<64> $depth 1
$pipe maxpool_input_pipe : $uint<8> $depth 2
$pipe maxpool_output_pipe : $uint<8> $depth 2
$storage B:structx_x__SizedTensor_16K
$module [progx_xoptx_xo_storage_initializer_] $in () $out () $is 
{
  $null
  $attribute initializer
}
$module [sendB] 
$in (size : $uint<32> )
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    // compare instruction
    cmp76 := (size > ( $bitcast ($uint<32> ) _b00000000000000000000000000000111 )  )
    $if cmp76 $then  $place [entry_bbx_xnph] $else $place [entry_forx_xend] $endif 
    //begin: basic-block bbx_xnph
    $merge entry_bbx_xnph
    $endmerge
    shr := (size >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
    // compare instruction
    tmp := (shr > ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  )
    shrx_xop := (shr + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    iNsTr_1 := ($cast ($uint<64>) shrx_xop)
    xx_xop := (iNsTr_1 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    tmp80 := ( $mux tmp xx_xop ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody_forx_xbody 
    $endmerge
    arrayidx := @(B[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][indvar])
    // load 
    tmp4 := ->(arrayidx) 
    shr9 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    shr15 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    shr21 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000011000 ) )
    shr27 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000100000 ) )
    shr33 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000101000 ) )
    shr39 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 ) )
    shr45 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000111000 ) )
    conv52 := ($cast ($uint<8>) shr45)
    maxpool_output_pipe := conv52
    conv55 := ($cast ($uint<8>) shr39)
    maxpool_output_pipe := conv55
    conv58 := ($cast ($uint<8>) shr33)
    maxpool_output_pipe := conv58
    conv61 := ($cast ($uint<8>) shr27)
    maxpool_output_pipe := conv61
    conv64 := ($cast ($uint<8>) shr21)
    maxpool_output_pipe := conv64
    conv67 := ($cast ($uint<8>) shr15)
    maxpool_output_pipe := conv67
    conv70 := ($cast ($uint<8>) shr9)
    maxpool_output_pipe := conv70
    conv73 := ($cast ($uint<8>) tmp4)
    maxpool_output_pipe := conv73
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond1 := (indvarx_xnext == tmp80 )
    $if exitcond1 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [maxPool3D] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := maxpool_input_pipe
    conv1 := ($cast ($uint<32>) call)
    shl := (conv1 << ( $bitcast ($uint<32> ) _b00000000000000000000000000001000 ) )
    call2 := maxpool_input_pipe
    conv3 := ($cast ($uint<32>) call2)
    add := (shl | conv3)
    call6 := maxpool_input_pipe
    conv9 := ($cast ($uint<16>) call6)
    shl10 := (conv9 << ( $bitcast ($uint<16> ) _b0000000000001000 ) )
    call11 := maxpool_input_pipe
    conv12 := ($cast ($uint<16>) call11)
    add13 := (shl10 | conv12)
    call16 := maxpool_input_pipe
    conv19 := ($cast ($uint<16>) call16)
    shl20 := (conv19 << ( $bitcast ($uint<16> ) _b0000000000001000 ) )
    call21 := maxpool_input_pipe
    conv22 := ($cast ($uint<16>) call21)
    add23 := (shl20 | conv22)
    call26 := maxpool_input_pipe
    conv29 := ($cast ($uint<16>) call26)
    shl30 := (conv29 << ( $bitcast ($uint<16> ) _b0000000000001000 ) )
    call31 := maxpool_input_pipe
    conv32 := ($cast ($uint<16>) call31)
    add33 := (shl30 | conv32)
    call36 := maxpool_input_pipe
    conv39 := ($cast ($uint<32>) call36)
    shl40 := (conv39 << ( $bitcast ($uint<32> ) _b00000000000000000000000000001000 ) )
    call41 := maxpool_input_pipe
    conv42 := ($cast ($uint<32>) call41)
    add43 := (shl40 | conv42)
    call46 := maxpool_input_pipe
    conv49 := ($cast ($uint<16>) call46)
    shl50 := (conv49 << ( $bitcast ($uint<16> ) _b0000000000001000 ) )
    call51 := maxpool_input_pipe
    conv52 := ($cast ($uint<16>) call51)
    add53 := (shl50 | conv52)
    $barrier 
    conv59 := ($cast ($uint<32>) add23)
    mul := (conv59 * add)
    mul62 := (mul * add43)
    // compare instruction
    cmp195 := (mul62 > ( $bitcast ($uint<32> ) _b00000000000000000000000000000111 )  )
    $if cmp195 $then  $place [entry_bbx_xnph] $else $place [entry_forx_xend] $endif 
    //begin: basic-block bbx_xnph
    $merge entry_bbx_xnph
    $endmerge
    tmp := (add * add43)
    tmp198 := (tmp * conv59)
    tmp199 := (tmp198 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
    // compare instruction
    tmp200 := (tmp199 > ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  )
    tmp199x_xop := (tmp199 + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    iNsTr_14 := ($cast ($uint<64>) tmp199x_xop)
    xx_xop := (iNsTr_14 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    tmp203 := ( $mux tmp200 xx_xop ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi iNsTr_20 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody_forx_xbody 
    $endmerge
    $call fill_T (iNsTr_20 )  ()
    indvarx_xnext := (iNsTr_20 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond1 := (indvarx_xnext == tmp203 )
    $if exitcond1 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend
    $endmerge
    $barrier 
    shr79193 := (add53 >> ( $bitcast ($uint<16> ) _b0000000000000011 ) )
    mul86 := (shr79193 * add23)
    $barrier 
    $call timer ()  (call89)
    $barrier 
    conv98 := ($cast ($uint<32>) shr79193)
    conv100 := ($cast ($uint<32>) mul86)
    conv113 := ($cast ($uint<32>) add33)
    mul132 := (conv98 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add101 := (conv100 + conv98)
    $place [forx_xend_whilex_xbody]
    //begin: basic-block whilex_xbody
    //   this is a do-while loop.
    $merge forx_xend_whilex_xbody
    $phi rowx_x1_at_entry :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on forx_xend_whilex_xbody 
    $phi colx_x1_at_entry :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on forx_xend_whilex_xbody 
    $phi chlx_x0_at_entry :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on forx_xend_whilex_xbody 
    $endmerge
    $dopipeline $depth 15 $buffering 1 
    $fullrate
    $merge $entry $loopback
    $phi rowx_x1 :=  ( $cast ($uint<16>) inc168x_xrowx_x1) $on $loopback rowx_x1_at_entry $on $entry
    $phi colx_x1 :=  ( $cast ($uint<16>) colx_x2) $on $loopback colx_x1_at_entry $on $entry
    $phi chlx_x0 :=  ( $cast ($uint<16>) chlx_x1) $on $loopback chlx_x0_at_entry $on $entry
    $endmerge
    conv107 := ($cast ($uint<32>) chlx_x0)
    conv111 := ($cast ($uint<32>) colx_x1)
    conv115 := ($cast ($uint<32>) rowx_x1)
    mul116 := (conv115 * conv113)
    add117 := (conv111 + mul116)
    mul118 := (add117 * conv98)
    add119 := (mul118 + conv107)
    mul130 := (conv115 * conv59)
    add131 := (conv111 + mul130)
    shl133 := (mul132 * add131)
    add134 := (shl133 + conv107)
    add141 := (add134 + conv98)
    add145 := (add134 + conv100)
    add148 := (add101 + add134)
    $call maxPool4 (add119 add134 add141 add145 add148 )  (call149)
    inc151 := (chlx_x0 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    // compare instruction
    cmp156 := (inc151 == shr79193 )
    inc159 := ($cast ($uint<16>) cmp156)
    inc159x_xcolx_x1 := (inc159 + colx_x1)
    chlx_x1 := ( $mux cmp156 ( $bitcast ($uint<16> ) _b0000000000000000 )  inc151)
    // compare instruction
    cmp164 := (inc159x_xcolx_x1 == add33 )
    inc168 := ($cast ($uint<16>) cmp164)
    inc168x_xrowx_x1 := (inc168 + rowx_x1)
    colx_x2 := ( $mux cmp164 ( $bitcast ($uint<16> ) _b0000000000000000 )  inc159x_xcolx_x1)
    // compare instruction
    cmp174 := (inc168x_xrowx_x1 == add13 )
    whilex_xbody_whilex_xend_taken := cmp174
    $while (~cmp174)
    $if whilex_xbody_whilex_xend_taken $then 
    $place [whilex_xbody_whilex_xend]
    $endif
    //begin: basic-block whilex_xend
    $merge whilex_xbody_whilex_xend
    $endmerge
    conv90 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) call89) )
    $barrier 
    $call timer ()  (call179)
    conv180 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) call179) )
    sub := (conv180 - conv90)
    elapsed_time_pipe := sub
    $barrier 
    conv188 := ($cast ($uint<32>) add13)
    conv191 := ($cast ($uint<32>) add53)
    mul189 := (conv113 * conv188)
    mul192 := (mul189 * conv191)
    $call sendB (mul192 )  ()
    $place [return__]
    $merge return__ $endmerge
  }
}
