// Aa code produced by llvm2aa (version 1.0)
$record [structx_x__SizedTensor_16K] < $array [16384] $of $uint<64> > 
$record [structx_x__TensorDescriptor] < $uint<32> > < $uint<8> > < $uint<32> > < $array [64] $of $uint<32> > 
$pipe Block0_complete : $uint<16> $depth 1
$pipe Block0_starting : $uint<16> $depth 1
$pipe Block1_complete : $uint<16> $depth 1
$pipe Block1_starting : $uint<16> $depth 1
$pipe Block2_complete : $uint<16> $depth 1
$pipe Block2_starting : $uint<16> $depth 1
$pipe Block3_complete : $uint<16> $depth 1
$pipe Block3_starting : $uint<16> $depth 1
$pipe elapsed_time_pipe : $uint<64> $depth 1
$pipe zeropad_input_pipe : $uint<16> $depth 2
$pipe zeropad_output_pipe : $uint<16> $depth 2
$storage R:structx_x__SizedTensor_16K
$storage des_inp:structx_x__TensorDescriptor
$storage pad:$uint<16>
$storage des_out:structx_x__TensorDescriptor
$storage T:structx_x__SizedTensor_16K
$module [progx_xoptx_xo_storage_initializer_] $in () $out () $is 
{
  $null
  $attribute initializer
}
$module [getRemainingElements] 
$in (ne : $uint<16> )
$out (ret_val__ : $uint<64>)
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    // compare instruction
    cmp14 := (ne == ( $bitcast ($uint<16> ) _b0000000000000000 )  )
    $if cmp14 $then  $place [entry_forx_xend] $else $place [entry_forx_xbodyx_xpreheader] $endif 
    //begin: basic-block forx_xbodyx_xpreheader
    $merge entry_forx_xbodyx_xpreheader
    $endmerge
    $place [forx_xbodyx_xpreheader_forx_xbody]
    //begin: basic-block forx_xbody
    $merge forx_xbody_forx_xbody forx_xbodyx_xpreheader_forx_xbody
    $phi nx_x016 :=  ( $cast ($uint<16>) inc) $on forx_xbody_forx_xbody ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on forx_xbodyx_xpreheader_forx_xbody 
    $phi elementx_x015 :=  ( $cast ($uint<64>) shl) $on forx_xbody_forx_xbody ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on forx_xbodyx_xpreheader_forx_xbody 
    $endmerge
    call := zeropad_input_pipe
    conv5 := ($cast ($uint<64>) call)
    add := (conv5 | elementx_x015)
    shl := (add << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    inc := (nx_x016 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    // compare instruction
    exitcond1 := (inc == ne )
    $if exitcond1 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $phi shlx_xlcssa :=  ( $cast ($uint<64>) shl) $on forx_xbody_forx_xendx_xloopexit 
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend
    $phi elementx_x0x_xlcssa :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on entry_forx_xend ( $cast ($uint<64>) shlx_xlcssa) $on forx_xendx_xloopexit_forx_xend 
    $endmerge
    conv10 := ($cast ($uint<64>) ne)
    sub := (( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 )  - conv10)
    mul := (sub << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000100 ) )
    sh_prom := (mul & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000011111111111111111111111111110000 ) )
    ret_val__ := (elementx_x0x_xlcssa << sh_prom)
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [sendRemainingElements] 
$in (addr : $uint<32> ne : $uint<16> )
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    $storage out_data_alloc : $array [3] $of $uint<16>
    out_data := @(out_data_alloc)
    idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) addr) )
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom])
    // load 
    tmp1 := ->(arrayidx) 
    shr := (tmp1 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    conv := ($cast ($uint<16>) shr)
    arrayidx6 := out_data[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ]
    ->(arrayidx6) := conv
    shr8 := (tmp1 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000100000 ) )
    conv11 := ($cast ($uint<16>) shr8)
    arrayidx12 := out_data[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ]
    ->(arrayidx12) := conv11
    shr14 := (tmp1 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 ) )
    conv17 := ($cast ($uint<16>) shr14)
    arrayidx18 := out_data[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ]
    ->(arrayidx18) := conv17
    // compare instruction
    cmp31 := (ne == ( $bitcast ($uint<16> ) _b0000000000000000 )  )
    $if cmp31 $then  $place [entry_forx_xend] $else $place [entry_bbx_xnph] $endif 
    //begin: basic-block bbx_xnph
    $merge entry_bbx_xnph
    $endmerge
    tmp := ($cast ($uint<64>) ne)
    // compare instruction
    tmp33 := (ne > ( $bitcast ($uint<16> ) _b0000000000000001 )  )
    tmpx_xop := (tmp + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000011111111111111111111111111111111 ) )
    iNsTr_5 := (tmpx_xop & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000011111111111111111111111111111111 ) )
    xx_xop := (iNsTr_5 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    tmp36 := ( $mux tmp33 xx_xop ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    tmp2 := (tmp36 + ( $bitcast ($uint<64> ) _b1111111111111111111111111111111111111111111111111111111111111111 ) )
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbodyx_xforx_xbody_crit_edge_forx_xbody
    $phi indvar1 :=  ( $cast ($uint<64>) indvarx_xnext) $on forx_xbodyx_xforx_xbody_crit_edge_forx_xbody ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody 
    $phi tmp27 :=  ( $cast ($uint<16>) conv17) $on bbx_xnph_forx_xbody ( $cast ($uint<16>) tmp27x_xpre) $on forx_xbodyx_xforx_xbody_crit_edge_forx_xbody 
    $endmerge
    tmp4 := (indvar1 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    arrayidx26x_xphix_xtransx_xinsert := out_data[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ][tmp4]
    zeropad_output_pipe := tmp27
    // compare instruction
    exitcond3 := (indvar1 == tmp2 )
    $if exitcond3 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbodyx_xforx_xbody_crit_edge] $endif 
    //begin: basic-block forx_xbodyx_xforx_xbody_crit_edge
    $merge forx_xbody_forx_xbodyx_xforx_xbody_crit_edge
    $endmerge
    // load 
    tmp27x_xpre := ->(arrayidx26x_xphix_xtransx_xinsert) 
    indvarx_xnext := (indvar1 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [forx_xbodyx_xforx_xbody_crit_edge_forx_xbody]
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [testConfigure] 
$in ()
$out (ret_val__ : $uint<16>)
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    iNsTr_0 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ])
    ->(iNsTr_0) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000101 ) 
    call := zeropad_input_pipe
    conv := ($cast ($uint<8>) call)
    iNsTr_3 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    ->(iNsTr_3) := conv
    call1 := zeropad_input_pipe
    conv2 := ($cast ($uint<32>) call1)
    iNsTr_6 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    ->(iNsTr_6) := conv2
    // compare instruction
    cmp71 := (call1 == ( $bitcast ($uint<16> ) _b0000000000000000 )  )
    call572 := zeropad_input_pipe
    $if cmp71 $then  $place [entry_forx_xend] $else $place [entry_forx_xbodyx_xpreheader] $endif 
    //begin: basic-block forx_xbodyx_xpreheader
    $merge entry_forx_xbodyx_xpreheader
    $endmerge
    $place [forx_xbodyx_xpreheader_forx_xbody]
    //begin: basic-block forx_xbody
    $merge forx_xbody_forx_xbody forx_xbodyx_xpreheader_forx_xbody
    $phi indvar90 :=  ( $cast ($uint<64>) tmp92) $on forx_xbody_forx_xbody ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on forx_xbodyx_xpreheader_forx_xbody 
    $phi call574 :=  ( $cast ($uint<16>) call5) $on forx_xbody_forx_xbody ( $cast ($uint<16>) call572) $on forx_xbodyx_xpreheader_forx_xbody 
    $endmerge
    tmp := (indvar90 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    inc := ($cast ($uint<32>) tmp)
    arrayidx := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvar90])
    conv6 := ($cast ($uint<32>) call574)
    ->(arrayidx) := conv6
    tmp92 := (indvar90 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    iNsTr_28 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp3 := ->(iNsTr_28) 
    // compare instruction
    cmp := (inc < tmp3 )
    call5 := zeropad_input_pipe
    $if cmp $then  $place [forx_xbody_forx_xbody] $else $place [forx_xbody_forx_xendx_xloopexit] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $phi call5x_xlcssa1 :=  ( $cast ($uint<16>) call5) $on forx_xbody_forx_xendx_xloopexit 
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend
    $phi call5x_xlcssa :=  ( $cast ($uint<16>) call572) $on entry_forx_xend ( $cast ($uint<16>) call5x_xlcssa1) $on forx_xendx_xloopexit_forx_xend 
    $endmerge
    pad := call5x_xlcssa
    call10 := zeropad_input_pipe
    conv11 := ($cast ($uint<32>) call10)
    iNsTr_12 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    ->(iNsTr_12) := conv11
    call12 := zeropad_input_pipe
    conv13 := ($cast ($uint<32>) call12)
    iNsTr_15 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    ->(iNsTr_15) := conv13
    call14 := zeropad_input_pipe
    conv15 := ($cast ($uint<32>) call14)
    iNsTr_18 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    ->(iNsTr_18) := conv15
    iNsTr_20 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp17 := ->(iNsTr_20) 
    iNsTr_21 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp18 := ->(iNsTr_21) 
    iNsTr_22 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp19 := ->(iNsTr_22) 
    mul := (tmp18 * tmp17)
    mul20 := (mul * tmp19)
    conv21 := ($cast ($uint<64>) mul20)
    shr67x_xmask := (conv21 & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000011111111111111111111111111111100 ) )
    // compare instruction
    cmp2668 := (shr67x_xmask == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
    $if cmp2668 $then  $place [forx_xend_forx_xend55] $else $place [forx_xend_bbx_xnph] $endif 
    //begin: basic-block bbx_xnph
    $merge forx_xend_bbx_xnph
    $endmerge
    tmp83 := (conv21 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    // compare instruction
    tmp84 := (tmp83 > ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
    tmp4 := (tmp18 * tmp17)
    tmp5 := (tmp4 * tmp19)
    tmp6 := ($cast ($uint<64>) tmp5)
    tmp7 := (tmp6 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    // compare instruction
    tmp8 := (tmp7 > ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
    umax9 := ( $mux tmp8 tmp7 ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph_forx_xbody28]
    //begin: basic-block forx_xbody28
    $merge bbx_xnph_forx_xbody28 forx_xbody28_forx_xbody28
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody28 ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody28_forx_xbody28 
    $endmerge
    arrayidx51 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][indvar])
    call30 := zeropad_input_pipe
    conv31 := ($cast ($uint<64>) call30)
    shl := (conv31 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    call33 := zeropad_input_pipe
    conv35 := ($cast ($uint<64>) call33)
    add := (shl | conv35)
    shl37 := (add << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    call38 := zeropad_input_pipe
    conv40 := ($cast ($uint<64>) call38)
    add41 := (shl37 | conv40)
    shl43 := (add41 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    call44 := zeropad_input_pipe
    conv46 := ($cast ($uint<64>) call44)
    add47 := (shl43 | conv46)
    ->(arrayidx51) := add47
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond10 := (indvarx_xnext == umax9 )
    $if exitcond10 $then  $place [forx_xbody28_forx_xcond22x_xforx_xend55_crit_edge] $else $place [forx_xbody28_forx_xbody28] $endif 
    //begin: basic-block forx_xcond22x_xforx_xend55_crit_edge
    $merge forx_xbody28_forx_xcond22x_xforx_xend55_crit_edge
    $endmerge
    umax := ( $mux tmp84 tmp83 ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    phitmp94 := (umax & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000111111111111111111111111111111 ) )
    $place [forx_xcond22x_xforx_xend55_crit_edge_forx_xend55]
    //begin: basic-block forx_xend55
    $merge forx_xcond22x_xforx_xend55_crit_edge_forx_xend55 forx_xend_forx_xend55
    $phi ix_x1x_xlcssa :=  ( $cast ($uint<64>) phitmp94) $on forx_xcond22x_xforx_xend55_crit_edge_forx_xend55 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on forx_xend_forx_xend55 
    $endmerge
    and := (conv21 & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) )
    // compare instruction
    tobool := (and == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
    $if tobool $then  $place [forx_xend55_ifx_xend] $else $place [forx_xend55_forx_xbodyx_xix_xpreheader] $endif 
    //begin: basic-block forx_xbodyx_xix_xpreheader
    $merge forx_xend55_forx_xbodyx_xix_xpreheader
    $endmerge
    tmp11 := (tmp18 * tmp17)
    tmp12 := (tmp11 * tmp19)
    tmp13 := ($cast ($uint<2>) tmp12)
    tmp14 := ($cast ($uint<16>) tmp13)
    $place [forx_xbodyx_xix_xpreheader_forx_xbodyx_xi]
    //begin: basic-block forx_xbodyx_xi
    $merge forx_xbodyx_xi_forx_xbodyx_xi forx_xbodyx_xix_xpreheader_forx_xbodyx_xi
    $phi nx_x016x_xi :=  ( $cast ($uint<16>) incx_xi) $on forx_xbodyx_xi_forx_xbodyx_xi ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on forx_xbodyx_xix_xpreheader_forx_xbodyx_xi 
    $phi elementx_x015x_xi :=  ( $cast ($uint<64>) shlx_xi) $on forx_xbodyx_xi_forx_xbodyx_xi ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on forx_xbodyx_xix_xpreheader_forx_xbodyx_xi 
    $endmerge
    callx_xi := zeropad_input_pipe
    conv5x_xi := ($cast ($uint<64>) callx_xi)
    addx_xi := (conv5x_xi | elementx_x015x_xi)
    shlx_xi := (addx_xi << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    incx_xi := (nx_x016x_xi + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    // compare instruction
    exitcond15 := (incx_xi == tmp14 )
    $if exitcond15 $then  $place [forx_xbodyx_xi_getRemainingElementsx_xexit] $else $place [forx_xbodyx_xi_forx_xbodyx_xi] $endif 
    //begin: basic-block getRemainingElementsx_xexit
    $merge forx_xbodyx_xi_getRemainingElementsx_xexit
    $phi shlx_xix_xlcssa :=  ( $cast ($uint<64>) shlx_xi) $on forx_xbodyx_xi_getRemainingElementsx_xexit 
    $endmerge
    Bx_xnot := (conv21 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000100 ) )
    mulx_xi := (Bx_xnot & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 ) )
    sh_promx_xi := (mulx_xi ^ ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 ) )
    shl12x_xi := (shlx_xix_xlcssa << sh_promx_xi)
    arrayidx63 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][ix_x1x_xlcssa])
    ->(arrayidx63) := shl12x_xi
    $place [getRemainingElementsx_xexit_ifx_xend]
    //begin: basic-block ifx_xend
    $merge forx_xend55_ifx_xend getRemainingElementsx_xexit_ifx_xend
    $endmerge
    ret_val__ := ($cast ($uint<16>) mul20)
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [sendOutput] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    $storage out_datax_xi_alloc : $array [3] $of $uint<16>
    out_datax_xi := @(out_datax_xi_alloc)
    iNsTr_0 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp := ->(iNsTr_0) 
    iNsTr_1 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp1 := ->(iNsTr_1) 
    iNsTr_2 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp2 := ->(iNsTr_2) 
    mul := (tmp1 * tmp)
    mul3 := (mul * tmp2)
    conv := ($cast ($uint<64>) mul3)
    shr52x_xmask := (conv & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000011111111111111111111111111111100 ) )
    // compare instruction
    cmp53 := (shr52x_xmask == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
    $if cmp53 $then  $place [entry_forx_xend] $else $place [entry_bbx_xnph55] $endif 
    //begin: basic-block bbx_xnph55
    $merge entry_bbx_xnph55
    $endmerge
    tmp61 := (conv >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    // compare instruction
    tmp62 := (tmp61 > ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
    tmp3 := (tmp1 * tmp)
    tmp4 := (tmp3 * tmp2)
    tmp5 := ($cast ($uint<64>) tmp4)
    tmp6 := (tmp5 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    // compare instruction
    tmp7 := (tmp6 > ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
    umax8 := ( $mux tmp7 tmp6 ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph55_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph55_forx_xbody forx_xbody_forx_xbody
    $phi indvar66 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph55_forx_xbody ( $cast ($uint<64>) indvarx_xnext67) $on forx_xbody_forx_xbody 
    $endmerge
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][indvar66])
    // load 
    tmp11 := ->(arrayidx) 
    conv14 := ($cast ($uint<16>) tmp11)
    shr17 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    conv20 := ($cast ($uint<16>) shr17)
    shr23 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000100000 ) )
    conv26 := ($cast ($uint<16>) shr23)
    shr29 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 ) )
    conv32 := ($cast ($uint<16>) shr29)
    zeropad_output_pipe := conv32
    zeropad_output_pipe := conv26
    zeropad_output_pipe := conv20
    zeropad_output_pipe := conv14
    indvarx_xnext67 := (indvar66 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond9 := (indvarx_xnext67 == umax8 )
    $if exitcond9 $then  $place [forx_xbody_forx_xcondx_xforx_xend_crit_edge] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xcondx_xforx_xend_crit_edge
    $merge forx_xbody_forx_xcondx_xforx_xend_crit_edge
    $endmerge
    umax := ( $mux tmp62 tmp61 ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    phitmp69 := (umax & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000111111111111111111111111111111 ) )
    $place [forx_xcondx_xforx_xend_crit_edge_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xcondx_xforx_xend_crit_edge_forx_xend
    $phi ix_x0x_xlcssa :=  ( $cast ($uint<64>) phitmp69) $on forx_xcondx_xforx_xend_crit_edge_forx_xend ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on entry_forx_xend 
    $endmerge
    and44 := (conv & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) )
    // compare instruction
    tobool := (and44 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
    $if tobool $then  $place [forx_xend_sendRemainingElementsx_xexit] $else $place [forx_xend_ifx_xthen] $endif 
    //begin: basic-block ifx_xthen
    $merge forx_xend_ifx_xthen
    $endmerge
    conv48 := ($cast ($uint<16>) and44)
    arrayidxx_xi := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][ix_x0x_xlcssa])
    // load 
    tmp1x_xi := ->(arrayidxx_xi) 
    shrx_xi := (tmp1x_xi >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    convx_xi := ($cast ($uint<16>) shrx_xi)
    arrayidx6x_xi := out_datax_xi[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ]
    ->(arrayidx6x_xi) := convx_xi
    shr8x_xi := (tmp1x_xi >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000100000 ) )
    conv11x_xi := ($cast ($uint<16>) shr8x_xi)
    arrayidx12x_xi := out_datax_xi[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ]
    ->(arrayidx12x_xi) := conv11x_xi
    shr14x_xi := (tmp1x_xi >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 ) )
    conv17x_xi := ($cast ($uint<16>) shr14x_xi)
    arrayidx18x_xi := out_datax_xi[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ]
    ->(arrayidx18x_xi) := conv17x_xi
    // compare instruction
    cmp31x_xi := (conv48 == ( $bitcast ($uint<16> ) _b0000000000000000 )  )
    $if cmp31x_xi $then  $place [ifx_xthen_sendRemainingElementsx_xexit] $else $place [ifx_xthen_bbx_xnphx_xi] $endif 
    //begin: basic-block bbx_xnphx_xi
    $merge ifx_xthen_bbx_xnphx_xi
    $endmerge
    // compare instruction
    tmp33x_xi := (conv48 > ( $bitcast ($uint<16> ) _b0000000000000001 )  )
    tmpx_xopx_xi := (and44 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000011111111111111111111111111111111 ) )
    iNsTr_20 := (tmpx_xopx_xi & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000011111111111111111111111111111111 ) )
    xx_xopx_xi := (iNsTr_20 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    tmp36x_xi := ( $mux tmp33x_xi xx_xopx_xi ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    zeropad_output_pipe := conv17x_xi
    // compare instruction
    exitcondx_xi49 := (tmp36x_xi == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
    $if exitcondx_xi49 $then  $place [bbx_xnphx_xi_sendRemainingElementsx_xexit] $else $place [bbx_xnphx_xi_bbx_xnph] $endif 
    //begin: basic-block bbx_xnph
    $merge bbx_xnphx_xi_bbx_xnph
    $endmerge
    tmp12 := (tmp36x_xi + ( $bitcast ($uint<64> ) _b1111111111111111111111111111111111111111111111111111111111111110 ) )
    $place [bbx_xnph_forx_xbodyx_xforx_xbody_crit_edgex_xi]
    //begin: basic-block forx_xbodyx_xforx_xbody_crit_edgex_xi
    $merge bbx_xnph_forx_xbodyx_xforx_xbody_crit_edgex_xi forx_xbodyx_xforx_xbody_crit_edgex_xix_xforx_xbodyx_xforx_xbody_crit_edgex_xi_crit_edge_forx_xbodyx_xforx_xbody_crit_edgex_xi
    $phi indvar10 :=  ( $cast ($uint<64>) indvarx_xnext) $on forx_xbodyx_xforx_xbody_crit_edgex_xix_xforx_xbodyx_xforx_xbody_crit_edgex_xi_crit_edge_forx_xbodyx_xforx_xbody_crit_edgex_xi ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbodyx_xforx_xbody_crit_edgex_xi 
    $endmerge
    tmp14 := (indvar10 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    arrayidx26x_xphix_xtransx_xinsertx_xi := out_datax_xi[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ][tmp14]
    // load 
    tmp27x_xprex_xi := ->(arrayidx26x_xphix_xtransx_xinsertx_xi) 
    zeropad_output_pipe := tmp27x_xprex_xi
    // compare instruction
    exitcond13 := (indvar10 == tmp12 )
    $if exitcond13 $then  $place [forx_xbodyx_xforx_xbody_crit_edgex_xi_sendRemainingElementsx_xexitx_xloopexit] $else $place [forx_xbodyx_xforx_xbody_crit_edgex_xi_forx_xbodyx_xforx_xbody_crit_edgex_xix_xforx_xbodyx_xforx_xbody_crit_edgex_xi_crit_edge] $endif 
    //begin: basic-block forx_xbodyx_xforx_xbody_crit_edgex_xix_xforx_xbodyx_xforx_xbody_crit_edgex_xi_crit_edge
    $merge forx_xbodyx_xforx_xbody_crit_edgex_xi_forx_xbodyx_xforx_xbody_crit_edgex_xix_xforx_xbodyx_xforx_xbody_crit_edgex_xi_crit_edge
    $endmerge
    indvarx_xnext := (indvar10 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [forx_xbodyx_xforx_xbody_crit_edgex_xix_xforx_xbodyx_xforx_xbody_crit_edgex_xi_crit_edge_forx_xbodyx_xforx_xbody_crit_edgex_xi]
    //begin: basic-block sendRemainingElementsx_xexitx_xloopexit
    $merge forx_xbodyx_xforx_xbody_crit_edgex_xi_sendRemainingElementsx_xexitx_xloopexit
    $endmerge
    $place [sendRemainingElementsx_xexitx_xloopexit_sendRemainingElementsx_xexit]
    //begin: basic-block sendRemainingElementsx_xexit
    $merge bbx_xnphx_xi_sendRemainingElementsx_xexit forx_xend_sendRemainingElementsx_xexit ifx_xthen_sendRemainingElementsx_xexit sendRemainingElementsx_xexitx_xloopexit_sendRemainingElementsx_xexit
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_A] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block0_starting
    $barrier 
    iNsTr_2 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp := ->(iNsTr_2) 
    iNsTr_3 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp2 := ->(iNsTr_3) 
    iNsTr_4 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp6 := ->(iNsTr_4) 
    iNsTr_5 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp8 := ->(iNsTr_5) 
    iNsTr_6 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp20 := ->(iNsTr_6) 
    div := (tmp20 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    // load 
    tmp34 := pad
    tmp4 := ($cast ($uint<32>) tmp34)
    $place [entry_whilex_xcondx_xouter]
    //begin: basic-block whilex_xcondx_xouter
    $merge entry_whilex_xcondx_xouter whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter
    $phi jx_x0x_xph :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on entry_whilex_xcondx_xouter ( $cast ($uint<32>) jx_x0x_xphx_xbe) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $phi ix_x0x_xph :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on entry_whilex_xcondx_xouter ( $cast ($uint<32>) inc111x_xix_x0) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $endmerge
    // compare instruction
    cmp := (ix_x0x_xph < div )
    $if cmp $then  $place [whilex_xcondx_xouter_whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge] $else $place [whilex_xcondx_xouter_whilex_xendx_xsplit] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge
    $merge whilex_xcondx_xouter_whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge
    $endmerge
    tmp5 := (tmp4 + jx_x0x_xph)
    tmp7 := (tmp4 + ix_x0x_xph)
    tmp9 := (tmp8 * tmp7)
    tmp10 := (tmp5 + tmp9)
    tmp11 := (tmp6 * tmp10)
    tmp12 := (tmp11 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
    tmp14 := (tmp11 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
    tmp16 := (tmp11 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    tmp19 := (tmp2 * ix_x0x_xph)
    tmp21 := (jx_x0x_xph + tmp19)
    tmp22 := (tmp * tmp21)
    tmp23 := (tmp22 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
    tmp25 := (tmp22 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
    tmp27 := (tmp22 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    $place [whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xbody]
    //begin: basic-block whilex_xbody
    $merge whilex_xbody_whilex_xbody whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xbody
    $phi indvar :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xbody ( $cast ($uint<32>) indvarx_xnext) $on whilex_xbody_whilex_xbody 
    $endmerge
    tmp1 := (indvar * ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    add97 := (tmp1 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    add62 := (tmp12 + tmp1)
    add59 := (tmp14 + tmp1)
    add56 := (tmp16 + tmp1)
    add44 := (tmp11 + tmp1)
    add53 := (tmp23 + tmp1)
    add50 := (tmp25 + tmp1)
    add47 := (tmp27 + tmp1)
    add29 := (tmp22 + tmp1)
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add29) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom])
    // load 
    tmp64 := ->(arrayidx) 
    shr66 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add44) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom67 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr66) )
    arrayidx68 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom67])
    ->(arrayidx68) := tmp64
    shr70 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add47) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom71 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr70) )
    arrayidx72 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom71])
    // load 
    tmp73 := ->(arrayidx72) 
    shr75 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add56) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom76 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr75) )
    arrayidx77 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom76])
    ->(arrayidx77) := tmp73
    shr79 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add50) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom80 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr79) )
    arrayidx81 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom80])
    // load 
    tmp82 := ->(arrayidx81) 
    shr84 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add59) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom85 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr84) )
    arrayidx86 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom85])
    ->(arrayidx86) := tmp82
    shr88 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add53) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom89 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr88) )
    arrayidx90 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom89])
    // load 
    tmp91 := ->(arrayidx90) 
    shr93 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add62) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom94 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr93) )
    arrayidx95 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom94])
    ->(arrayidx95) := tmp91
    // compare instruction
    cmp100 := ( ($bitcast ( $int<32>) add97) <   ($bitcast ( $int<32>) tmp ) )
    indvarx_xnext := (indvar + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    $if cmp100 $then  $place [whilex_xbody_whilex_xbody] $else $place [whilex_xbody_ifx_xthen] $endif 
    //begin: basic-block ifx_xthen
    $merge whilex_xbody_ifx_xthen
    $endmerge
    inc := (jx_x0x_xph + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    div105 := (tmp2 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    // compare instruction
    cmp106 := (inc == div105 )
    inc111 := ($cast ($uint<32>) cmp106)
    inc111x_xix_x0 := (inc111 + ix_x0x_xph)
    $if cmp106 $then  $place [ifx_xthen_ifx_xthen108] $else $place [ifx_xthen_whilex_xcondx_xouterx_xbackedge] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xbackedge
    $merge ifx_xthen_whilex_xcondx_xouterx_xbackedge ifx_xthen108_whilex_xcondx_xouterx_xbackedge
    $phi jx_x0x_xphx_xbe :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on ifx_xthen108_whilex_xcondx_xouterx_xbackedge ( $cast ($uint<32>) inc) $on ifx_xthen_whilex_xcondx_xouterx_xbackedge 
    $endmerge
    $place [whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter]
    //begin: basic-block ifx_xthen108
    $merge ifx_xthen_ifx_xthen108
    $endmerge
    $place [ifx_xthen108_whilex_xcondx_xouterx_xbackedge]
    //begin: basic-block whilex_xendx_xsplit
    $merge whilex_xcondx_xouter_whilex_xendx_xsplit
    $endmerge
    $barrier 
    Block0_complete := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_B] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block1_starting
    $barrier 
    iNsTr_2 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp := ->(iNsTr_2) 
    div := (tmp >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    iNsTr_3 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp4 := ->(iNsTr_3) 
    iNsTr_4 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp10 := ->(iNsTr_4) 
    iNsTr_5 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp12 := ->(iNsTr_5) 
    iNsTr_6 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp24 := ->(iNsTr_6) 
    div25 := (tmp24 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    // load 
    tmp39 := pad
    tmp3 := ($cast ($uint<32>) tmp39)
    $place [entry_whilex_xcondx_xouter]
    //begin: basic-block whilex_xcondx_xouter
    $merge entry_whilex_xcondx_xouter whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter
    $phi jx_x0x_xph :=  ( $cast ($uint<32>) div) $on entry_whilex_xcondx_xouter ( $cast ($uint<32>) jx_x0x_xphx_xbe) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $phi ix_x0x_xph :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on entry_whilex_xcondx_xouter ( $cast ($uint<32>) inc115x_xix_x0) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $endmerge
    // compare instruction
    cmp := (ix_x0x_xph < div25 )
    $if cmp $then  $place [whilex_xcondx_xouter_whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge] $else $place [whilex_xcondx_xouter_whilex_xendx_xsplit] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge
    $merge whilex_xcondx_xouter_whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge
    $endmerge
    tmp5 := (tmp3 + jx_x0x_xph)
    tmp6 := (tmp3 + ix_x0x_xph)
    tmp7 := (tmp12 * tmp6)
    tmp8 := (tmp5 + tmp7)
    tmp9 := (tmp10 * tmp8)
    tmp11 := (tmp9 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
    tmp14 := (tmp9 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
    tmp16 := (tmp9 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    tmp19 := (tmp * ix_x0x_xph)
    tmp20 := (jx_x0x_xph + tmp19)
    tmp21 := (tmp4 * tmp20)
    tmp22 := (tmp21 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
    tmp25 := (tmp21 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
    tmp27 := (tmp21 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    $place [whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xbody]
    //begin: basic-block whilex_xbody
    $merge whilex_xbody_whilex_xbody whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xbody
    $phi indvar :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xbody ( $cast ($uint<32>) indvarx_xnext) $on whilex_xbody_whilex_xbody 
    $endmerge
    tmp1 := (indvar * ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    add102 := (tmp1 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    add67 := (tmp11 + tmp1)
    add64 := (tmp14 + tmp1)
    add61 := (tmp16 + tmp1)
    add49 := (tmp9 + tmp1)
    add58 := (tmp22 + tmp1)
    add55 := (tmp25 + tmp1)
    add52 := (tmp27 + tmp1)
    add34 := (tmp21 + tmp1)
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add34) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom])
    // load 
    tmp69 := ->(arrayidx) 
    shr71 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add49) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom72 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr71) )
    arrayidx73 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom72])
    ->(arrayidx73) := tmp69
    shr75 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add52) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom76 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr75) )
    arrayidx77 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom76])
    // load 
    tmp78 := ->(arrayidx77) 
    shr80 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add61) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom81 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr80) )
    arrayidx82 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom81])
    ->(arrayidx82) := tmp78
    shr84 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add55) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom85 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr84) )
    arrayidx86 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom85])
    // load 
    tmp87 := ->(arrayidx86) 
    shr89 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add64) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom90 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr89) )
    arrayidx91 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom90])
    ->(arrayidx91) := tmp87
    shr93 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add58) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom94 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr93) )
    arrayidx95 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom94])
    // load 
    tmp96 := ->(arrayidx95) 
    shr98 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add67) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom99 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr98) )
    arrayidx100 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom99])
    ->(arrayidx100) := tmp96
    // compare instruction
    cmp105 := ( ($bitcast ( $int<32>) add102) <   ($bitcast ( $int<32>) tmp4 ) )
    indvarx_xnext := (indvar + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    $if cmp105 $then  $place [whilex_xbody_whilex_xbody] $else $place [whilex_xbody_ifx_xthen] $endif 
    //begin: basic-block ifx_xthen
    $merge whilex_xbody_ifx_xthen
    $endmerge
    inc := (jx_x0x_xph + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    // compare instruction
    cmp110 := (inc == tmp )
    inc115 := ($cast ($uint<32>) cmp110)
    inc115x_xix_x0 := (inc115 + ix_x0x_xph)
    $if cmp110 $then  $place [ifx_xthen_ifx_xthen112] $else $place [ifx_xthen_whilex_xcondx_xouterx_xbackedge] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xbackedge
    $merge ifx_xthen_whilex_xcondx_xouterx_xbackedge ifx_xthen112_whilex_xcondx_xouterx_xbackedge
    $phi jx_x0x_xphx_xbe :=  ( $cast ($uint<32>) div) $on ifx_xthen112_whilex_xcondx_xouterx_xbackedge ( $cast ($uint<32>) inc) $on ifx_xthen_whilex_xcondx_xouterx_xbackedge 
    $endmerge
    $place [whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter]
    //begin: basic-block ifx_xthen112
    $merge ifx_xthen_ifx_xthen112
    $endmerge
    $place [ifx_xthen112_whilex_xcondx_xouterx_xbackedge]
    //begin: basic-block whilex_xendx_xsplit
    $merge whilex_xcondx_xouter_whilex_xendx_xsplit
    $endmerge
    $barrier 
    Block1_complete := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_C] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block2_starting
    $barrier 
    iNsTr_2 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp := ->(iNsTr_2) 
    div := (tmp >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    iNsTr_3 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp2 := ->(iNsTr_3) 
    iNsTr_4 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp4 := ->(iNsTr_4) 
    iNsTr_5 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp8 := ->(iNsTr_5) 
    iNsTr_6 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp10 := ->(iNsTr_6) 
    // load 
    tmp36 := pad
    tmp5 := ($cast ($uint<32>) tmp36)
    $place [entry_whilex_xcondx_xouter]
    //begin: basic-block whilex_xcondx_xouter
    $merge entry_whilex_xcondx_xouter whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter
    $phi jx_x0x_xph :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on entry_whilex_xcondx_xouter ( $cast ($uint<32>) jx_x0x_xphx_xbe) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $phi ix_x0x_xph :=  ( $cast ($uint<32>) div) $on entry_whilex_xcondx_xouter ( $cast ($uint<32>) inc113x_xix_x0) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $endmerge
    // compare instruction
    cmp := (ix_x0x_xph < tmp )
    $if cmp $then  $place [whilex_xcondx_xouter_whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge] $else $place [whilex_xcondx_xouter_whilex_xendx_xsplit] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge
    $merge whilex_xcondx_xouter_whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge
    $endmerge
    tmp6 := (tmp5 + jx_x0x_xph)
    tmp7 := (tmp5 + ix_x0x_xph)
    tmp9 := (tmp10 * tmp7)
    tmp11 := (tmp6 + tmp9)
    tmp12 := (tmp8 * tmp11)
    tmp13 := (tmp12 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
    tmp15 := (tmp12 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
    tmp17 := (tmp12 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    tmp20 := (tmp4 * ix_x0x_xph)
    tmp21 := (jx_x0x_xph + tmp20)
    tmp22 := (tmp2 * tmp21)
    tmp23 := (tmp22 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
    tmp25 := (tmp22 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
    tmp27 := (tmp22 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    $place [whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xbody]
    //begin: basic-block whilex_xbody
    $merge whilex_xbody_whilex_xbody whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xbody
    $phi indvar :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xbody ( $cast ($uint<32>) indvarx_xnext) $on whilex_xbody_whilex_xbody 
    $endmerge
    tmp1 := (indvar * ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    add99 := (tmp1 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    add64 := (tmp13 + tmp1)
    add61 := (tmp15 + tmp1)
    add58 := (tmp17 + tmp1)
    add46 := (tmp12 + tmp1)
    add55 := (tmp23 + tmp1)
    add52 := (tmp25 + tmp1)
    add49 := (tmp27 + tmp1)
    add31 := (tmp22 + tmp1)
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add31) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom])
    // load 
    tmp66 := ->(arrayidx) 
    shr68 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add46) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom69 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr68) )
    arrayidx70 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom69])
    ->(arrayidx70) := tmp66
    shr72 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add49) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom73 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr72) )
    arrayidx74 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom73])
    // load 
    tmp75 := ->(arrayidx74) 
    shr77 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add58) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom78 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr77) )
    arrayidx79 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom78])
    ->(arrayidx79) := tmp75
    shr81 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add52) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom82 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr81) )
    arrayidx83 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom82])
    // load 
    tmp84 := ->(arrayidx83) 
    shr86 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add61) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom87 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr86) )
    arrayidx88 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom87])
    ->(arrayidx88) := tmp84
    shr90 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add55) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom91 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr90) )
    arrayidx92 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom91])
    // load 
    tmp93 := ->(arrayidx92) 
    shr95 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add64) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom96 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr95) )
    arrayidx97 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom96])
    ->(arrayidx97) := tmp93
    // compare instruction
    cmp102 := ( ($bitcast ( $int<32>) add99) <   ($bitcast ( $int<32>) tmp2 ) )
    indvarx_xnext := (indvar + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    $if cmp102 $then  $place [whilex_xbody_whilex_xbody] $else $place [whilex_xbody_ifx_xthen] $endif 
    //begin: basic-block ifx_xthen
    $merge whilex_xbody_ifx_xthen
    $endmerge
    inc := (jx_x0x_xph + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    div107 := (tmp4 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    // compare instruction
    cmp108 := (inc == div107 )
    inc113 := ($cast ($uint<32>) cmp108)
    inc113x_xix_x0 := (inc113 + ix_x0x_xph)
    $if cmp108 $then  $place [ifx_xthen_ifx_xthen110] $else $place [ifx_xthen_whilex_xcondx_xouterx_xbackedge] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xbackedge
    $merge ifx_xthen_whilex_xcondx_xouterx_xbackedge ifx_xthen110_whilex_xcondx_xouterx_xbackedge
    $phi jx_x0x_xphx_xbe :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on ifx_xthen110_whilex_xcondx_xouterx_xbackedge ( $cast ($uint<32>) inc) $on ifx_xthen_whilex_xcondx_xouterx_xbackedge 
    $endmerge
    $place [whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter]
    //begin: basic-block ifx_xthen110
    $merge ifx_xthen_ifx_xthen110
    $endmerge
    $place [ifx_xthen110_whilex_xcondx_xouterx_xbackedge]
    //begin: basic-block whilex_xendx_xsplit
    $merge whilex_xcondx_xouter_whilex_xendx_xsplit
    $endmerge
    $barrier 
    Block2_complete := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_D] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block3_starting
    $barrier 
    iNsTr_2 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp := ->(iNsTr_2) 
    div := (tmp >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    iNsTr_3 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp3 := ->(iNsTr_3) 
    div4 := (tmp3 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    iNsTr_4 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp6 := ->(iNsTr_4) 
    iNsTr_5 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp12 := ->(iNsTr_5) 
    iNsTr_6 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp14 := ->(iNsTr_6) 
    // load 
    tmp40 := pad
    tmp4 := ($cast ($uint<32>) tmp40)
    $place [entry_whilex_xcondx_xouter]
    //begin: basic-block whilex_xcondx_xouter
    $merge entry_whilex_xcondx_xouter whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter
    $phi jx_x0x_xph :=  ( $cast ($uint<32>) div) $on entry_whilex_xcondx_xouter ( $cast ($uint<32>) jx_x0x_xphx_xbe) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $phi ix_x0x_xph :=  ( $cast ($uint<32>) div4) $on entry_whilex_xcondx_xouter ( $cast ($uint<32>) inc116x_xix_x0) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $endmerge
    // compare instruction
    cmp := (ix_x0x_xph < tmp3 )
    $if cmp $then  $place [whilex_xcondx_xouter_whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge] $else $place [whilex_xcondx_xouter_whilex_xendx_xsplit] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge
    $merge whilex_xcondx_xouter_whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge
    $endmerge
    tmp5 := (tmp4 + jx_x0x_xph)
    tmp7 := (tmp4 + ix_x0x_xph)
    tmp8 := (tmp14 * tmp7)
    tmp9 := (tmp5 + tmp8)
    tmp10 := (tmp12 * tmp9)
    tmp11 := (tmp10 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
    tmp15 := (tmp10 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
    tmp17 := (tmp10 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    tmp20 := (tmp * ix_x0x_xph)
    tmp21 := (jx_x0x_xph + tmp20)
    tmp22 := (tmp6 * tmp21)
    tmp23 := (tmp22 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
    tmp25 := (tmp22 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
    tmp27 := (tmp22 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    $place [whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xbody]
    //begin: basic-block whilex_xbody
    $merge whilex_xbody_whilex_xbody whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xbody
    $phi indvar :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xbody ( $cast ($uint<32>) indvarx_xnext) $on whilex_xbody_whilex_xbody 
    $endmerge
    tmp1 := (indvar * ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    add103 := (tmp1 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    add68 := (tmp11 + tmp1)
    add65 := (tmp15 + tmp1)
    add62 := (tmp17 + tmp1)
    add50 := (tmp10 + tmp1)
    add59 := (tmp23 + tmp1)
    add56 := (tmp25 + tmp1)
    add53 := (tmp27 + tmp1)
    add35 := (tmp22 + tmp1)
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add35) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom])
    // load 
    tmp70 := ->(arrayidx) 
    shr72 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add50) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom73 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr72) )
    arrayidx74 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom73])
    ->(arrayidx74) := tmp70
    shr76 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add53) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom77 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr76) )
    arrayidx78 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom77])
    // load 
    tmp79 := ->(arrayidx78) 
    shr81 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add62) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom82 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr81) )
    arrayidx83 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom82])
    ->(arrayidx83) := tmp79
    shr85 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add56) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom86 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr85) )
    arrayidx87 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom86])
    // load 
    tmp88 := ->(arrayidx87) 
    shr90 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add65) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom91 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr90) )
    arrayidx92 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom91])
    ->(arrayidx92) := tmp88
    shr94 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add59) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom95 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr94) )
    arrayidx96 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom95])
    // load 
    tmp97 := ->(arrayidx96) 
    shr99 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add68) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom100 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr99) )
    arrayidx101 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom100])
    ->(arrayidx101) := tmp97
    // compare instruction
    cmp106 := ( ($bitcast ( $int<32>) add103) <   ($bitcast ( $int<32>) tmp6 ) )
    indvarx_xnext := (indvar + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    $if cmp106 $then  $place [whilex_xbody_whilex_xbody] $else $place [whilex_xbody_ifx_xthen] $endif 
    //begin: basic-block ifx_xthen
    $merge whilex_xbody_ifx_xthen
    $endmerge
    inc := (jx_x0x_xph + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    // compare instruction
    cmp111 := (inc == tmp )
    inc116 := ($cast ($uint<32>) cmp111)
    inc116x_xix_x0 := (inc116 + ix_x0x_xph)
    $if cmp111 $then  $place [ifx_xthen_ifx_xthen113] $else $place [ifx_xthen_whilex_xcondx_xouterx_xbackedge] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xbackedge
    $merge ifx_xthen_whilex_xcondx_xouterx_xbackedge ifx_xthen113_whilex_xcondx_xouterx_xbackedge
    $phi jx_x0x_xphx_xbe :=  ( $cast ($uint<32>) div) $on ifx_xthen113_whilex_xcondx_xouterx_xbackedge ( $cast ($uint<32>) inc) $on ifx_xthen_whilex_xcondx_xouterx_xbackedge 
    $endmerge
    $place [whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter]
    //begin: basic-block ifx_xthen113
    $merge ifx_xthen_ifx_xthen113
    $endmerge
    $place [ifx_xthen113_whilex_xcondx_xouterx_xbackedge]
    //begin: basic-block whilex_xendx_xsplit
    $merge whilex_xcondx_xouter_whilex_xendx_xsplit
    $endmerge
    $barrier 
    Block3_complete := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    $call testConfigure ()  (call)
    $barrier 
    $call timer ()  (call1)
    conv :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) call1) )
    Block0_starting := call
    Block1_starting := call
    Block2_starting := call
    Block3_starting := call
    call6 := Block0_complete
    call8 := Block1_complete
    call10 := Block2_complete
    call12 := Block3_complete
    $barrier 
    $call timer ()  (call14)
    conv15 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) call14) )
    sub := (conv15 - conv)
    elapsed_time_pipe := sub
    $barrier 
    $call sendOutput ()  ()
    $place [return__]
    $merge return__ $endmerge
  }
}
