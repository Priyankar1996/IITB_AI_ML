// Aa code produced by llvm2aa (version 1.0)
$record [structx_x__SizedTensorDescriptor] < structx_x__TensorDescriptor > < $uint<32> > 
$record [structx_x__SizedTensor_16K] < structx_x__SizedTensorDescriptor > < $array [16384] $of $uint<64> > 
$record [structx_x__TensorDescriptor] < $uint<32> > < $uint<8> > < $uint<32> > < $array [64] $of $uint<32> > 
$pipe elapsed_time_pipe : $uint<64> $depth 1
$pipe zeropad_input_pipe : $uint<16> $depth 2
$pipe zeropad_output_pipe : $uint<16> $depth 2
$storage R:structx_x__SizedTensor_16K
$storage T:structx_x__SizedTensor_16K
$storage pad:$uint<16>
$module [progx_xoptx_xo_storage_initializer_] $in () $out () $is 
{
  $null
  $attribute initializer
}
$module [sendOutputDim] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bbx_xnph
    iNsTr_0 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ])
    ->(iNsTr_0) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000101 ) 
    iNsTr_2 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    ->(iNsTr_2) := ( $bitcast ($uint<8> ) _b00000001 ) 
    iNsTr_4 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    ->(iNsTr_4) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) 
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) tmp) $on forx_xbody_forx_xbody 
    $endmerge
    tmp2 := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    inc := ($cast ($uint<32>) tmp2)
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvar])
    // load 
    tmp3 := ->(arrayidx) 
    conv := ($cast ($uint<16>) tmp3)
    zeropad_output_pipe := conv
    tmp := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    iNsTr_9 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp1 := ->(iNsTr_9) 
    // compare instruction
    cmp := (inc < tmp1 )
    $if cmp $then  $place [forx_xbody_forx_xbody] $else $place [forx_xbody_forx_xend] $endif 
    //begin: basic-block forx_xend
    $merge forx_xbody_forx_xend
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [sendOutputData] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    $place [entry_forx_xcond]
    //begin: basic-block forx_xcond
    $merge entry_forx_xcond forx_xbody9_forx_xcond
    $phi indvar23 :=  ( $cast ($uint<64>) indvarx_xnext24) $on forx_xbody9_forx_xcond ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on entry_forx_xcond 
    $endmerge
    tmp2 := (indvar23 * ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    iNsTr_1 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    iNsTr_2 := ($bitcast ($pointer< $uint<8> >) iNsTr_1)
    uglygep3 := iNsTr_2[tmp2]
    addx_xptr := ($bitcast ($pointer< $uint<16> >) uglygep3)
    iNsTr_3 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp316 := ->(iNsTr_3) 
    // compare instruction
    cmp17 := (tmp316 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
    $if cmp17 $then  $place [forx_xcond_forx_xbody9] $else $place [forx_xcond_bbx_xnph] $endif 
    //begin: basic-block bbx_xnph
    $merge forx_xcond_bbx_xnph
    $endmerge
    // compare instruction
    tmp := (tmp316 > ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  )
    tmp3x_xop := (tmp316 + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    iNsTr_8 := ($cast ($uint<64>) tmp3x_xop)
    xx_xop := (iNsTr_8 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    tmp22 := ( $mux tmp xx_xop ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody_forx_xbody 
    $phi num_elemsx_x018 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<32>) mul) $on forx_xbody_forx_xbody 
    $endmerge
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvar])
    // load 
    tmp5 := ->(arrayidx) 
    mul := (tmp5 * num_elemsx_x018)
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond1 := (indvarx_xnext == tmp22 )
    $if exitcond1 $then  $place [forx_xbody_forx_xend] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xend
    $merge forx_xbody_forx_xend
    $phi mulx_xlcssa :=  ( $cast ($uint<32>) mul) $on forx_xbody_forx_xend 
    $endmerge
    // compare instruction
    phitmp := (mulx_xlcssa == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
    $if phitmp $then  $place [forx_xend_forx_xend15] $else $place [forx_xend_forx_xbody9] $endif 
    //begin: basic-block forx_xbody9
    $merge forx_xcond_forx_xbody9 forx_xend_forx_xbody9
    $endmerge
    // load 
    tmp11 := ->(addx_xptr) 
    zeropad_output_pipe := tmp11
    indvarx_xnext24 := (indvar23 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [forx_xbody9_forx_xcond]
    //begin: basic-block forx_xend15
    $merge forx_xend_forx_xend15
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [getInputDim] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bbx_xnph
    iNsTr_0 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ])
    ->(iNsTr_0) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000101 ) 
    iNsTr_2 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    ->(iNsTr_2) := ( $bitcast ($uint<8> ) _b00000001 ) 
    iNsTr_4 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    ->(iNsTr_4) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) 
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) tmp) $on forx_xbody_forx_xbody 
    $endmerge
    tmp2 := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    inc := ($cast ($uint<32>) tmp2)
    arrayidx := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvar])
    call := zeropad_input_pipe
    conv := ($cast ($uint<32>) call)
    ->(arrayidx) := conv
    tmp := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    iNsTr_9 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp1 := ->(iNsTr_9) 
    // compare instruction
    cmp := (inc < tmp1 )
    $if cmp $then  $place [forx_xbody_forx_xbody] $else $place [forx_xbody_forx_xend] $endif 
    //begin: basic-block forx_xend
    $merge forx_xbody_forx_xend
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [getInputData] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    $place [entry_forx_xcond]
    //begin: basic-block forx_xcond
    $merge entry_forx_xcond forx_xbody13_forx_xcond
    $phi indvar26 :=  ( $cast ($uint<64>) indvarx_xnext27) $on forx_xbody13_forx_xcond ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on entry_forx_xcond 
    $endmerge
    ix_x0 := ($cast ($uint<32>) indvar26)
    tmp3 := (indvar26 * ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    iNsTr_1 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    iNsTr_2 := ($bitcast ($pointer< $uint<8> >) iNsTr_1)
    uglygep4 := iNsTr_2[tmp3]
    addx_xptr := ($bitcast ($pointer< $uint<16> >) uglygep4)
    iNsTr_3 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp619 := ->(iNsTr_3) 
    // compare instruction
    cmp20 := (tmp619 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
    $if cmp20 $then  $place [forx_xcond_forx_xend] $else $place [forx_xcond_bbx_xnph] $endif 
    //begin: basic-block bbx_xnph
    $merge forx_xcond_bbx_xnph
    $endmerge
    // compare instruction
    tmp := (tmp619 > ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  )
    tmp6x_xop := (tmp619 + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    iNsTr_6 := ($cast ($uint<64>) tmp6x_xop)
    xx_xop := (iNsTr_6 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    tmp25 := ( $mux tmp xx_xop ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody_forx_xbody 
    $phi num_elemsx_x021 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<32>) mul) $on forx_xbody_forx_xbody 
    $endmerge
    arrayidx := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvar])
    // load 
    tmp8 := ->(arrayidx) 
    mul := (tmp8 * num_elemsx_x021)
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond1 := (indvarx_xnext == tmp25 )
    $if exitcond1 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $phi mulx_xlcssa :=  ( $cast ($uint<32>) mul) $on forx_xbody_forx_xendx_xloopexit 
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge forx_xcond_forx_xend forx_xendx_xloopexit_forx_xend
    $phi num_elemsx_x0x_xlcssa :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ) $on forx_xcond_forx_xend ( $cast ($uint<32>) mulx_xlcssa) $on forx_xendx_xloopexit_forx_xend 
    $endmerge
    // compare instruction
    cmp12 := ( ($bitcast ( $int<32>) ix_x0) <   ($bitcast ( $int<32>) num_elemsx_x0x_xlcssa ) )
    $if cmp12 $then  $place [forx_xend_forx_xbody13] $else $place [forx_xend_forx_xend18] $endif 
    //begin: basic-block forx_xbody13
    $merge forx_xend_forx_xbody13
    $endmerge
    call := zeropad_input_pipe
    ->(addx_xptr) := call
    indvarx_xnext27 := (indvar26 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [forx_xbody13_forx_xcond]
    //begin: basic-block forx_xend18
    $merge forx_xend_forx_xend18
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [getpad] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := zeropad_input_pipe
    pad := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    $storage img_index_alloc : $array [3] $of $uint<32>
    $storage dest_index_alloc : $array [3] $of $uint<32>
    img_index := @(img_index_alloc)
    dest_index := @(dest_index_alloc)
    iNsTr_0 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ])
    ->(iNsTr_0) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000101 ) 
    iNsTr_2 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    ->(iNsTr_2) := ( $bitcast ($uint<8> ) _b00000001 ) 
    iNsTr_4 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    ->(iNsTr_4) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) 
    $place [entry_forx_xbodyx_xi]
    //begin: basic-block forx_xbodyx_xi
    $merge entry_forx_xbodyx_xi forx_xbodyx_xi_forx_xbodyx_xi
    $phi indvarx_xi :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on entry_forx_xbodyx_xi ( $cast ($uint<64>) tmp292) $on forx_xbodyx_xi_forx_xbodyx_xi 
    $endmerge
    arrayidxx_xi := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvarx_xi])
    tmp30 := (indvarx_xi + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    incx_xi := ($cast ($uint<32>) tmp30)
    tmp292 := (indvarx_xi + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    callx_xi := zeropad_input_pipe
    convx_xi := ($cast ($uint<32>) callx_xi)
    ->(arrayidxx_xi) := convx_xi
    iNsTr_9 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp1x_xi := ->(iNsTr_9) 
    // compare instruction
    cmpx_xi := (incx_xi < tmp1x_xi )
    $if cmpx_xi $then  $place [forx_xbodyx_xi_forx_xbodyx_xi] $else $place [forx_xbodyx_xi_forx_xcondx_xix_xpreheader] $endif 
    //begin: basic-block forx_xcondx_xix_xpreheader
    $merge forx_xbodyx_xi_forx_xcondx_xix_xpreheader
    $phi tmp1x_xix_xlcssa :=  ( $cast ($uint<32>) tmp1x_xi) $on forx_xbodyx_xi_forx_xcondx_xix_xpreheader 
    $endmerge
    $place [forx_xcondx_xix_xpreheader_forx_xcondx_xi]
    //begin: basic-block forx_xcondx_xi
    $merge forx_xbody13x_xi_forx_xcondx_xi forx_xcondx_xix_xpreheader_forx_xcondx_xi
    $phi tmp619x_xi :=  ( $cast ($uint<32>) tmp619x_xix_xpr) $on forx_xbody13x_xi_forx_xcondx_xi ( $cast ($uint<32>) tmp1x_xix_xlcssa) $on forx_xcondx_xix_xpreheader_forx_xcondx_xi 
    $phi indvar26x_xi :=  ( $cast ($uint<64>) indvarx_xnext27x_xi) $on forx_xbody13x_xi_forx_xcondx_xi ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on forx_xcondx_xix_xpreheader_forx_xcondx_xi 
    $endmerge
    tmp27 := (indvar26x_xi * ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    iNsTr_12 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    iNsTr_13 := ($bitcast ($pointer< $uint<8> >) iNsTr_12)
    uglygep := iNsTr_13[tmp27]
    addx_xptrx_xi := ($bitcast ($pointer< $uint<16> >) uglygep)
    ix_x0x_xi := ($cast ($uint<32>) indvar26x_xi)
    // compare instruction
    cmp20x_xi := (tmp619x_xi == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
    $if cmp20x_xi $then  $place [forx_xcondx_xi_forx_xendx_xi] $else $place [forx_xcondx_xi_bbx_xnphx_xi] $endif 
    //begin: basic-block bbx_xnphx_xi
    $merge forx_xcondx_xi_bbx_xnphx_xi
    $endmerge
    // compare instruction
    tmpx_xi213 := (tmp619x_xi > ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  )
    tmp6x_xopx_xi := (tmp619x_xi + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    iNsTr_17 := ($cast ($uint<64>) tmp6x_xopx_xi)
    xx_xopx_xi := (iNsTr_17 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    tmp25x_xi := ( $mux tmpx_xi213 xx_xopx_xi ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnphx_xi_forx_xbodyx_xi216]
    //begin: basic-block forx_xbodyx_xi216
    $merge bbx_xnphx_xi_forx_xbodyx_xi216 forx_xbodyx_xi216_forx_xbodyx_xi216
    $phi indvarx_xi214 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnphx_xi_forx_xbodyx_xi216 ( $cast ($uint<64>) indvarx_xnextx_xi) $on forx_xbodyx_xi216_forx_xbodyx_xi216 
    $phi num_elemsx_x021x_xi :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ) $on bbx_xnphx_xi_forx_xbodyx_xi216 ( $cast ($uint<32>) mulx_xi) $on forx_xbodyx_xi216_forx_xbodyx_xi216 
    $endmerge
    arrayidxx_xi215 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvarx_xi214])
    // load 
    tmp8x_xi := ->(arrayidxx_xi215) 
    mulx_xi := (tmp8x_xi * num_elemsx_x021x_xi)
    indvarx_xnextx_xi := (indvarx_xi214 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond := (indvarx_xnextx_xi == tmp25x_xi )
    $if exitcond $then  $place [forx_xbodyx_xi216_forx_xendx_xix_xloopexit] $else $place [forx_xbodyx_xi216_forx_xbodyx_xi216] $endif 
    //begin: basic-block forx_xendx_xix_xloopexit
    $merge forx_xbodyx_xi216_forx_xendx_xix_xloopexit
    $phi mulx_xix_xlcssa :=  ( $cast ($uint<32>) mulx_xi) $on forx_xbodyx_xi216_forx_xendx_xix_xloopexit 
    $endmerge
    $place [forx_xendx_xix_xloopexit_forx_xendx_xi]
    //begin: basic-block forx_xendx_xi
    $merge forx_xcondx_xi_forx_xendx_xi forx_xendx_xix_xloopexit_forx_xendx_xi
    $phi num_elemsx_x0x_xlcssax_xi :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ) $on forx_xcondx_xi_forx_xendx_xi ( $cast ($uint<32>) mulx_xix_xlcssa) $on forx_xendx_xix_xloopexit_forx_xendx_xi 
    $endmerge
    // compare instruction
    cmp12x_xi := ( ($bitcast ( $int<32>) ix_x0x_xi) <   ($bitcast ( $int<32>) num_elemsx_x0x_xlcssax_xi ) )
    callx_xi217 := zeropad_input_pipe
    $if cmp12x_xi $then  $place [forx_xendx_xi_forx_xbody13x_xi] $else $place [forx_xendx_xi_getInputDatax_xexit] $endif 
    //begin: basic-block forx_xbody13x_xi
    $merge forx_xendx_xi_forx_xbody13x_xi
    $endmerge
    ->(addx_xptrx_xi) := callx_xi217
    indvarx_xnext27x_xi := (indvar26x_xi + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    iNsTr_20 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp619x_xix_xpr := ->(iNsTr_20) 
    $place [forx_xbody13x_xi_forx_xcondx_xi]
    //begin: basic-block getInputDatax_xexit
    $merge forx_xendx_xi_getInputDatax_xexit
    $phi callx_xi217x_xlcssa :=  ( $cast ($uint<16>) callx_xi217) $on forx_xendx_xi_getInputDatax_xexit 
    $endmerge
    pad := callx_xi217x_xlcssa
    $call timer ()  (call)
    iNsTr_23 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp1 := ->(iNsTr_23) 
    xx_xarray := img_index[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ]
    xx_xarray5 := img_index[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ]
    xx_xarray7 := img_index[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ]
    xx_xarray10 := dest_index[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ]
    // load 
    tmp12 := pad
    conv13 := ($cast ($uint<32>) tmp12)
    xx_xarray14 := dest_index[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ]
    xx_xarray19 := dest_index[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ]
    $place [getInputDatax_xexit_whilex_xcondx_xouter]
    //begin: basic-block whilex_xcondx_xouter
    $merge getInputDatax_xexit_whilex_xcondx_xouter whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter
    $phi ix_x0x_xph :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on getInputDatax_xexit_whilex_xcondx_xouter ( $cast ($uint<32>) inc201x_xix_x0) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $phi jx_x0x_xph :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on getInputDatax_xexit_whilex_xcondx_xouter ( $cast ($uint<32>) jx_x0x_xphx_xbe) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $endmerge
    // compare instruction
    cmp := (ix_x0x_xph < tmp1 )
    add := (conv13 + ix_x0x_xph)
    add18 := (conv13 + jx_x0x_xph)
    $if cmp $then  $place [whilex_xcondx_xouter_whilex_xbodyx_xpreheader] $else $place [whilex_xcondx_xouter_whilex_xendx_xsplit] $endif 
    //begin: basic-block whilex_xbodyx_xpreheader
    $merge whilex_xcondx_xouter_whilex_xbodyx_xpreheader
    $endmerge
    $place [whilex_xbodyx_xpreheader_whilex_xbody]
    //begin: basic-block whilex_xbody
    $merge forx_xend134_whilex_xbody whilex_xbodyx_xpreheader_whilex_xbody
    $phi iNsTr_38 :=  ( $cast ($uint<32>) iNsTr_39) $on forx_xend134_whilex_xbody ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on whilex_xbodyx_xpreheader_whilex_xbody 
    $endmerge
    inc := (iNsTr_38 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    iNsTr_39 := (iNsTr_38 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    ->(xx_xarray) := ix_x0x_xph
    ->(xx_xarray5) := jx_x0x_xph
    ->(xx_xarray7) := iNsTr_38
    ->(xx_xarray10) := add
    ->(xx_xarray14) := add18
    ->(xx_xarray19) := iNsTr_38
    iNsTr_46 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    // load 
    tmp26 := ->(iNsTr_46) 
    // compare instruction
    tobool := (tmp26 == ( $bitcast ($uint<8> ) _b00000000 )  )
    iNsTr_47 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp35 := ->(iNsTr_47) 
    sub36 := (tmp35 + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    xx_xsub36 := ( $mux tobool ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  sub36)
    sub36x_x := ( $mux tobool sub36 ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) )
    // compare instruction
    tobool42 := ( ($bitcast ( $int<8>) tmp26) !=   ($bitcast ( $int<8>) ( $bitcast ($uint<8> ) _b00000000 )  ) )
    cond46 := ( $mux tobool42 ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 )  ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add51249 := (cond46 + sub36x_x)
    // compare instruction
    cmp52250 := (xx_xsub36 == add51249 )
    $if cmp52250 $then  $place [whilex_xbody_forx_xend] $else $place [whilex_xbody_bbx_xnph] $endif 
    //begin: basic-block bbx_xnph
    $merge whilex_xbody_bbx_xnph
    $endmerge
    tmp270 := (cond46 + xx_xsub36)
    tmp16 := ($cast ($uint<64>) cond46)
    tmp18 := ($cast ($uint<64>) tmp270)
    tmp21 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) cond46) )
    tmp23 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) xx_xsub36) )
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody_forx_xbody 
    $phi ret_valuex_x0253 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<32>) add58) $on forx_xbody_forx_xbody 
    $phi SCALE_FACTORx_x0251 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<32>) mul64) $on forx_xbody_forx_xbody 
    $endmerge
    tmp17 := (tmp16 * indvar)
    tmp19 := (tmp18 + tmp17)
    add67 := ($cast ($uint<32>) tmp19)
    tmp22 := (tmp21 * indvar)
    tmp24 := (tmp23 + tmp22)
    arrayidx61 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][tmp24])
    arrayidx := img_index[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ][tmp24]
    // load 
    tmp56 := ->(arrayidx) 
    mul := (tmp56 * SCALE_FACTORx_x0251)
    add58 := (mul + ret_valuex_x0253)
    // load 
    tmp62 := ->(arrayidx61) 
    mul64 := (tmp62 * SCALE_FACTORx_x0251)
    // compare instruction
    cmp52 := (add67 == add51249 )
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $if cmp52 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $phi add58x_xlcssa :=  ( $cast ($uint<32>) add58) $on forx_xbody_forx_xendx_xloopexit 
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge forx_xendx_xloopexit_forx_xend whilex_xbody_forx_xend
    $phi ret_valuex_x0x_xlcssa :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on whilex_xbody_forx_xend ( $cast ($uint<32>) add58x_xlcssa) $on forx_xendx_xloopexit_forx_xend 
    $endmerge
    iNsTr_53 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    // load 
    tmp78 := ->(iNsTr_53) 
    // compare instruction
    tobool80 := (tmp78 == ( $bitcast ($uint<8> ) _b00000000 )  )
    iNsTr_54 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp94x_xpre := ->(iNsTr_54) 
    sub95 := (tmp94x_xpre + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    xx_xsub95 := ( $mux tobool80 ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  sub95)
    sub95x_x := ( $mux tobool80 sub95 ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) )
    // compare instruction
    tobool102 := ( ($bitcast ( $int<8>) tmp78) !=   ($bitcast ( $int<8>) ( $bitcast ($uint<8> ) _b00000000 )  ) )
    cond106 := ( $mux tobool102 ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 )  ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add112254 := (cond106 + sub95x_x)
    // compare instruction
    cmp113255 := (xx_xsub95 == add112254 )
    $if cmp113255 $then  $place [forx_xend_forx_xend134] $else $place [forx_xend_bbx_xnph259] $endif 
    //begin: basic-block bbx_xnph259
    $merge forx_xend_bbx_xnph259
    $endmerge
    tmp282 := (cond106 + xx_xsub95)
    tmp6 := ($cast ($uint<64>) cond106)
    tmp8 := ($cast ($uint<64>) tmp282)
    tmp11 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) cond106) )
    tmp14 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) xx_xsub95) )
    $place [bbx_xnph259_forx_xbody115]
    //begin: basic-block forx_xbody115
    $merge bbx_xnph259_forx_xbody115 forx_xbody115_forx_xbody115
    $phi indvar274 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph259_forx_xbody115 ( $cast ($uint<64>) indvarx_xnext275) $on forx_xbody115_forx_xbody115 
    $phi SCALE_FACTOR75x_x0258 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ) $on bbx_xnph259_forx_xbody115 ( $cast ($uint<32>) mul129) $on forx_xbody115_forx_xbody115 
    $phi ret_value71x_x0256 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on bbx_xnph259_forx_xbody115 ( $cast ($uint<32>) add123) $on forx_xbody115_forx_xbody115 
    $endmerge
    tmp7 := (tmp6 * indvar274)
    tmp9 := (tmp8 + tmp7)
    add133 := ($cast ($uint<32>) tmp9)
    tmp13 := (tmp11 * indvar274)
    tmp15 := (tmp14 + tmp13)
    arrayidx126 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][tmp15])
    arrayidx119 := dest_index[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ][tmp15]
    // load 
    tmp120 := ->(arrayidx119) 
    mul121 := (tmp120 * SCALE_FACTOR75x_x0258)
    add123 := (mul121 + ret_value71x_x0256)
    // load 
    tmp127 := ->(arrayidx126) 
    mul129 := (tmp127 * SCALE_FACTOR75x_x0258)
    // compare instruction
    cmp113 := (add133 == add112254 )
    indvarx_xnext275 := (indvar274 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $if cmp113 $then  $place [forx_xbody115_forx_xend134x_xloopexit] $else $place [forx_xbody115_forx_xbody115] $endif 
    //begin: basic-block forx_xend134x_xloopexit
    $merge forx_xbody115_forx_xend134x_xloopexit
    $phi add123x_xlcssa :=  ( $cast ($uint<32>) add123) $on forx_xbody115_forx_xend134x_xloopexit 
    $endmerge
    $place [forx_xend134x_xloopexit_forx_xend134]
    //begin: basic-block forx_xend134
    $merge forx_xend_forx_xend134 forx_xend134x_xloopexit_forx_xend134
    $phi ret_value71x_x0x_xlcssa :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on forx_xend_forx_xend134 ( $cast ($uint<32>) add123x_xlcssa) $on forx_xend134x_xloopexit_forx_xend134 
    $endmerge
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) ret_valuex_x0x_xlcssa) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom138 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx139 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ][idxprom138])
    // load 
    tmp140 := ->(arrayidx139) 
    sub146 := (ret_valuex_x0x_xlcssa << ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    mul153 := (sub146 & ( $bitcast ($uint<32> ) _b00000000000000000000000000110000 ) )
    sh_prom := ($cast ($uint<64>) mul153)
    shr154 := (tmp140 >> sh_prom)
    shr165 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) ret_value71x_x0x_xlcssa) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom166 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr165) )
    arrayidx167 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ][idxprom166])
    // load 
    tmp168 := ->(arrayidx167) 
    sext := (shr154 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 ) )
    conv170 :=  ($bitcast ($uint<64>) ( ($bitcast ( $int<64>) sext) >>  ($bitcast ( $int<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 )  )))
    sub162 := (ret_value71x_x0x_xlcssa << ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    mul173 := (sub162 & ( $bitcast ($uint<32> ) _b00000000000000000000000000110000 ) )
    sh_prom174 := ($cast ($uint<64>) mul173)
    shl := (conv170 << sh_prom174)
    or := (shl | tmp168)
    ->(arrayidx167) := or
    iNsTr_59 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp190 := ->(iNsTr_59) 
    // compare instruction
    cmp191 := (inc == tmp190 )
    $if cmp191 $then  $place [forx_xend134_ifx_xthen] $else $place [forx_xend134_whilex_xbody] $endif 
    //begin: basic-block ifx_xthen
    $merge forx_xend134_ifx_xthen
    $endmerge
    inc194 := (jx_x0x_xph + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    iNsTr_66 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp196 := ->(iNsTr_66) 
    // compare instruction
    cmp197 := (inc194 == tmp196 )
    inc201 := ($cast ($uint<32>) cmp197)
    inc201x_xix_x0 := (inc201 + ix_x0x_xph)
    $if cmp197 $then  $place [ifx_xthen_ifx_xthen199] $else $place [ifx_xthen_whilex_xcondx_xouterx_xbackedge] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xbackedge
    $merge ifx_xthen_whilex_xcondx_xouterx_xbackedge ifx_xthen199_whilex_xcondx_xouterx_xbackedge
    $phi jx_x0x_xphx_xbe :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on ifx_xthen199_whilex_xcondx_xouterx_xbackedge ( $cast ($uint<32>) inc194) $on ifx_xthen_whilex_xcondx_xouterx_xbackedge 
    $endmerge
    $place [whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter]
    //begin: basic-block ifx_xthen199
    $merge ifx_xthen_ifx_xthen199
    $endmerge
    $place [ifx_xthen199_whilex_xcondx_xouterx_xbackedge]
    //begin: basic-block whilex_xendx_xsplit
    $merge whilex_xcondx_xouter_whilex_xendx_xsplit
    $endmerge
    conv :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) call) )
    $call timer ()  (call204)
    conv205 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) call204) )
    sub209 := (conv205 - conv)
    elapsed_time_pipe := sub209
    iNsTr_31 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ])
    ->(iNsTr_31) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000101 ) 
    iNsTr_33 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    ->(iNsTr_33) := ( $bitcast ($uint<8> ) _b00000001 ) 
    iNsTr_35 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    ->(iNsTr_35) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) 
    $place [whilex_xendx_xsplit_forx_xbodyx_xi227]
    //begin: basic-block forx_xbodyx_xi227
    $merge forx_xbodyx_xi227_forx_xbodyx_xi227 whilex_xendx_xsplit_forx_xbodyx_xi227
    $phi indvarx_xi220 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on whilex_xendx_xsplit_forx_xbodyx_xi227 ( $cast ($uint<64>) tmp262) $on forx_xbodyx_xi227_forx_xbodyx_xi227 
    $endmerge
    arrayidxx_xi221 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvarx_xi220])
    tmp := (indvarx_xi220 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    incx_xi224 := ($cast ($uint<32>) tmp)
    tmp262 := (indvarx_xi220 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // load 
    tmp3x_xi := ->(arrayidxx_xi221) 
    convx_xi222 := ($cast ($uint<16>) tmp3x_xi)
    zeropad_output_pipe := convx_xi222
    iNsTr_51 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp1x_xi225 := ->(iNsTr_51) 
    // compare instruction
    cmpx_xi226 := (incx_xi224 < tmp1x_xi225 )
    $if cmpx_xi226 $then  $place [forx_xbodyx_xi227_forx_xbodyx_xi227] $else $place [forx_xbodyx_xi227_forx_xcondx_xi232x_xpreheader] $endif 
    //begin: basic-block forx_xcondx_xi232x_xpreheader
    $merge forx_xbodyx_xi227_forx_xcondx_xi232x_xpreheader
    $phi tmp1x_xi225x_xlcssa :=  ( $cast ($uint<32>) tmp1x_xi225) $on forx_xbodyx_xi227_forx_xcondx_xi232x_xpreheader 
    $endmerge
    $place [forx_xcondx_xi232x_xpreheader_forx_xcondx_xi232]
    //begin: basic-block forx_xcondx_xi232
    $merge forx_xbody9x_xi_forx_xcondx_xi232 forx_xcondx_xi232x_xpreheader_forx_xcondx_xi232
    $phi tmp316x_xi :=  ( $cast ($uint<32>) tmp316x_xix_xpr) $on forx_xbody9x_xi_forx_xcondx_xi232 ( $cast ($uint<32>) tmp1x_xi225x_xlcssa) $on forx_xcondx_xi232x_xpreheader_forx_xcondx_xi232 
    $phi indvar23x_xi :=  ( $cast ($uint<64>) indvarx_xnext24x_xi) $on forx_xbody9x_xi_forx_xcondx_xi232 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on forx_xcondx_xi232x_xpreheader_forx_xcondx_xi232 
    $endmerge
    tmp2 := (indvar23x_xi * ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    iNsTr_63 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    iNsTr_64 := ($bitcast ($pointer< $uint<8> >) iNsTr_63)
    uglygep3 := iNsTr_64[tmp2]
    addx_xptrx_xi231 := ($bitcast ($pointer< $uint<16> >) uglygep3)
    // compare instruction
    cmp17x_xi := (tmp316x_xi == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
    $if cmp17x_xi $then  $place [forx_xcondx_xi232_forx_xbody9x_xi] $else $place [forx_xcondx_xi232_bbx_xnphx_xi235] $endif 
    //begin: basic-block bbx_xnphx_xi235
    $merge forx_xcondx_xi232_bbx_xnphx_xi235
    $endmerge
    // compare instruction
    tmpx_xi233 := (tmp316x_xi > ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  )
    tmp3x_xopx_xi := (tmp316x_xi + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    iNsTr_74 := ($cast ($uint<64>) tmp3x_xopx_xi)
    xx_xopx_xi234 := (iNsTr_74 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    tmp22x_xi := ( $mux tmpx_xi233 xx_xopx_xi234 ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnphx_xi235_forx_xbodyx_xi241]
    //begin: basic-block forx_xbodyx_xi241
    $merge bbx_xnphx_xi235_forx_xbodyx_xi241 forx_xbodyx_xi241_forx_xbodyx_xi241
    $phi indvarx_xi236 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnphx_xi235_forx_xbodyx_xi241 ( $cast ($uint<64>) indvarx_xnextx_xi239) $on forx_xbodyx_xi241_forx_xbodyx_xi241 
    $phi num_elemsx_x018x_xi :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ) $on bbx_xnphx_xi235_forx_xbodyx_xi241 ( $cast ($uint<32>) mulx_xi238) $on forx_xbodyx_xi241_forx_xbodyx_xi241 
    $endmerge
    arrayidxx_xi237 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvarx_xi236])
    // load 
    tmp5x_xi := ->(arrayidxx_xi237) 
    mulx_xi238 := (tmp5x_xi * num_elemsx_x018x_xi)
    indvarx_xnextx_xi239 := (indvarx_xi236 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond1 := (indvarx_xnextx_xi239 == tmp22x_xi )
    $if exitcond1 $then  $place [forx_xbodyx_xi241_forx_xendx_xi242] $else $place [forx_xbodyx_xi241_forx_xbodyx_xi241] $endif 
    //begin: basic-block forx_xendx_xi242
    $merge forx_xbodyx_xi241_forx_xendx_xi242
    $phi mulx_xi238x_xlcssa :=  ( $cast ($uint<32>) mulx_xi238) $on forx_xbodyx_xi241_forx_xendx_xi242 
    $endmerge
    // compare instruction
    phitmpx_xi := (mulx_xi238x_xlcssa == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
    $if phitmpx_xi $then  $place [forx_xendx_xi242_sendOutputDatax_xexit] $else $place [forx_xendx_xi242_forx_xbody9x_xi] $endif 
    //begin: basic-block forx_xbody9x_xi
    $merge forx_xcondx_xi232_forx_xbody9x_xi forx_xendx_xi242_forx_xbody9x_xi
    $endmerge
    // load 
    tmp11x_xi := ->(addx_xptrx_xi231) 
    zeropad_output_pipe := tmp11x_xi
    indvarx_xnext24x_xi := (indvar23x_xi + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    iNsTr_72 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp316x_xix_xpr := ->(iNsTr_72) 
    $place [forx_xbody9x_xi_forx_xcondx_xi232]
    //begin: basic-block sendOutputDatax_xexit
    $merge forx_xendx_xi242_sendOutputDatax_xexit
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
