// Aa code produced by llvm2aa (version 1.0)
$record [structx_x__SizedTensorDescriptor] < structx_x__TensorDescriptor > < $uint<32> > 
$record [structx_x__SizedTensor_16K] < structx_x__SizedTensorDescriptor > < $array [16384] $of $uint<64> > 
$record [structx_x__TensorDescriptor] < $uint<32> > < $uint<8> > < $uint<32> > < $array [64] $of $uint<32> > 
$pipe elapsed_time_pipe : $uint<64> $depth 1
$pipe zeropad_input_pipe : $uint<16> $depth 2
$pipe zeropad_output_pipe : $uint<16> $depth 2
$storage R:structx_x__SizedTensor_16K
$storage T:structx_x__SizedTensor_16K
$storage pad:$uint<16>
$module [progx_xoptx_xo_storage_initializer_] $in () $out () $is 
{
  $null
  $attribute initializer
}
$module [sendOutputDim] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bbx_xnph
    iNsTr_0 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ])
    ->(iNsTr_0) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000101 ) 
    iNsTr_2 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    ->(iNsTr_2) := ( $bitcast ($uint<8> ) _b00000001 ) 
    iNsTr_4 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    ->(iNsTr_4) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) 
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) tmp) $on forx_xbody_forx_xbody 
    $endmerge
    tmp2 := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    inc := ($cast ($uint<32>) tmp2)
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvar])
    // load 
    tmp3 := ->(arrayidx) 
    conv := ($cast ($uint<16>) tmp3)
    zeropad_output_pipe := conv
    tmp := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    iNsTr_9 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp1 := ->(iNsTr_9) 
    // compare instruction
    cmp := (inc < tmp1 )
    $if cmp $then  $place [forx_xbody_forx_xbody] $else $place [forx_xbody_forx_xend] $endif 
    //begin: basic-block forx_xend
    $merge forx_xbody_forx_xend
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [sendOutputData] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    $place [entry_forx_xcond]
    //begin: basic-block forx_xcond
    $merge entry_forx_xcond forx_xbody9_forx_xcond
    $phi indvar23 :=  ( $cast ($uint<64>) indvarx_xnext24) $on forx_xbody9_forx_xcond ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on entry_forx_xcond 
    $endmerge
    tmp2 := (indvar23 * ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    iNsTr_1 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    iNsTr_2 := ($bitcast ($pointer< $uint<8> >) iNsTr_1)
    uglygep3 := iNsTr_2[tmp2]
    addx_xptr := ($bitcast ($pointer< $uint<16> >) uglygep3)
    iNsTr_3 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp316 := ->(iNsTr_3) 
    // compare instruction
    cmp17 := (tmp316 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
    $if cmp17 $then  $place [forx_xcond_forx_xbody9] $else $place [forx_xcond_bbx_xnph] $endif 
    //begin: basic-block bbx_xnph
    $merge forx_xcond_bbx_xnph
    $endmerge
    // compare instruction
    tmp := (tmp316 > ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  )
    tmp3x_xop := (tmp316 + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    iNsTr_8 := ($cast ($uint<64>) tmp3x_xop)
    xx_xop := (iNsTr_8 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    tmp22 := ( $mux tmp xx_xop ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody_forx_xbody 
    $phi num_elemsx_x018 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<32>) mul) $on forx_xbody_forx_xbody 
    $endmerge
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvar])
    // load 
    tmp5 := ->(arrayidx) 
    mul := (tmp5 * num_elemsx_x018)
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond1 := (indvarx_xnext == tmp22 )
    $if exitcond1 $then  $place [forx_xbody_forx_xend] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xend
    $merge forx_xbody_forx_xend
    $phi mulx_xlcssa :=  ( $cast ($uint<32>) mul) $on forx_xbody_forx_xend 
    $endmerge
    // compare instruction
    phitmp := (mulx_xlcssa == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
    $if phitmp $then  $place [forx_xend_forx_xend15] $else $place [forx_xend_forx_xbody9] $endif 
    //begin: basic-block forx_xbody9
    $merge forx_xcond_forx_xbody9 forx_xend_forx_xbody9
    $endmerge
    // load 
    tmp11 := ->(addx_xptr) 
    zeropad_output_pipe := tmp11
    indvarx_xnext24 := (indvar23 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [forx_xbody9_forx_xcond]
    //begin: basic-block forx_xend15
    $merge forx_xend_forx_xend15
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [getInputDim] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bbx_xnph
    iNsTr_0 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ])
    ->(iNsTr_0) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000101 ) 
    iNsTr_2 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    ->(iNsTr_2) := ( $bitcast ($uint<8> ) _b00000001 ) 
    iNsTr_4 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    ->(iNsTr_4) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) 
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) tmp) $on forx_xbody_forx_xbody 
    $endmerge
    tmp2 := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    inc := ($cast ($uint<32>) tmp2)
    arrayidx := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvar])
    call := zeropad_input_pipe
    conv := ($cast ($uint<32>) call)
    ->(arrayidx) := conv
    tmp := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    iNsTr_9 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp1 := ->(iNsTr_9) 
    // compare instruction
    cmp := (inc < tmp1 )
    $if cmp $then  $place [forx_xbody_forx_xbody] $else $place [forx_xbody_forx_xend] $endif 
    //begin: basic-block forx_xend
    $merge forx_xbody_forx_xend
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [getInputData] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    $place [entry_forx_xcond]
    //begin: basic-block forx_xcond
    $merge entry_forx_xcond forx_xbody13_forx_xcond
    $phi indvar26 :=  ( $cast ($uint<64>) indvarx_xnext27) $on forx_xbody13_forx_xcond ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on entry_forx_xcond 
    $endmerge
    ix_x0 := ($cast ($uint<32>) indvar26)
    tmp3 := (indvar26 * ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    iNsTr_1 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    iNsTr_2 := ($bitcast ($pointer< $uint<8> >) iNsTr_1)
    uglygep4 := iNsTr_2[tmp3]
    addx_xptr := ($bitcast ($pointer< $uint<16> >) uglygep4)
    iNsTr_3 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp619 := ->(iNsTr_3) 
    // compare instruction
    cmp20 := (tmp619 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
    $if cmp20 $then  $place [forx_xcond_forx_xend] $else $place [forx_xcond_bbx_xnph] $endif 
    //begin: basic-block bbx_xnph
    $merge forx_xcond_bbx_xnph
    $endmerge
    // compare instruction
    tmp := (tmp619 > ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  )
    tmp6x_xop := (tmp619 + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    iNsTr_6 := ($cast ($uint<64>) tmp6x_xop)
    xx_xop := (iNsTr_6 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    tmp25 := ( $mux tmp xx_xop ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody_forx_xbody 
    $phi num_elemsx_x021 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<32>) mul) $on forx_xbody_forx_xbody 
    $endmerge
    arrayidx := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvar])
    // load 
    tmp8 := ->(arrayidx) 
    mul := (tmp8 * num_elemsx_x021)
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond1 := (indvarx_xnext == tmp25 )
    $if exitcond1 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $phi mulx_xlcssa :=  ( $cast ($uint<32>) mul) $on forx_xbody_forx_xendx_xloopexit 
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge forx_xcond_forx_xend forx_xendx_xloopexit_forx_xend
    $phi num_elemsx_x0x_xlcssa :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ) $on forx_xcond_forx_xend ( $cast ($uint<32>) mulx_xlcssa) $on forx_xendx_xloopexit_forx_xend 
    $endmerge
    // compare instruction
    cmp12 := ( ($bitcast ( $int<32>) ix_x0) <   ($bitcast ( $int<32>) num_elemsx_x0x_xlcssa ) )
    $if cmp12 $then  $place [forx_xend_forx_xbody13] $else $place [forx_xend_forx_xend18] $endif 
    //begin: basic-block forx_xbody13
    $merge forx_xend_forx_xbody13
    $endmerge
    call := zeropad_input_pipe
    ->(addx_xptr) := call
    indvarx_xnext27 := (indvar26 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [forx_xbody13_forx_xcond]
    //begin: basic-block forx_xend18
    $merge forx_xend_forx_xend18
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [getpad] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := zeropad_input_pipe
    pad := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    $storage img_index_alloc : $array [3] $of $uint<32>
    $storage dest_index_alloc : $array [3] $of $uint<32>
    img_index := @(img_index_alloc)
    dest_index := @(dest_index_alloc)
    iNsTr_0 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ])
    ->(iNsTr_0) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000101 ) 
    iNsTr_2 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    ->(iNsTr_2) := ( $bitcast ($uint<8> ) _b00000001 ) 
    iNsTr_4 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    ->(iNsTr_4) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) 
    $place [entry_forx_xbodyx_xi]
    //begin: basic-block forx_xbodyx_xi
    $merge entry_forx_xbodyx_xi forx_xbodyx_xi_forx_xbodyx_xi
    $phi indvarx_xi :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on entry_forx_xbodyx_xi ( $cast ($uint<64>) tmp303) $on forx_xbodyx_xi_forx_xbodyx_xi 
    $endmerge
    arrayidxx_xi := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvarx_xi])
    tmp33 := (indvarx_xi + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    incx_xi := ($cast ($uint<32>) tmp33)
    tmp303 := (indvarx_xi + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    callx_xi := zeropad_input_pipe
    convx_xi := ($cast ($uint<32>) callx_xi)
    ->(arrayidxx_xi) := convx_xi
    iNsTr_9 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp1x_xi := ->(iNsTr_9) 
    // compare instruction
    cmpx_xi := (incx_xi < tmp1x_xi )
    $if cmpx_xi $then  $place [forx_xbodyx_xi_forx_xbodyx_xi] $else $place [forx_xbodyx_xi_forx_xcondx_xix_xpreheader] $endif 
    //begin: basic-block forx_xcondx_xix_xpreheader
    $merge forx_xbodyx_xi_forx_xcondx_xix_xpreheader
    $phi tmp1x_xix_xlcssa :=  ( $cast ($uint<32>) tmp1x_xi) $on forx_xbodyx_xi_forx_xcondx_xix_xpreheader 
    $endmerge
    $place [forx_xcondx_xix_xpreheader_forx_xcondx_xi]
    //begin: basic-block forx_xcondx_xi
    $merge forx_xbody13x_xi_forx_xcondx_xi forx_xcondx_xix_xpreheader_forx_xcondx_xi
    $phi tmp619x_xi :=  ( $cast ($uint<32>) tmp619x_xix_xpr) $on forx_xbody13x_xi_forx_xcondx_xi ( $cast ($uint<32>) tmp1x_xix_xlcssa) $on forx_xcondx_xix_xpreheader_forx_xcondx_xi 
    $phi indvar26x_xi :=  ( $cast ($uint<64>) indvarx_xnext27x_xi) $on forx_xbody13x_xi_forx_xcondx_xi ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on forx_xcondx_xix_xpreheader_forx_xcondx_xi 
    $endmerge
    tmp30 := (indvar26x_xi * ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    iNsTr_12 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    iNsTr_13 := ($bitcast ($pointer< $uint<8> >) iNsTr_12)
    uglygep := iNsTr_13[tmp30]
    addx_xptrx_xi := ($bitcast ($pointer< $uint<16> >) uglygep)
    ix_x0x_xi := ($cast ($uint<32>) indvar26x_xi)
    // compare instruction
    cmp20x_xi := (tmp619x_xi == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
    $if cmp20x_xi $then  $place [forx_xcondx_xi_forx_xendx_xi] $else $place [forx_xcondx_xi_bbx_xnphx_xi] $endif 
    //begin: basic-block bbx_xnphx_xi
    $merge forx_xcondx_xi_bbx_xnphx_xi
    $endmerge
    // compare instruction
    tmpx_xi221 := (tmp619x_xi > ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  )
    tmp6x_xopx_xi := (tmp619x_xi + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    iNsTr_17 := ($cast ($uint<64>) tmp6x_xopx_xi)
    xx_xopx_xi := (iNsTr_17 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    tmp25x_xi := ( $mux tmpx_xi221 xx_xopx_xi ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnphx_xi_forx_xbodyx_xi224]
    //begin: basic-block forx_xbodyx_xi224
    $merge bbx_xnphx_xi_forx_xbodyx_xi224 forx_xbodyx_xi224_forx_xbodyx_xi224
    $phi indvarx_xi222 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnphx_xi_forx_xbodyx_xi224 ( $cast ($uint<64>) indvarx_xnextx_xi) $on forx_xbodyx_xi224_forx_xbodyx_xi224 
    $phi num_elemsx_x021x_xi :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ) $on bbx_xnphx_xi_forx_xbodyx_xi224 ( $cast ($uint<32>) mulx_xi) $on forx_xbodyx_xi224_forx_xbodyx_xi224 
    $endmerge
    arrayidxx_xi223 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvarx_xi222])
    // load 
    tmp8x_xi := ->(arrayidxx_xi223) 
    mulx_xi := (tmp8x_xi * num_elemsx_x021x_xi)
    indvarx_xnextx_xi := (indvarx_xi222 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond29 := (indvarx_xnextx_xi == tmp25x_xi )
    $if exitcond29 $then  $place [forx_xbodyx_xi224_forx_xendx_xix_xloopexit] $else $place [forx_xbodyx_xi224_forx_xbodyx_xi224] $endif 
    //begin: basic-block forx_xendx_xix_xloopexit
    $merge forx_xbodyx_xi224_forx_xendx_xix_xloopexit
    $phi mulx_xix_xlcssa :=  ( $cast ($uint<32>) mulx_xi) $on forx_xbodyx_xi224_forx_xendx_xix_xloopexit 
    $endmerge
    $place [forx_xendx_xix_xloopexit_forx_xendx_xi]
    //begin: basic-block forx_xendx_xi
    $merge forx_xcondx_xi_forx_xendx_xi forx_xendx_xix_xloopexit_forx_xendx_xi
    $phi num_elemsx_x0x_xlcssax_xi :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ) $on forx_xcondx_xi_forx_xendx_xi ( $cast ($uint<32>) mulx_xix_xlcssa) $on forx_xendx_xix_xloopexit_forx_xendx_xi 
    $endmerge
    // compare instruction
    cmp12x_xi := ( ($bitcast ( $int<32>) ix_x0x_xi) <   ($bitcast ( $int<32>) num_elemsx_x0x_xlcssax_xi ) )
    callx_xi225 := zeropad_input_pipe
    $if cmp12x_xi $then  $place [forx_xendx_xi_forx_xbody13x_xi] $else $place [forx_xendx_xi_getInputDatax_xexit] $endif 
    //begin: basic-block forx_xbody13x_xi
    $merge forx_xendx_xi_forx_xbody13x_xi
    $endmerge
    ->(addx_xptrx_xi) := callx_xi225
    indvarx_xnext27x_xi := (indvar26x_xi + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    iNsTr_20 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp619x_xix_xpr := ->(iNsTr_20) 
    $place [forx_xbody13x_xi_forx_xcondx_xi]
    //begin: basic-block getInputDatax_xexit
    $merge forx_xendx_xi_getInputDatax_xexit
    $phi callx_xi225x_xlcssa :=  ( $cast ($uint<16>) callx_xi225) $on forx_xendx_xi_getInputDatax_xexit 
    $endmerge
    pad := callx_xi225x_xlcssa
    $call timer ()  (call)
    iNsTr_23 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp := ->(iNsTr_23) 
    iNsTr_24 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp2 := ->(iNsTr_24) 
    iNsTr_25 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp4 := ->(iNsTr_25) 
    xx_xarray := img_index[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ]
    xx_xarray13 := img_index[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ]
    xx_xarray15 := img_index[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ]
    xx_xarray18 := dest_index[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ]
    // load 
    tmp20 := pad
    conv21 := ($cast ($uint<32>) tmp20)
    xx_xarray22 := dest_index[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ]
    xx_xarray27 := dest_index[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ]
    tmp27 := ($cast ($uint<32>) tmp20)
    $place [getInputDatax_xexit_whilex_xcondx_xouter]
    //begin: basic-block whilex_xcondx_xouter
    $merge getInputDatax_xexit_whilex_xcondx_xouter whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter
    $phi ix_x0x_xph :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on getInputDatax_xexit_whilex_xcondx_xouter ( $cast ($uint<32>) ix_x0x_xphx_xbe) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $phi kx_x0x_xph :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on getInputDatax_xexit_whilex_xcondx_xouter ( $cast ($uint<32>) inc209x_xkx_x0) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $endmerge
    // compare instruction
    cmp := ( ($bitcast ( $int<32>) kx_x0x_xph) <   ($bitcast ( $int<32>) tmp4 ) )
    add := (conv21 + ix_x0x_xph)
    $if cmp $then  $place [whilex_xcondx_xouter_whilex_xbodyx_xpreheader] $else $place [whilex_xcondx_xouter_whilex_xendx_xsplit] $endif 
    //begin: basic-block whilex_xbodyx_xpreheader
    $merge whilex_xcondx_xouter_whilex_xbodyx_xpreheader
    $endmerge
    $place [whilex_xbodyx_xpreheader_whilex_xbody]
    //begin: basic-block whilex_xbody
    $merge forx_xend142_whilex_xbody whilex_xbodyx_xpreheader_whilex_xbody
    $phi iNsTr_40 :=  ( $cast ($uint<32>) inc) $on forx_xend142_whilex_xbody ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on whilex_xbodyx_xpreheader_whilex_xbody 
    $endmerge
    add26 := (tmp27 + iNsTr_40)
    inc := (iNsTr_40 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    ->(xx_xarray) := ix_x0x_xph
    ->(xx_xarray13) := iNsTr_40
    ->(xx_xarray15) := kx_x0x_xph
    ->(xx_xarray18) := add
    ->(xx_xarray22) := add26
    ->(xx_xarray27) := kx_x0x_xph
    iNsTr_47 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    // load 
    tmp34 := ->(iNsTr_47) 
    // compare instruction
    tobool := (tmp34 == ( $bitcast ($uint<8> ) _b00000000 )  )
    iNsTr_48 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp43 := ->(iNsTr_48) 
    sub44 := (tmp43 + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    xx_xsub44 := ( $mux tobool ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  sub44)
    sub44x_x := ( $mux tobool sub44 ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) )
    // compare instruction
    tobool50 := ( ($bitcast ( $int<8>) tmp34) !=   ($bitcast ( $int<8>) ( $bitcast ($uint<8> ) _b00000000 )  ) )
    cond54 := ( $mux tobool50 ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 )  ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add59257 := (cond54 + sub44x_x)
    // compare instruction
    cmp60258 := (xx_xsub44 == add59257 )
    $if cmp60258 $then  $place [whilex_xbody_forx_xend] $else $place [whilex_xbody_bbx_xnph] $endif 
    //begin: basic-block bbx_xnph
    $merge whilex_xbody_bbx_xnph
    $endmerge
    tmp279 := (cond54 + xx_xsub44)
    tmp17 := ($cast ($uint<64>) cond54)
    tmp19 := ($cast ($uint<64>) tmp279)
    tmp23 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) cond54) )
    tmp25 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) xx_xsub44) )
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody_forx_xbody 
    $phi SCALE_FACTORx_x0261 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<32>) mul72) $on forx_xbody_forx_xbody 
    $phi ret_valuex_x0259 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<32>) add66) $on forx_xbody_forx_xbody 
    $endmerge
    tmp18 := (tmp17 * indvar)
    tmp21 := (tmp19 + tmp18)
    add75 := ($cast ($uint<32>) tmp21)
    tmp24 := (tmp23 * indvar)
    tmp26 := (tmp25 + tmp24)
    arrayidx69 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][tmp26])
    arrayidx := img_index[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ][tmp26]
    // load 
    tmp64 := ->(arrayidx) 
    mul := (tmp64 * SCALE_FACTORx_x0261)
    add66 := (mul + ret_valuex_x0259)
    // load 
    tmp70 := ->(arrayidx69) 
    mul72 := (tmp70 * SCALE_FACTORx_x0261)
    // compare instruction
    cmp60 := (add75 == add59257 )
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $if cmp60 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $phi add66x_xlcssa :=  ( $cast ($uint<32>) add66) $on forx_xbody_forx_xendx_xloopexit 
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge forx_xendx_xloopexit_forx_xend whilex_xbody_forx_xend
    $phi ret_valuex_x0x_xlcssa :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on whilex_xbody_forx_xend ( $cast ($uint<32>) add66x_xlcssa) $on forx_xendx_xloopexit_forx_xend 
    $endmerge
    iNsTr_54 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    // load 
    tmp86 := ->(iNsTr_54) 
    // compare instruction
    tobool88 := (tmp86 == ( $bitcast ($uint<8> ) _b00000000 )  )
    iNsTr_55 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp102x_xpre := ->(iNsTr_55) 
    sub103 := (tmp102x_xpre + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    xx_xsub103 := ( $mux tobool88 ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  sub103)
    sub103x_x := ( $mux tobool88 sub103 ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) )
    // compare instruction
    tobool110 := ( ($bitcast ( $int<8>) tmp86) !=   ($bitcast ( $int<8>) ( $bitcast ($uint<8> ) _b00000000 )  ) )
    cond114 := ( $mux tobool110 ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 )  ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add120262 := (cond114 + sub103x_x)
    // compare instruction
    cmp121263 := (xx_xsub103 == add120262 )
    $if cmp121263 $then  $place [forx_xend_forx_xend142] $else $place [forx_xend_bbx_xnph267] $endif 
    //begin: basic-block bbx_xnph267
    $merge forx_xend_bbx_xnph267
    $endmerge
    tmp291 := (cond114 + xx_xsub103)
    tmp8 := ($cast ($uint<64>) cond114)
    tmp10 := ($cast ($uint<64>) tmp291)
    tmp13 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) cond114) )
    tmp15 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) xx_xsub103) )
    $place [bbx_xnph267_forx_xbody123]
    //begin: basic-block forx_xbody123
    $merge bbx_xnph267_forx_xbody123 forx_xbody123_forx_xbody123
    $phi indvar283 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph267_forx_xbody123 ( $cast ($uint<64>) indvarx_xnext284) $on forx_xbody123_forx_xbody123 
    $phi SCALE_FACTOR83x_x0266 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ) $on bbx_xnph267_forx_xbody123 ( $cast ($uint<32>) mul137) $on forx_xbody123_forx_xbody123 
    $phi ret_value79x_x0264 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on bbx_xnph267_forx_xbody123 ( $cast ($uint<32>) add131) $on forx_xbody123_forx_xbody123 
    $endmerge
    tmp9 := (tmp8 * indvar283)
    tmp11 := (tmp10 + tmp9)
    add141 := ($cast ($uint<32>) tmp11)
    tmp14 := (tmp13 * indvar283)
    tmp16 := (tmp15 + tmp14)
    arrayidx134 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][tmp16])
    arrayidx127 := dest_index[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ][tmp16]
    // load 
    tmp128 := ->(arrayidx127) 
    mul129 := (tmp128 * SCALE_FACTOR83x_x0266)
    add131 := (mul129 + ret_value79x_x0264)
    // load 
    tmp135 := ->(arrayidx134) 
    mul137 := (tmp135 * SCALE_FACTOR83x_x0266)
    // compare instruction
    cmp121 := (add141 == add120262 )
    indvarx_xnext284 := (indvar283 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $if cmp121 $then  $place [forx_xbody123_forx_xend142x_xloopexit] $else $place [forx_xbody123_forx_xbody123] $endif 
    //begin: basic-block forx_xend142x_xloopexit
    $merge forx_xbody123_forx_xend142x_xloopexit
    $phi add131x_xlcssa :=  ( $cast ($uint<32>) add131) $on forx_xbody123_forx_xend142x_xloopexit 
    $endmerge
    $place [forx_xend142x_xloopexit_forx_xend142]
    //begin: basic-block forx_xend142
    $merge forx_xend_forx_xend142 forx_xend142x_xloopexit_forx_xend142
    $phi ret_value79x_x0x_xlcssa :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on forx_xend_forx_xend142 ( $cast ($uint<32>) add131x_xlcssa) $on forx_xend142x_xloopexit_forx_xend142 
    $endmerge
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) ret_valuex_x0x_xlcssa) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom146 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx147 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ][idxprom146])
    // load 
    tmp148 := ->(arrayidx147) 
    sub154 := (ret_valuex_x0x_xlcssa << ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    mul161 := (sub154 & ( $bitcast ($uint<32> ) _b00000000000000000000000000110000 ) )
    sh_prom := ($cast ($uint<64>) mul161)
    shr162 := (tmp148 >> sh_prom)
    shr173 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) ret_value79x_x0x_xlcssa) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom174 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr173) )
    arrayidx175 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ][idxprom174])
    // load 
    tmp176 := ->(arrayidx175) 
    sext := (shr162 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 ) )
    conv178 :=  ($bitcast ($uint<64>) ( ($bitcast ( $int<64>) sext) >>  ($bitcast ( $int<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 )  )))
    sub170 := (ret_value79x_x0x_xlcssa << ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    mul181 := (sub170 & ( $bitcast ($uint<32> ) _b00000000000000000000000000110000 ) )
    sh_prom182 := ($cast ($uint<64>) mul181)
    shl := (conv178 << sh_prom182)
    or := (shl | tmp176)
    ->(arrayidx175) := or
    // compare instruction
    exitcond := (inc == tmp2 )
    $if exitcond $then  $place [forx_xend142_ifx_xthen] $else $place [forx_xend142_whilex_xbody] $endif 
    //begin: basic-block ifx_xthen
    $merge forx_xend142_ifx_xthen
    $endmerge
    inc202 := (ix_x0x_xph + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    // compare instruction
    cmp205 := (inc202 == tmp )
    inc209 := ($cast ($uint<32>) cmp205)
    inc209x_xkx_x0 := (inc209 + kx_x0x_xph)
    $if cmp205 $then  $place [ifx_xthen_ifx_xthen207] $else $place [ifx_xthen_whilex_xcondx_xouterx_xbackedge] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xbackedge
    $merge ifx_xthen_whilex_xcondx_xouterx_xbackedge ifx_xthen207_whilex_xcondx_xouterx_xbackedge
    $phi ix_x0x_xphx_xbe :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on ifx_xthen207_whilex_xcondx_xouterx_xbackedge ( $cast ($uint<32>) inc202) $on ifx_xthen_whilex_xcondx_xouterx_xbackedge 
    $endmerge
    $place [whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter]
    //begin: basic-block ifx_xthen207
    $merge ifx_xthen_ifx_xthen207
    $endmerge
    $place [ifx_xthen207_whilex_xcondx_xouterx_xbackedge]
    //begin: basic-block whilex_xendx_xsplit
    $merge whilex_xcondx_xouter_whilex_xendx_xsplit
    $endmerge
    conv :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) call) )
    $call timer ()  (call212)
    conv213 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) call212) )
    sub217 := (conv213 - conv)
    elapsed_time_pipe := sub217
    iNsTr_33 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ])
    ->(iNsTr_33) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000101 ) 
    iNsTr_35 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    ->(iNsTr_35) := ( $bitcast ($uint<8> ) _b00000001 ) 
    iNsTr_37 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    ->(iNsTr_37) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) 
    $place [whilex_xendx_xsplit_forx_xbodyx_xi235]
    //begin: basic-block forx_xbodyx_xi235
    $merge forx_xbodyx_xi235_forx_xbodyx_xi235 whilex_xendx_xsplit_forx_xbodyx_xi235
    $phi indvarx_xi228 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on whilex_xendx_xsplit_forx_xbodyx_xi235 ( $cast ($uint<64>) tmp271) $on forx_xbodyx_xi235_forx_xbodyx_xi235 
    $endmerge
    arrayidxx_xi229 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvarx_xi228])
    tmp6 := (indvarx_xi228 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    incx_xi232 := ($cast ($uint<32>) tmp6)
    tmp271 := (indvarx_xi228 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // load 
    tmp3x_xi := ->(arrayidxx_xi229) 
    convx_xi230 := ($cast ($uint<16>) tmp3x_xi)
    zeropad_output_pipe := convx_xi230
    iNsTr_52 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp1x_xi233 := ->(iNsTr_52) 
    // compare instruction
    cmpx_xi234 := (incx_xi232 < tmp1x_xi233 )
    $if cmpx_xi234 $then  $place [forx_xbodyx_xi235_forx_xbodyx_xi235] $else $place [forx_xbodyx_xi235_forx_xcondx_xi240x_xpreheader] $endif 
    //begin: basic-block forx_xcondx_xi240x_xpreheader
    $merge forx_xbodyx_xi235_forx_xcondx_xi240x_xpreheader
    $phi tmp1x_xi233x_xlcssa :=  ( $cast ($uint<32>) tmp1x_xi233) $on forx_xbodyx_xi235_forx_xcondx_xi240x_xpreheader 
    $endmerge
    $place [forx_xcondx_xi240x_xpreheader_forx_xcondx_xi240]
    //begin: basic-block forx_xcondx_xi240
    $merge forx_xbody9x_xi_forx_xcondx_xi240 forx_xcondx_xi240x_xpreheader_forx_xcondx_xi240
    $phi tmp316x_xi :=  ( $cast ($uint<32>) tmp316x_xix_xpr) $on forx_xbody9x_xi_forx_xcondx_xi240 ( $cast ($uint<32>) tmp1x_xi233x_xlcssa) $on forx_xcondx_xi240x_xpreheader_forx_xcondx_xi240 
    $phi indvar23x_xi :=  ( $cast ($uint<64>) indvarx_xnext24x_xi) $on forx_xbody9x_xi_forx_xcondx_xi240 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on forx_xcondx_xi240x_xpreheader_forx_xcondx_xi240 
    $endmerge
    tmp3 := (indvar23x_xi * ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    iNsTr_63 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    iNsTr_64 := ($bitcast ($pointer< $uint<8> >) iNsTr_63)
    uglygep4 := iNsTr_64[tmp3]
    addx_xptrx_xi239 := ($bitcast ($pointer< $uint<16> >) uglygep4)
    // compare instruction
    cmp17x_xi := (tmp316x_xi == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
    $if cmp17x_xi $then  $place [forx_xcondx_xi240_forx_xbody9x_xi] $else $place [forx_xcondx_xi240_bbx_xnphx_xi243] $endif 
    //begin: basic-block bbx_xnphx_xi243
    $merge forx_xcondx_xi240_bbx_xnphx_xi243
    $endmerge
    // compare instruction
    tmpx_xi241 := (tmp316x_xi > ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  )
    tmp3x_xopx_xi := (tmp316x_xi + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    iNsTr_73 := ($cast ($uint<64>) tmp3x_xopx_xi)
    xx_xopx_xi242 := (iNsTr_73 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    tmp22x_xi := ( $mux tmpx_xi241 xx_xopx_xi242 ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnphx_xi243_forx_xbodyx_xi249]
    //begin: basic-block forx_xbodyx_xi249
    $merge bbx_xnphx_xi243_forx_xbodyx_xi249 forx_xbodyx_xi249_forx_xbodyx_xi249
    $phi indvarx_xi244 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnphx_xi243_forx_xbodyx_xi249 ( $cast ($uint<64>) indvarx_xnextx_xi247) $on forx_xbodyx_xi249_forx_xbodyx_xi249 
    $phi num_elemsx_x018x_xi :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ) $on bbx_xnphx_xi243_forx_xbodyx_xi249 ( $cast ($uint<32>) mulx_xi246) $on forx_xbodyx_xi249_forx_xbodyx_xi249 
    $endmerge
    arrayidxx_xi245 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvarx_xi244])
    // load 
    tmp5x_xi := ->(arrayidxx_xi245) 
    mulx_xi246 := (tmp5x_xi * num_elemsx_x018x_xi)
    indvarx_xnextx_xi247 := (indvarx_xi244 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond1 := (indvarx_xnextx_xi247 == tmp22x_xi )
    $if exitcond1 $then  $place [forx_xbodyx_xi249_forx_xendx_xi250] $else $place [forx_xbodyx_xi249_forx_xbodyx_xi249] $endif 
    //begin: basic-block forx_xendx_xi250
    $merge forx_xbodyx_xi249_forx_xendx_xi250
    $phi mulx_xi246x_xlcssa :=  ( $cast ($uint<32>) mulx_xi246) $on forx_xbodyx_xi249_forx_xendx_xi250 
    $endmerge
    // compare instruction
    phitmpx_xi := (mulx_xi246x_xlcssa == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
    $if phitmpx_xi $then  $place [forx_xendx_xi250_sendOutputDatax_xexit] $else $place [forx_xendx_xi250_forx_xbody9x_xi] $endif 
    //begin: basic-block forx_xbody9x_xi
    $merge forx_xcondx_xi240_forx_xbody9x_xi forx_xendx_xi250_forx_xbody9x_xi
    $endmerge
    // load 
    tmp11x_xi := ->(addx_xptrx_xi239) 
    zeropad_output_pipe := tmp11x_xi
    indvarx_xnext24x_xi := (indvar23x_xi + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    iNsTr_71 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp316x_xix_xpr := ->(iNsTr_71) 
    $place [forx_xbody9x_xi_forx_xcondx_xi240]
    //begin: basic-block sendOutputDatax_xexit
    $merge forx_xendx_xi250_sendOutputDatax_xexit
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
