// Aa code produced by llvm2aa (version 1.0)
$record [structx_x__SizedTensorDescriptor] < structx_x__TensorDescriptor > < $uint<32> > 
$record [structx_x__SizedTensor_16K] < structx_x__SizedTensorDescriptor > < $array [16384] $of $uint<64> > 
$record [structx_x__TensorDescriptor] < $uint<32> > < $uint<8> > < $uint<32> > < $array [64] $of $uint<32> > 
$pipe Block0_complete : $uint<16> $depth 1
$pipe Block0_starting : $uint<16> $depth 1
$pipe Block1_complete : $uint<16> $depth 1
$pipe Block1_starting : $uint<16> $depth 1
$pipe Block2_complete : $uint<16> $depth 1
$pipe Block2_starting : $uint<16> $depth 1
$pipe Block3_complete : $uint<16> $depth 1
$pipe Block3_starting : $uint<16> $depth 1
$pipe elapsed_time_pipe : $uint<64> $depth 1
$pipe zeropad_input_pipe : $uint<16> $depth 2
$pipe zeropad_output_pipe : $uint<16> $depth 2
$storage R:structx_x__SizedTensor_16K
$storage T:structx_x__SizedTensor_16K
$storage pad:$uint<16>
$module [progx_xoptx_xo_storage_initializer_] $in () $out () $is 
{
  $null
  $attribute initializer
}
$module [sendOutputDim] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bbx_xnph
    iNsTr_0 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ])
    ->(iNsTr_0) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000101 ) 
    iNsTr_2 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    ->(iNsTr_2) := ( $bitcast ($uint<8> ) _b00000001 ) 
    iNsTr_4 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    ->(iNsTr_4) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) 
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) tmp) $on forx_xbody_forx_xbody 
    $endmerge
    tmp2 := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    inc := ($cast ($uint<32>) tmp2)
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvar])
    // load 
    tmp3 := ->(arrayidx) 
    conv := ($cast ($uint<16>) tmp3)
    zeropad_output_pipe := conv
    tmp := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    iNsTr_9 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp1 := ->(iNsTr_9) 
    // compare instruction
    cmp := (inc < tmp1 )
    $if cmp $then  $place [forx_xbody_forx_xbody] $else $place [forx_xbody_forx_xend] $endif 
    //begin: basic-block forx_xend
    $merge forx_xbody_forx_xend
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [sendOutputData] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    $place [entry_forx_xcond]
    //begin: basic-block forx_xcond
    $merge entry_forx_xcond forx_xbody9_forx_xcond
    $phi indvar23 :=  ( $cast ($uint<64>) indvarx_xnext24) $on forx_xbody9_forx_xcond ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on entry_forx_xcond 
    $endmerge
    tmp2 := (indvar23 * ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    iNsTr_1 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    iNsTr_2 := ($bitcast ($pointer< $uint<8> >) iNsTr_1)
    uglygep3 := iNsTr_2[tmp2]
    addx_xptr := ($bitcast ($pointer< $uint<16> >) uglygep3)
    iNsTr_3 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp316 := ->(iNsTr_3) 
    // compare instruction
    cmp17 := (tmp316 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
    $if cmp17 $then  $place [forx_xcond_forx_xbody9] $else $place [forx_xcond_bbx_xnph] $endif 
    //begin: basic-block bbx_xnph
    $merge forx_xcond_bbx_xnph
    $endmerge
    // compare instruction
    tmp := (tmp316 > ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  )
    tmp3x_xop := (tmp316 + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    iNsTr_8 := ($cast ($uint<64>) tmp3x_xop)
    xx_xop := (iNsTr_8 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    tmp22 := ( $mux tmp xx_xop ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody_forx_xbody 
    $phi num_elemsx_x018 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<32>) mul) $on forx_xbody_forx_xbody 
    $endmerge
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvar])
    // load 
    tmp5 := ->(arrayidx) 
    mul := (tmp5 * num_elemsx_x018)
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond1 := (indvarx_xnext == tmp22 )
    $if exitcond1 $then  $place [forx_xbody_forx_xend] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xend
    $merge forx_xbody_forx_xend
    $phi mulx_xlcssa :=  ( $cast ($uint<32>) mul) $on forx_xbody_forx_xend 
    $endmerge
    // compare instruction
    phitmp := (mulx_xlcssa == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
    $if phitmp $then  $place [forx_xend_forx_xend15] $else $place [forx_xend_forx_xbody9] $endif 
    //begin: basic-block forx_xbody9
    $merge forx_xcond_forx_xbody9 forx_xend_forx_xbody9
    $endmerge
    // load 
    tmp11 := ->(addx_xptr) 
    zeropad_output_pipe := tmp11
    indvarx_xnext24 := (indvar23 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [forx_xbody9_forx_xcond]
    //begin: basic-block forx_xend15
    $merge forx_xend_forx_xend15
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [getInputDim] 
$in ()
$out (ret_val__ : $uint<16>)
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bbx_xnph34
    iNsTr_0 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ])
    ->(iNsTr_0) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000101 ) 
    iNsTr_2 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    ->(iNsTr_2) := ( $bitcast ($uint<8> ) _b00000001 ) 
    iNsTr_4 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    ->(iNsTr_4) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) 
    $place [bbx_xnph34_forx_xbody]
    //begin: basic-block forx_xcond8x_xpreheader
    $merge forx_xbody_forx_xcond8x_xpreheader
    $phi tmp1x_xlcssa :=  ( $cast ($uint<32>) tmp1) $on forx_xbody_forx_xcond8x_xpreheader 
    $endmerge
    // compare instruction
    cmp1128 := (tmp1x_xlcssa == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
    $if cmp1128 $then  $place [forx_xcond8x_xpreheader_forx_xend22] $else $place [forx_xcond8x_xpreheader_bbx_xnph] $endif 
    //begin: basic-block forx_xbody
    $merge bbx_xnph34_forx_xbody forx_xbody_forx_xbody
    $phi indvar38 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph34_forx_xbody ( $cast ($uint<64>) tmp40) $on forx_xbody_forx_xbody 
    $endmerge
    tmp2 := (indvar38 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    inc := ($cast ($uint<32>) tmp2)
    arrayidx := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvar38])
    call := zeropad_input_pipe
    conv := ($cast ($uint<32>) call)
    ->(arrayidx) := conv
    tmp40 := (indvar38 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    iNsTr_9 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp1 := ->(iNsTr_9) 
    // compare instruction
    cmp := (inc < tmp1 )
    $if cmp $then  $place [forx_xbody_forx_xbody] $else $place [forx_xbody_forx_xcond8x_xpreheader] $endif 
    //begin: basic-block bbx_xnph
    $merge forx_xcond8x_xpreheader_bbx_xnph
    $endmerge
    // compare instruction
    tmp := (tmp1x_xlcssa > ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  )
    tmp10x_xop := (tmp1x_xlcssa + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    iNsTr_13 := ($cast ($uint<64>) tmp10x_xop)
    xx_xop := (iNsTr_13 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    tmp37 := ( $mux tmp xx_xop ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph_forx_xbody13]
    //begin: basic-block forx_xbody13
    $merge bbx_xnph_forx_xbody13 forx_xbody13_forx_xbody13
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody13 ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody13_forx_xbody13 
    $phi num_elemsx_x030 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ) $on bbx_xnph_forx_xbody13 ( $cast ($uint<32>) mul) $on forx_xbody13_forx_xbody13 
    $endmerge
    arrayidx16 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvar])
    // load 
    tmp17 := ->(arrayidx16) 
    mul := (tmp17 * num_elemsx_x030)
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond1 := (indvarx_xnext == tmp37 )
    $if exitcond1 $then  $place [forx_xbody13_forx_xcond8x_xforx_xend22_crit_edge] $else $place [forx_xbody13_forx_xbody13] $endif 
    //begin: basic-block forx_xcond8x_xforx_xend22_crit_edge
    $merge forx_xbody13_forx_xcond8x_xforx_xend22_crit_edge
    $phi mulx_xlcssa :=  ( $cast ($uint<32>) mul) $on forx_xbody13_forx_xcond8x_xforx_xend22_crit_edge 
    $endmerge
    phitmp := ($cast ($uint<16>) mulx_xlcssa)
    $place [forx_xcond8x_xforx_xend22_crit_edge_UnifiedReturnBlock]
    //begin: basic-block forx_xend22
    $merge forx_xcond8x_xpreheader_forx_xend22
    $endmerge
    $place [forx_xend22_UnifiedReturnBlock]
    //begin: basic-block UnifiedReturnBlock
    $merge forx_xcond8x_xforx_xend22_crit_edge_UnifiedReturnBlock forx_xend22_UnifiedReturnBlock
    $phi ret_val__ :=  ( $cast ($uint<16>) phitmp) $on forx_xcond8x_xforx_xend22_crit_edge_UnifiedReturnBlock ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000001 ) ) $on forx_xend22_UnifiedReturnBlock 
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [getInputData] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    $place [entry_forx_xcond]
    //begin: basic-block forx_xcond
    $merge entry_forx_xcond forx_xbody13_forx_xcond
    $phi indvar26 :=  ( $cast ($uint<64>) indvarx_xnext27) $on forx_xbody13_forx_xcond ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on entry_forx_xcond 
    $endmerge
    ix_x0 := ($cast ($uint<32>) indvar26)
    tmp3 := (indvar26 * ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    iNsTr_1 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    iNsTr_2 := ($bitcast ($pointer< $uint<8> >) iNsTr_1)
    uglygep4 := iNsTr_2[tmp3]
    addx_xptr := ($bitcast ($pointer< $uint<16> >) uglygep4)
    iNsTr_3 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp619 := ->(iNsTr_3) 
    // compare instruction
    cmp20 := (tmp619 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
    $if cmp20 $then  $place [forx_xcond_forx_xend] $else $place [forx_xcond_bbx_xnph] $endif 
    //begin: basic-block bbx_xnph
    $merge forx_xcond_bbx_xnph
    $endmerge
    // compare instruction
    tmp := (tmp619 > ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  )
    tmp6x_xop := (tmp619 + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    iNsTr_6 := ($cast ($uint<64>) tmp6x_xop)
    xx_xop := (iNsTr_6 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    tmp25 := ( $mux tmp xx_xop ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody_forx_xbody 
    $phi num_elemsx_x021 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<32>) mul) $on forx_xbody_forx_xbody 
    $endmerge
    arrayidx := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvar])
    // load 
    tmp8 := ->(arrayidx) 
    mul := (tmp8 * num_elemsx_x021)
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond1 := (indvarx_xnext == tmp25 )
    $if exitcond1 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $phi mulx_xlcssa :=  ( $cast ($uint<32>) mul) $on forx_xbody_forx_xendx_xloopexit 
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge forx_xcond_forx_xend forx_xendx_xloopexit_forx_xend
    $phi num_elemsx_x0x_xlcssa :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ) $on forx_xcond_forx_xend ( $cast ($uint<32>) mulx_xlcssa) $on forx_xendx_xloopexit_forx_xend 
    $endmerge
    // compare instruction
    cmp12 := ( ($bitcast ( $int<32>) ix_x0) <   ($bitcast ( $int<32>) num_elemsx_x0x_xlcssa ) )
    $if cmp12 $then  $place [forx_xend_forx_xbody13] $else $place [forx_xend_forx_xend18] $endif 
    //begin: basic-block forx_xbody13
    $merge forx_xend_forx_xbody13
    $endmerge
    call := zeropad_input_pipe
    ->(addx_xptr) := call
    indvarx_xnext27 := (indvar26 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [forx_xbody13_forx_xcond]
    //begin: basic-block forx_xend18
    $merge forx_xend_forx_xend18
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [getpad] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := zeropad_input_pipe
    pad := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_A] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block0_starting
    $barrier 
    iNsTr_2 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp := ->(iNsTr_2) 
    iNsTr_3 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp2 := ->(iNsTr_3) 
    iNsTr_4 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp6 := ->(iNsTr_4) 
    iNsTr_5 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp8 := ->(iNsTr_5) 
    iNsTr_6 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp20 := ->(iNsTr_6) 
    div := (tmp20 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    // load 
    tmp34 := pad
    tmp3 := ($cast ($uint<32>) tmp34)
    tmp13 := (tmp6 * ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    tmp16 := (tmp * ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    $place [entry_whilex_xcondx_xouter]
    //begin: basic-block whilex_xcondx_xouter
    $merge entry_whilex_xcondx_xouter whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter
    $phi jx_x0x_xph :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on entry_whilex_xcondx_xouter ( $cast ($uint<32>) jx_x0x_xphx_xbe) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $phi ix_x0x_xph :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on entry_whilex_xcondx_xouter ( $cast ($uint<32>) inc100x_xix_x0) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $endmerge
    // compare instruction
    cmp := (ix_x0x_xph < div )
    $if cmp $then  $place [whilex_xcondx_xouter_whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge] $else $place [whilex_xcondx_xouter_whilex_xendx_xsplit] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge
    $merge whilex_xcondx_xouter_whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge
    $endmerge
    tmp122 := (tmp2 * ix_x0x_xph)
    tmp123 := (jx_x0x_xph + tmp122)
    tmp126 := (tmp * tmp123)
    tmp4 := (tmp3 + jx_x0x_xph)
    tmp5 := (tmp3 + ix_x0x_xph)
    tmp7 := (tmp8 * tmp5)
    tmp9 := (tmp4 + tmp7)
    tmp10 := (tmp6 * tmp9)
    tmp14 := (tmp13 * tmp9)
    tmp17 := (tmp16 * tmp123)
    $place [whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xbody]
    //begin: basic-block whilex_xbody
    $merge whilex_xbody_whilex_xbody whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xbody
    $phi kx_x0 :=  ( $cast ($uint<32>) inc) $on whilex_xbody_whilex_xbody ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xbody 
    $endmerge
    add29 := (tmp126 + kx_x0)
    add44 := (tmp10 + kx_x0)
    tmp12 := (kx_x0 * ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    sub68 := (tmp14 + tmp12)
    sub := (tmp17 + tmp12)
    inc := (kx_x0 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add29) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ][idxprom])
    // load 
    tmp47 := ->(arrayidx) 
    mul59 := (sub & ( $bitcast ($uint<32> ) _b00000000000000000000000000110000 ) )
    sh_prom := ($cast ($uint<64>) mul59)
    shr60 := (tmp47 >> sh_prom)
    shr71 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add44) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom72 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr71) )
    arrayidx73 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ][idxprom72])
    // load 
    tmp74 := ->(arrayidx73) 
    sext := (shr60 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 ) )
    conv76 :=  ($bitcast ($uint<64>) ( ($bitcast ( $int<64>) sext) >>  ($bitcast ( $int<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 )  )))
    mul79 := (sub68 & ( $bitcast ($uint<32> ) _b00000000000000000000000000110000 ) )
    sh_prom80 := ($cast ($uint<64>) mul79)
    shl := (conv76 << sh_prom80)
    or := (shl | tmp74)
    ->(arrayidx73) := or
    // compare instruction
    exitcond := (inc == tmp )
    $if exitcond $then  $place [whilex_xbody_ifx_xthen] $else $place [whilex_xbody_whilex_xbody] $endif 
    //begin: basic-block ifx_xthen
    $merge whilex_xbody_ifx_xthen
    $endmerge
    inc91 := (jx_x0x_xph + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    div94 := (tmp2 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    // compare instruction
    cmp95 := (inc91 == div94 )
    inc100 := ($cast ($uint<32>) cmp95)
    inc100x_xix_x0 := (inc100 + ix_x0x_xph)
    $if cmp95 $then  $place [ifx_xthen_ifx_xthen97] $else $place [ifx_xthen_whilex_xcondx_xouterx_xbackedge] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xbackedge
    $merge ifx_xthen_whilex_xcondx_xouterx_xbackedge ifx_xthen97_whilex_xcondx_xouterx_xbackedge
    $phi jx_x0x_xphx_xbe :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on ifx_xthen97_whilex_xcondx_xouterx_xbackedge ( $cast ($uint<32>) inc91) $on ifx_xthen_whilex_xcondx_xouterx_xbackedge 
    $endmerge
    $place [whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter]
    //begin: basic-block ifx_xthen97
    $merge ifx_xthen_ifx_xthen97
    $endmerge
    $place [ifx_xthen97_whilex_xcondx_xouterx_xbackedge]
    //begin: basic-block whilex_xendx_xsplit
    $merge whilex_xcondx_xouter_whilex_xendx_xsplit
    $endmerge
    $barrier 
    Block0_complete := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_B] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block1_starting
    $barrier 
    iNsTr_2 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp := ->(iNsTr_2) 
    div := (tmp >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    iNsTr_3 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp4 := ->(iNsTr_3) 
    iNsTr_4 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp10 := ->(iNsTr_4) 
    iNsTr_5 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp12 := ->(iNsTr_5) 
    iNsTr_6 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp24 := ->(iNsTr_6) 
    div25 := (tmp24 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    // load 
    tmp39 := pad
    tmp2 := ($cast ($uint<32>) tmp39)
    tmp13 := (tmp10 * ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    tmp16 := (tmp4 * ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    $place [entry_whilex_xcondx_xouter]
    //begin: basic-block whilex_xcondx_xouter
    $merge entry_whilex_xcondx_xouter whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter
    $phi jx_x0x_xph :=  ( $cast ($uint<32>) div) $on entry_whilex_xcondx_xouter ( $cast ($uint<32>) jx_x0x_xphx_xbe) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $phi ix_x0x_xph :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on entry_whilex_xcondx_xouter ( $cast ($uint<32>) inc104x_xix_x0) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $endmerge
    // compare instruction
    cmp := (ix_x0x_xph < div25 )
    $if cmp $then  $place [whilex_xcondx_xouter_whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge] $else $place [whilex_xcondx_xouter_whilex_xendx_xsplit] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge
    $merge whilex_xcondx_xouter_whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge
    $endmerge
    tmp126 := (tmp * ix_x0x_xph)
    tmp127 := (jx_x0x_xph + tmp126)
    tmp130 := (tmp4 * tmp127)
    tmp3 := (tmp2 + jx_x0x_xph)
    tmp5 := (tmp2 + ix_x0x_xph)
    tmp6 := (tmp12 * tmp5)
    tmp7 := (tmp3 + tmp6)
    tmp8 := (tmp10 * tmp7)
    tmp14 := (tmp13 * tmp7)
    tmp17 := (tmp16 * tmp127)
    $place [whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xbody]
    //begin: basic-block whilex_xbody
    $merge whilex_xbody_whilex_xbody whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xbody
    $phi kx_x0 :=  ( $cast ($uint<32>) inc) $on whilex_xbody_whilex_xbody ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xbody 
    $endmerge
    add34 := (tmp130 + kx_x0)
    add49 := (tmp8 + kx_x0)
    tmp11 := (kx_x0 * ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    sub73 := (tmp14 + tmp11)
    sub := (tmp17 + tmp11)
    inc := (kx_x0 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add34) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ][idxprom])
    // load 
    tmp52 := ->(arrayidx) 
    mul64 := (sub & ( $bitcast ($uint<32> ) _b00000000000000000000000000110000 ) )
    sh_prom := ($cast ($uint<64>) mul64)
    shr65 := (tmp52 >> sh_prom)
    shr76 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add49) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom77 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr76) )
    arrayidx78 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ][idxprom77])
    // load 
    tmp79 := ->(arrayidx78) 
    sext := (shr65 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 ) )
    conv81 :=  ($bitcast ($uint<64>) ( ($bitcast ( $int<64>) sext) >>  ($bitcast ( $int<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 )  )))
    mul84 := (sub73 & ( $bitcast ($uint<32> ) _b00000000000000000000000000110000 ) )
    sh_prom85 := ($cast ($uint<64>) mul84)
    shl := (conv81 << sh_prom85)
    or := (shl | tmp79)
    ->(arrayidx78) := or
    // compare instruction
    exitcond := (inc == tmp4 )
    $if exitcond $then  $place [whilex_xbody_ifx_xthen] $else $place [whilex_xbody_whilex_xbody] $endif 
    //begin: basic-block ifx_xthen
    $merge whilex_xbody_ifx_xthen
    $endmerge
    inc96 := (jx_x0x_xph + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    // compare instruction
    cmp99 := (inc96 == tmp )
    inc104 := ($cast ($uint<32>) cmp99)
    inc104x_xix_x0 := (inc104 + ix_x0x_xph)
    $if cmp99 $then  $place [ifx_xthen_ifx_xthen101] $else $place [ifx_xthen_whilex_xcondx_xouterx_xbackedge] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xbackedge
    $merge ifx_xthen_whilex_xcondx_xouterx_xbackedge ifx_xthen101_whilex_xcondx_xouterx_xbackedge
    $phi jx_x0x_xphx_xbe :=  ( $cast ($uint<32>) div) $on ifx_xthen101_whilex_xcondx_xouterx_xbackedge ( $cast ($uint<32>) inc96) $on ifx_xthen_whilex_xcondx_xouterx_xbackedge 
    $endmerge
    $place [whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter]
    //begin: basic-block ifx_xthen101
    $merge ifx_xthen_ifx_xthen101
    $endmerge
    $place [ifx_xthen101_whilex_xcondx_xouterx_xbackedge]
    //begin: basic-block whilex_xendx_xsplit
    $merge whilex_xcondx_xouter_whilex_xendx_xsplit
    $endmerge
    $barrier 
    Block1_complete := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_C] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block2_starting
    $barrier 
    iNsTr_2 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp := ->(iNsTr_2) 
    div := (tmp >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    iNsTr_3 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp2 := ->(iNsTr_3) 
    iNsTr_4 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp4 := ->(iNsTr_4) 
    iNsTr_5 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp8 := ->(iNsTr_5) 
    iNsTr_6 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp10 := ->(iNsTr_6) 
    // load 
    tmp36 := pad
    tmp3 := ($cast ($uint<32>) tmp36)
    tmp14 := (tmp8 * ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    tmp17 := (tmp2 * ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    $place [entry_whilex_xcondx_xouter]
    //begin: basic-block whilex_xcondx_xouter
    $merge entry_whilex_xcondx_xouter whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter
    $phi jx_x0x_xph :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on entry_whilex_xcondx_xouter ( $cast ($uint<32>) jx_x0x_xphx_xbe) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $phi ix_x0x_xph :=  ( $cast ($uint<32>) div) $on entry_whilex_xcondx_xouter ( $cast ($uint<32>) inc102x_xix_x0) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $endmerge
    // compare instruction
    cmp := (ix_x0x_xph < tmp )
    $if cmp $then  $place [whilex_xcondx_xouter_whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge] $else $place [whilex_xcondx_xouter_whilex_xendx_xsplit] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge
    $merge whilex_xcondx_xouter_whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge
    $endmerge
    tmp124 := (tmp4 * ix_x0x_xph)
    tmp125 := (jx_x0x_xph + tmp124)
    tmp128 := (tmp2 * tmp125)
    tmp5 := (tmp3 + jx_x0x_xph)
    tmp6 := (tmp3 + ix_x0x_xph)
    tmp7 := (tmp10 * tmp6)
    tmp9 := (tmp5 + tmp7)
    tmp11 := (tmp8 * tmp9)
    tmp15 := (tmp14 * tmp9)
    tmp18 := (tmp17 * tmp125)
    $place [whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xbody]
    //begin: basic-block whilex_xbody
    $merge whilex_xbody_whilex_xbody whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xbody
    $phi kx_x0 :=  ( $cast ($uint<32>) inc) $on whilex_xbody_whilex_xbody ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xbody 
    $endmerge
    add31 := (tmp128 + kx_x0)
    add46 := (tmp11 + kx_x0)
    tmp13 := (kx_x0 * ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    sub70 := (tmp15 + tmp13)
    sub := (tmp18 + tmp13)
    inc := (kx_x0 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add31) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ][idxprom])
    // load 
    tmp49 := ->(arrayidx) 
    mul61 := (sub & ( $bitcast ($uint<32> ) _b00000000000000000000000000110000 ) )
    sh_prom := ($cast ($uint<64>) mul61)
    shr62 := (tmp49 >> sh_prom)
    shr73 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add46) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom74 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr73) )
    arrayidx75 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ][idxprom74])
    // load 
    tmp76 := ->(arrayidx75) 
    sext := (shr62 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 ) )
    conv78 :=  ($bitcast ($uint<64>) ( ($bitcast ( $int<64>) sext) >>  ($bitcast ( $int<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 )  )))
    mul81 := (sub70 & ( $bitcast ($uint<32> ) _b00000000000000000000000000110000 ) )
    sh_prom82 := ($cast ($uint<64>) mul81)
    shl := (conv78 << sh_prom82)
    or := (shl | tmp76)
    ->(arrayidx75) := or
    // compare instruction
    exitcond := (inc == tmp2 )
    $if exitcond $then  $place [whilex_xbody_ifx_xthen] $else $place [whilex_xbody_whilex_xbody] $endif 
    //begin: basic-block ifx_xthen
    $merge whilex_xbody_ifx_xthen
    $endmerge
    inc93 := (jx_x0x_xph + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    div96 := (tmp4 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    // compare instruction
    cmp97 := (inc93 == div96 )
    inc102 := ($cast ($uint<32>) cmp97)
    inc102x_xix_x0 := (inc102 + ix_x0x_xph)
    $if cmp97 $then  $place [ifx_xthen_ifx_xthen99] $else $place [ifx_xthen_whilex_xcondx_xouterx_xbackedge] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xbackedge
    $merge ifx_xthen_whilex_xcondx_xouterx_xbackedge ifx_xthen99_whilex_xcondx_xouterx_xbackedge
    $phi jx_x0x_xphx_xbe :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on ifx_xthen99_whilex_xcondx_xouterx_xbackedge ( $cast ($uint<32>) inc93) $on ifx_xthen_whilex_xcondx_xouterx_xbackedge 
    $endmerge
    $place [whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter]
    //begin: basic-block ifx_xthen99
    $merge ifx_xthen_ifx_xthen99
    $endmerge
    $place [ifx_xthen99_whilex_xcondx_xouterx_xbackedge]
    //begin: basic-block whilex_xendx_xsplit
    $merge whilex_xcondx_xouter_whilex_xendx_xsplit
    $endmerge
    $barrier 
    Block2_complete := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_D] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block3_starting
    $barrier 
    iNsTr_2 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp := ->(iNsTr_2) 
    div := (tmp >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    iNsTr_3 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp3 := ->(iNsTr_3) 
    div4 := (tmp3 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    iNsTr_4 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp6 := ->(iNsTr_4) 
    iNsTr_5 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp12 := ->(iNsTr_5) 
    iNsTr_6 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp14 := ->(iNsTr_6) 
    // load 
    tmp40 := pad
    tmp2 := ($cast ($uint<32>) tmp40)
    tmp13 := (tmp12 * ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    tmp17 := (tmp6 * ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    $place [entry_whilex_xcondx_xouter]
    //begin: basic-block whilex_xcondx_xouter
    $merge entry_whilex_xcondx_xouter whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter
    $phi jx_x0x_xph :=  ( $cast ($uint<32>) div) $on entry_whilex_xcondx_xouter ( $cast ($uint<32>) jx_x0x_xphx_xbe) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $phi ix_x0x_xph :=  ( $cast ($uint<32>) div4) $on entry_whilex_xcondx_xouter ( $cast ($uint<32>) inc105x_xix_x0) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $endmerge
    // compare instruction
    cmp := (ix_x0x_xph < tmp3 )
    $if cmp $then  $place [whilex_xcondx_xouter_whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge] $else $place [whilex_xcondx_xouter_whilex_xendx_xsplit] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge
    $merge whilex_xcondx_xouter_whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge
    $endmerge
    tmp127 := (tmp * ix_x0x_xph)
    tmp128 := (jx_x0x_xph + tmp127)
    tmp131 := (tmp6 * tmp128)
    tmp4 := (tmp2 + jx_x0x_xph)
    tmp5 := (tmp2 + ix_x0x_xph)
    tmp7 := (tmp14 * tmp5)
    tmp8 := (tmp4 + tmp7)
    tmp9 := (tmp12 * tmp8)
    tmp15 := (tmp13 * tmp8)
    tmp18 := (tmp17 * tmp128)
    $place [whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xbody]
    //begin: basic-block whilex_xbody
    $merge whilex_xbody_whilex_xbody whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xbody
    $phi kx_x0 :=  ( $cast ($uint<32>) inc) $on whilex_xbody_whilex_xbody ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xbody 
    $endmerge
    add35 := (tmp131 + kx_x0)
    add50 := (tmp9 + kx_x0)
    tmp11 := (kx_x0 * ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    sub74 := (tmp15 + tmp11)
    sub := (tmp18 + tmp11)
    inc := (kx_x0 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add35) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ][idxprom])
    // load 
    tmp53 := ->(arrayidx) 
    mul65 := (sub & ( $bitcast ($uint<32> ) _b00000000000000000000000000110000 ) )
    sh_prom := ($cast ($uint<64>) mul65)
    shr66 := (tmp53 >> sh_prom)
    shr77 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add50) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom78 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr77) )
    arrayidx79 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ][idxprom78])
    // load 
    tmp80 := ->(arrayidx79) 
    sext := (shr66 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 ) )
    conv82 :=  ($bitcast ($uint<64>) ( ($bitcast ( $int<64>) sext) >>  ($bitcast ( $int<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 )  )))
    mul85 := (sub74 & ( $bitcast ($uint<32> ) _b00000000000000000000000000110000 ) )
    sh_prom86 := ($cast ($uint<64>) mul85)
    shl := (conv82 << sh_prom86)
    or := (shl | tmp80)
    ->(arrayidx79) := or
    // compare instruction
    exitcond := (inc == tmp6 )
    $if exitcond $then  $place [whilex_xbody_ifx_xthen] $else $place [whilex_xbody_whilex_xbody] $endif 
    //begin: basic-block ifx_xthen
    $merge whilex_xbody_ifx_xthen
    $endmerge
    inc97 := (jx_x0x_xph + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    // compare instruction
    cmp100 := (inc97 == tmp )
    inc105 := ($cast ($uint<32>) cmp100)
    inc105x_xix_x0 := (inc105 + ix_x0x_xph)
    $if cmp100 $then  $place [ifx_xthen_ifx_xthen102] $else $place [ifx_xthen_whilex_xcondx_xouterx_xbackedge] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xbackedge
    $merge ifx_xthen_whilex_xcondx_xouterx_xbackedge ifx_xthen102_whilex_xcondx_xouterx_xbackedge
    $phi jx_x0x_xphx_xbe :=  ( $cast ($uint<32>) div) $on ifx_xthen102_whilex_xcondx_xouterx_xbackedge ( $cast ($uint<32>) inc97) $on ifx_xthen_whilex_xcondx_xouterx_xbackedge 
    $endmerge
    $place [whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter]
    //begin: basic-block ifx_xthen102
    $merge ifx_xthen_ifx_xthen102
    $endmerge
    $place [ifx_xthen102_whilex_xcondx_xouterx_xbackedge]
    //begin: basic-block whilex_xendx_xsplit
    $merge whilex_xcondx_xouter_whilex_xendx_xsplit
    $endmerge
    $barrier 
    Block3_complete := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    iNsTr_0 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ])
    ->(iNsTr_0) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000101 ) 
    iNsTr_2 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    ->(iNsTr_2) := ( $bitcast ($uint<8> ) _b00000001 ) 
    iNsTr_4 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    ->(iNsTr_4) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) 
    $place [entry_forx_xbodyx_xi]
    //begin: basic-block forx_xcond8x_xpreheaderx_xi
    $merge forx_xbodyx_xi_forx_xcond8x_xpreheaderx_xi
    $phi tmp1x_xix_xlcssa :=  ( $cast ($uint<32>) tmp1x_xi) $on forx_xbodyx_xi_forx_xcond8x_xpreheaderx_xi 
    $endmerge
    // compare instruction
    cmp1128x_xi := (tmp1x_xix_xlcssa == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
    $if cmp1128x_xi $then  $place [forx_xcond8x_xpreheaderx_xi_getInputDimx_xexit] $else $place [forx_xcond8x_xpreheaderx_xi_bbx_xnphx_xi] $endif 
    //begin: basic-block forx_xbodyx_xi
    $merge entry_forx_xbodyx_xi forx_xbodyx_xi_forx_xbodyx_xi
    $phi indvar38x_xi :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on entry_forx_xbodyx_xi ( $cast ($uint<64>) tmp72) $on forx_xbodyx_xi_forx_xbodyx_xi 
    $endmerge
    arrayidxx_xi := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvar38x_xi])
    tmp10 := (indvar38x_xi + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    incx_xi := ($cast ($uint<32>) tmp10)
    tmp72 := (indvar38x_xi + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    callx_xi := zeropad_input_pipe
    convx_xi := ($cast ($uint<32>) callx_xi)
    ->(arrayidxx_xi) := convx_xi
    iNsTr_9 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp1x_xi := ->(iNsTr_9) 
    // compare instruction
    cmpx_xi := (incx_xi < tmp1x_xi )
    $if cmpx_xi $then  $place [forx_xbodyx_xi_forx_xbodyx_xi] $else $place [forx_xbodyx_xi_forx_xcond8x_xpreheaderx_xi] $endif 
    //begin: basic-block bbx_xnphx_xi
    $merge forx_xcond8x_xpreheaderx_xi_bbx_xnphx_xi
    $endmerge
    // compare instruction
    tmpx_xi := (tmp1x_xix_xlcssa > ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  )
    tmp10x_xopx_xi := (tmp1x_xix_xlcssa + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    iNsTr_13 := ($cast ($uint<64>) tmp10x_xopx_xi)
    xx_xopx_xi := (iNsTr_13 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    tmp37x_xi := ( $mux tmpx_xi xx_xopx_xi ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnphx_xi_forx_xbody13x_xi]
    //begin: basic-block forx_xbody13x_xi
    $merge bbx_xnphx_xi_forx_xbody13x_xi forx_xbody13x_xi_forx_xbody13x_xi
    $phi indvarx_xi :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnphx_xi_forx_xbody13x_xi ( $cast ($uint<64>) indvarx_xnextx_xi) $on forx_xbody13x_xi_forx_xbody13x_xi 
    $phi num_elemsx_x030x_xi :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ) $on bbx_xnphx_xi_forx_xbody13x_xi ( $cast ($uint<32>) mulx_xi) $on forx_xbody13x_xi_forx_xbody13x_xi 
    $endmerge
    arrayidx16x_xi := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvarx_xi])
    // load 
    tmp17x_xi := ->(arrayidx16x_xi) 
    mulx_xi := (tmp17x_xi * num_elemsx_x030x_xi)
    indvarx_xnextx_xi := (indvarx_xi + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond1 := (indvarx_xnextx_xi == tmp37x_xi )
    $if exitcond1 $then  $place [forx_xbody13x_xi_forx_xcond8x_xforx_xend22_crit_edgex_xi] $else $place [forx_xbody13x_xi_forx_xbody13x_xi] $endif 
    //begin: basic-block forx_xcond8x_xforx_xend22_crit_edgex_xi
    $merge forx_xbody13x_xi_forx_xcond8x_xforx_xend22_crit_edgex_xi
    $phi mulx_xix_xlcssa :=  ( $cast ($uint<32>) mulx_xi) $on forx_xbody13x_xi_forx_xcond8x_xforx_xend22_crit_edgex_xi 
    $endmerge
    phitmpx_xi := ($cast ($uint<16>) mulx_xix_xlcssa)
    $place [forx_xcond8x_xforx_xend22_crit_edgex_xi_getInputDimx_xexit]
    //begin: basic-block getInputDimx_xexit
    $merge forx_xcond8x_xforx_xend22_crit_edgex_xi_getInputDimx_xexit forx_xcond8x_xpreheaderx_xi_getInputDimx_xexit
    $phi call25 :=  ( $cast ($uint<16>) phitmpx_xi) $on forx_xcond8x_xforx_xend22_crit_edgex_xi_getInputDimx_xexit ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000001 ) ) $on forx_xcond8x_xpreheaderx_xi_getInputDimx_xexit 
    $endmerge
    $place [getInputDimx_xexit_forx_xcondx_xi]
    //begin: basic-block forx_xcondx_xi
    $merge forx_xbody13x_xi36_forx_xcondx_xi getInputDimx_xexit_forx_xcondx_xi
    $phi tmp619x_xi :=  ( $cast ($uint<32>) tmp619x_xix_xpre) $on forx_xbody13x_xi36_forx_xcondx_xi ( $cast ($uint<32>) tmp1x_xix_xlcssa) $on getInputDimx_xexit_forx_xcondx_xi 
    $phi indvar26x_xi :=  ( $cast ($uint<64>) indvarx_xnext27x_xi) $on forx_xbody13x_xi36_forx_xcondx_xi ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on getInputDimx_xexit_forx_xcondx_xi 
    $endmerge
    tmp7 := (indvar26x_xi * ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    iNsTr_15 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    iNsTr_16 := ($bitcast ($pointer< $uint<8> >) iNsTr_15)
    uglygep := iNsTr_16[tmp7]
    addx_xptrx_xi := ($bitcast ($pointer< $uint<16> >) uglygep)
    ix_x0x_xi := ($cast ($uint<32>) indvar26x_xi)
    // compare instruction
    cmp20x_xi := (tmp619x_xi == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
    $if cmp20x_xi $then  $place [forx_xcondx_xi_forx_xendx_xi] $else $place [forx_xcondx_xi_bbx_xnphx_xi28] $endif 
    //begin: basic-block bbx_xnphx_xi28
    $merge forx_xcondx_xi_bbx_xnphx_xi28
    $endmerge
    // compare instruction
    tmpx_xi26 := (tmp619x_xi > ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  )
    tmp6x_xopx_xi := (tmp619x_xi + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    iNsTr_21 := ($cast ($uint<64>) tmp6x_xopx_xi)
    xx_xopx_xi27 := (iNsTr_21 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    tmp25x_xi := ( $mux tmpx_xi26 xx_xopx_xi27 ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnphx_xi28_forx_xbodyx_xi34]
    //begin: basic-block forx_xbodyx_xi34
    $merge bbx_xnphx_xi28_forx_xbodyx_xi34 forx_xbodyx_xi34_forx_xbodyx_xi34
    $phi indvarx_xi29 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnphx_xi28_forx_xbodyx_xi34 ( $cast ($uint<64>) indvarx_xnextx_xi32) $on forx_xbodyx_xi34_forx_xbodyx_xi34 
    $phi num_elemsx_x021x_xi :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ) $on bbx_xnphx_xi28_forx_xbodyx_xi34 ( $cast ($uint<32>) mulx_xi31) $on forx_xbodyx_xi34_forx_xbodyx_xi34 
    $endmerge
    arrayidxx_xi30 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvarx_xi29])
    // load 
    tmp8x_xi := ->(arrayidxx_xi30) 
    mulx_xi31 := (tmp8x_xi * num_elemsx_x021x_xi)
    indvarx_xnextx_xi32 := (indvarx_xi29 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond6 := (indvarx_xnextx_xi32 == tmp25x_xi )
    $if exitcond6 $then  $place [forx_xbodyx_xi34_forx_xendx_xix_xloopexit] $else $place [forx_xbodyx_xi34_forx_xbodyx_xi34] $endif 
    //begin: basic-block forx_xendx_xix_xloopexit
    $merge forx_xbodyx_xi34_forx_xendx_xix_xloopexit
    $phi mulx_xi31x_xlcssa :=  ( $cast ($uint<32>) mulx_xi31) $on forx_xbodyx_xi34_forx_xendx_xix_xloopexit 
    $endmerge
    $place [forx_xendx_xix_xloopexit_forx_xendx_xi]
    //begin: basic-block forx_xendx_xi
    $merge forx_xcondx_xi_forx_xendx_xi forx_xendx_xix_xloopexit_forx_xendx_xi
    $phi num_elemsx_x0x_xlcssax_xi :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ) $on forx_xcondx_xi_forx_xendx_xi ( $cast ($uint<32>) mulx_xi31x_xlcssa) $on forx_xendx_xix_xloopexit_forx_xendx_xi 
    $endmerge
    // compare instruction
    cmp12x_xi := ( ($bitcast ( $int<32>) ix_x0x_xi) <   ($bitcast ( $int<32>) num_elemsx_x0x_xlcssax_xi ) )
    callx_xi35 := zeropad_input_pipe
    $if cmp12x_xi $then  $place [forx_xendx_xi_forx_xbody13x_xi36] $else $place [forx_xendx_xi_getInputDatax_xexit] $endif 
    //begin: basic-block forx_xbody13x_xi36
    $merge forx_xendx_xi_forx_xbody13x_xi36
    $endmerge
    ->(addx_xptrx_xi) := callx_xi35
    indvarx_xnext27x_xi := (indvar26x_xi + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    iNsTr_25 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp619x_xix_xpre := ->(iNsTr_25) 
    $place [forx_xbody13x_xi36_forx_xcondx_xi]
    //begin: basic-block getInputDatax_xexit
    $merge forx_xendx_xi_getInputDatax_xexit
    $phi callx_xi35x_xlcssa :=  ( $cast ($uint<16>) callx_xi35) $on forx_xendx_xi_getInputDatax_xexit 
    $endmerge
    pad := callx_xi35x_xlcssa
    $barrier 
    $call timer ()  (call1)
    conv2 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) call1) )
    Block0_starting := call25
    Block1_starting := call25
    Block2_starting := call25
    Block3_starting := call25
    call11 := Block0_complete
    call13 := Block1_complete
    call15 := Block2_complete
    call17 := Block3_complete
    $barrier 
    $call timer ()  (call19)
    conv20 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) call19) )
    sub := (conv20 - conv2)
    elapsed_time_pipe := sub
    $barrier 
    iNsTr_45 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ])
    ->(iNsTr_45) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000101 ) 
    iNsTr_47 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    ->(iNsTr_47) := ( $bitcast ($uint<8> ) _b00000001 ) 
    iNsTr_49 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    ->(iNsTr_49) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) 
    $place [getInputDatax_xexit_forx_xbodyx_xi46]
    //begin: basic-block forx_xbodyx_xi46
    $merge forx_xbodyx_xi46_forx_xbodyx_xi46 getInputDatax_xexit_forx_xbodyx_xi46
    $phi indvarx_xi39 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on getInputDatax_xexit_forx_xbodyx_xi46 ( $cast ($uint<64>) tmp65) $on forx_xbodyx_xi46_forx_xbodyx_xi46 
    $endmerge
    arrayidxx_xi40 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvarx_xi39])
    tmp := (indvarx_xi39 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    incx_xi43 := ($cast ($uint<32>) tmp)
    tmp65 := (indvarx_xi39 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // load 
    tmp3x_xi := ->(arrayidxx_xi40) 
    convx_xi41 := ($cast ($uint<16>) tmp3x_xi)
    zeropad_output_pipe := convx_xi41
    iNsTr_55 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp1x_xi44 := ->(iNsTr_55) 
    // compare instruction
    cmpx_xi45 := (incx_xi43 < tmp1x_xi44 )
    $if cmpx_xi45 $then  $place [forx_xbodyx_xi46_forx_xbodyx_xi46] $else $place [forx_xbodyx_xi46_forx_xcondx_xi51x_xpreheader] $endif 
    //begin: basic-block forx_xcondx_xi51x_xpreheader
    $merge forx_xbodyx_xi46_forx_xcondx_xi51x_xpreheader
    $phi tmp1x_xi44x_xlcssa :=  ( $cast ($uint<32>) tmp1x_xi44) $on forx_xbodyx_xi46_forx_xcondx_xi51x_xpreheader 
    $endmerge
    $place [forx_xcondx_xi51x_xpreheader_forx_xcondx_xi51]
    //begin: basic-block forx_xcondx_xi51
    $merge forx_xbody9x_xi_forx_xcondx_xi51 forx_xcondx_xi51x_xpreheader_forx_xcondx_xi51
    $phi tmp316x_xi :=  ( $cast ($uint<32>) tmp316x_xix_xpr) $on forx_xbody9x_xi_forx_xcondx_xi51 ( $cast ($uint<32>) tmp1x_xi44x_xlcssa) $on forx_xcondx_xi51x_xpreheader_forx_xcondx_xi51 
    $phi indvar23x_xi :=  ( $cast ($uint<64>) indvarx_xnext24x_xi) $on forx_xbody9x_xi_forx_xcondx_xi51 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on forx_xcondx_xi51x_xpreheader_forx_xcondx_xi51 
    $endmerge
    tmp2 := (indvar23x_xi * ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    iNsTr_59 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    iNsTr_60 := ($bitcast ($pointer< $uint<8> >) iNsTr_59)
    uglygep3 := iNsTr_60[tmp2]
    addx_xptrx_xi50 := ($bitcast ($pointer< $uint<16> >) uglygep3)
    // compare instruction
    cmp17x_xi := (tmp316x_xi == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
    $if cmp17x_xi $then  $place [forx_xcondx_xi51_forx_xbody9x_xi] $else $place [forx_xcondx_xi51_bbx_xnphx_xi54] $endif 
    //begin: basic-block bbx_xnphx_xi54
    $merge forx_xcondx_xi51_bbx_xnphx_xi54
    $endmerge
    // compare instruction
    tmpx_xi52 := (tmp316x_xi > ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  )
    tmp3x_xopx_xi := (tmp316x_xi + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    iNsTr_66 := ($cast ($uint<64>) tmp3x_xopx_xi)
    xx_xopx_xi53 := (iNsTr_66 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    tmp22x_xi := ( $mux tmpx_xi52 xx_xopx_xi53 ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnphx_xi54_forx_xbodyx_xi60]
    //begin: basic-block forx_xbodyx_xi60
    $merge bbx_xnphx_xi54_forx_xbodyx_xi60 forx_xbodyx_xi60_forx_xbodyx_xi60
    $phi indvarx_xi55 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnphx_xi54_forx_xbodyx_xi60 ( $cast ($uint<64>) indvarx_xnextx_xi58) $on forx_xbodyx_xi60_forx_xbodyx_xi60 
    $phi num_elemsx_x018x_xi :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ) $on bbx_xnphx_xi54_forx_xbodyx_xi60 ( $cast ($uint<32>) mulx_xi57) $on forx_xbodyx_xi60_forx_xbodyx_xi60 
    $endmerge
    arrayidxx_xi56 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvarx_xi55])
    // load 
    tmp5x_xi := ->(arrayidxx_xi56) 
    mulx_xi57 := (tmp5x_xi * num_elemsx_x018x_xi)
    indvarx_xnextx_xi58 := (indvarx_xi55 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond := (indvarx_xnextx_xi58 == tmp22x_xi )
    $if exitcond $then  $place [forx_xbodyx_xi60_forx_xendx_xi62] $else $place [forx_xbodyx_xi60_forx_xbodyx_xi60] $endif 
    //begin: basic-block forx_xendx_xi62
    $merge forx_xbodyx_xi60_forx_xendx_xi62
    $phi mulx_xi57x_xlcssa :=  ( $cast ($uint<32>) mulx_xi57) $on forx_xbodyx_xi60_forx_xendx_xi62 
    $endmerge
    // compare instruction
    phitmpx_xi61 := (mulx_xi57x_xlcssa == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
    $if phitmpx_xi61 $then  $place [forx_xendx_xi62_sendOutputDatax_xexit] $else $place [forx_xendx_xi62_forx_xbody9x_xi] $endif 
    //begin: basic-block forx_xbody9x_xi
    $merge forx_xcondx_xi51_forx_xbody9x_xi forx_xendx_xi62_forx_xbody9x_xi
    $endmerge
    // load 
    tmp11x_xi := ->(addx_xptrx_xi50) 
    zeropad_output_pipe := tmp11x_xi
    indvarx_xnext24x_xi := (indvar23x_xi + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    iNsTr_64 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp316x_xix_xpr := ->(iNsTr_64) 
    $place [forx_xbody9x_xi_forx_xcondx_xi51]
    //begin: basic-block sendOutputDatax_xexit
    $merge forx_xendx_xi62_sendOutputDatax_xexit
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
