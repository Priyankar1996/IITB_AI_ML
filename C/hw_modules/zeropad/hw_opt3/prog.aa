// Aa code produced by llvm2aa (version 1.0)
$record [structx_x__SizedTensor_16K] < $array [16384] $of $uint<64> > 
$record [structx_x__TensorDescriptor] < $uint<32> > < $uint<8> > < $uint<32> > < $array [64] $of $uint<32> > 
$pipe Block0_complete : $uint<16> $depth 1
$pipe Block0_starting : $uint<16> $depth 1
$pipe Block1_complete : $uint<16> $depth 1
$pipe Block1_starting : $uint<16> $depth 1
$pipe Block2_complete : $uint<16> $depth 1
$pipe Block2_starting : $uint<16> $depth 1
$pipe Block3_complete : $uint<16> $depth 1
$pipe Block3_starting : $uint<16> $depth 1
$pipe elapsed_time_pipe : $uint<64> $depth 1
$pipe zeropad_input_pipe : $uint<16> $depth 2
$pipe zeropad_output_pipe : $uint<16> $depth 2
$storage R:structx_x__SizedTensor_16K
$storage des_inp:structx_x__TensorDescriptor
$storage pad:$uint<16>
$storage des_out:structx_x__TensorDescriptor
$storage T:structx_x__SizedTensor_16K
$module [progx_xoptx_xo_storage_initializer_] $in () $out () $is 
{
  $null
  $attribute initializer
}
$module [getRemainingElements] 
$in (ne : $uint<16> )
$out (ret_val__ : $uint<64>)
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    // compare instruction
    cmp14 := (ne == ( $bitcast ($uint<16> ) _b0000000000000000 )  )
    $if cmp14 $then  $place [entry_forx_xend] $else $place [entry_forx_xbodyx_xpreheader] $endif 
    //begin: basic-block forx_xbodyx_xpreheader
    $merge entry_forx_xbodyx_xpreheader
    $endmerge
    $place [forx_xbodyx_xpreheader_forx_xbody]
    //begin: basic-block forx_xbody
    $merge forx_xbody_forx_xbody forx_xbodyx_xpreheader_forx_xbody
    $phi nx_x016 :=  ( $cast ($uint<16>) inc) $on forx_xbody_forx_xbody ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on forx_xbodyx_xpreheader_forx_xbody 
    $phi elementx_x015 :=  ( $cast ($uint<64>) shl) $on forx_xbody_forx_xbody ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on forx_xbodyx_xpreheader_forx_xbody 
    $endmerge
    call := zeropad_input_pipe
    conv5 := ($cast ($uint<64>) call)
    add := (conv5 | elementx_x015)
    shl := (add << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    inc := (nx_x016 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    // compare instruction
    exitcond1 := (inc == ne )
    $if exitcond1 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $phi shlx_xlcssa :=  ( $cast ($uint<64>) shl) $on forx_xbody_forx_xendx_xloopexit 
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend
    $phi elementx_x0x_xlcssa :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on entry_forx_xend ( $cast ($uint<64>) shlx_xlcssa) $on forx_xendx_xloopexit_forx_xend 
    $endmerge
    conv10 := ($cast ($uint<32>) ne)
    sub := (( $bitcast ($uint<32> ) _b00000000000000000000000000000011 )  - conv10)
    mul := (sub << ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    sh_prom := ($cast ($uint<64>) mul)
    ret_val__ := (elementx_x0x_xlcssa << sh_prom)
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [sendRemainingElements] 
$in (addr : $uint<32> ne : $uint<16> )
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    $storage out_data_alloc : $array [3] $of $uint<16>
    out_data := @(out_data_alloc)
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][addr])
    // load 
    tmp1 := ->(arrayidx) 
    shr := (tmp1 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    conv := ($cast ($uint<16>) shr)
    arrayidx6 := out_data[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ]
    ->(arrayidx6) := conv
    shr8 := (tmp1 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000100000 ) )
    conv11 := ($cast ($uint<16>) shr8)
    arrayidx12 := out_data[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ]
    ->(arrayidx12) := conv11
    shr14 := (tmp1 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 ) )
    conv17 := ($cast ($uint<16>) shr14)
    arrayidx18 := out_data[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ]
    ->(arrayidx18) := conv17
    // compare instruction
    cmp30 := (ne == ( $bitcast ($uint<16> ) _b0000000000000000 )  )
    $if cmp30 $then  $place [entry_forx_xend] $else $place [entry_bbx_xnph] $endif 
    //begin: basic-block bbx_xnph
    $merge entry_bbx_xnph
    $endmerge
    tmp2 := ($cast ($uint<32>) ne)
    // compare instruction
    tmp3 := (tmp2 > ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  )
    umax := ( $mux tmp3 tmp2 ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    tmp4 := (umax + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbodyx_xforx_xbody_crit_edge_forx_xbody
    $phi indvar1 :=  ( $cast ($uint<32>) indvarx_xnext) $on forx_xbodyx_xforx_xbody_crit_edge_forx_xbody ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody 
    $phi tmp26 :=  ( $cast ($uint<16>) conv17) $on bbx_xnph_forx_xbody ( $cast ($uint<16>) tmp26x_xpre) $on forx_xbodyx_xforx_xbody_crit_edge_forx_xbody 
    $endmerge
    tmp := (indvar1 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    arrayidx25x_xphix_xtransx_xinsert := out_data[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][tmp]
    zeropad_output_pipe := tmp26
    // compare instruction
    exitcond5 := (indvar1 == tmp4 )
    $if exitcond5 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbodyx_xforx_xbody_crit_edge] $endif 
    //begin: basic-block forx_xbodyx_xforx_xbody_crit_edge
    $merge forx_xbody_forx_xbodyx_xforx_xbody_crit_edge
    $endmerge
    // load 
    tmp26x_xpre := ->(arrayidx25x_xphix_xtransx_xinsert) 
    indvarx_xnext := (indvar1 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    $place [forx_xbodyx_xforx_xbody_crit_edge_forx_xbody]
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [testConfigure] 
$in ()
$out (ret_val__ : $uint<16>)
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    iNsTr_0 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ])
    ->(iNsTr_0) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000101 ) 
    call := zeropad_input_pipe
    conv := ($cast ($uint<8>) call)
    iNsTr_3 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    ->(iNsTr_3) := conv
    call1 := zeropad_input_pipe
    conv2 := ($cast ($uint<32>) call1)
    iNsTr_6 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    ->(iNsTr_6) := conv2
    // compare instruction
    cmp69 := (call1 == ( $bitcast ($uint<16> ) _b0000000000000000 )  )
    call570 := zeropad_input_pipe
    $if cmp69 $then  $place [entry_forx_xend] $else $place [entry_forx_xbodyx_xpreheader] $endif 
    //begin: basic-block forx_xbodyx_xpreheader
    $merge entry_forx_xbodyx_xpreheader
    $endmerge
    $place [forx_xbodyx_xpreheader_forx_xbody]
    //begin: basic-block forx_xbody
    $merge forx_xbody_forx_xbody forx_xbodyx_xpreheader_forx_xbody
    $phi call572 :=  ( $cast ($uint<16>) call5) $on forx_xbody_forx_xbody ( $cast ($uint<16>) call570) $on forx_xbodyx_xpreheader_forx_xbody 
    $phi ix_x071 :=  ( $cast ($uint<32>) iNsTr_28) $on forx_xbody_forx_xbody ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on forx_xbodyx_xpreheader_forx_xbody 
    $endmerge
    tmp := (ix_x071 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    arrayidx := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][ix_x071])
    conv6 := ($cast ($uint<32>) call572)
    ->(arrayidx) := conv6
    iNsTr_28 := (ix_x071 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    iNsTr_29 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp3 := ->(iNsTr_29) 
    // compare instruction
    cmp := (tmp < tmp3 )
    call5 := zeropad_input_pipe
    $if cmp $then  $place [forx_xbody_forx_xbody] $else $place [forx_xbody_forx_xendx_xloopexit] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $phi call5x_xlcssa1 :=  ( $cast ($uint<16>) call5) $on forx_xbody_forx_xendx_xloopexit 
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend
    $phi call5x_xlcssa :=  ( $cast ($uint<16>) call570) $on entry_forx_xend ( $cast ($uint<16>) call5x_xlcssa1) $on forx_xendx_xloopexit_forx_xend 
    $endmerge
    pad := call5x_xlcssa
    call10 := zeropad_input_pipe
    conv11 := ($cast ($uint<32>) call10)
    iNsTr_12 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ])
    ->(iNsTr_12) := conv11
    call12 := zeropad_input_pipe
    conv13 := ($cast ($uint<32>) call12)
    iNsTr_15 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    ->(iNsTr_15) := conv13
    call14 := zeropad_input_pipe
    conv15 := ($cast ($uint<32>) call14)
    iNsTr_18 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    ->(iNsTr_18) := conv15
    iNsTr_20 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ])
    // load 
    tmp17 := ->(iNsTr_20) 
    iNsTr_21 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    // load 
    tmp18 := ->(iNsTr_21) 
    iNsTr_22 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp19 := ->(iNsTr_22) 
    mul := (tmp18 * tmp17)
    mul20 := (mul * tmp19)
    conv21 := ($cast ($uint<64>) mul20)
    shr65x_xmask := (conv21 & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000011111111111111111111111111111100 ) )
    // compare instruction
    cmp2666 := (shr65x_xmask == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
    $if cmp2666 $then  $place [forx_xend_forx_xend54] $else $place [forx_xend_bbx_xnph] $endif 
    //begin: basic-block bbx_xnph
    $merge forx_xend_bbx_xnph
    $endmerge
    tmp81 := (conv21 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    // compare instruction
    tmp82 := (tmp81 > ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
    umax := ( $mux tmp82 tmp81 ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    tmp83 := (umax + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000011111111111111111111111111111111 ) )
    tmp2 := (tmp18 * tmp17)
    tmp4 := (tmp2 * tmp19)
    tmp5 := ($cast ($uint<64>) tmp4)
    tmp6 := (tmp5 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    // compare instruction
    tmp7 := (tmp6 > ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
    umax8 := ( $mux tmp7 tmp6 ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph_forx_xbody28]
    //begin: basic-block forx_xbody28
    $merge bbx_xnph_forx_xbody28 forx_xbody28_forx_xbody28
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody28 ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody28_forx_xbody28 
    $endmerge
    tmp10 := (indvar * ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    iNsTr_34 := ($cast ($uint<32>) T)
    iNsTr_35 := ($cast ($uint<64>) iNsTr_34)
    tmp11 := (tmp10 + iNsTr_35)
    tmp89 := ($cast ($uint<32>) tmp11)
    arrayidx50 := ($cast ($pointer< $uint<64> >) tmp89)
    call30 := zeropad_input_pipe
    conv31 := ($cast ($uint<64>) call30)
    shl := (conv31 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    call33 := zeropad_input_pipe
    conv35 := ($cast ($uint<64>) call33)
    add := (shl | conv35)
    shl37 := (add << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    call38 := zeropad_input_pipe
    conv40 := ($cast ($uint<64>) call38)
    add41 := (shl37 | conv40)
    shl43 := (add41 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    call44 := zeropad_input_pipe
    conv46 := ($cast ($uint<64>) call44)
    add47 := (shl43 | conv46)
    ->(arrayidx50) := add47
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond9 := (indvarx_xnext == umax8 )
    $if exitcond9 $then  $place [forx_xbody28_forx_xcond22x_xforx_xend54_crit_edge] $else $place [forx_xbody28_forx_xbody28] $endif 
    //begin: basic-block forx_xcond22x_xforx_xend54_crit_edge
    $merge forx_xbody28_forx_xcond22x_xforx_xend54_crit_edge
    $endmerge
    tmp84 := ($cast ($uint<32>) tmp83)
    tmp85 := (tmp84 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    $place [forx_xcond22x_xforx_xend54_crit_edge_forx_xend54]
    //begin: basic-block forx_xend54
    $merge forx_xcond22x_xforx_xend54_crit_edge_forx_xend54 forx_xend_forx_xend54
    $phi ix_x1x_xlcssa :=  ( $cast ($uint<32>) tmp85) $on forx_xcond22x_xforx_xend54_crit_edge_forx_xend54 ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on forx_xend_forx_xend54 
    $endmerge
    and := (conv21 & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) )
    // compare instruction
    tobool := (and == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
    $if tobool $then  $place [forx_xend54_ifx_xend] $else $place [forx_xend54_forx_xbodyx_xix_xpreheader] $endif 
    //begin: basic-block forx_xbodyx_xix_xpreheader
    $merge forx_xend54_forx_xbodyx_xix_xpreheader
    $endmerge
    tmp13 := (tmp18 * tmp17)
    tmp14 := (tmp13 * tmp19)
    tmp15 := ($cast ($uint<2>) tmp14)
    tmp16 := ($cast ($uint<16>) tmp15)
    $place [forx_xbodyx_xix_xpreheader_forx_xbodyx_xi]
    //begin: basic-block forx_xbodyx_xi
    $merge forx_xbodyx_xi_forx_xbodyx_xi forx_xbodyx_xix_xpreheader_forx_xbodyx_xi
    $phi nx_x016x_xi :=  ( $cast ($uint<16>) incx_xi) $on forx_xbodyx_xi_forx_xbodyx_xi ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on forx_xbodyx_xix_xpreheader_forx_xbodyx_xi 
    $phi elementx_x015x_xi :=  ( $cast ($uint<64>) shlx_xi) $on forx_xbodyx_xi_forx_xbodyx_xi ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on forx_xbodyx_xix_xpreheader_forx_xbodyx_xi 
    $endmerge
    callx_xi := zeropad_input_pipe
    conv5x_xi := ($cast ($uint<64>) callx_xi)
    addx_xi := (conv5x_xi | elementx_x015x_xi)
    shlx_xi := (addx_xi << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    incx_xi := (nx_x016x_xi + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    // compare instruction
    exitcond17 := (incx_xi == tmp16 )
    $if exitcond17 $then  $place [forx_xbodyx_xi_getRemainingElementsx_xexit] $else $place [forx_xbodyx_xi_forx_xbodyx_xi] $endif 
    //begin: basic-block getRemainingElementsx_xexit
    $merge forx_xbodyx_xi_getRemainingElementsx_xexit
    $phi shlx_xix_xlcssa :=  ( $cast ($uint<64>) shlx_xi) $on forx_xbodyx_xi_getRemainingElementsx_xexit 
    $endmerge
    Bx_xnot := (mul20 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    subx_xi := (Bx_xnot & ( $bitcast ($uint<32> ) _b00000000000000000000000000110000 ) )
    mulx_xi := (subx_xi ^ ( $bitcast ($uint<32> ) _b00000000000000000000000000110000 ) )
    sh_promx_xi := ($cast ($uint<64>) mulx_xi)
    shl12x_xi := (shlx_xix_xlcssa << sh_promx_xi)
    arrayidx61 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][ix_x1x_xlcssa])
    ->(arrayidx61) := shl12x_xi
    $place [getRemainingElementsx_xexit_ifx_xend]
    //begin: basic-block ifx_xend
    $merge forx_xend54_ifx_xend getRemainingElementsx_xexit_ifx_xend
    $endmerge
    ret_val__ := ($cast ($uint<16>) mul20)
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [sendOutput] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    $storage out_datax_xi_alloc : $array [3] $of $uint<16>
    out_datax_xi := @(out_datax_xi_alloc)
    iNsTr_0 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ])
    // load 
    tmp := ->(iNsTr_0) 
    iNsTr_1 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    // load 
    tmp1 := ->(iNsTr_1) 
    iNsTr_2 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp2 := ->(iNsTr_2) 
    mul := (tmp1 * tmp)
    mul3 := (mul * tmp2)
    conv := ($cast ($uint<64>) mul3)
    shr53x_xmask := (conv & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000011111111111111111111111111111100 ) )
    // compare instruction
    cmp54 := (shr53x_xmask == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
    $if cmp54 $then  $place [entry_forx_xend] $else $place [entry_bbx_xnph56] $endif 
    //begin: basic-block bbx_xnph56
    $merge entry_bbx_xnph56
    $endmerge
    tmp67 := (conv >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    // compare instruction
    tmp68 := (tmp67 > ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
    umax69 := ( $mux tmp68 tmp67 ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    tmp70 := (umax69 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000011111111111111111111111111111111 ) )
    tmp3 := (tmp1 * tmp)
    tmp4 := (tmp3 * tmp2)
    tmp5 := ($cast ($uint<64>) tmp4)
    tmp6 := (tmp5 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    // compare instruction
    tmp7 := (tmp6 > ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
    umax := ( $mux tmp7 tmp6 ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph56_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph56_forx_xbody forx_xbody_forx_xbody
    $phi indvar73 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph56_forx_xbody ( $cast ($uint<64>) indvarx_xnext74) $on forx_xbody_forx_xbody 
    $endmerge
    tmp9 := (indvar73 * ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    iNsTr_14 := ($cast ($uint<32>) R)
    iNsTr_15 := ($cast ($uint<64>) iNsTr_14)
    tmp10 := (tmp9 + iNsTr_15)
    tmp78 := ($cast ($uint<32>) tmp10)
    arrayidx := ($cast ($pointer< $uint<64> >) tmp78)
    // load 
    tmp11 := ->(arrayidx) 
    conv14 := ($cast ($uint<16>) tmp11)
    shr17 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    conv20 := ($cast ($uint<16>) shr17)
    shr23 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000100000 ) )
    conv26 := ($cast ($uint<16>) shr23)
    shr29 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 ) )
    conv32 := ($cast ($uint<16>) shr29)
    zeropad_output_pipe := conv32
    zeropad_output_pipe := conv26
    zeropad_output_pipe := conv20
    zeropad_output_pipe := conv14
    indvarx_xnext74 := (indvar73 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond8 := (indvarx_xnext74 == umax )
    $if exitcond8 $then  $place [forx_xbody_forx_xcondx_xforx_xend_crit_edge] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xcondx_xforx_xend_crit_edge
    $merge forx_xbody_forx_xcondx_xforx_xend_crit_edge
    $endmerge
    tmp71 := ($cast ($uint<32>) tmp70)
    tmp72 := (tmp71 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    $place [forx_xcondx_xforx_xend_crit_edge_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xcondx_xforx_xend_crit_edge_forx_xend
    $phi ix_x0x_xlcssa :=  ( $cast ($uint<32>) tmp72) $on forx_xcondx_xforx_xend_crit_edge_forx_xend ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on entry_forx_xend 
    $endmerge
    and44 := (conv & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) )
    // compare instruction
    tobool := (and44 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
    $if tobool $then  $place [forx_xend_sendRemainingElementsx_xexit] $else $place [forx_xend_bbx_xnphx_xi] $endif 
    //begin: basic-block bbx_xnphx_xi
    $merge forx_xend_bbx_xnphx_xi
    $endmerge
    arrayidxx_xi := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][ix_x0x_xlcssa])
    // load 
    tmp1x_xi := ->(arrayidxx_xi) 
    shrx_xi := (tmp1x_xi >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    convx_xi := ($cast ($uint<16>) shrx_xi)
    arrayidx6x_xi := out_datax_xi[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ]
    ->(arrayidx6x_xi) := convx_xi
    shr8x_xi := (tmp1x_xi >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000100000 ) )
    conv11x_xi := ($cast ($uint<16>) shr8x_xi)
    arrayidx12x_xi := out_datax_xi[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ]
    ->(arrayidx12x_xi) := conv11x_xi
    shr14x_xi := (tmp1x_xi >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 ) )
    conv17x_xi := ($cast ($uint<16>) shr14x_xi)
    arrayidx18x_xi := out_datax_xi[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ]
    ->(arrayidx18x_xi) := conv17x_xi
    tmpx_xi := (mul3 & ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
    zeropad_output_pipe := conv17x_xi
    // compare instruction
    iNsTr_12 := (tmpx_xi < ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )
    $if iNsTr_12 $then  $place [bbx_xnphx_xi_sendRemainingElementsx_xexit] $else $place [bbx_xnphx_xi_bbx_xnph] $endif 
    //begin: basic-block bbx_xnph
    $merge bbx_xnphx_xi_bbx_xnph
    $endmerge
    tmp14 := (tmp1 * tmp)
    tmp15 := (tmp14 * tmp2)
    tmp16 := ($cast ($uint<2>) tmp15)
    tmp17 := ($cast ($uint<32>) tmp16)
    tmp18 := (tmp17 + ( $bitcast ($uint<32> ) _b11111111111111111111111111111110 ) )
    $place [bbx_xnph_forx_xbodyx_xforx_xbody_crit_edgex_xi]
    //begin: basic-block forx_xbodyx_xforx_xbody_crit_edgex_xi
    $merge bbx_xnph_forx_xbodyx_xforx_xbody_crit_edgex_xi forx_xbodyx_xforx_xbody_crit_edgex_xix_xforx_xbodyx_xforx_xbody_crit_edgex_xi_crit_edge_forx_xbodyx_xforx_xbody_crit_edgex_xi
    $phi indvar13 :=  ( $cast ($uint<32>) indvarx_xnext) $on forx_xbodyx_xforx_xbody_crit_edgex_xix_xforx_xbodyx_xforx_xbody_crit_edgex_xi_crit_edge_forx_xbodyx_xforx_xbody_crit_edgex_xi ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbodyx_xforx_xbody_crit_edgex_xi 
    $endmerge
    tmp20 := (indvar13 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    arrayidx25x_xphix_xtransx_xinsertx_xi := out_datax_xi[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][tmp20]
    // load 
    tmp26x_xprex_xi := ->(arrayidx25x_xphix_xtransx_xinsertx_xi) 
    zeropad_output_pipe := tmp26x_xprex_xi
    // compare instruction
    exitcond19 := (indvar13 == tmp18 )
    $if exitcond19 $then  $place [forx_xbodyx_xforx_xbody_crit_edgex_xi_sendRemainingElementsx_xexitx_xloopexit] $else $place [forx_xbodyx_xforx_xbody_crit_edgex_xi_forx_xbodyx_xforx_xbody_crit_edgex_xix_xforx_xbodyx_xforx_xbody_crit_edgex_xi_crit_edge] $endif 
    //begin: basic-block forx_xbodyx_xforx_xbody_crit_edgex_xix_xforx_xbodyx_xforx_xbody_crit_edgex_xi_crit_edge
    $merge forx_xbodyx_xforx_xbody_crit_edgex_xi_forx_xbodyx_xforx_xbody_crit_edgex_xix_xforx_xbodyx_xforx_xbody_crit_edgex_xi_crit_edge
    $endmerge
    indvarx_xnext := (indvar13 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    $place [forx_xbodyx_xforx_xbody_crit_edgex_xix_xforx_xbodyx_xforx_xbody_crit_edgex_xi_crit_edge_forx_xbodyx_xforx_xbody_crit_edgex_xi]
    //begin: basic-block sendRemainingElementsx_xexitx_xloopexit
    $merge forx_xbodyx_xforx_xbody_crit_edgex_xi_sendRemainingElementsx_xexitx_xloopexit
    $endmerge
    $place [sendRemainingElementsx_xexitx_xloopexit_sendRemainingElementsx_xexit]
    //begin: basic-block sendRemainingElementsx_xexit
    $merge bbx_xnphx_xi_sendRemainingElementsx_xexit forx_xend_sendRemainingElementsx_xexit sendRemainingElementsx_xexitx_xloopexit_sendRemainingElementsx_xexit
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_A] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block0_starting
    $barrier 
    // load 
    tmp := pad
    conv := ($cast ($uint<32>) tmp)
    iNsTr_2 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp2 := ->(iNsTr_2) 
    iNsTr_3 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    // load 
    tmp4 := ->(iNsTr_3) 
    iNsTr_4 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp8 := ->(iNsTr_4) 
    iNsTr_5 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    // load 
    tmp10 := ->(iNsTr_5) 
    iNsTr_6 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ])
    // load 
    tmp22 := ->(iNsTr_6) 
    div := (tmp22 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    mul24 := (conv << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add := (div + mul24)
    sub := (conv + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    tmp23 := ($cast ($uint<32>) tmp)
    tmp24 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  - tmp23)
    $place [entry_whilex_xcondx_xouter]
    //begin: basic-block whilex_xcondx_xouter
    $merge entry_whilex_xcondx_xouter whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter
    $phi jx_x0x_xph :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on entry_whilex_xcondx_xouter ( $cast ($uint<32>) jx_x0x_xphx_xbe) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $phi ix_x0x_xph :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on entry_whilex_xcondx_xouter ( $cast ($uint<32>) inc115x_xix_x0) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $endmerge
    // compare instruction
    cmp := (ix_x0x_xph < add )
    // compare instruction
    cmp28 := ( ($bitcast ( $int<32>) ix_x0x_xph) >  ($bitcast ( $int<32>) sub ) )
    $if cmp $then  $place [whilex_xcondx_xouter_whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge] $else $place [whilex_xcondx_xouter_whilex_xendx_xsplit] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge
    $merge whilex_xcondx_xouter_whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge
    $endmerge
    // compare instruction
    cmp42 := ( ($bitcast ( $int<32>) jx_x0x_xph) >  ($bitcast ( $int<32>) sub ) )
    $if cmp42 $then  $place [whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xcondx_xouterx_xsplitx_xsplitx_xus] $else $place [whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge
    $merge whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge
    $endmerge
    $if cmp28 $then  $place [whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge_ifx_xendx_xus123x_xpreheader] $else $place [whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge_ifx_xendx_xpreheader] $endif 
    //begin: basic-block ifx_xendx_xus123x_xpreheader
    $merge whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge_ifx_xendx_xus123x_xpreheader
    $endmerge
    tmp9 := (tmp10 * ix_x0x_xph)
    tmp11 := (jx_x0x_xph + tmp9)
    tmp12 := (tmp8 * tmp11)
    $place [ifx_xendx_xus123x_xpreheader_ifx_xendx_xus123]
    //begin: basic-block ifx_xendx_xpreheader
    $merge whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge_ifx_xendx_xpreheader
    $endmerge
    tmp1 := (tmp10 * ix_x0x_xph)
    tmp3 := (jx_x0x_xph + tmp1)
    tmp5 := (tmp8 * tmp3)
    $place [ifx_xendx_xpreheader_ifx_xend]
    //begin: basic-block whilex_xcondx_xouterx_xsplitx_xsplitx_xus
    $merge whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xcondx_xouterx_xsplitx_xsplitx_xus
    $endmerge
    $if cmp28 $then  $place [whilex_xcondx_xouterx_xsplitx_xsplitx_xus_whilex_xcondx_xouterx_xsplitx_xsplitx_xusx_xsplitx_xus] $else $place [whilex_xcondx_xouterx_xsplitx_xsplitx_xus_ifx_xendx_xusx_xpreheader] $endif 
    //begin: basic-block ifx_xendx_xusx_xpreheader
    $merge whilex_xcondx_xouterx_xsplitx_xsplitx_xus_ifx_xendx_xusx_xpreheader
    $endmerge
    tmp16 := (tmp10 * ix_x0x_xph)
    tmp17 := (jx_x0x_xph + tmp16)
    tmp18 := (tmp8 * tmp17)
    $place [ifx_xendx_xusx_xpreheader_ifx_xendx_xus]
    //begin: basic-block whilex_xcondx_xouterx_xsplitx_xsplitx_xusx_xsplitx_xus
    $merge whilex_xcondx_xouterx_xsplitx_xsplitx_xus_whilex_xcondx_xouterx_xsplitx_xsplitx_xusx_xsplitx_xus
    $endmerge
    tmp25 := (tmp24 + jx_x0x_xph)
    tmp26 := (tmp24 + ix_x0x_xph)
    tmp27 := (tmp4 * tmp26)
    tmp28 := (tmp25 + tmp27)
    tmp29 := (tmp2 * tmp28)
    tmp31 := (tmp10 * ix_x0x_xph)
    tmp32 := (jx_x0x_xph + tmp31)
    tmp33 := (tmp8 * tmp32)
    $place [whilex_xcondx_xouterx_xsplitx_xsplitx_xusx_xsplitx_xus_lorx_xlhsx_xfalsex_xusx_xus]
    //begin: basic-block ifx_xendx_xusx_xus
    $merge ifx_xelsex_xusx_xus_ifx_xendx_xusx_xus ifx_xthenx_xusx_xus_ifx_xendx_xusx_xus
    $endmerge
    // compare instruction
    exitcond21 := (incx_xusx_xus == tmp2 )
    $if exitcond21 $then  $place [ifx_xendx_xusx_xus_ifx_xthen101x_xloopexit20] $else $place [ifx_xendx_xusx_xus_lorx_xlhsx_xfalsex_xusx_xus] $endif 
    //begin: basic-block ifx_xthenx_xusx_xus
    $merge lorx_xlhsx_xfalse44x_xusx_xus_ifx_xthenx_xusx_xus lorx_xlhsx_xfalsex_xusx_xus_ifx_xthenx_xusx_xus
    $endmerge
    shrx_xusx_xus :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add62x_xusx_xus) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    arrayidxx_xusx_xus := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][shrx_xusx_xus])
    ->(arrayidxx_xusx_xus) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    $place [ifx_xthenx_xusx_xus_ifx_xendx_xusx_xus]
    //begin: basic-block lorx_xlhsx_xfalse44x_xusx_xus
    $merge lorx_xlhsx_xfalsex_xusx_xus_lorx_xlhsx_xfalse44x_xusx_xus
    $endmerge
    div47x_xusx_xus := (tmp4 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    sub50x_xusx_xus := (sub + div47x_xusx_xus)
    // compare instruction
    cmp51x_xusx_xus := (jx_x0x_xph > sub50x_xusx_xus )
    $if cmp51x_xusx_xus $then  $place [lorx_xlhsx_xfalse44x_xusx_xus_ifx_xthenx_xusx_xus] $else $place [lorx_xlhsx_xfalse44x_xusx_xus_ifx_xelsex_xusx_xus] $endif 
    //begin: basic-block lorx_xlhsx_xfalsex_xusx_xus
    $merge ifx_xendx_xusx_xus_lorx_xlhsx_xfalsex_xusx_xus whilex_xcondx_xouterx_xsplitx_xsplitx_xusx_xsplitx_xus_lorx_xlhsx_xfalsex_xusx_xus
    $phi kx_x0x_xusx_xus :=  ( $cast ($uint<32>) incx_xusx_xus) $on ifx_xendx_xusx_xus_lorx_xlhsx_xfalsex_xusx_xus ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on whilex_xcondx_xouterx_xsplitx_xsplitx_xusx_xsplitx_xus_lorx_xlhsx_xfalsex_xusx_xus 
    $endmerge
    add77x_xusx_xus := (tmp29 + kx_x0x_xusx_xus)
    add62x_xusx_xus := (tmp33 + kx_x0x_xusx_xus)
    incx_xusx_xus := (kx_x0x_xusx_xus + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    div32x_xusx_xus := (tmp22 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    sub35x_xusx_xus := (sub + div32x_xusx_xus)
    // compare instruction
    cmp36x_xnotx_xusx_xus := (ix_x0x_xph > sub35x_xusx_xus )
    $if cmp36x_xnotx_xusx_xus $then  $place [lorx_xlhsx_xfalsex_xusx_xus_ifx_xthenx_xusx_xus] $else $place [lorx_xlhsx_xfalsex_xusx_xus_lorx_xlhsx_xfalse44x_xusx_xus] $endif 
    //begin: basic-block ifx_xelsex_xusx_xus
    $merge lorx_xlhsx_xfalse44x_xusx_xus_ifx_xelsex_xusx_xus
    $endmerge
    shr90x_xusx_xus :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add77x_xusx_xus) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    arrayidx91x_xusx_xus := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][shr90x_xusx_xus])
    // load 
    tmp92x_xusx_xus := ->(arrayidx91x_xusx_xus) 
    shr94x_xusx_xus :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add62x_xusx_xus) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    arrayidx95x_xusx_xus := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][shr94x_xusx_xus])
    ->(arrayidx95x_xusx_xus) := tmp92x_xusx_xus
    $place [ifx_xelsex_xusx_xus_ifx_xendx_xusx_xus]
    //begin: basic-block ifx_xendx_xus
    $merge ifx_xendx_xus_ifx_xendx_xus ifx_xendx_xusx_xpreheader_ifx_xendx_xus
    $phi kx_x0x_xus :=  ( $cast ($uint<32>) incx_xus) $on ifx_xendx_xus_ifx_xendx_xus ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on ifx_xendx_xusx_xpreheader_ifx_xendx_xus 
    $endmerge
    add62x_xus := (tmp18 + kx_x0x_xus)
    incx_xus := (kx_x0x_xus + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    shrx_xus :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add62x_xus) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    arrayidxx_xus := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][shrx_xus])
    ->(arrayidxx_xus) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    // compare instruction
    exitcond15 := (incx_xus == tmp2 )
    $if exitcond15 $then  $place [ifx_xendx_xus_ifx_xthen101x_xloopexit14] $else $place [ifx_xendx_xus_ifx_xendx_xus] $endif 
    //begin: basic-block ifx_xendx_xus123
    $merge ifx_xendx_xus123_ifx_xendx_xus123 ifx_xendx_xus123x_xpreheader_ifx_xendx_xus123
    $phi kx_x0x_xus122 :=  ( $cast ($uint<32>) incx_xus124) $on ifx_xendx_xus123_ifx_xendx_xus123 ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on ifx_xendx_xus123x_xpreheader_ifx_xendx_xus123 
    $endmerge
    add62x_xus128 := (tmp12 + kx_x0x_xus122)
    incx_xus124 := (kx_x0x_xus122 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    shrx_xus129 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add62x_xus128) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    arrayidxx_xus130 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][shrx_xus129])
    ->(arrayidxx_xus130) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    // compare instruction
    exitcond8 := (incx_xus124 == tmp2 )
    $if exitcond8 $then  $place [ifx_xendx_xus123_ifx_xthen101x_xloopexit7] $else $place [ifx_xendx_xus123_ifx_xendx_xus123] $endif 
    //begin: basic-block ifx_xend
    $merge ifx_xend_ifx_xend ifx_xendx_xpreheader_ifx_xend
    $phi kx_x0 :=  ( $cast ($uint<32>) inc) $on ifx_xend_ifx_xend ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on ifx_xendx_xpreheader_ifx_xend 
    $endmerge
    add62 := (tmp5 + kx_x0)
    inc := (kx_x0 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add62) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][shr])
    ->(arrayidx) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    // compare instruction
    exitcond := (inc == tmp2 )
    $if exitcond $then  $place [ifx_xend_ifx_xthen101x_xloopexit] $else $place [ifx_xend_ifx_xend] $endif 
    //begin: basic-block ifx_xthen101x_xloopexit
    $merge ifx_xend_ifx_xthen101x_xloopexit
    $endmerge
    $place [ifx_xthen101x_xloopexit_ifx_xthen101]
    //begin: basic-block ifx_xthen101x_xloopexit7
    $merge ifx_xendx_xus123_ifx_xthen101x_xloopexit7
    $endmerge
    $place [ifx_xthen101x_xloopexit7_ifx_xthen101]
    //begin: basic-block ifx_xthen101x_xloopexit14
    $merge ifx_xendx_xus_ifx_xthen101x_xloopexit14
    $endmerge
    $place [ifx_xthen101x_xloopexit14_ifx_xthen101]
    //begin: basic-block ifx_xthen101x_xloopexit20
    $merge ifx_xendx_xusx_xus_ifx_xthen101x_xloopexit20
    $endmerge
    $place [ifx_xthen101x_xloopexit20_ifx_xthen101]
    //begin: basic-block ifx_xthen101
    $merge ifx_xthen101x_xloopexit_ifx_xthen101 ifx_xthen101x_xloopexit14_ifx_xthen101 ifx_xthen101x_xloopexit20_ifx_xthen101 ifx_xthen101x_xloopexit7_ifx_xthen101
    $endmerge
    inc103 := (jx_x0x_xph + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    div106 := (tmp4 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add109 := (div106 + mul24)
    // compare instruction
    cmp110 := (inc103 == add109 )
    inc115 := ($cast ($uint<32>) cmp110)
    inc115x_xix_x0 := (inc115 + ix_x0x_xph)
    $if cmp110 $then  $place [ifx_xthen101_ifx_xthen112] $else $place [ifx_xthen101_whilex_xcondx_xouterx_xbackedge] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xbackedge
    $merge ifx_xthen101_whilex_xcondx_xouterx_xbackedge ifx_xthen112_whilex_xcondx_xouterx_xbackedge
    $phi jx_x0x_xphx_xbe :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on ifx_xthen112_whilex_xcondx_xouterx_xbackedge ( $cast ($uint<32>) inc103) $on ifx_xthen101_whilex_xcondx_xouterx_xbackedge 
    $endmerge
    $place [whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter]
    //begin: basic-block ifx_xthen112
    $merge ifx_xthen101_ifx_xthen112
    $endmerge
    $place [ifx_xthen112_whilex_xcondx_xouterx_xbackedge]
    //begin: basic-block whilex_xendx_xsplit
    $merge whilex_xcondx_xouter_whilex_xendx_xsplit
    $endmerge
    $barrier 
    Block0_complete := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_B] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block1_starting
    $barrier 
    iNsTr_2 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    // load 
    tmp := ->(iNsTr_2) 
    div := (tmp >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    // load 
    tmp4 := pad
    conv := ($cast ($uint<32>) tmp4)
    iNsTr_3 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp6 := ->(iNsTr_3) 
    iNsTr_4 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp12 := ->(iNsTr_4) 
    iNsTr_5 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    // load 
    tmp14 := ->(iNsTr_5) 
    iNsTr_6 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ])
    // load 
    tmp26 := ->(iNsTr_6) 
    div27 := (tmp26 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    mul29 := (conv << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add := (div27 + mul29)
    sub := (conv + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    tmp21 := ($cast ($uint<32>) tmp4)
    tmp22 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  - tmp21)
    $place [entry_whilex_xcondx_xouter]
    //begin: basic-block whilex_xcondx_xouter
    $merge entry_whilex_xcondx_xouter whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter
    $phi jx_x0x_xph :=  ( $cast ($uint<32>) div) $on entry_whilex_xcondx_xouter ( $cast ($uint<32>) jx_x0x_xphx_xbe) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $phi ix_x0x_xph :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on entry_whilex_xcondx_xouter ( $cast ($uint<32>) inc118x_xix_x0) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $endmerge
    // compare instruction
    cmp := (ix_x0x_xph < add )
    // compare instruction
    cmp33 := ( ($bitcast ( $int<32>) ix_x0x_xph) >  ($bitcast ( $int<32>) sub ) )
    $if cmp $then  $place [whilex_xcondx_xouter_whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge] $else $place [whilex_xcondx_xouter_whilex_xendx_xsplit] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge
    $merge whilex_xcondx_xouter_whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge
    $endmerge
    // compare instruction
    cmp47 := ( ($bitcast ( $int<32>) jx_x0x_xph) >  ($bitcast ( $int<32>) sub ) )
    $if cmp47 $then  $place [whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xcondx_xouterx_xsplitx_xsplitx_xus] $else $place [whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge
    $merge whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge
    $endmerge
    $if cmp33 $then  $place [whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge_ifx_xendx_xus126x_xpreheader] $else $place [whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge_ifx_xendx_xpreheader] $endif 
    //begin: basic-block ifx_xendx_xus126x_xpreheader
    $merge whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge_ifx_xendx_xus126x_xpreheader
    $endmerge
    tmp8 := (tmp14 * ix_x0x_xph)
    tmp9 := (jx_x0x_xph + tmp8)
    tmp10 := (tmp12 * tmp9)
    $place [ifx_xendx_xus126x_xpreheader_ifx_xendx_xus126]
    //begin: basic-block ifx_xendx_xpreheader
    $merge whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge_ifx_xendx_xpreheader
    $endmerge
    tmp1 := (tmp14 * ix_x0x_xph)
    tmp2 := (jx_x0x_xph + tmp1)
    tmp3 := (tmp12 * tmp2)
    $place [ifx_xendx_xpreheader_ifx_xend]
    //begin: basic-block whilex_xcondx_xouterx_xsplitx_xsplitx_xus
    $merge whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xcondx_xouterx_xsplitx_xsplitx_xus
    $endmerge
    $if cmp33 $then  $place [whilex_xcondx_xouterx_xsplitx_xsplitx_xus_whilex_xcondx_xouterx_xsplitx_xsplitx_xusx_xsplitx_xus] $else $place [whilex_xcondx_xouterx_xsplitx_xsplitx_xus_ifx_xendx_xusx_xpreheader] $endif 
    //begin: basic-block ifx_xendx_xusx_xpreheader
    $merge whilex_xcondx_xouterx_xsplitx_xsplitx_xus_ifx_xendx_xusx_xpreheader
    $endmerge
    tmp15 := (tmp14 * ix_x0x_xph)
    tmp16 := (jx_x0x_xph + tmp15)
    tmp17 := (tmp12 * tmp16)
    $place [ifx_xendx_xusx_xpreheader_ifx_xendx_xus]
    //begin: basic-block whilex_xcondx_xouterx_xsplitx_xsplitx_xusx_xsplitx_xus
    $merge whilex_xcondx_xouterx_xsplitx_xsplitx_xus_whilex_xcondx_xouterx_xsplitx_xsplitx_xusx_xsplitx_xus
    $endmerge
    tmp23 := (tmp22 + jx_x0x_xph)
    tmp24 := (tmp22 + ix_x0x_xph)
    tmp25 := (tmp * tmp24)
    tmp27 := (tmp23 + tmp25)
    tmp28 := (tmp6 * tmp27)
    tmp30 := (tmp14 * ix_x0x_xph)
    tmp31 := (jx_x0x_xph + tmp30)
    tmp32 := (tmp12 * tmp31)
    $place [whilex_xcondx_xouterx_xsplitx_xsplitx_xusx_xsplitx_xus_lorx_xlhsx_xfalsex_xusx_xus]
    //begin: basic-block ifx_xendx_xusx_xus
    $merge ifx_xelsex_xusx_xus_ifx_xendx_xusx_xus ifx_xthenx_xusx_xus_ifx_xendx_xusx_xus
    $endmerge
    // compare instruction
    exitcond20 := (incx_xusx_xus == tmp6 )
    $if exitcond20 $then  $place [ifx_xendx_xusx_xus_ifx_xthen105x_xloopexit19] $else $place [ifx_xendx_xusx_xus_lorx_xlhsx_xfalsex_xusx_xus] $endif 
    //begin: basic-block ifx_xthenx_xusx_xus
    $merge lorx_xlhsx_xfalse49x_xusx_xus_ifx_xthenx_xusx_xus lorx_xlhsx_xfalsex_xusx_xus_ifx_xthenx_xusx_xus
    $endmerge
    shrx_xusx_xus :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add66x_xusx_xus) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    arrayidxx_xusx_xus := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][shrx_xusx_xus])
    ->(arrayidxx_xusx_xus) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    $place [ifx_xthenx_xusx_xus_ifx_xendx_xusx_xus]
    //begin: basic-block lorx_xlhsx_xfalse49x_xusx_xus
    $merge lorx_xlhsx_xfalsex_xusx_xus_lorx_xlhsx_xfalse49x_xusx_xus
    $endmerge
    sub54x_xusx_xus := (sub + tmp)
    // compare instruction
    cmp55x_xusx_xus := (jx_x0x_xph > sub54x_xusx_xus )
    $if cmp55x_xusx_xus $then  $place [lorx_xlhsx_xfalse49x_xusx_xus_ifx_xthenx_xusx_xus] $else $place [lorx_xlhsx_xfalse49x_xusx_xus_ifx_xelsex_xusx_xus] $endif 
    //begin: basic-block lorx_xlhsx_xfalsex_xusx_xus
    $merge ifx_xendx_xusx_xus_lorx_xlhsx_xfalsex_xusx_xus whilex_xcondx_xouterx_xsplitx_xsplitx_xusx_xsplitx_xus_lorx_xlhsx_xfalsex_xusx_xus
    $phi kx_x0x_xusx_xus :=  ( $cast ($uint<32>) incx_xusx_xus) $on ifx_xendx_xusx_xus_lorx_xlhsx_xfalsex_xusx_xus ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on whilex_xcondx_xouterx_xsplitx_xsplitx_xusx_xsplitx_xus_lorx_xlhsx_xfalsex_xusx_xus 
    $endmerge
    add81x_xusx_xus := (tmp28 + kx_x0x_xusx_xus)
    add66x_xusx_xus := (tmp32 + kx_x0x_xusx_xus)
    incx_xusx_xus := (kx_x0x_xusx_xus + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    div37x_xusx_xus := (tmp26 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    sub40x_xusx_xus := (sub + div37x_xusx_xus)
    // compare instruction
    cmp41x_xnotx_xusx_xus := (ix_x0x_xph > sub40x_xusx_xus )
    $if cmp41x_xnotx_xusx_xus $then  $place [lorx_xlhsx_xfalsex_xusx_xus_ifx_xthenx_xusx_xus] $else $place [lorx_xlhsx_xfalsex_xusx_xus_lorx_xlhsx_xfalse49x_xusx_xus] $endif 
    //begin: basic-block ifx_xelsex_xusx_xus
    $merge lorx_xlhsx_xfalse49x_xusx_xus_ifx_xelsex_xusx_xus
    $endmerge
    shr94x_xusx_xus :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add81x_xusx_xus) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    arrayidx95x_xusx_xus := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][shr94x_xusx_xus])
    // load 
    tmp96x_xusx_xus := ->(arrayidx95x_xusx_xus) 
    shr98x_xusx_xus :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add66x_xusx_xus) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    arrayidx99x_xusx_xus := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][shr98x_xusx_xus])
    ->(arrayidx99x_xusx_xus) := tmp96x_xusx_xus
    $place [ifx_xelsex_xusx_xus_ifx_xendx_xusx_xus]
    //begin: basic-block ifx_xendx_xus
    $merge ifx_xendx_xus_ifx_xendx_xus ifx_xendx_xusx_xpreheader_ifx_xendx_xus
    $phi kx_x0x_xus :=  ( $cast ($uint<32>) incx_xus) $on ifx_xendx_xus_ifx_xendx_xus ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on ifx_xendx_xusx_xpreheader_ifx_xendx_xus 
    $endmerge
    add66x_xus := (tmp17 + kx_x0x_xus)
    incx_xus := (kx_x0x_xus + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    shrx_xus :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add66x_xus) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    arrayidxx_xus := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][shrx_xus])
    ->(arrayidxx_xus) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    // compare instruction
    exitcond13 := (incx_xus == tmp6 )
    $if exitcond13 $then  $place [ifx_xendx_xus_ifx_xthen105x_xloopexit12] $else $place [ifx_xendx_xus_ifx_xendx_xus] $endif 
    //begin: basic-block ifx_xendx_xus126
    $merge ifx_xendx_xus126_ifx_xendx_xus126 ifx_xendx_xus126x_xpreheader_ifx_xendx_xus126
    $phi kx_x0x_xus125 :=  ( $cast ($uint<32>) incx_xus127) $on ifx_xendx_xus126_ifx_xendx_xus126 ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on ifx_xendx_xus126x_xpreheader_ifx_xendx_xus126 
    $endmerge
    add66x_xus131 := (tmp10 + kx_x0x_xus125)
    incx_xus127 := (kx_x0x_xus125 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    shrx_xus132 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add66x_xus131) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    arrayidxx_xus133 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][shrx_xus132])
    ->(arrayidxx_xus133) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    // compare instruction
    exitcond7 := (incx_xus127 == tmp6 )
    $if exitcond7 $then  $place [ifx_xendx_xus126_ifx_xthen105x_xloopexit6] $else $place [ifx_xendx_xus126_ifx_xendx_xus126] $endif 
    //begin: basic-block ifx_xend
    $merge ifx_xend_ifx_xend ifx_xendx_xpreheader_ifx_xend
    $phi kx_x0 :=  ( $cast ($uint<32>) inc) $on ifx_xend_ifx_xend ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on ifx_xendx_xpreheader_ifx_xend 
    $endmerge
    add66 := (tmp3 + kx_x0)
    inc := (kx_x0 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add66) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][shr])
    ->(arrayidx) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    // compare instruction
    exitcond := (inc == tmp6 )
    $if exitcond $then  $place [ifx_xend_ifx_xthen105x_xloopexit] $else $place [ifx_xend_ifx_xend] $endif 
    //begin: basic-block ifx_xthen105x_xloopexit
    $merge ifx_xend_ifx_xthen105x_xloopexit
    $endmerge
    $place [ifx_xthen105x_xloopexit_ifx_xthen105]
    //begin: basic-block ifx_xthen105x_xloopexit6
    $merge ifx_xendx_xus126_ifx_xthen105x_xloopexit6
    $endmerge
    $place [ifx_xthen105x_xloopexit6_ifx_xthen105]
    //begin: basic-block ifx_xthen105x_xloopexit12
    $merge ifx_xendx_xus_ifx_xthen105x_xloopexit12
    $endmerge
    $place [ifx_xthen105x_xloopexit12_ifx_xthen105]
    //begin: basic-block ifx_xthen105x_xloopexit19
    $merge ifx_xendx_xusx_xus_ifx_xthen105x_xloopexit19
    $endmerge
    $place [ifx_xthen105x_xloopexit19_ifx_xthen105]
    //begin: basic-block ifx_xthen105
    $merge ifx_xthen105x_xloopexit_ifx_xthen105 ifx_xthen105x_xloopexit12_ifx_xthen105 ifx_xthen105x_xloopexit19_ifx_xthen105 ifx_xthen105x_xloopexit6_ifx_xthen105
    $endmerge
    inc107 := (jx_x0x_xph + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add112 := (tmp + mul29)
    // compare instruction
    cmp113 := (inc107 == add112 )
    inc118 := ($cast ($uint<32>) cmp113)
    inc118x_xix_x0 := (inc118 + ix_x0x_xph)
    $if cmp113 $then  $place [ifx_xthen105_ifx_xthen115] $else $place [ifx_xthen105_whilex_xcondx_xouterx_xbackedge] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xbackedge
    $merge ifx_xthen105_whilex_xcondx_xouterx_xbackedge ifx_xthen115_whilex_xcondx_xouterx_xbackedge
    $phi jx_x0x_xphx_xbe :=  ( $cast ($uint<32>) div) $on ifx_xthen115_whilex_xcondx_xouterx_xbackedge ( $cast ($uint<32>) inc107) $on ifx_xthen105_whilex_xcondx_xouterx_xbackedge 
    $endmerge
    $place [whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter]
    //begin: basic-block ifx_xthen115
    $merge ifx_xthen105_ifx_xthen115
    $endmerge
    $place [ifx_xthen115_whilex_xcondx_xouterx_xbackedge]
    //begin: basic-block whilex_xendx_xsplit
    $merge whilex_xcondx_xouter_whilex_xendx_xsplit
    $endmerge
    $barrier 
    Block1_complete := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_C] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block2_starting
    $barrier 
    iNsTr_2 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ])
    // load 
    tmp := ->(iNsTr_2) 
    div := (tmp >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    // load 
    tmp2 := pad
    conv := ($cast ($uint<32>) tmp2)
    iNsTr_3 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp4 := ->(iNsTr_3) 
    iNsTr_4 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    // load 
    tmp6 := ->(iNsTr_4) 
    iNsTr_5 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp10 := ->(iNsTr_5) 
    iNsTr_6 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    // load 
    tmp12 := ->(iNsTr_6) 
    mul26 := (conv << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add := (tmp + mul26)
    sub := (conv + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    tmp24 := ($cast ($uint<32>) tmp2)
    tmp25 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  - tmp24)
    $place [entry_whilex_xcondx_xouter]
    //begin: basic-block whilex_xcondx_xouter
    $merge entry_whilex_xcondx_xouter whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter
    $phi jx_x0x_xph :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on entry_whilex_xcondx_xouter ( $cast ($uint<32>) jx_x0x_xphx_xbe) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $phi ix_x0x_xph :=  ( $cast ($uint<32>) div) $on entry_whilex_xcondx_xouter ( $cast ($uint<32>) inc116x_xix_x0) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $endmerge
    // compare instruction
    cmp := (ix_x0x_xph < add )
    // compare instruction
    cmp30 := ( ($bitcast ( $int<32>) ix_x0x_xph) >  ($bitcast ( $int<32>) sub ) )
    $if cmp $then  $place [whilex_xcondx_xouter_whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge] $else $place [whilex_xcondx_xouter_whilex_xendx_xsplit] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge
    $merge whilex_xcondx_xouter_whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge
    $endmerge
    // compare instruction
    cmp43 := ( ($bitcast ( $int<32>) jx_x0x_xph) >  ($bitcast ( $int<32>) sub ) )
    $if cmp43 $then  $place [whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xcondx_xouterx_xsplitx_xsplitx_xus] $else $place [whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge
    $merge whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge
    $endmerge
    $if cmp30 $then  $place [whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge_ifx_xendx_xus124x_xpreheader] $else $place [whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge_ifx_xendx_xpreheader] $endif 
    //begin: basic-block ifx_xendx_xus124x_xpreheader
    $merge whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge_ifx_xendx_xus124x_xpreheader
    $endmerge
    tmp11 := (tmp12 * ix_x0x_xph)
    tmp13 := (jx_x0x_xph + tmp11)
    tmp14 := (tmp10 * tmp13)
    $place [ifx_xendx_xus124x_xpreheader_ifx_xendx_xus124]
    //begin: basic-block ifx_xendx_xpreheader
    $merge whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge_ifx_xendx_xpreheader
    $endmerge
    tmp1 := (tmp12 * ix_x0x_xph)
    tmp3 := (jx_x0x_xph + tmp1)
    tmp5 := (tmp10 * tmp3)
    $place [ifx_xendx_xpreheader_ifx_xend]
    //begin: basic-block whilex_xcondx_xouterx_xsplitx_xsplitx_xus
    $merge whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xcondx_xouterx_xsplitx_xsplitx_xus
    $endmerge
    $if cmp30 $then  $place [whilex_xcondx_xouterx_xsplitx_xsplitx_xus_whilex_xcondx_xouterx_xsplitx_xsplitx_xusx_xsplitx_xus] $else $place [whilex_xcondx_xouterx_xsplitx_xsplitx_xus_ifx_xendx_xusx_xpreheader] $endif 
    //begin: basic-block ifx_xendx_xusx_xpreheader
    $merge whilex_xcondx_xouterx_xsplitx_xsplitx_xus_ifx_xendx_xusx_xpreheader
    $endmerge
    tmp18 := (tmp12 * ix_x0x_xph)
    tmp19 := (jx_x0x_xph + tmp18)
    tmp20 := (tmp10 * tmp19)
    $place [ifx_xendx_xusx_xpreheader_ifx_xendx_xus]
    //begin: basic-block whilex_xcondx_xouterx_xsplitx_xsplitx_xusx_xsplitx_xus
    $merge whilex_xcondx_xouterx_xsplitx_xsplitx_xus_whilex_xcondx_xouterx_xsplitx_xsplitx_xusx_xsplitx_xus
    $endmerge
    tmp26 := (tmp25 + jx_x0x_xph)
    tmp27 := (tmp25 + ix_x0x_xph)
    tmp28 := (tmp6 * tmp27)
    tmp29 := (tmp26 + tmp28)
    tmp30 := (tmp4 * tmp29)
    tmp32 := (tmp12 * ix_x0x_xph)
    tmp33 := (jx_x0x_xph + tmp32)
    tmp34 := (tmp10 * tmp33)
    $place [whilex_xcondx_xouterx_xsplitx_xsplitx_xusx_xsplitx_xus_lorx_xlhsx_xfalsex_xusx_xus]
    //begin: basic-block ifx_xendx_xusx_xus
    $merge ifx_xelsex_xusx_xus_ifx_xendx_xusx_xus ifx_xthenx_xusx_xus_ifx_xendx_xusx_xus
    $endmerge
    // compare instruction
    exitcond23 := (incx_xusx_xus == tmp4 )
    $if exitcond23 $then  $place [ifx_xendx_xusx_xus_ifx_xthen102x_xloopexit22] $else $place [ifx_xendx_xusx_xus_lorx_xlhsx_xfalsex_xusx_xus] $endif 
    //begin: basic-block ifx_xthenx_xusx_xus
    $merge lorx_xlhsx_xfalse45x_xusx_xus_ifx_xthenx_xusx_xus lorx_xlhsx_xfalsex_xusx_xus_ifx_xthenx_xusx_xus
    $endmerge
    shrx_xusx_xus :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add63x_xusx_xus) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    arrayidxx_xusx_xus := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][shrx_xusx_xus])
    ->(arrayidxx_xusx_xus) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    $place [ifx_xthenx_xusx_xus_ifx_xendx_xusx_xus]
    //begin: basic-block lorx_xlhsx_xfalse45x_xusx_xus
    $merge lorx_xlhsx_xfalsex_xusx_xus_lorx_xlhsx_xfalse45x_xusx_xus
    $endmerge
    div48x_xusx_xus := (tmp6 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    sub51x_xusx_xus := (sub + div48x_xusx_xus)
    // compare instruction
    cmp52x_xusx_xus := (jx_x0x_xph > sub51x_xusx_xus )
    $if cmp52x_xusx_xus $then  $place [lorx_xlhsx_xfalse45x_xusx_xus_ifx_xthenx_xusx_xus] $else $place [lorx_xlhsx_xfalse45x_xusx_xus_ifx_xelsex_xusx_xus] $endif 
    //begin: basic-block lorx_xlhsx_xfalsex_xusx_xus
    $merge ifx_xendx_xusx_xus_lorx_xlhsx_xfalsex_xusx_xus whilex_xcondx_xouterx_xsplitx_xsplitx_xusx_xsplitx_xus_lorx_xlhsx_xfalsex_xusx_xus
    $phi kx_x0x_xusx_xus :=  ( $cast ($uint<32>) incx_xusx_xus) $on ifx_xendx_xusx_xus_lorx_xlhsx_xfalsex_xusx_xus ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on whilex_xcondx_xouterx_xsplitx_xsplitx_xusx_xsplitx_xus_lorx_xlhsx_xfalsex_xusx_xus 
    $endmerge
    add78x_xusx_xus := (tmp30 + kx_x0x_xusx_xus)
    add63x_xusx_xus := (tmp34 + kx_x0x_xusx_xus)
    incx_xusx_xus := (kx_x0x_xusx_xus + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    sub36x_xusx_xus := (sub + tmp)
    // compare instruction
    cmp37x_xnotx_xusx_xus := (ix_x0x_xph > sub36x_xusx_xus )
    $if cmp37x_xnotx_xusx_xus $then  $place [lorx_xlhsx_xfalsex_xusx_xus_ifx_xthenx_xusx_xus] $else $place [lorx_xlhsx_xfalsex_xusx_xus_lorx_xlhsx_xfalse45x_xusx_xus] $endif 
    //begin: basic-block ifx_xelsex_xusx_xus
    $merge lorx_xlhsx_xfalse45x_xusx_xus_ifx_xelsex_xusx_xus
    $endmerge
    shr91x_xusx_xus :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add78x_xusx_xus) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    arrayidx92x_xusx_xus := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][shr91x_xusx_xus])
    // load 
    tmp93x_xusx_xus := ->(arrayidx92x_xusx_xus) 
    shr95x_xusx_xus :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add63x_xusx_xus) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    arrayidx96x_xusx_xus := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][shr95x_xusx_xus])
    ->(arrayidx96x_xusx_xus) := tmp93x_xusx_xus
    $place [ifx_xelsex_xusx_xus_ifx_xendx_xusx_xus]
    //begin: basic-block ifx_xendx_xus
    $merge ifx_xendx_xus_ifx_xendx_xus ifx_xendx_xusx_xpreheader_ifx_xendx_xus
    $phi kx_x0x_xus :=  ( $cast ($uint<32>) incx_xus) $on ifx_xendx_xus_ifx_xendx_xus ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on ifx_xendx_xusx_xpreheader_ifx_xendx_xus 
    $endmerge
    add63x_xus := (tmp20 + kx_x0x_xus)
    incx_xus := (kx_x0x_xus + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    shrx_xus :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add63x_xus) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    arrayidxx_xus := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][shrx_xus])
    ->(arrayidxx_xus) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    // compare instruction
    exitcond17 := (incx_xus == tmp4 )
    $if exitcond17 $then  $place [ifx_xendx_xus_ifx_xthen102x_xloopexit16] $else $place [ifx_xendx_xus_ifx_xendx_xus] $endif 
    //begin: basic-block ifx_xendx_xus124
    $merge ifx_xendx_xus124_ifx_xendx_xus124 ifx_xendx_xus124x_xpreheader_ifx_xendx_xus124
    $phi kx_x0x_xus123 :=  ( $cast ($uint<32>) incx_xus125) $on ifx_xendx_xus124_ifx_xendx_xus124 ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on ifx_xendx_xus124x_xpreheader_ifx_xendx_xus124 
    $endmerge
    add63x_xus129 := (tmp14 + kx_x0x_xus123)
    incx_xus125 := (kx_x0x_xus123 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    shrx_xus130 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add63x_xus129) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    arrayidxx_xus131 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][shrx_xus130])
    ->(arrayidxx_xus131) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    // compare instruction
    exitcond9 := (incx_xus125 == tmp4 )
    $if exitcond9 $then  $place [ifx_xendx_xus124_ifx_xthen102x_xloopexit8] $else $place [ifx_xendx_xus124_ifx_xendx_xus124] $endif 
    //begin: basic-block ifx_xend
    $merge ifx_xend_ifx_xend ifx_xendx_xpreheader_ifx_xend
    $phi kx_x0 :=  ( $cast ($uint<32>) inc) $on ifx_xend_ifx_xend ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on ifx_xendx_xpreheader_ifx_xend 
    $endmerge
    add63 := (tmp5 + kx_x0)
    inc := (kx_x0 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add63) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][shr])
    ->(arrayidx) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    // compare instruction
    exitcond := (inc == tmp4 )
    $if exitcond $then  $place [ifx_xend_ifx_xthen102x_xloopexit] $else $place [ifx_xend_ifx_xend] $endif 
    //begin: basic-block ifx_xthen102x_xloopexit
    $merge ifx_xend_ifx_xthen102x_xloopexit
    $endmerge
    $place [ifx_xthen102x_xloopexit_ifx_xthen102]
    //begin: basic-block ifx_xthen102x_xloopexit8
    $merge ifx_xendx_xus124_ifx_xthen102x_xloopexit8
    $endmerge
    $place [ifx_xthen102x_xloopexit8_ifx_xthen102]
    //begin: basic-block ifx_xthen102x_xloopexit16
    $merge ifx_xendx_xus_ifx_xthen102x_xloopexit16
    $endmerge
    $place [ifx_xthen102x_xloopexit16_ifx_xthen102]
    //begin: basic-block ifx_xthen102x_xloopexit22
    $merge ifx_xendx_xusx_xus_ifx_xthen102x_xloopexit22
    $endmerge
    $place [ifx_xthen102x_xloopexit22_ifx_xthen102]
    //begin: basic-block ifx_xthen102
    $merge ifx_xthen102x_xloopexit_ifx_xthen102 ifx_xthen102x_xloopexit16_ifx_xthen102 ifx_xthen102x_xloopexit22_ifx_xthen102 ifx_xthen102x_xloopexit8_ifx_xthen102
    $endmerge
    inc104 := (jx_x0x_xph + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    div107 := (tmp6 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add110 := (div107 + mul26)
    // compare instruction
    cmp111 := (inc104 == add110 )
    inc116 := ($cast ($uint<32>) cmp111)
    inc116x_xix_x0 := (inc116 + ix_x0x_xph)
    $if cmp111 $then  $place [ifx_xthen102_ifx_xthen113] $else $place [ifx_xthen102_whilex_xcondx_xouterx_xbackedge] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xbackedge
    $merge ifx_xthen102_whilex_xcondx_xouterx_xbackedge ifx_xthen113_whilex_xcondx_xouterx_xbackedge
    $phi jx_x0x_xphx_xbe :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on ifx_xthen113_whilex_xcondx_xouterx_xbackedge ( $cast ($uint<32>) inc104) $on ifx_xthen102_whilex_xcondx_xouterx_xbackedge 
    $endmerge
    $place [whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter]
    //begin: basic-block ifx_xthen113
    $merge ifx_xthen102_ifx_xthen113
    $endmerge
    $place [ifx_xthen113_whilex_xcondx_xouterx_xbackedge]
    //begin: basic-block whilex_xendx_xsplit
    $merge whilex_xcondx_xouter_whilex_xendx_xsplit
    $endmerge
    $barrier 
    Block2_complete := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_D] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block3_starting
    $barrier 
    iNsTr_2 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    // load 
    tmp := ->(iNsTr_2) 
    div := (tmp >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    iNsTr_3 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ])
    // load 
    tmp3 := ->(iNsTr_3) 
    div4 := (tmp3 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    // load 
    tmp6 := pad
    conv := ($cast ($uint<32>) tmp6)
    iNsTr_4 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp8 := ->(iNsTr_4) 
    iNsTr_5 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp14 := ->(iNsTr_5) 
    iNsTr_6 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    // load 
    tmp16 := ->(iNsTr_6) 
    mul30 := (conv << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add := (tmp3 + mul30)
    sub := (conv + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    tmp22 := ($cast ($uint<32>) tmp6)
    tmp23 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  - tmp22)
    $place [entry_whilex_xcondx_xouter]
    //begin: basic-block whilex_xcondx_xouter
    $merge entry_whilex_xcondx_xouter whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter
    $phi jx_x0x_xph :=  ( $cast ($uint<32>) div) $on entry_whilex_xcondx_xouter ( $cast ($uint<32>) jx_x0x_xphx_xbe) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $phi ix_x0x_xph :=  ( $cast ($uint<32>) div4) $on entry_whilex_xcondx_xouter ( $cast ($uint<32>) inc118x_xix_x0) $on whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter 
    $endmerge
    // compare instruction
    cmp := (ix_x0x_xph < add )
    // compare instruction
    cmp34 := ( ($bitcast ( $int<32>) ix_x0x_xph) >  ($bitcast ( $int<32>) sub ) )
    $if cmp $then  $place [whilex_xcondx_xouter_whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge] $else $place [whilex_xcondx_xouter_whilex_xendx_xsplit] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge
    $merge whilex_xcondx_xouter_whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge
    $endmerge
    // compare instruction
    cmp47 := ( ($bitcast ( $int<32>) jx_x0x_xph) >  ($bitcast ( $int<32>) sub ) )
    $if cmp47 $then  $place [whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xcondx_xouterx_xsplitx_xsplitx_xus] $else $place [whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge
    $merge whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge
    $endmerge
    $if cmp34 $then  $place [whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge_ifx_xendx_xus126x_xpreheader] $else $place [whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge_ifx_xendx_xpreheader] $endif 
    //begin: basic-block ifx_xendx_xus126x_xpreheader
    $merge whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge_ifx_xendx_xus126x_xpreheader
    $endmerge
    tmp9 := (tmp16 * ix_x0x_xph)
    tmp10 := (jx_x0x_xph + tmp9)
    tmp11 := (tmp14 * tmp10)
    $place [ifx_xendx_xus126x_xpreheader_ifx_xendx_xus126]
    //begin: basic-block ifx_xendx_xpreheader
    $merge whilex_xcondx_xouterx_xsplitx_xwhilex_xcondx_xouterx_xsplitx_xsplit_crit_edge_ifx_xendx_xpreheader
    $endmerge
    tmp1 := (tmp16 * ix_x0x_xph)
    tmp2 := (jx_x0x_xph + tmp1)
    tmp4 := (tmp14 * tmp2)
    $place [ifx_xendx_xpreheader_ifx_xend]
    //begin: basic-block whilex_xcondx_xouterx_xsplitx_xsplitx_xus
    $merge whilex_xcondx_xouterx_xwhilex_xcondx_xouterx_xsplit_crit_edge_whilex_xcondx_xouterx_xsplitx_xsplitx_xus
    $endmerge
    $if cmp34 $then  $place [whilex_xcondx_xouterx_xsplitx_xsplitx_xus_whilex_xcondx_xouterx_xsplitx_xsplitx_xusx_xsplitx_xus] $else $place [whilex_xcondx_xouterx_xsplitx_xsplitx_xus_ifx_xendx_xusx_xpreheader] $endif 
    //begin: basic-block ifx_xendx_xusx_xpreheader
    $merge whilex_xcondx_xouterx_xsplitx_xsplitx_xus_ifx_xendx_xusx_xpreheader
    $endmerge
    tmp15 := (tmp16 * ix_x0x_xph)
    tmp17 := (jx_x0x_xph + tmp15)
    tmp18 := (tmp14 * tmp17)
    $place [ifx_xendx_xusx_xpreheader_ifx_xendx_xus]
    //begin: basic-block whilex_xcondx_xouterx_xsplitx_xsplitx_xusx_xsplitx_xus
    $merge whilex_xcondx_xouterx_xsplitx_xsplitx_xus_whilex_xcondx_xouterx_xsplitx_xsplitx_xusx_xsplitx_xus
    $endmerge
    tmp24 := (tmp23 + jx_x0x_xph)
    tmp25 := (tmp23 + ix_x0x_xph)
    tmp26 := (tmp * tmp25)
    tmp27 := (tmp24 + tmp26)
    tmp28 := (tmp8 * tmp27)
    tmp30 := (tmp16 * ix_x0x_xph)
    tmp31 := (jx_x0x_xph + tmp30)
    tmp32 := (tmp14 * tmp31)
    $place [whilex_xcondx_xouterx_xsplitx_xsplitx_xusx_xsplitx_xus_lorx_xlhsx_xfalsex_xusx_xus]
    //begin: basic-block ifx_xendx_xusx_xus
    $merge ifx_xelsex_xusx_xus_ifx_xendx_xusx_xus ifx_xthenx_xusx_xus_ifx_xendx_xusx_xus
    $endmerge
    // compare instruction
    exitcond21 := (incx_xusx_xus == tmp8 )
    $if exitcond21 $then  $place [ifx_xendx_xusx_xus_ifx_xthen105x_xloopexit20] $else $place [ifx_xendx_xusx_xus_lorx_xlhsx_xfalsex_xusx_xus] $endif 
    //begin: basic-block ifx_xthenx_xusx_xus
    $merge lorx_xlhsx_xfalse49x_xusx_xus_ifx_xthenx_xusx_xus lorx_xlhsx_xfalsex_xusx_xus_ifx_xthenx_xusx_xus
    $endmerge
    shrx_xusx_xus :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add66x_xusx_xus) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    arrayidxx_xusx_xus := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][shrx_xusx_xus])
    ->(arrayidxx_xusx_xus) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    $place [ifx_xthenx_xusx_xus_ifx_xendx_xusx_xus]
    //begin: basic-block lorx_xlhsx_xfalse49x_xusx_xus
    $merge lorx_xlhsx_xfalsex_xusx_xus_lorx_xlhsx_xfalse49x_xusx_xus
    $endmerge
    sub54x_xusx_xus := (sub + tmp)
    // compare instruction
    cmp55x_xusx_xus := (jx_x0x_xph > sub54x_xusx_xus )
    $if cmp55x_xusx_xus $then  $place [lorx_xlhsx_xfalse49x_xusx_xus_ifx_xthenx_xusx_xus] $else $place [lorx_xlhsx_xfalse49x_xusx_xus_ifx_xelsex_xusx_xus] $endif 
    //begin: basic-block lorx_xlhsx_xfalsex_xusx_xus
    $merge ifx_xendx_xusx_xus_lorx_xlhsx_xfalsex_xusx_xus whilex_xcondx_xouterx_xsplitx_xsplitx_xusx_xsplitx_xus_lorx_xlhsx_xfalsex_xusx_xus
    $phi kx_x0x_xusx_xus :=  ( $cast ($uint<32>) incx_xusx_xus) $on ifx_xendx_xusx_xus_lorx_xlhsx_xfalsex_xusx_xus ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on whilex_xcondx_xouterx_xsplitx_xsplitx_xusx_xsplitx_xus_lorx_xlhsx_xfalsex_xusx_xus 
    $endmerge
    add81x_xusx_xus := (tmp28 + kx_x0x_xusx_xus)
    add66x_xusx_xus := (tmp32 + kx_x0x_xusx_xus)
    incx_xusx_xus := (kx_x0x_xusx_xus + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    sub40x_xusx_xus := (sub + tmp3)
    // compare instruction
    cmp41x_xnotx_xusx_xus := (ix_x0x_xph > sub40x_xusx_xus )
    $if cmp41x_xnotx_xusx_xus $then  $place [lorx_xlhsx_xfalsex_xusx_xus_ifx_xthenx_xusx_xus] $else $place [lorx_xlhsx_xfalsex_xusx_xus_lorx_xlhsx_xfalse49x_xusx_xus] $endif 
    //begin: basic-block ifx_xelsex_xusx_xus
    $merge lorx_xlhsx_xfalse49x_xusx_xus_ifx_xelsex_xusx_xus
    $endmerge
    shr94x_xusx_xus :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add81x_xusx_xus) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    arrayidx95x_xusx_xus := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][shr94x_xusx_xus])
    // load 
    tmp96x_xusx_xus := ->(arrayidx95x_xusx_xus) 
    shr98x_xusx_xus :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add66x_xusx_xus) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    arrayidx99x_xusx_xus := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][shr98x_xusx_xus])
    ->(arrayidx99x_xusx_xus) := tmp96x_xusx_xus
    $place [ifx_xelsex_xusx_xus_ifx_xendx_xusx_xus]
    //begin: basic-block ifx_xendx_xus
    $merge ifx_xendx_xus_ifx_xendx_xus ifx_xendx_xusx_xpreheader_ifx_xendx_xus
    $phi kx_x0x_xus :=  ( $cast ($uint<32>) incx_xus) $on ifx_xendx_xus_ifx_xendx_xus ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on ifx_xendx_xusx_xpreheader_ifx_xendx_xus 
    $endmerge
    add66x_xus := (tmp18 + kx_x0x_xus)
    incx_xus := (kx_x0x_xus + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    shrx_xus :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add66x_xus) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    arrayidxx_xus := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][shrx_xus])
    ->(arrayidxx_xus) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    // compare instruction
    exitcond14 := (incx_xus == tmp8 )
    $if exitcond14 $then  $place [ifx_xendx_xus_ifx_xthen105x_xloopexit13] $else $place [ifx_xendx_xus_ifx_xendx_xus] $endif 
    //begin: basic-block ifx_xendx_xus126
    $merge ifx_xendx_xus126_ifx_xendx_xus126 ifx_xendx_xus126x_xpreheader_ifx_xendx_xus126
    $phi kx_x0x_xus125 :=  ( $cast ($uint<32>) incx_xus127) $on ifx_xendx_xus126_ifx_xendx_xus126 ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on ifx_xendx_xus126x_xpreheader_ifx_xendx_xus126 
    $endmerge
    add66x_xus131 := (tmp11 + kx_x0x_xus125)
    incx_xus127 := (kx_x0x_xus125 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    shrx_xus132 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add66x_xus131) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    arrayidxx_xus133 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][shrx_xus132])
    ->(arrayidxx_xus133) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    // compare instruction
    exitcond7 := (incx_xus127 == tmp8 )
    $if exitcond7 $then  $place [ifx_xendx_xus126_ifx_xthen105x_xloopexit6] $else $place [ifx_xendx_xus126_ifx_xendx_xus126] $endif 
    //begin: basic-block ifx_xend
    $merge ifx_xend_ifx_xend ifx_xendx_xpreheader_ifx_xend
    $phi kx_x0 :=  ( $cast ($uint<32>) inc) $on ifx_xend_ifx_xend ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on ifx_xendx_xpreheader_ifx_xend 
    $endmerge
    add66 := (tmp4 + kx_x0)
    inc := (kx_x0 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add66) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][shr])
    ->(arrayidx) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    // compare instruction
    exitcond := (inc == tmp8 )
    $if exitcond $then  $place [ifx_xend_ifx_xthen105x_xloopexit] $else $place [ifx_xend_ifx_xend] $endif 
    //begin: basic-block ifx_xthen105x_xloopexit
    $merge ifx_xend_ifx_xthen105x_xloopexit
    $endmerge
    $place [ifx_xthen105x_xloopexit_ifx_xthen105]
    //begin: basic-block ifx_xthen105x_xloopexit6
    $merge ifx_xendx_xus126_ifx_xthen105x_xloopexit6
    $endmerge
    $place [ifx_xthen105x_xloopexit6_ifx_xthen105]
    //begin: basic-block ifx_xthen105x_xloopexit13
    $merge ifx_xendx_xus_ifx_xthen105x_xloopexit13
    $endmerge
    $place [ifx_xthen105x_xloopexit13_ifx_xthen105]
    //begin: basic-block ifx_xthen105x_xloopexit20
    $merge ifx_xendx_xusx_xus_ifx_xthen105x_xloopexit20
    $endmerge
    $place [ifx_xthen105x_xloopexit20_ifx_xthen105]
    //begin: basic-block ifx_xthen105
    $merge ifx_xthen105x_xloopexit_ifx_xthen105 ifx_xthen105x_xloopexit13_ifx_xthen105 ifx_xthen105x_xloopexit20_ifx_xthen105 ifx_xthen105x_xloopexit6_ifx_xthen105
    $endmerge
    inc107 := (jx_x0x_xph + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add112 := (tmp + mul30)
    // compare instruction
    cmp113 := (inc107 == add112 )
    inc118 := ($cast ($uint<32>) cmp113)
    inc118x_xix_x0 := (inc118 + ix_x0x_xph)
    $if cmp113 $then  $place [ifx_xthen105_ifx_xthen115] $else $place [ifx_xthen105_whilex_xcondx_xouterx_xbackedge] $endif 
    //begin: basic-block whilex_xcondx_xouterx_xbackedge
    $merge ifx_xthen105_whilex_xcondx_xouterx_xbackedge ifx_xthen115_whilex_xcondx_xouterx_xbackedge
    $phi jx_x0x_xphx_xbe :=  ( $cast ($uint<32>) div) $on ifx_xthen115_whilex_xcondx_xouterx_xbackedge ( $cast ($uint<32>) inc107) $on ifx_xthen105_whilex_xcondx_xouterx_xbackedge 
    $endmerge
    $place [whilex_xcondx_xouterx_xbackedge_whilex_xcondx_xouter]
    //begin: basic-block ifx_xthen115
    $merge ifx_xthen105_ifx_xthen115
    $endmerge
    $place [ifx_xthen115_whilex_xcondx_xouterx_xbackedge]
    //begin: basic-block whilex_xendx_xsplit
    $merge whilex_xcondx_xouter_whilex_xendx_xsplit
    $endmerge
    $barrier 
    Block3_complete := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    $call testConfigure ()  (call)
    $barrier 
    $call timer ()  (call1)
    conv :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) call1) )
    Block0_starting := call
    Block1_starting := call
    Block2_starting := call
    Block3_starting := call
    call6 := Block0_complete
    call8 := Block1_complete
    call10 := Block2_complete
    call12 := Block3_complete
    $barrier 
    $call timer ()  (call14)
    conv15 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) call14) )
    sub := (conv15 - conv)
    elapsed_time_pipe := sub
    $barrier 
    $call sendOutput ()  ()
    $place [return__]
    $merge return__ $endmerge
  }
}
