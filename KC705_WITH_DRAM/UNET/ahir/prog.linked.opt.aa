$record [structx_x__SizedTensor_128K]  < $array[131072] $of $uint<64> > 
$record [structx_x__SizedTensor_16K]  < $array[16384] $of $uint<64> > 
$record [structx_x__SizedTensor_1M]  < $array[1048576] $of $uint<64> > 
$record [structx_x__SizedTensor_256K]  < $array[262144] $of $uint<64> > 
$record [structx_x__SizedTensor_32K]  < $array[32768] $of $uint<64> > 
$record [structx_x__SizedTensor_512]  < $array[512] $of $uint<64> > 
$record [structx_x__SizedTensor_512K]  < $array[524288] $of $uint<64> > 
$record [structx_x__SizedTensor_64K]  < $array[65536] $of $uint<64> > 
$record [structx_x__SizedTensor_8K]  < $array[8192] $of $uint<64> > 
$pipe  MAIN_MEM_REQUEST : $uint<110>  $depth 16 
// can point into  foreign( $void )
$pipe  MAIN_MEM_RESPONSE : $uint<65>  $depth 16 
// can point into 
$pipe  acc_pipe1 : $uint<16>  $depth 4 
// can point into 
$pipe  acc_pipe1_1 : $uint<16>  $depth 2 
// can point into 
$pipe  acc_pipe1_2 : $uint<16>  $depth 2 
// can point into 
$pipe  acc_pipe1_3 : $uint<16>  $depth 2 
// can point into 
$pipe  acc_pipe1_4 : $uint<16>  $depth 2 
// can point into 
$pipe  acc_pipe1_5 : $uint<16>  $depth 2 
// can point into 
$pipe  acc_pipe1_6 : $uint<16>  $depth 2 
// can point into 
$pipe  acc_pipe1_7 : $uint<16>  $depth 2 
// can point into 
$pipe  acc_pipe1_8 : $uint<16>  $depth 2 
// can point into 
$pipe  acc_pipe2 : $uint<16>  $depth 4 
// can point into 
$pipe  acc_pipe2_1 : $uint<16>  $depth 2 
// can point into 
$pipe  acc_pipe2_2 : $uint<16>  $depth 2 
// can point into 
$pipe  acc_pipe2_3 : $uint<16>  $depth 2 
// can point into 
$pipe  acc_pipe2_4 : $uint<16>  $depth 2 
// can point into 
$pipe  acc_pipe2_5 : $uint<16>  $depth 2 
// can point into 
$pipe  acc_pipe2_6 : $uint<16>  $depth 2 
// can point into 
$pipe  acc_pipe2_7 : $uint<16>  $depth 2 
// can point into 
$pipe  acc_pipe2_8 : $uint<16>  $depth 2 
// can point into 
$pipe  conv1_kp1 : $uint<64>  $depth 256 
// can point into 
$pipe  conv1_kp2 : $uint<64>  $depth 256 
// can point into 
$pipe  conv1_kp3 : $uint<64>  $depth 256 
// can point into 
$pipe  conv2_kp1 : $uint<64>  $depth 256 
// can point into 
$pipe  conv2_kp2 : $uint<64>  $depth 256 
// can point into 
$pipe  conv2_kp3 : $uint<64>  $depth 256 
// can point into 
$pipe  conv3_kp1 : $uint<64>  $depth 256 
// can point into 
$pipe  conv3_kp2 : $uint<64>  $depth 256 
// can point into 
$pipe  conv3_kp3 : $uint<64>  $depth 256 
// can point into 
$pipe  conv4_kp1 : $uint<64>  $depth 256 
// can point into 
$pipe  conv4_kp2 : $uint<64>  $depth 256 
// can point into 
$pipe  conv4_kp3 : $uint<64>  $depth 256 
// can point into 
$pipe  conv5_kp1 : $uint<64>  $depth 256 
// can point into 
$pipe  conv5_kp2 : $uint<64>  $depth 256 
// can point into 
$pipe  conv5_kp3 : $uint<64>  $depth 256 
// can point into 
$pipe  conv6_kp1 : $uint<64>  $depth 256 
// can point into 
$pipe  conv6_kp2 : $uint<64>  $depth 256 
// can point into 
$pipe  conv6_kp3 : $uint<64>  $depth 256 
// can point into 
$pipe  conv7_kp1 : $uint<64>  $depth 256 
// can point into 
$pipe  conv7_kp2 : $uint<64>  $depth 256 
// can point into 
$pipe  conv7_kp3 : $uint<64>  $depth 256 
// can point into 
$pipe  conv8_kp1 : $uint<64>  $depth 256 
// can point into 
$pipe  conv8_kp2 : $uint<64>  $depth 256 
// can point into 
$pipe  conv8_kp3 : $uint<64>  $depth 256 
// can point into 
$pipe  conv_ip1 : $uint<64>  $depth 128 
// can point into 
$pipe  conv_ip2 : $uint<64>  $depth 128 
// can point into 
$pipe  conv_ip3 : $uint<64>  $depth 128 
// can point into 
$pipe  conv_ip4 : $uint<64>  $depth 128 
// can point into 
$pipe  conv_ip_generic1 : $uint<8>  $depth 2048 
// can point into 
$pipe  conv_ip_generic2 : $uint<8>  $depth 2048 
// can point into 
$pipe  conv_ip_generic3 : $uint<8>  $depth 2048 
// can point into 
$pipe  conv_ip_generic4 : $uint<8>  $depth 2048 
// can point into 
$pipe  conv_kp1 : $uint<8>  $depth 2048 
// can point into 
$pipe  conv_kp2 : $uint<8>  $depth 2048 
// can point into 
$pipe  conv_kp3 : $uint<8>  $depth 2048 
// can point into 
$pipe  core1_kp1 : $uint<64>  $depth 4 
// can point into 
$pipe  core1_kp2 : $uint<64>  $depth 4 
// can point into 
$pipe  core1_kp3 : $uint<64>  $depth 4 
// can point into 
$pipe  core2_kp1 : $uint<64>  $depth 4 
// can point into 
$pipe  core2_kp2 : $uint<64>  $depth 4 
// can point into 
$pipe  core2_kp3 : $uint<64>  $depth 4 
// can point into 
$pipe  core3_kp1 : $uint<64>  $depth 4 
// can point into 
$pipe  core3_kp2 : $uint<64>  $depth 4 
// can point into 
$pipe  core3_kp3 : $uint<64>  $depth 4 
// can point into 
$pipe  core4_kp1 : $uint<64>  $depth 4 
// can point into 
$pipe  core4_kp2 : $uint<64>  $depth 4 
// can point into 
$pipe  core4_kp3 : $uint<64>  $depth 4 
// can point into 
$pipe  core5_kp1 : $uint<64>  $depth 4 
// can point into 
$pipe  core5_kp2 : $uint<64>  $depth 4 
// can point into 
$pipe  core5_kp3 : $uint<64>  $depth 4 
// can point into 
$pipe  core6_kp1 : $uint<64>  $depth 4 
// can point into 
$pipe  core6_kp2 : $uint<64>  $depth 4 
// can point into 
$pipe  core6_kp3 : $uint<64>  $depth 4 
// can point into 
$pipe  core7_kp1 : $uint<64>  $depth 4 
// can point into 
$pipe  core7_kp2 : $uint<64>  $depth 4 
// can point into 
$pipe  core7_kp3 : $uint<64>  $depth 4 
// can point into 
$pipe  core8_kp1 : $uint<64>  $depth 4 
// can point into 
$pipe  core8_kp2 : $uint<64>  $depth 4 
// can point into 
$pipe  core8_kp3 : $uint<64>  $depth 4 
// can point into 
$pipe  core_ip1 : $uint<64>  $depth 4 
// can point into 
$pipe  core_ip2 : $uint<64>  $depth 4 
// can point into 
$pipe  core_ip3 : $uint<64>  $depth 4 
// can point into 
$pipe  core_ip4 : $uint<64>  $depth 4 
// can point into 
$pipe  core_ip_generic1 : $uint<8>  $depth 16 
// can point into 
$pipe  core_ip_generic2 : $uint<8>  $depth 16 
// can point into 
$pipe  core_ip_generic3 : $uint<8>  $depth 16 
// can point into 
$pipe  core_ip_generic4 : $uint<8>  $depth 16 
// can point into 
$pipe  core_kp1 : $uint<8>  $depth 16 
// can point into 
$pipe  core_kp2 : $uint<8>  $depth 16 
// can point into 
$pipe  core_kp3 : $uint<8>  $depth 16 
// can point into 
$pipe  output_pipe1 : $uint<16>  $depth 4 
// can point into 
$pipe  output_pipe1_1 : $uint<16>  $depth 2 
// can point into 
$pipe  output_pipe1_2 : $uint<16>  $depth 2 
// can point into 
$pipe  output_pipe2 : $uint<16>  $depth 4 
// can point into 
$pipe  output_pipe2_1 : $uint<16>  $depth 2 
// can point into 
$pipe  output_pipe2_2 : $uint<16>  $depth 2 
// can point into 
$pipe  output_pipe3_1 : $uint<16>  $depth 2 
// can point into 
$pipe  output_pipe3_2 : $uint<16>  $depth 2 
// can point into 
$pipe  output_pipe4_1 : $uint<16>  $depth 2 
// can point into 
$pipe  output_pipe4_2 : $uint<16>  $depth 2 
// can point into 
$pipe  output_pipe5_1 : $uint<16>  $depth 2 
// can point into 
$pipe  output_pipe5_2 : $uint<16>  $depth 2 
// can point into 
$pipe  output_pipe6_1 : $uint<16>  $depth 2 
// can point into 
$pipe  output_pipe6_2 : $uint<16>  $depth 2 
// can point into 
$pipe  output_pipe7_1 : $uint<16>  $depth 2 
// can point into 
$pipe  output_pipe7_2 : $uint<16>  $depth 2 
// can point into 
$pipe  output_pipe8_1 : $uint<16>  $depth 2 
// can point into 
$pipe  output_pipe8_2 : $uint<16>  $depth 2 
// can point into 
$pipe  system_input_pipe : $uint<8>  $depth 1 
// can point into 
$pipe  system_output_pipe : $uint<8>  $depth 1 
// can point into  foreign( $void )
$noblock $pipe  timer_req : $uint<1>  $depth 1 
// can point into 
$pipe  timer_resp : $uint<64>  $depth 1 
// can point into 
$module [acc_generic]
$in ( chl_in : $uint<16>   ck : $uint<16>   op_size : $uint<32>  )
$out ()
$is
{
  $branchblock [acc_blk]
  {
    $volatile acc_count := ((chl_in * ck) - 1 ) $buffering 1
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi acc1_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val1_1 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc1_2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val1_2 )  $on   $loopback 
    // type of target is $uint<16>
    $phi c_count := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nc_count $on   $loopback 
    // type of target is $uint<16>
    $phi op_count := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nop_count $on   $loopback 
    // type of target is $uint<32>
    $phi t1 := 			  acc_pipe1 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi r1 := 			  acc_pipe2 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $endmerge
    $volatile num_done := (c_count == acc_count) $buffering 1
    $volatile nc_count := ( $mux num_done 0   (c_count + 1 ) )  $buffering 1
    $volatile nop_count := ( $mux num_done (op_count + 1 )  op_count )  $buffering 1
    $volatile acc_val1_1 := (acc1_1 + t1) $buffering 1
    $volatile acc_val1_2 := (acc1_2 + r1) $buffering 1
    $guard (num_done) output_pipe1 := acc_val1_1 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe2 := acc_val1_2 $buffering 1// bits of buffering = 16. 
    $while (nop_count < op_size)
  }
}
$pipeline $depth 15 $buffering 1 $fullrate $module [memoryModule]
$in ( r_wbar : $uint<1>   addr : $uint<32>   data_in : $uint<64>  )
$out ( data_out : $uint<64>  )
$is
{
  MAIN_MEM_REQUEST := (((($bitcast ($uint<1>) _b0  ) && r_wbar) && ($bitcast ($uint<8>) _b1  )) && ((($bitcast ($uint<4>) _b0  ) && addr) && data_in)) $buffering 1// bits of buffering = 110. 
  error := ( $slice MAIN_MEM_RESPONSE 64 64 )  $buffering 1// bits of buffering = 1. 
  data_out := ( $slice MAIN_MEM_RESPONSE 63 0 )  $buffering 1// bits of buffering = 64. 
  $attribute delay 4
}
$pipeline $depth 7 $buffering 1 $fullrate $opaque $module [readModule_convolution]
$in ( index : $uint<8>   address : $uint<32>  )
$out ( data : $uint<64>  )
$is
{
  $volatile cnd1 := (index == 0 ) $buffering 1
  $volatile cnd2 := (index == 1 ) $buffering 1
  $guard (cnd1) $call memoryModule (1  (0  + address) 0  ) (val1 ) 
  $guard (cnd2) $call memoryModule (1  (0  + address) 0  ) (val2 ) 
  cnd1_291_delayed_4_0 := cnd1 $buffering 4 $cut_through // bits of buffering = 4. 
  data := ( $mux cnd1_291_delayed_4_0 val1  val2 )  $buffering 1// bits of buffering = 64. 
  $attribute delay 7
}
$module [access_T]
$in ( row_in : $uint<16>   ct : $uint<16>   chl_in : $uint<16>   chl_out : $uint<16>   rk : $uint<16>   index : $uint<8>  )
$out ()
$is
{
  $branchblock [access_block]
  {
    $volatile m_factor := ($bitcast ($uint<32>) (ct * chl_in) ) $buffering 1
    $volatile m2_factor := (m_factor << 1 ) $buffering 1
    $volatile m3_factor := (m2_factor + m_factor) $buffering 1
    $volatile mode_3 := (rk == 3 ) $buffering 1
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi address := 			  0  $on   $entry 			  n_address $on   $loopback 
    // type of target is $uint<32>
    $phi row1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  n_row1 $on   $loopback 
    // type of target is $uint<16>
    $phi chl_num := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  n_chl_num $on   $loopback 
    // type of target is $uint<16>
    $phi mycounter := 			  ($bitcast ($uint<32>) 1  ) $on   $entry 			  n_mycounter $on   $loopback 
    // type of target is $uint<32>
    $endmerge
    $volatile next_row := (mycounter == m_factor) $buffering 1
    $volatile tmp_cnt := (mycounter + 1 ) $buffering 1
    $volatile n_mycounter := ( $mux next_row 1   tmp_cnt )  $buffering 1
    $volatile update_row := ( $mux next_row (row1 + 2 )  row1 )  $buffering 1
    $volatile continue_flag1 := (update_row < row_in) $buffering 1
    $volatile n_row1 := ( $mux continue_flag1 update_row  0  )  $buffering 1
    $volatile n_address := ( $mux continue_flag1 ((address + 1 ) + ( $mux next_row m_factor  0  ) )  0  )  $buffering 1
    $call readModule_convolution (index address ) (core_ip1 ) 
    type_cast_403_403_delayed_1_0 := ($bitcast ($uint<32>) m_factor ) $buffering 1 $cut_through // bits of buffering = 32. 
    $call readModule_convolution (index (address + type_cast_403_403_delayed_1_0) ) (core_ip2 ) 
    type_cast_410_410_delayed_1_0 := ($bitcast ($uint<32>) m2_factor ) $buffering 1 $cut_through // bits of buffering = 32. 
    $call readModule_convolution (index (address + type_cast_410_410_delayed_1_0) ) (core_ip3 ) 
    type_cast_418_418_delayed_1_0 := ($bitcast ($uint<32>) m3_factor ) $buffering 1 $cut_through // bits of buffering = 32. 
    $guard (mode_3) $call readModule_convolution (index (address + type_cast_418_418_delayed_1_0) ) (core_ip4 ) 
    $volatile n_chl_num := ( $mux continue_flag1 chl_num  (chl_num + 1 ) )  $buffering 1
    $volatile not_end_flag := ((n_chl_num != chl_out) | continue_flag1) $buffering 1
    $while not_end_flag
  }
}
$module [accumulator]
$in ( chl_in : $uint<16>   ck : $uint<16>   op_size : $uint<32>  )
$out ()
$is
{
  $branchblock [acc_blk]
  {
    $volatile acc_count := ((chl_in * ck) - 1 ) $buffering 1
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi acc1_1 := 			  ( $mux num_done 0   acc_val1_1 )  $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    $phi acc1_2 := 			  ( $mux num_done 0   acc_val1_2 )  $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    $phi acc2_1 := 			  ( $mux num_done 0   acc_val2_1 )  $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    $phi acc2_2 := 			  ( $mux num_done 0   acc_val2_2 )  $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    $phi acc3_1 := 			  ( $mux num_done 0   acc_val3_1 )  $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    $phi acc3_2 := 			  ( $mux num_done 0   acc_val3_2 )  $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    $phi acc4_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val4_1 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc4_2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val4_2 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc5_1 := 			  ( $mux num_done 0   acc_val5_1 )  $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    $phi acc5_2 := 			  ( $mux num_done 0   acc_val5_2 )  $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    $phi acc6_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val6_1 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc6_2 := 			  ( $mux num_done 0   acc_val6_2 )  $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    $phi acc7_1 := 			  ( $mux num_done 0   acc_val7_1 )  $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    $phi acc7_2 := 			  ( $mux num_done 0   acc_val7_2 )  $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    $phi acc8_1 := 			  ( $mux num_done 0   acc_val8_1 )  $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    $phi acc8_2 := 			  ( $mux num_done 0   acc_val8_2 )  $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    $phi c_count := 			  nc_count $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    $phi op_count := 			  nop_count $on   $loopback 			  ($bitcast ($uint<32>) 0  ) $on   $entry 
    // type of target is $uint<32>
    $phi t1 := 			  acc_pipe1_1 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi t2 := 			  acc_pipe1_2 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi t3 := 			  acc_pipe1_3 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi t4 := 			  acc_pipe1_4 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi t5 := 			  acc_pipe1_5 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi t6 := 			  acc_pipe1_6 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi t7 := 			  acc_pipe1_7 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi t8 := 			  acc_pipe1_8 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi r1 := 			  acc_pipe2_1 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi r2 := 			  acc_pipe2_2 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi r3 := 			  acc_pipe2_3 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi r4 := 			  acc_pipe2_4 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi r5 := 			  acc_pipe2_5 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi r6 := 			  acc_pipe2_6 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi r7 := 			  acc_pipe2_7 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi r8 := 			  acc_pipe2_8 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $endmerge
    $volatile num_done := (c_count == acc_count) $buffering 1
    $volatile nc_count := ( $mux num_done 0   (c_count + 1 ) )  $buffering 1
    $volatile nop_count := ( $mux num_done (op_count + 1 )  op_count )  $buffering 1
    $volatile acc_val1_1 := (acc1_1 + t1) $buffering 1
    $volatile acc_val2_1 := (acc2_1 + t2) $buffering 1
    $volatile acc_val3_1 := (acc3_1 + t3) $buffering 1
    $volatile acc_val4_1 := (acc4_1 + t4) $buffering 1
    $volatile acc_val5_1 := (acc5_1 + t5) $buffering 1
    $volatile acc_val6_1 := (acc6_1 + t6) $buffering 1
    $volatile acc_val7_1 := (acc7_1 + t7) $buffering 1
    $volatile acc_val8_1 := (acc8_1 + t8) $buffering 1
    $volatile acc_val1_2 := (acc1_2 + r1) $buffering 1
    $volatile acc_val2_2 := (acc2_2 + r2) $buffering 1
    $volatile acc_val3_2 := (acc3_2 + r3) $buffering 1
    $volatile acc_val4_2 := (acc4_2 + r4) $buffering 1
    $volatile acc_val5_2 := (acc5_2 + r5) $buffering 1
    $volatile acc_val6_2 := (acc6_2 + r6) $buffering 1
    $volatile acc_val7_2 := (acc7_2 + r7) $buffering 1
    $volatile acc_val8_2 := (acc8_2 + r8) $buffering 1
    $guard (num_done) output_pipe1_1 := acc_val1_1 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe1_2 := acc_val1_2 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe2_1 := acc_val2_1 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe2_2 := acc_val2_2 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe3_1 := acc_val3_1 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe3_2 := acc_val3_2 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe4_1 := acc_val4_1 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe4_2 := acc_val4_2 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe5_1 := acc_val5_1 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe5_2 := acc_val5_2 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe6_1 := acc_val6_1 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe6_2 := acc_val6_2 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe7_1 := acc_val7_1 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe7_2 := acc_val7_2 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe8_1 := acc_val8_1 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe8_2 := acc_val8_2 $buffering 1// bits of buffering = 16. 
    $while (nop_count < op_size)
  }
}
$pipeline $depth 8 $buffering 1 $fullrate $opaque $module [readModule_concat]
$in ( index : $uint<8>   address : $uint<32>  )
$out ( data : $uint<64>  )
$is
{
  $volatile cnd1 := (index == 0 ) $buffering 1
  $volatile cnd2 := (index == 1 ) $buffering 1
  $volatile cnd3 := (index == 2 ) $buffering 1
  $volatile cnd4 := (index == 3 ) $buffering 1
  $volatile cnd5 := (index == 4 ) $buffering 1
  $guard (cnd1) $call memoryModule (1  (0  + address) 0  ) (val1 ) 
  $guard (cnd2) $call memoryModule (1  (0  + address) 0  ) (val2 ) 
  $guard (cnd1) $call memoryModule (1  (0  + address) 0  ) (val3 ) 
  $guard (cnd2) $call memoryModule (1  (0  + address) 0  ) (val4 ) 
  $guard (cnd1) $call memoryModule (1  (0  + address) 0  ) (val5 ) 
  cnd1_883_delayed_4_0 := cnd1 $buffering 4 $cut_through // bits of buffering = 4. 
  cnd2_887_delayed_4_0 := cnd2 $buffering 4 $cut_through // bits of buffering = 4. 
  cnd3_892_delayed_4_0 := cnd3 $buffering 4 $cut_through // bits of buffering = 4. 
  cnd4_897_delayed_4_0 := cnd4 $buffering 4 $cut_through // bits of buffering = 4. 
  cnd5_901_delayed_4_0 := cnd5 $buffering 4 $cut_through // bits of buffering = 4. 
  data := (((( $mux cnd1_883_delayed_4_0 val1  _b0  )  | ( $mux cnd2_887_delayed_4_0 val2  _b0  ) ) | ( $mux cnd3_892_delayed_4_0 val3  _b0  ) ) | (( $mux cnd4_897_delayed_4_0 val4  _b0  )  | ( $mux cnd5_901_delayed_4_0 val5  _b0  ) )) $buffering 1// bits of buffering = 64. 
  $attribute delay 7
}
$pipeline $depth 8 $buffering 1 $fullrate $opaque $module [writeModule_concat]
$in ( index : $uint<8>   address : $uint<32>   data : $uint<64>  )
$out ( done : $uint<1>  )
$is
{
  $volatile cnd1 := (index == 0 ) $buffering 1
  $volatile cnd2 := (index == 1 ) $buffering 1
  $guard (cnd1) $call memoryModule (0  (0  + address) data ) (out1 ) 
  $guard (cnd2) $call memoryModule (0  (0  + address) data ) (out2 ) 
  done := (index [] 0 ) $buffering 1// bits of buffering = 1. 
  $attribute delay 6
}
$module [concat_core]
$in ( input1_count : $uint<16>   input2_count : $uint<16>   output_size : $uint<32>   index1 : $uint<8>   index2 : $uint<8>   index3 : $uint<8>  )
$out ( done1 : $uint<8>  )
$is
{
  $branchblock [body]
  {
    $volatile out_concat := (output_size >> ($bitcast ($uint<32>) _b00000000000000000000000000000011  )) $buffering 1
    $volatile add_out_init := ($bitcast ($uint<32>) 0  ) $buffering 1
    $volatile add_inp1_init := ($bitcast ($uint<16>) 0  ) $buffering 1
    $volatile add_inp2_init := ($bitcast ($uint<16>) 0  ) $buffering 1
    $volatile count_inp1_init := ($bitcast ($uint<16>) 0  ) $buffering 1
    $volatile total_size := (input1_count + input2_count) $buffering 1
    $dopipeline $depth 15 $buffering 1
    $fullrate 
    $merge $entry $loopback 
    $phi add_out := 			  add_out_init $on   $entry 			  next_add_out $on   $loopback 
    // type of target is $uint<32>
    $phi add_inp1 := 			  add_inp1_init $on   $entry 			  next_add_inp1 $on   $loopback 
    // type of target is $uint<16>
    $phi add_inp2 := 			  add_inp2_init $on   $entry 			  next_add_inp2 $on   $loopback 
    // type of target is $uint<16>
    $phi count_inp1 := 			  count_inp1_init $on   $entry 			  next_count_inp1 $on   $loopback 
    // type of target is $uint<16>
    $endmerge
    $volatile cmp := (count_inp1 < input1_count) $buffering 1
    $guard (cmp) $call readModule_concat (index1 ($bitcast ($uint<32>) add_inp1 ) ) (i1 ) 
    $guard (~cmp) $call readModule_concat (index2 ($bitcast ($uint<32>) add_inp2 ) ) (i2 ) 
    cmp_1019_delayed_7_0 := cmp $buffering 7 $cut_through // bits of buffering = 7. 
    $volatile o := ( $mux cmp_1019_delayed_7_0 i1  i2 )  $buffering 1
    add_out_1025_delayed_7_0 := add_out $buffering 7 $cut_through // bits of buffering = 224. 
    $call writeModule_concat (index3 add_out_1025_delayed_7_0 o ) (done ) 
    SUB_u16_u16_1033_1033_delayed_1_0 := (total_size - 1 ) $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile my_flag := (count_inp1 == SUB_u16_u16_1033_1033_delayed_1_0) $buffering 1
    $volatile next_count_inp1 := ( $mux my_flag 0   (count_inp1 + 1 ) )  $buffering 1
    $volatile next_add_inp1 := ( $mux cmp (add_inp1 + 1 )  add_inp1 )  $buffering 1
    $volatile next_add_inp2 := ( $mux cmp add_inp2  (add_inp2 + 1 ) )  $buffering 1
    $volatile next_add_out := (add_out + 1 ) $buffering 1
    SUB_u32_u32_1071_1071_delayed_1_0 := (out_concat - 1 ) $buffering 1 $cut_through // bits of buffering = 32. 
    $volatile continue_flag := (( ~ my_flag ) | (add_out < SUB_u32_u32_1071_1071_delayed_1_0)) $buffering 1
    $while continue_flag
    done1 := index1 $buffering 1// bits of buffering = 8. 
  }
}
$module [concat]
$in ( input1_dim0 : $uint<16>   input1_dim1 : $uint<16>   input1_dim2 : $uint<16>   input2_dim0 : $uint<16>   input2_dim1 : $uint<16>   input2_dim2 : $uint<16>   out_dim0 : $uint<16>   out_dim1 : $uint<16>   out_dim2 : $uint<16>   index0 : $uint<8>   index1 : $uint<8>   index2 : $uint<8>  )
$out ()
$is
{
  $branchblock [body]
  {
    conv := ($cast ($uint<32>) out_dim0 ) $buffering 1// bits of buffering = 32. 
    conv2 := ($cast ($uint<32>) out_dim1 ) $buffering 1// bits of buffering = 32. 
    conv4 := ($cast ($uint<32>) out_dim2 ) $buffering 1// bits of buffering = 32. 
    $volatile mul := (conv2 * conv) $buffering 1
    $volatile mul5 := (mul * conv4) $buffering 1
    $volatile shr23 := (input1_dim2 >> ($bitcast ($uint<16>) _b0000000000000011  )) $buffering 1
    $volatile shr1324 := (input2_dim2 >> ($bitcast ($uint<16>) _b0000000000000011  )) $buffering 1
    $call concat_core (shr23 shr1324 mul5 index0 index1 index2 ) (call ) 
    system_output_pipe := call $buffering 1// bits of buffering = 8. 
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
$pipeline $depth 8 $buffering 1 $fullrate $opaque $module [writeModule_convTranspose]
$in ( index : $uint<8>   address : $uint<32>   data : $uint<64>  )
$out ( done : $uint<1>  )
$is
{
  $volatile cnd1 := (index == 0 ) $buffering 1
  $volatile cnd2 := (index == 1 ) $buffering 1
  $guard (cnd1) $call memoryModule (0  (0  + address) data ) (out1 ) 
  $guard (cnd2) $call memoryModule (0  (0  + address) data ) (out2 ) 
  done := (index [] 0 ) $buffering 1// bits of buffering = 1. 
  $attribute delay 6
}
$pipeline $depth 8 $buffering 1 $fullrate $opaque $module [readModule_convTranspose]
$in ( index : $uint<8>   address : $uint<32>  )
$out ( data : $uint<64>  )
$is
{
  $volatile cnd1 := (index == 0 ) $buffering 1
  $volatile cnd2 := (index == 1 ) $buffering 1
  $guard (cnd1) $call memoryModule (1  (0  + address) 0  ) (val1 ) 
  $guard (cnd2) $call memoryModule (1  (0  + address) 0  ) (val2 ) 
  cnd1_1213_delayed_4_0 := cnd1 $buffering 4 $cut_through // bits of buffering = 4. 
  cnd2_1217_delayed_4_0 := cnd2 $buffering 4 $cut_through // bits of buffering = 4. 
  data := (( $mux cnd1_1213_delayed_4_0 val1  _b0  )  | ( $mux cnd2_1217_delayed_4_0 val2  _b0  ) ) $buffering 1// bits of buffering = 64. 
  $attribute delay 7
}
$module [ct_core]
$in ( inp_d0 : $uint<16>   inp_d1 : $uint<16>   inp_d2 : $uint<16>   ker_d1 : $uint<16>   ker_d2 : $uint<16>   out_d0 : $uint<16>   out_d1 : $uint<16>   out_d2 : $uint<16>   stride : $uint<16>   padding : $uint<16>   index1 : $uint<8>   index3 : $uint<8>  )
$out ( done2 : $uint<8>  )
$is
{
  $branchblock [body]
  {
    out_d232 := ($cast ($uint<32>) inp_d2 ) $buffering 1// bits of buffering = 32. 
    $volatile out_int := (out_d0 * out_d1) $buffering 1
    out_int1 := ($cast ($uint<32>) out_int ) $buffering 1// bits of buffering = 32. 
    $volatile output_size := (out_int1 * out_d232) $buffering 1
    $volatile cmp264448 := (output_size > ($bitcast ($uint<32>) _b00000000000000000000000000000011  )) $buffering 1
    $if cmp264448 $then 
    $place[forx_xend250_bbx_xnph450]
    $else 
    $place[forx_xend250_forx_xend273]
    $endif
    $merge forx_xend250_bbx_xnph450 
    $endmerge
    $volatile tmp476 := (output_size >> ($bitcast ($uint<32>) _b00000000000000000000000000000011  )) $buffering 1
    $volatile tmp477 := (tmp476 > ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
    $volatile tmp476x_xop := (tmp476 + ($bitcast ($uint<32>) _b11111111111111111111111111111111  )) $buffering 1
    iNsTr_52 := ($cast ($uint<32>) tmp476x_xop ) $buffering 1// bits of buffering = 32. 
    $volatile xx_xop513 := (iNsTr_52 + ($bitcast ($uint<32>) 1  )) $buffering 1
    $volatile tmp481 := ( $mux tmp477 xx_xop513  ($bitcast ($uint<32>) 1  ) )  $buffering 1
    $place[bbx_xnph451_forx_xbody266]
    $merge bbx_xnph451_forx_xbody266 forx_xbody266_forx_xbody266 
    $phi indvar469 := 			  ($cast ($uint<32>) ($bitcast ($uint<32>) 0  ) ) $on   bbx_xnph451_forx_xbody266 			  ($cast ($uint<32>) indvarx_xnext470 ) $on   forx_xbody266_forx_xbody266 
    // type of target is $uint<32>
    $endmerge
    $call writeModule_convTranspose (index3 indvar469 ($bitcast ($uint<64>) 0  ) ) (done ) 
    $volatile indvarx_xnext470 := (indvar469 + ($bitcast ($uint<32>) 1  )) $buffering 1
    $volatile exitcond := (indvarx_xnext470 == tmp481) $buffering 1
    $if exitcond $then 
    $place[forx_xbody266_forx_xend273x_xloopexit]
    $else 
    $place[forx_xbody266_forx_xbody266]
    $endif
    $merge forx_xbody266_forx_xend273x_xloopexit 
    $endmerge
    $place[forx_xend273x_xloopexit_forx_xend273]
    $merge forx_xend250_forx_xend273 forx_xend273x_xloopexit_forx_xend273 
    $endmerge
    $volatile input_dim0_init := ($bitcast ($uint<16>) 0  ) $buffering 1
    $volatile input_dim1_init := ($bitcast ($uint<16>) 0  ) $buffering 1
    $volatile input_dim2_init := ($bitcast ($uint<16>) 0  ) $buffering 1
    $volatile pad := (padding + 1 ) $buffering 1
    $volatile add_dest_dim0_init := (ker_d1 - pad) $buffering 1
    $volatile add_dest_dim1_init := (ker_d2 - pad) $buffering 1
    $volatile add_src_init := ($bitcast ($uint<32>) 0  ) $buffering 1
    $dopipeline $depth 15 $buffering 1
    $fullrate 
    $merge $entry $loopback 
    $phi input_dim0 := 			  input_dim0_init $on   $entry 			  next_input_dim0 $on   $loopback 
    // type of target is $uint<16>
    $phi input_dim1 := 			  input_dim1_init $on   $entry 			  next_input_dim1 $on   $loopback 
    // type of target is $uint<16>
    $phi input_dim2 := 			  input_dim2_init $on   $entry 			  next_input_dim2 $on   $loopback 
    // type of target is $uint<16>
    $phi add_dest_dim0 := 			  add_dest_dim0_init $on   $entry 			  next_add_dest_dim0 $on   $loopback 
    // type of target is $uint<16>
    $phi add_dest_dim1 := 			  add_dest_dim1_init $on   $entry 			  next_add_dest_dim1 $on   $loopback 
    // type of target is $uint<16>
    $phi add_src := 			  add_src_init $on   $entry 			  next_add_src $on   $loopback 
    // type of target is $uint<32>
    $endmerge
    $volatile nao := (out_d1 * add_dest_dim0) $buffering 1
    $volatile nao1 := (nao + add_dest_dim1) $buffering 1
    $volatile nao2 := (out_d2 * nao1) $buffering 1
    $volatile nao3 := (input_dim2 + nao2) $buffering 1
    $volatile add_out := (nao3 >> 3 ) $buffering 1
    $call readModule_convTranspose (index1 ($bitcast ($uint<32>) add_src ) ) (i1 ) 
    type_cast_1431_1431_delayed_7_0 := ($bitcast ($uint<32>) add_out ) $buffering 7 $cut_through // bits of buffering = 224. 
    $call writeModule_convTranspose (index3 type_cast_1431_1431_delayed_7_0 i1 ) (done1 ) 
    $volatile dim2_limit := (inp_d2 - 8 ) $buffering 1
    dim2_limit_1442_delayed_1_0 := dim2_limit $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile cmp_dim2 := (input_dim2 < dim2_limit_1442_delayed_1_0) $buffering 1
    SUB_u16_u16_1449_1449_delayed_1_0 := (inp_d1 - 1 ) $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile cmp_dim1 := (input_dim1 == SUB_u16_u16_1449_1449_delayed_1_0) $buffering 1
    $volatile cmp_dim0 := (( ~ cmp_dim2 ) & cmp_dim1) $buffering 1
    $volatile nid2_true := (input_dim2 + 8 ) $buffering 1
    $volatile nid2_false := (input_dim1 + 1 ) $buffering 1
    $volatile nid2_false1 := (add_dest_dim1 + stride) $buffering 1
    $volatile nid1_true := (input_dim0 + 1 ) $buffering 1
    $volatile nid1_true1 := (add_dest_dim0 + stride) $buffering 1
    $volatile nid1_true2 := (stride * inp_d1) $buffering 1
    $volatile nid1_true3 := (nid1_true2 - stride) $buffering 1
    nid1_true3_1495_delayed_1_0 := nid1_true3 $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile nid1_true4 := (add_dest_dim1 - nid1_true3_1495_delayed_1_0) $buffering 1
    $volatile next_add_src := (add_src + 1 ) $buffering 1
    $volatile next_add_dest_dim1 := ( $mux ( ~ cmp_dim2 ) ( $mux cmp_dim1 nid1_true4  nid2_false1 )   add_dest_dim1 )  $buffering 1
    $volatile next_add_dest_dim0 := ( $mux cmp_dim0 nid1_true1  add_dest_dim0 )  $buffering 1
    $volatile next_input_dim2 := ( $mux cmp_dim2 nid2_true  0  )  $buffering 1
    $volatile next_input_dim1 := ( $mux ( ~ cmp_dim2 ) ( $mux cmp_dim1 0   nid2_false )   input_dim1 )  $buffering 1
    $volatile next_input_dim0 := ( $mux cmp_dim0 nid1_true  input_dim0 )  $buffering 1
    SUB_u16_u16_1545_1545_delayed_1_0 := (inp_d0 - 1 ) $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile dim0_end := (input_dim0 < SUB_u16_u16_1545_1545_delayed_1_0) $buffering 1
    $volatile continue_flag := (dim0_end | ( ~ cmp_dim0 )) $buffering 1
    $while continue_flag
    done2 := index1 $buffering 1// bits of buffering = 8. 
  }
}
$module [convTranspose]
$in ( inp_dim0 : $uint<16>   inp_dim1 : $uint<16>   inp_dim2 : $uint<16>   ker_dim1 : $uint<16>   ker_dim2 : $uint<16>   stride0 : $uint<16>   padding : $uint<16>   out_dim0 : $uint<16>   out_dim1 : $uint<16>   out_dim2 : $uint<16>   index1 : $uint<8>   index2 : $uint<8>  )
$out ()
$is
{
  $branchblock [body]
  {
    $call ct_core (inp_dim0 inp_dim1 inp_dim2 ker_dim1 ker_dim2 out_dim0 out_dim1 out_dim2 stride0 padding index1 index2 ) (call ) 
    system_output_pipe := call $buffering 1// bits of buffering = 8. 
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
$module [convolveCore]
$in ( rb : $uint<16>   cb : $uint<16>   chl_in_read : $uint<16>   chl_out : $uint<16>   rk : $uint<16>   ck : $uint<16>  )
$out ()
$is
{
  $branchblock [conv_block]
  {
    $volatile num_row := (rb - 2 ) $buffering 1
    $volatile num_col := (cb - 1 ) $buffering 1
    $volatile chl_in := (chl_in_read - 1 ) $buffering 1
    $volatile ck_s := (($bitcast ($uint<2>) ck ) - 1 ) $buffering 1
    $volatile mode_2 := (rk == 2 ) $buffering 1
    $volatile not_mode_2 := ( ~ mode_2 ) $buffering 1
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi row := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux chl_done_flag 0   ( $mux row_done (row + 2 )  row )  )  $on   $loopback 
    // type of target is $uint<16>
    $phi col := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done ( $mux col_done 0   (col + 1 ) )   col )  $on   $loopback 
    // type of target is $uint<16>
    $phi num := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  ( $mux chl_done ( $mux num_done 0   (num + 1 ) )   num )  $on   $loopback 
    // type of target is $uint<2>
    $phi chl := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux chl_done 0   (chl + 1 ) )  $on   $loopback 
    // type of target is $uint<16>
    $phi chl_out_var := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  (chl_out_var + ( $mux chl_done_flag 1   0  ) ) $on   $loopback 
    // type of target is $uint<16>
    $endmerge
    $volatile nd := (num == ck_s) $buffering 1
    $volatile read_ip := ((col == 0 ) | nd) $buffering 1
    $volatile not_read_ip := ( ~ read_ip ) $buffering 1
    $volatile write_input := ((col < num_col) & (num > 0 )) $buffering 1
    $volatile read_k := ((col == 0 ) & (row == 0 )) $buffering 1
    $volatile not_read_k := ( ~ read_k ) $buffering 1
    $volatile chl_done := (chl == chl_in) $buffering 1
    $volatile num_done := (nd & chl_done) $buffering 1
    $volatile col_done := (col == num_col) $buffering 1
    $volatile row_done := (col_done & num_done) $buffering 1
    $volatile out_done_flag := (row >= num_row) $buffering 1
    $volatile store_kernel := (out_done_flag ~& col_done) $buffering 1
    $volatile chl_done_flag := (out_done_flag & row_done) $buffering 1
    $volatile all_done_flag := ((chl_out_var == chl_out) & chl_done_flag) $buffering 1
    $volatile read_ip3 := (not_mode_2 & read_ip) $buffering 1
    $volatile not_read_ip3 := (not_mode_2 & not_read_ip) $buffering 1
    $volatile write_input3 := (write_input & not_mode_2) $buffering 1
    $guard (read_ip) temp2_1 := core_ip1 $buffering 1// bits of buffering = 64. 
    $guard (not_read_ip) temp1_1 := conv_ip1 $buffering 1// bits of buffering = 64. 
    read_ip_1801_delayed_1_0 := read_ip $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile iread1 := ( $mux read_ip_1801_delayed_1_0 temp2_1  temp1_1 )  $buffering 1
    write_input_1806_delayed_1_0 := write_input $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (write_input_1806_delayed_1_0) conv_ip1 := iread1 $buffering 1// bits of buffering = 64. 
    ir1_1 := ( $slice iread1 63 56 )  $buffering 1// bits of buffering = 8. 
    ir2_1 := ( $slice iread1 55 48 )  $buffering 1// bits of buffering = 8. 
    ir3_1 := ( $slice iread1 47 40 )  $buffering 1// bits of buffering = 8. 
    ir4_1 := ( $slice iread1 39 32 )  $buffering 1// bits of buffering = 8. 
    ir5_1 := ( $slice iread1 31 24 )  $buffering 1// bits of buffering = 8. 
    ir6_1 := ( $slice iread1 23 16 )  $buffering 1// bits of buffering = 8. 
    ir7_1 := ( $slice iread1 15 8 )  $buffering 1// bits of buffering = 8. 
    ir8_1 := ( $slice iread1 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile ival1_1 := ($bitcast ($int<8>) ir1_1 ) $buffering 1
    $volatile ival2_1 := ($bitcast ($int<8>) ir2_1 ) $buffering 1
    $volatile ival3_1 := ($bitcast ($int<8>) ir3_1 ) $buffering 1
    $volatile ival4_1 := ($bitcast ($int<8>) ir4_1 ) $buffering 1
    $volatile ival5_1 := ($bitcast ($int<8>) ir5_1 ) $buffering 1
    $volatile ival6_1 := ($bitcast ($int<8>) ir6_1 ) $buffering 1
    $volatile ival7_1 := ($bitcast ($int<8>) ir7_1 ) $buffering 1
    $volatile ival8_1 := ($bitcast ($int<8>) ir8_1 ) $buffering 1
    $guard (read_ip) temp2_2 := core_ip2 $buffering 1// bits of buffering = 64. 
    $guard (not_read_ip) temp1_2 := conv_ip2 $buffering 1// bits of buffering = 64. 
    read_ip_1884_delayed_1_0 := read_ip $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile iread2 := ( $mux read_ip_1884_delayed_1_0 temp2_2  temp1_2 )  $buffering 1
    write_input_1889_delayed_1_0 := write_input $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (write_input_1889_delayed_1_0) conv_ip2 := iread2 $buffering 1// bits of buffering = 64. 
    ir1_2 := ( $slice iread2 63 56 )  $buffering 1// bits of buffering = 8. 
    ir2_2 := ( $slice iread2 55 48 )  $buffering 1// bits of buffering = 8. 
    ir3_2 := ( $slice iread2 47 40 )  $buffering 1// bits of buffering = 8. 
    ir4_2 := ( $slice iread2 39 32 )  $buffering 1// bits of buffering = 8. 
    ir5_2 := ( $slice iread2 31 24 )  $buffering 1// bits of buffering = 8. 
    ir6_2 := ( $slice iread2 23 16 )  $buffering 1// bits of buffering = 8. 
    ir7_2 := ( $slice iread2 15 8 )  $buffering 1// bits of buffering = 8. 
    ir8_2 := ( $slice iread2 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile ival1_2 := ($bitcast ($int<8>) ir1_2 ) $buffering 1
    $volatile ival2_2 := ($bitcast ($int<8>) ir2_2 ) $buffering 1
    $volatile ival3_2 := ($bitcast ($int<8>) ir3_2 ) $buffering 1
    $volatile ival4_2 := ($bitcast ($int<8>) ir4_2 ) $buffering 1
    $volatile ival5_2 := ($bitcast ($int<8>) ir5_2 ) $buffering 1
    $volatile ival6_2 := ($bitcast ($int<8>) ir6_2 ) $buffering 1
    $volatile ival7_2 := ($bitcast ($int<8>) ir7_2 ) $buffering 1
    $volatile ival8_2 := ($bitcast ($int<8>) ir8_2 ) $buffering 1
    $guard (read_ip) temp2_3 := core_ip3 $buffering 1// bits of buffering = 64. 
    $guard (not_read_ip) temp1_3 := conv_ip3 $buffering 1// bits of buffering = 64. 
    read_ip_1966_delayed_1_0 := read_ip $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile iread3 := ( $mux read_ip_1966_delayed_1_0 temp2_3  temp1_3 )  $buffering 1
    write_input_1971_delayed_1_0 := write_input $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (write_input_1971_delayed_1_0) conv_ip3 := iread3 $buffering 1// bits of buffering = 64. 
    ir1_3 := ( $slice iread3 63 56 )  $buffering 1// bits of buffering = 8. 
    ir2_3 := ( $slice iread3 55 48 )  $buffering 1// bits of buffering = 8. 
    ir3_3 := ( $slice iread3 47 40 )  $buffering 1// bits of buffering = 8. 
    ir4_3 := ( $slice iread3 39 32 )  $buffering 1// bits of buffering = 8. 
    ir5_3 := ( $slice iread3 31 24 )  $buffering 1// bits of buffering = 8. 
    ir6_3 := ( $slice iread3 23 16 )  $buffering 1// bits of buffering = 8. 
    ir7_3 := ( $slice iread3 15 8 )  $buffering 1// bits of buffering = 8. 
    ir8_3 := ( $slice iread3 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile ival1_3 := ($bitcast ($int<8>) ir1_3 ) $buffering 1
    $volatile ival2_3 := ($bitcast ($int<8>) ir2_3 ) $buffering 1
    $volatile ival3_3 := ($bitcast ($int<8>) ir3_3 ) $buffering 1
    $volatile ival4_3 := ($bitcast ($int<8>) ir4_3 ) $buffering 1
    $volatile ival5_3 := ($bitcast ($int<8>) ir5_3 ) $buffering 1
    $volatile ival6_3 := ($bitcast ($int<8>) ir6_3 ) $buffering 1
    $volatile ival7_3 := ($bitcast ($int<8>) ir7_3 ) $buffering 1
    $volatile ival8_3 := ($bitcast ($int<8>) ir8_3 ) $buffering 1
    $guard (read_ip3) temp2_4 := core_ip4 $buffering 1// bits of buffering = 64. 
    $guard (not_read_ip3) temp1_4 := conv_ip4 $buffering 1// bits of buffering = 64. 
    read_ip_2050_delayed_1_0 := read_ip $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile iread4 := ( $mux mode_2 0   ( $mux read_ip_2050_delayed_1_0 temp2_4  temp1_4 )  )  $buffering 1
    write_input3_2056_delayed_1_0 := write_input3 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (write_input3_2056_delayed_1_0) conv_ip4 := iread4 $buffering 1// bits of buffering = 64. 
    ir1_4 := ( $slice iread4 63 56 )  $buffering 1// bits of buffering = 8. 
    ir2_4 := ( $slice iread4 55 48 )  $buffering 1// bits of buffering = 8. 
    ir3_4 := ( $slice iread4 47 40 )  $buffering 1// bits of buffering = 8. 
    ir4_4 := ( $slice iread4 39 32 )  $buffering 1// bits of buffering = 8. 
    ir5_4 := ( $slice iread4 31 24 )  $buffering 1// bits of buffering = 8. 
    ir6_4 := ( $slice iread4 23 16 )  $buffering 1// bits of buffering = 8. 
    ir7_4 := ( $slice iread4 15 8 )  $buffering 1// bits of buffering = 8. 
    ir8_4 := ( $slice iread4 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile ival1_4 := ($bitcast ($int<8>) ir1_4 ) $buffering 1
    $volatile ival2_4 := ($bitcast ($int<8>) ir2_4 ) $buffering 1
    $volatile ival3_4 := ($bitcast ($int<8>) ir3_4 ) $buffering 1
    $volatile ival4_4 := ($bitcast ($int<8>) ir4_4 ) $buffering 1
    $volatile ival5_4 := ($bitcast ($int<8>) ir5_4 ) $buffering 1
    $volatile ival6_4 := ($bitcast ($int<8>) ir6_4 ) $buffering 1
    $volatile ival7_4 := ($bitcast ($int<8>) ir7_4 ) $buffering 1
    $volatile ival8_4 := ($bitcast ($int<8>) ir8_4 ) $buffering 1
    $volatile readk_3 := (read_k & not_mode_2) $buffering 1
    $volatile not_readk_3 := (not_read_k & not_mode_2) $buffering 1
    $volatile store_3 := (store_kernel & not_mode_2) $buffering 1
    $guard (read_k) tempk1_1_1 := core1_kp1 $buffering 1// bits of buffering = 64. 
    $guard (not_read_k) tempk2_1_1 := conv1_kp1 $buffering 1// bits of buffering = 64. 
    read_k_2148_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_1_1 := ( $mux read_k_2148_delayed_1_0 tempk1_1_1  tempk2_1_1 )  $buffering 1
    kr_1_1_1 := ( $slice kread_1_1 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_1_2_1 := ( $slice kread_1_1 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_1_3_1 := ( $slice kread_1_1 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_1_4_1 := ( $slice kread_1_1 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_1_5_1 := ( $slice kread_1_1 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_1_6_1 := ( $slice kread_1_1 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_1_7_1 := ( $slice kread_1_1 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_1_8_1 := ( $slice kread_1_1 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_1_1_1 := ($bitcast ($int<8>) kr_1_1_1 ) $buffering 1
    $volatile kval_1_2_1 := ($bitcast ($int<8>) kr_1_2_1 ) $buffering 1
    $volatile kval_1_3_1 := ($bitcast ($int<8>) kr_1_3_1 ) $buffering 1
    $volatile kval_1_4_1 := ($bitcast ($int<8>) kr_1_4_1 ) $buffering 1
    $volatile kval_1_5_1 := ($bitcast ($int<8>) kr_1_5_1 ) $buffering 1
    $volatile kval_1_6_1 := ($bitcast ($int<8>) kr_1_6_1 ) $buffering 1
    $volatile kval_1_7_1 := ($bitcast ($int<8>) kr_1_7_1 ) $buffering 1
    $volatile kval_1_8_1 := ($bitcast ($int<8>) kr_1_8_1 ) $buffering 1
    mul_val_1_1_1 := ($cast ($int<16>) (kval_1_1_1 * ival1_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_2_1 := ($cast ($int<16>) (kval_1_2_1 * ival2_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_3_1 := ($cast ($int<16>) (kval_1_3_1 * ival3_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_4_1 := ($cast ($int<16>) (kval_1_4_1 * ival4_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_5_1 := ($cast ($int<16>) (kval_1_5_1 * ival5_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_6_1 := ($cast ($int<16>) (kval_1_6_1 * ival6_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_7_1 := ($cast ($int<16>) (kval_1_7_1 * ival7_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_8_1 := ($cast ($int<16>) (kval_1_8_1 * ival8_1) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_1_1 := (((mul_val_1_1_1 + mul_val_1_2_1) + (mul_val_1_3_1 + mul_val_1_4_1)) + ((mul_val_1_5_1 + mul_val_1_6_1) + (mul_val_1_7_1 + mul_val_1_8_1))) $buffering 1
    mul_val_1_1_4 := ($cast ($int<16>) (kval_1_1_1 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_2_4 := ($cast ($int<16>) (kval_1_2_1 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_3_4 := ($cast ($int<16>) (kval_1_3_1 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_4_4 := ($cast ($int<16>) (kval_1_4_1 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_5_4 := ($cast ($int<16>) (kval_1_5_1 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_6_4 := ($cast ($int<16>) (kval_1_6_1 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_7_4 := ($cast ($int<16>) (kval_1_7_1 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_8_4 := ($cast ($int<16>) (kval_1_8_1 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_1_4 := (((mul_val_1_1_4 + mul_val_1_2_4) + (mul_val_1_3_4 + mul_val_1_4_4)) + ((mul_val_1_5_4 + mul_val_1_6_4) + (mul_val_1_7_4 + mul_val_1_8_4))) $buffering 1
    $guard (read_k) tempk1_1_2 := core1_kp2 $buffering 1// bits of buffering = 64. 
    $guard (not_read_k) tempk2_1_2 := conv1_kp2 $buffering 1// bits of buffering = 64. 
    read_k_2357_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_1_2 := ( $mux read_k_2357_delayed_1_0 tempk1_1_2  tempk2_1_2 )  $buffering 1
    kr_1_1_2 := ( $slice kread_1_2 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_1_2_2 := ( $slice kread_1_2 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_1_3_2 := ( $slice kread_1_2 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_1_4_2 := ( $slice kread_1_2 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_1_5_2 := ( $slice kread_1_2 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_1_6_2 := ( $slice kread_1_2 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_1_7_2 := ( $slice kread_1_2 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_1_8_2 := ( $slice kread_1_2 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_1_1_2 := ($bitcast ($int<8>) kr_1_1_2 ) $buffering 1
    $volatile kval_1_2_2 := ($bitcast ($int<8>) kr_1_2_2 ) $buffering 1
    $volatile kval_1_3_2 := ($bitcast ($int<8>) kr_1_3_2 ) $buffering 1
    $volatile kval_1_4_2 := ($bitcast ($int<8>) kr_1_4_2 ) $buffering 1
    $volatile kval_1_5_2 := ($bitcast ($int<8>) kr_1_5_2 ) $buffering 1
    $volatile kval_1_6_2 := ($bitcast ($int<8>) kr_1_6_2 ) $buffering 1
    $volatile kval_1_7_2 := ($bitcast ($int<8>) kr_1_7_2 ) $buffering 1
    $volatile kval_1_8_2 := ($bitcast ($int<8>) kr_1_8_2 ) $buffering 1
    mul_val_1_1_2 := ($cast ($int<16>) (kval_1_1_2 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_2_2 := ($cast ($int<16>) (kval_1_2_2 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_3_2 := ($cast ($int<16>) (kval_1_3_2 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_4_2 := ($cast ($int<16>) (kval_1_4_2 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_5_2 := ($cast ($int<16>) (kval_1_5_2 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_6_2 := ($cast ($int<16>) (kval_1_6_2 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_7_2 := ($cast ($int<16>) (kval_1_7_2 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_8_2 := ($cast ($int<16>) (kval_1_8_2 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_1_2 := (((mul_val_1_1_2 + mul_val_1_2_2) + (mul_val_1_3_2 + mul_val_1_4_2)) + ((mul_val_1_5_2 + mul_val_1_6_2) + (mul_val_1_7_2 + mul_val_1_8_2))) $buffering 1
    mul_val_1_1_5 := ($cast ($int<16>) (kval_1_1_2 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_2_5 := ($cast ($int<16>) (kval_1_2_2 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_3_5 := ($cast ($int<16>) (kval_1_3_2 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_4_5 := ($cast ($int<16>) (kval_1_4_2 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_5_5 := ($cast ($int<16>) (kval_1_5_2 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_6_5 := ($cast ($int<16>) (kval_1_6_2 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_7_5 := ($cast ($int<16>) (kval_1_7_2 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_8_5 := ($cast ($int<16>) (kval_1_8_2 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_1_5 := (((mul_val_1_1_5 + mul_val_1_2_5) + (mul_val_1_3_5 + mul_val_1_4_5)) + ((mul_val_1_5_5 + mul_val_1_6_5) + (mul_val_1_7_5 + mul_val_1_8_5))) $buffering 1
    $guard (readk_3) tempk1_1_3 := core1_kp3 $buffering 1// bits of buffering = 64. 
    $guard (not_readk_3) tempk2_1_3 := conv1_kp3 $buffering 1// bits of buffering = 64. 
    read_k_2567_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_1_3 := ( $mux mode_2 0   ( $mux read_k_2567_delayed_1_0 tempk1_1_3  tempk2_1_3 )  )  $buffering 1
    kr_1_1_3 := ( $slice kread_1_3 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_1_2_3 := ( $slice kread_1_3 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_1_3_3 := ( $slice kread_1_3 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_1_4_3 := ( $slice kread_1_3 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_1_5_3 := ( $slice kread_1_3 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_1_6_3 := ( $slice kread_1_3 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_1_7_3 := ( $slice kread_1_3 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_1_8_3 := ( $slice kread_1_3 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_1_1_3 := ($bitcast ($int<8>) kr_1_1_3 ) $buffering 1
    $volatile kval_1_2_3 := ($bitcast ($int<8>) kr_1_2_3 ) $buffering 1
    $volatile kval_1_3_3 := ($bitcast ($int<8>) kr_1_3_3 ) $buffering 1
    $volatile kval_1_4_3 := ($bitcast ($int<8>) kr_1_4_3 ) $buffering 1
    $volatile kval_1_5_3 := ($bitcast ($int<8>) kr_1_5_3 ) $buffering 1
    $volatile kval_1_6_3 := ($bitcast ($int<8>) kr_1_6_3 ) $buffering 1
    $volatile kval_1_7_3 := ($bitcast ($int<8>) kr_1_7_3 ) $buffering 1
    $volatile kval_1_8_3 := ($bitcast ($int<8>) kr_1_8_3 ) $buffering 1
    mul_val_1_1_3 := ($cast ($int<16>) (kval_1_1_3 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_2_3 := ($cast ($int<16>) (kval_1_2_3 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_3_3 := ($cast ($int<16>) (kval_1_3_3 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_4_3 := ($cast ($int<16>) (kval_1_4_3 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_5_3 := ($cast ($int<16>) (kval_1_5_3 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_6_3 := ($cast ($int<16>) (kval_1_6_3 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_7_3 := ($cast ($int<16>) (kval_1_7_3 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_8_3 := ($cast ($int<16>) (kval_1_8_3 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_1_3 := (((mul_val_1_1_3 + mul_val_1_2_3) + (mul_val_1_3_3 + mul_val_1_4_3)) + ((mul_val_1_5_3 + mul_val_1_6_3) + (mul_val_1_7_3 + mul_val_1_8_3))) $buffering 1
    mul_val_1_1_6 := ($cast ($int<16>) (kval_1_1_3 * ival1_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_2_6 := ($cast ($int<16>) (kval_1_2_3 * ival2_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_3_6 := ($cast ($int<16>) (kval_1_3_3 * ival3_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_4_6 := ($cast ($int<16>) (kval_1_4_3 * ival4_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_5_6 := ($cast ($int<16>) (kval_1_5_3 * ival5_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_6_6 := ($cast ($int<16>) (kval_1_6_3 * ival6_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_7_6 := ($cast ($int<16>) (kval_1_7_3 * ival7_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_8_6 := ($cast ($int<16>) (kval_1_8_3 * ival8_4) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_1_6 := (((mul_val_1_1_6 + mul_val_1_2_6) + (mul_val_1_3_6 + mul_val_1_4_6)) + ((mul_val_1_5_6 + mul_val_1_6_6) + (mul_val_1_7_6 + mul_val_1_8_6))) $buffering 1
    $volatile acc_val1_1 := ((t_acc_val_1_1 + t_acc_val_1_2) + t_acc_val_1_3) $buffering 1
    $volatile acc_val1_2 := ((t_acc_val_1_4 + t_acc_val_1_5) + t_acc_val_1_6) $buffering 1
    store_kernel_2781_delayed_1_0 := store_kernel $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel_2781_delayed_1_0) conv1_kp1 := kread_1_1 $buffering 1// bits of buffering = 64. 
    store_kernel_2785_delayed_1_0 := store_kernel $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel_2785_delayed_1_0) conv1_kp2 := kread_1_2 $buffering 1// bits of buffering = 64. 
    store_3_2789_delayed_1_0 := store_3 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_3_2789_delayed_1_0) conv1_kp3 := kread_1_3 $buffering 1// bits of buffering = 64. 
    $guard (read_k) tempk1_2_1 := core2_kp1 $buffering 1// bits of buffering = 64. 
    $guard (not_read_k) tempk2_2_1 := conv2_kp1 $buffering 1// bits of buffering = 64. 
    read_k_2802_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_2_1 := ( $mux read_k_2802_delayed_1_0 tempk1_2_1  tempk2_2_1 )  $buffering 1
    kr_2_1_1 := ( $slice kread_2_1 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_2_2_1 := ( $slice kread_2_1 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_2_3_1 := ( $slice kread_2_1 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_2_4_1 := ( $slice kread_2_1 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_2_5_1 := ( $slice kread_2_1 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_2_6_1 := ( $slice kread_2_1 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_2_7_1 := ( $slice kread_2_1 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_2_8_1 := ( $slice kread_2_1 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_2_1_1 := ($bitcast ($int<8>) kr_2_1_1 ) $buffering 1
    $volatile kval_2_2_1 := ($bitcast ($int<8>) kr_2_2_1 ) $buffering 1
    $volatile kval_2_3_1 := ($bitcast ($int<8>) kr_2_3_1 ) $buffering 1
    $volatile kval_2_4_1 := ($bitcast ($int<8>) kr_2_4_1 ) $buffering 1
    $volatile kval_2_5_1 := ($bitcast ($int<8>) kr_2_5_1 ) $buffering 1
    $volatile kval_2_6_1 := ($bitcast ($int<8>) kr_2_6_1 ) $buffering 1
    $volatile kval_2_7_1 := ($bitcast ($int<8>) kr_2_7_1 ) $buffering 1
    $volatile kval_2_8_1 := ($bitcast ($int<8>) kr_2_8_1 ) $buffering 1
    mul_val_2_1_1 := ($cast ($int<16>) (kval_2_1_1 * ival1_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_2_1 := ($cast ($int<16>) (kval_2_2_1 * ival2_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_3_1 := ($cast ($int<16>) (kval_2_3_1 * ival3_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_4_1 := ($cast ($int<16>) (kval_2_4_1 * ival4_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_5_1 := ($cast ($int<16>) (kval_2_5_1 * ival5_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_6_1 := ($cast ($int<16>) (kval_2_6_1 * ival6_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_7_1 := ($cast ($int<16>) (kval_2_7_1 * ival7_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_8_1 := ($cast ($int<16>) (kval_2_8_1 * ival8_1) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_2_1 := (((mul_val_2_1_1 + mul_val_2_2_1) + (mul_val_2_3_1 + mul_val_2_4_1)) + ((mul_val_2_5_1 + mul_val_2_6_1) + (mul_val_2_7_1 + mul_val_2_8_1))) $buffering 1
    mul_val_2_1_4 := ($cast ($int<16>) (kval_2_1_1 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_2_4 := ($cast ($int<16>) (kval_2_2_1 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_3_4 := ($cast ($int<16>) (kval_2_3_1 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_4_4 := ($cast ($int<16>) (kval_2_4_1 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_5_4 := ($cast ($int<16>) (kval_2_5_1 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_6_4 := ($cast ($int<16>) (kval_2_6_1 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_7_4 := ($cast ($int<16>) (kval_2_7_1 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_8_4 := ($cast ($int<16>) (kval_2_8_1 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_2_4 := (((mul_val_2_1_4 + mul_val_2_2_4) + (mul_val_2_3_4 + mul_val_2_4_4)) + ((mul_val_2_5_4 + mul_val_2_6_4) + (mul_val_2_7_4 + mul_val_2_8_4))) $buffering 1
    $guard (read_k) tempk1_2_2 := core2_kp2 $buffering 1// bits of buffering = 64. 
    $guard (not_read_k) tempk2_2_2 := conv2_kp2 $buffering 1// bits of buffering = 64. 
    read_k_3010_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_2_2 := ( $mux read_k_3010_delayed_1_0 tempk1_2_2  tempk2_2_2 )  $buffering 1
    kr_2_1_2 := ( $slice kread_2_2 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_2_2_2 := ( $slice kread_2_2 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_2_3_2 := ( $slice kread_2_2 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_2_4_2 := ( $slice kread_2_2 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_2_5_2 := ( $slice kread_2_2 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_2_6_2 := ( $slice kread_2_2 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_2_7_2 := ( $slice kread_2_2 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_2_8_2 := ( $slice kread_2_2 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_2_1_2 := ($bitcast ($int<8>) kr_2_1_2 ) $buffering 1
    $volatile kval_2_2_2 := ($bitcast ($int<8>) kr_2_2_2 ) $buffering 1
    $volatile kval_2_3_2 := ($bitcast ($int<8>) kr_2_3_2 ) $buffering 1
    $volatile kval_2_4_2 := ($bitcast ($int<8>) kr_2_4_2 ) $buffering 1
    $volatile kval_2_5_2 := ($bitcast ($int<8>) kr_2_5_2 ) $buffering 1
    $volatile kval_2_6_2 := ($bitcast ($int<8>) kr_2_6_2 ) $buffering 1
    $volatile kval_2_7_2 := ($bitcast ($int<8>) kr_2_7_2 ) $buffering 1
    $volatile kval_2_8_2 := ($bitcast ($int<8>) kr_2_8_2 ) $buffering 1
    mul_val_2_1_2 := ($cast ($int<16>) (kval_2_1_2 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_2_2 := ($cast ($int<16>) (kval_2_2_2 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_3_2 := ($cast ($int<16>) (kval_2_3_2 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_4_2 := ($cast ($int<16>) (kval_2_4_2 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_5_2 := ($cast ($int<16>) (kval_2_5_2 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_6_2 := ($cast ($int<16>) (kval_2_6_2 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_7_2 := ($cast ($int<16>) (kval_2_7_2 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_8_2 := ($cast ($int<16>) (kval_2_8_2 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_2_2 := (((mul_val_2_1_2 + mul_val_2_2_2) + (mul_val_2_3_2 + mul_val_2_4_2)) + ((mul_val_2_5_2 + mul_val_2_6_2) + (mul_val_2_7_2 + mul_val_2_8_2))) $buffering 1
    mul_val_2_1_5 := ($cast ($int<16>) (kval_2_1_2 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_2_5 := ($cast ($int<16>) (kval_2_2_2 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_3_5 := ($cast ($int<16>) (kval_2_3_2 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_4_5 := ($cast ($int<16>) (kval_2_4_2 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_5_5 := ($cast ($int<16>) (kval_2_5_2 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_6_5 := ($cast ($int<16>) (kval_2_6_2 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_7_5 := ($cast ($int<16>) (kval_2_7_2 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_8_5 := ($cast ($int<16>) (kval_2_8_2 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_2_5 := (((mul_val_2_1_5 + mul_val_2_2_5) + (mul_val_2_3_5 + mul_val_2_4_5)) + ((mul_val_2_5_5 + mul_val_2_6_5) + (mul_val_2_7_5 + mul_val_2_8_5))) $buffering 1
    $guard (readk_3) tempk1_2_3 := core2_kp3 $buffering 1// bits of buffering = 64. 
    $guard (not_readk_3) tempk2_2_3 := conv2_kp3 $buffering 1// bits of buffering = 64. 
    read_k_3220_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_2_3 := ( $mux mode_2 0   ( $mux read_k_3220_delayed_1_0 tempk1_2_3  tempk2_2_3 )  )  $buffering 1
    kr_2_1_3 := ( $slice kread_2_3 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_2_2_3 := ( $slice kread_2_3 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_2_3_3 := ( $slice kread_2_3 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_2_4_3 := ( $slice kread_2_3 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_2_5_3 := ( $slice kread_2_3 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_2_6_3 := ( $slice kread_2_3 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_2_7_3 := ( $slice kread_2_3 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_2_8_3 := ( $slice kread_2_3 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_2_1_3 := ($bitcast ($int<8>) kr_2_1_3 ) $buffering 1
    $volatile kval_2_2_3 := ($bitcast ($int<8>) kr_2_2_3 ) $buffering 1
    $volatile kval_2_3_3 := ($bitcast ($int<8>) kr_2_3_3 ) $buffering 1
    $volatile kval_2_4_3 := ($bitcast ($int<8>) kr_2_4_3 ) $buffering 1
    $volatile kval_2_5_3 := ($bitcast ($int<8>) kr_2_5_3 ) $buffering 1
    $volatile kval_2_6_3 := ($bitcast ($int<8>) kr_2_6_3 ) $buffering 1
    $volatile kval_2_7_3 := ($bitcast ($int<8>) kr_2_7_3 ) $buffering 1
    $volatile kval_2_8_3 := ($bitcast ($int<8>) kr_2_8_3 ) $buffering 1
    mul_val_2_1_3 := ($cast ($int<16>) (kval_2_1_3 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_2_3 := ($cast ($int<16>) (kval_2_2_3 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_3_3 := ($cast ($int<16>) (kval_2_3_3 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_4_3 := ($cast ($int<16>) (kval_2_4_3 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_5_3 := ($cast ($int<16>) (kval_2_5_3 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_6_3 := ($cast ($int<16>) (kval_2_6_3 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_7_3 := ($cast ($int<16>) (kval_2_7_3 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_8_3 := ($cast ($int<16>) (kval_2_8_3 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_2_3 := (((mul_val_2_1_3 + mul_val_2_2_3) + (mul_val_2_3_3 + mul_val_2_4_3)) + ((mul_val_2_5_3 + mul_val_2_6_3) + (mul_val_2_7_3 + mul_val_2_8_3))) $buffering 1
    mul_val_2_1_6 := ($cast ($int<16>) (kval_2_1_3 * ival1_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_2_6 := ($cast ($int<16>) (kval_2_2_3 * ival2_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_3_6 := ($cast ($int<16>) (kval_2_3_3 * ival3_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_4_6 := ($cast ($int<16>) (kval_2_4_3 * ival4_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_5_6 := ($cast ($int<16>) (kval_2_5_3 * ival5_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_6_6 := ($cast ($int<16>) (kval_2_6_3 * ival6_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_7_6 := ($cast ($int<16>) (kval_2_7_3 * ival7_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_8_6 := ($cast ($int<16>) (kval_2_8_3 * ival8_4) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_2_6 := (((mul_val_2_1_6 + mul_val_2_2_6) + (mul_val_2_3_6 + mul_val_2_4_6)) + ((mul_val_2_5_6 + mul_val_2_6_6) + (mul_val_2_7_6 + mul_val_2_8_6))) $buffering 1
    $volatile acc_val2_1 := ((t_acc_val_2_1 + t_acc_val_2_2) + t_acc_val_2_3) $buffering 1
    $volatile acc_val2_2 := ((t_acc_val_2_4 + t_acc_val_2_5) + t_acc_val_2_6) $buffering 1
    store_kernel_3434_delayed_1_0 := store_kernel $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel_3434_delayed_1_0) conv2_kp1 := kread_2_1 $buffering 1// bits of buffering = 64. 
    store_kernel_3438_delayed_1_0 := store_kernel $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel_3438_delayed_1_0) conv2_kp2 := kread_2_2 $buffering 1// bits of buffering = 64. 
    store_3_3442_delayed_1_0 := store_3 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_3_3442_delayed_1_0) conv2_kp3 := kread_2_3 $buffering 1// bits of buffering = 64. 
    $guard (read_k) tempk1_3_1 := core3_kp1 $buffering 1// bits of buffering = 64. 
    $guard (not_read_k) tempk2_3_1 := conv3_kp1 $buffering 1// bits of buffering = 64. 
    read_k_3455_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_3_1 := ( $mux read_k_3455_delayed_1_0 tempk1_3_1  tempk2_3_1 )  $buffering 1
    kr_3_1_1 := ( $slice kread_3_1 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_3_2_1 := ( $slice kread_3_1 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_3_3_1 := ( $slice kread_3_1 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_3_4_1 := ( $slice kread_3_1 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_3_5_1 := ( $slice kread_3_1 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_3_6_1 := ( $slice kread_3_1 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_3_7_1 := ( $slice kread_3_1 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_3_8_1 := ( $slice kread_3_1 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_3_1_1 := ($bitcast ($int<8>) kr_3_1_1 ) $buffering 1
    $volatile kval_3_2_1 := ($bitcast ($int<8>) kr_3_2_1 ) $buffering 1
    $volatile kval_3_3_1 := ($bitcast ($int<8>) kr_3_3_1 ) $buffering 1
    $volatile kval_3_4_1 := ($bitcast ($int<8>) kr_3_4_1 ) $buffering 1
    $volatile kval_3_5_1 := ($bitcast ($int<8>) kr_3_5_1 ) $buffering 1
    $volatile kval_3_6_1 := ($bitcast ($int<8>) kr_3_6_1 ) $buffering 1
    $volatile kval_3_7_1 := ($bitcast ($int<8>) kr_3_7_1 ) $buffering 1
    $volatile kval_3_8_1 := ($bitcast ($int<8>) kr_3_8_1 ) $buffering 1
    mul_val_3_1_1 := ($cast ($int<16>) (kval_3_1_1 * ival1_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_2_1 := ($cast ($int<16>) (kval_3_2_1 * ival2_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_3_1 := ($cast ($int<16>) (kval_3_3_1 * ival3_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_4_1 := ($cast ($int<16>) (kval_3_4_1 * ival4_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_5_1 := ($cast ($int<16>) (kval_3_5_1 * ival5_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_6_1 := ($cast ($int<16>) (kval_3_6_1 * ival6_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_7_1 := ($cast ($int<16>) (kval_3_7_1 * ival7_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_8_1 := ($cast ($int<16>) (kval_3_8_1 * ival8_1) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_3_1 := (((mul_val_3_1_1 + mul_val_3_2_1) + (mul_val_3_3_1 + mul_val_3_4_1)) + ((mul_val_3_5_1 + mul_val_3_6_1) + (mul_val_3_7_1 + mul_val_3_8_1))) $buffering 1
    mul_val_3_1_4 := ($cast ($int<16>) (kval_3_1_1 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_2_4 := ($cast ($int<16>) (kval_3_2_1 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_3_4 := ($cast ($int<16>) (kval_3_3_1 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_4_4 := ($cast ($int<16>) (kval_3_4_1 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_5_4 := ($cast ($int<16>) (kval_3_5_1 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_6_4 := ($cast ($int<16>) (kval_3_6_1 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_7_4 := ($cast ($int<16>) (kval_3_7_1 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_8_4 := ($cast ($int<16>) (kval_3_8_1 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_3_4 := (((mul_val_3_1_4 + mul_val_3_2_4) + (mul_val_3_3_4 + mul_val_3_4_4)) + ((mul_val_3_5_4 + mul_val_3_6_4) + (mul_val_3_7_4 + mul_val_3_8_4))) $buffering 1
    $guard (read_k) tempk1_3_2 := core3_kp2 $buffering 1// bits of buffering = 64. 
    $guard (not_read_k) tempk2_3_2 := conv3_kp2 $buffering 1// bits of buffering = 64. 
    read_k_3663_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_3_2 := ( $mux read_k_3663_delayed_1_0 tempk1_3_2  tempk2_3_2 )  $buffering 1
    kr_3_1_2 := ( $slice kread_3_2 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_3_2_2 := ( $slice kread_3_2 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_3_3_2 := ( $slice kread_3_2 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_3_4_2 := ( $slice kread_3_2 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_3_5_2 := ( $slice kread_3_2 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_3_6_2 := ( $slice kread_3_2 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_3_7_2 := ( $slice kread_3_2 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_3_8_2 := ( $slice kread_3_2 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_3_1_2 := ($bitcast ($int<8>) kr_3_1_2 ) $buffering 1
    $volatile kval_3_2_2 := ($bitcast ($int<8>) kr_3_2_2 ) $buffering 1
    $volatile kval_3_3_2 := ($bitcast ($int<8>) kr_3_3_2 ) $buffering 1
    $volatile kval_3_4_2 := ($bitcast ($int<8>) kr_3_4_2 ) $buffering 1
    $volatile kval_3_5_2 := ($bitcast ($int<8>) kr_3_5_2 ) $buffering 1
    $volatile kval_3_6_2 := ($bitcast ($int<8>) kr_3_6_2 ) $buffering 1
    $volatile kval_3_7_2 := ($bitcast ($int<8>) kr_3_7_2 ) $buffering 1
    $volatile kval_3_8_2 := ($bitcast ($int<8>) kr_3_8_2 ) $buffering 1
    mul_val_3_1_2 := ($cast ($int<16>) (kval_3_1_2 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_2_2 := ($cast ($int<16>) (kval_3_2_2 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_3_2 := ($cast ($int<16>) (kval_3_3_2 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_4_2 := ($cast ($int<16>) (kval_3_4_2 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_5_2 := ($cast ($int<16>) (kval_3_5_2 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_6_2 := ($cast ($int<16>) (kval_3_6_2 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_7_2 := ($cast ($int<16>) (kval_3_7_2 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_8_2 := ($cast ($int<16>) (kval_3_8_2 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_3_2 := (((mul_val_3_1_2 + mul_val_3_2_2) + (mul_val_3_3_2 + mul_val_3_4_2)) + ((mul_val_3_5_2 + mul_val_3_6_2) + (mul_val_3_7_2 + mul_val_3_8_2))) $buffering 1
    mul_val_3_1_5 := ($cast ($int<16>) (kval_3_1_2 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_2_5 := ($cast ($int<16>) (kval_3_2_2 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_3_5 := ($cast ($int<16>) (kval_3_3_2 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_4_5 := ($cast ($int<16>) (kval_3_4_2 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_5_5 := ($cast ($int<16>) (kval_3_5_2 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_6_5 := ($cast ($int<16>) (kval_3_6_2 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_7_5 := ($cast ($int<16>) (kval_3_7_2 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_8_5 := ($cast ($int<16>) (kval_3_8_2 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_3_5 := (((mul_val_3_1_5 + mul_val_3_2_5) + (mul_val_3_3_5 + mul_val_3_4_5)) + ((mul_val_3_5_5 + mul_val_3_6_5) + (mul_val_3_7_5 + mul_val_3_8_5))) $buffering 1
    $guard (readk_3) tempk1_3_3 := core3_kp3 $buffering 1// bits of buffering = 64. 
    $guard (not_readk_3) tempk2_3_3 := conv3_kp3 $buffering 1// bits of buffering = 64. 
    read_k_3873_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_3_3 := ( $mux mode_2 0   ( $mux read_k_3873_delayed_1_0 tempk1_3_3  tempk2_3_3 )  )  $buffering 1
    kr_3_1_3 := ( $slice kread_3_3 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_3_2_3 := ( $slice kread_3_3 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_3_3_3 := ( $slice kread_3_3 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_3_4_3 := ( $slice kread_3_3 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_3_5_3 := ( $slice kread_3_3 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_3_6_3 := ( $slice kread_3_3 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_3_7_3 := ( $slice kread_3_3 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_3_8_3 := ( $slice kread_3_3 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_3_1_3 := ($bitcast ($int<8>) kr_3_1_3 ) $buffering 1
    $volatile kval_3_2_3 := ($bitcast ($int<8>) kr_3_2_3 ) $buffering 1
    $volatile kval_3_3_3 := ($bitcast ($int<8>) kr_3_3_3 ) $buffering 1
    $volatile kval_3_4_3 := ($bitcast ($int<8>) kr_3_4_3 ) $buffering 1
    $volatile kval_3_5_3 := ($bitcast ($int<8>) kr_3_5_3 ) $buffering 1
    $volatile kval_3_6_3 := ($bitcast ($int<8>) kr_3_6_3 ) $buffering 1
    $volatile kval_3_7_3 := ($bitcast ($int<8>) kr_3_7_3 ) $buffering 1
    $volatile kval_3_8_3 := ($bitcast ($int<8>) kr_3_8_3 ) $buffering 1
    mul_val_3_1_3 := ($cast ($int<16>) (kval_3_1_3 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_2_3 := ($cast ($int<16>) (kval_3_2_3 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_3_3 := ($cast ($int<16>) (kval_3_3_3 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_4_3 := ($cast ($int<16>) (kval_3_4_3 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_5_3 := ($cast ($int<16>) (kval_3_5_3 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_6_3 := ($cast ($int<16>) (kval_3_6_3 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_7_3 := ($cast ($int<16>) (kval_3_7_3 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_8_3 := ($cast ($int<16>) (kval_3_8_3 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_3_3 := (((mul_val_3_1_3 + mul_val_3_2_3) + (mul_val_3_3_3 + mul_val_3_4_3)) + ((mul_val_3_5_3 + mul_val_3_6_3) + (mul_val_3_7_3 + mul_val_3_8_3))) $buffering 1
    mul_val_3_1_6 := ($cast ($int<16>) (kval_3_1_3 * ival1_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_2_6 := ($cast ($int<16>) (kval_3_2_3 * ival2_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_3_6 := ($cast ($int<16>) (kval_3_3_3 * ival3_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_4_6 := ($cast ($int<16>) (kval_3_4_3 * ival4_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_5_6 := ($cast ($int<16>) (kval_3_5_3 * ival5_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_6_6 := ($cast ($int<16>) (kval_3_6_3 * ival6_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_7_6 := ($cast ($int<16>) (kval_3_7_3 * ival7_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_8_6 := ($cast ($int<16>) (kval_3_8_3 * ival8_4) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_3_6 := (((mul_val_3_1_6 + mul_val_3_2_6) + (mul_val_3_3_6 + mul_val_3_4_6)) + ((mul_val_3_5_6 + mul_val_3_6_6) + (mul_val_3_7_6 + mul_val_3_8_6))) $buffering 1
    $volatile acc_val3_1 := ((t_acc_val_3_1 + t_acc_val_3_2) + t_acc_val_3_3) $buffering 1
    $volatile acc_val3_2 := ((t_acc_val_3_4 + t_acc_val_3_5) + t_acc_val_3_6) $buffering 1
    store_kernel_4087_delayed_1_0 := store_kernel $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel_4087_delayed_1_0) conv3_kp1 := kread_3_1 $buffering 1// bits of buffering = 64. 
    store_kernel_4091_delayed_1_0 := store_kernel $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel_4091_delayed_1_0) conv3_kp2 := kread_3_2 $buffering 1// bits of buffering = 64. 
    store_3_4095_delayed_1_0 := store_3 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_3_4095_delayed_1_0) conv3_kp3 := kread_3_3 $buffering 1// bits of buffering = 64. 
    $guard (read_k) tempk1_4_1 := core4_kp1 $buffering 1// bits of buffering = 64. 
    $guard (not_read_k) tempk2_4_1 := conv4_kp1 $buffering 1// bits of buffering = 64. 
    read_k_4108_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_4_1 := ( $mux read_k_4108_delayed_1_0 tempk1_4_1  tempk2_4_1 )  $buffering 1
    kr_4_1_1 := ( $slice kread_4_1 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_4_2_1 := ( $slice kread_4_1 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_4_3_1 := ( $slice kread_4_1 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_4_4_1 := ( $slice kread_4_1 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_4_5_1 := ( $slice kread_4_1 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_4_6_1 := ( $slice kread_4_1 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_4_7_1 := ( $slice kread_4_1 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_4_8_1 := ( $slice kread_4_1 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_4_1_1 := ($bitcast ($int<8>) kr_4_1_1 ) $buffering 1
    $volatile kval_4_2_1 := ($bitcast ($int<8>) kr_4_2_1 ) $buffering 1
    $volatile kval_4_3_1 := ($bitcast ($int<8>) kr_4_3_1 ) $buffering 1
    $volatile kval_4_4_1 := ($bitcast ($int<8>) kr_4_4_1 ) $buffering 1
    $volatile kval_4_5_1 := ($bitcast ($int<8>) kr_4_5_1 ) $buffering 1
    $volatile kval_4_6_1 := ($bitcast ($int<8>) kr_4_6_1 ) $buffering 1
    $volatile kval_4_7_1 := ($bitcast ($int<8>) kr_4_7_1 ) $buffering 1
    $volatile kval_4_8_1 := ($bitcast ($int<8>) kr_4_8_1 ) $buffering 1
    mul_val_4_1_1 := ($cast ($int<16>) (kval_4_1_1 * ival1_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_2_1 := ($cast ($int<16>) (kval_4_2_1 * ival2_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_3_1 := ($cast ($int<16>) (kval_4_3_1 * ival3_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_4_1 := ($cast ($int<16>) (kval_4_4_1 * ival4_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_5_1 := ($cast ($int<16>) (kval_4_5_1 * ival5_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_6_1 := ($cast ($int<16>) (kval_4_6_1 * ival6_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_7_1 := ($cast ($int<16>) (kval_4_7_1 * ival7_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_8_1 := ($cast ($int<16>) (kval_4_8_1 * ival8_1) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_4_1 := (((mul_val_4_1_1 + mul_val_4_2_1) + (mul_val_4_3_1 + mul_val_4_4_1)) + ((mul_val_4_5_1 + mul_val_4_6_1) + (mul_val_4_7_1 + mul_val_4_8_1))) $buffering 1
    mul_val_4_1_4 := ($cast ($int<16>) (kval_4_1_1 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_2_4 := ($cast ($int<16>) (kval_4_2_1 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_3_4 := ($cast ($int<16>) (kval_4_3_1 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_4_4 := ($cast ($int<16>) (kval_4_4_1 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_5_4 := ($cast ($int<16>) (kval_4_5_1 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_6_4 := ($cast ($int<16>) (kval_4_6_1 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_7_4 := ($cast ($int<16>) (kval_4_7_1 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_8_4 := ($cast ($int<16>) (kval_4_8_1 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_4_4 := (((mul_val_4_1_4 + mul_val_4_2_4) + (mul_val_4_3_4 + mul_val_4_4_4)) + ((mul_val_4_5_4 + mul_val_4_6_4) + (mul_val_4_7_4 + mul_val_4_8_4))) $buffering 1
    $guard (read_k) tempk1_4_2 := core4_kp2 $buffering 1// bits of buffering = 64. 
    $guard (not_read_k) tempk2_4_2 := conv4_kp2 $buffering 1// bits of buffering = 64. 
    read_k_4316_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_4_2 := ( $mux read_k_4316_delayed_1_0 tempk1_4_2  tempk2_4_2 )  $buffering 1
    kr_4_1_2 := ( $slice kread_4_2 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_4_2_2 := ( $slice kread_4_2 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_4_3_2 := ( $slice kread_4_2 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_4_4_2 := ( $slice kread_4_2 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_4_5_2 := ( $slice kread_4_2 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_4_6_2 := ( $slice kread_4_2 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_4_7_2 := ( $slice kread_4_2 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_4_8_2 := ( $slice kread_4_2 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_4_1_2 := ($bitcast ($int<8>) kr_4_1_2 ) $buffering 1
    $volatile kval_4_2_2 := ($bitcast ($int<8>) kr_4_2_2 ) $buffering 1
    $volatile kval_4_3_2 := ($bitcast ($int<8>) kr_4_3_2 ) $buffering 1
    $volatile kval_4_4_2 := ($bitcast ($int<8>) kr_4_4_2 ) $buffering 1
    $volatile kval_4_5_2 := ($bitcast ($int<8>) kr_4_5_2 ) $buffering 1
    $volatile kval_4_6_2 := ($bitcast ($int<8>) kr_4_6_2 ) $buffering 1
    $volatile kval_4_7_2 := ($bitcast ($int<8>) kr_4_7_2 ) $buffering 1
    $volatile kval_4_8_2 := ($bitcast ($int<8>) kr_4_8_2 ) $buffering 1
    mul_val_4_1_2 := ($cast ($int<16>) (kval_4_1_2 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_2_2 := ($cast ($int<16>) (kval_4_2_2 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_3_2 := ($cast ($int<16>) (kval_4_3_2 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_4_2 := ($cast ($int<16>) (kval_4_4_2 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_5_2 := ($cast ($int<16>) (kval_4_5_2 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_6_2 := ($cast ($int<16>) (kval_4_6_2 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_7_2 := ($cast ($int<16>) (kval_4_7_2 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_8_2 := ($cast ($int<16>) (kval_4_8_2 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_4_2 := (((mul_val_4_1_2 + mul_val_4_2_2) + (mul_val_4_3_2 + mul_val_4_4_2)) + ((mul_val_4_5_2 + mul_val_4_6_2) + (mul_val_4_7_2 + mul_val_4_8_2))) $buffering 1
    mul_val_4_1_5 := ($cast ($int<16>) (kval_4_1_2 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_2_5 := ($cast ($int<16>) (kval_4_2_2 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_3_5 := ($cast ($int<16>) (kval_4_3_2 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_4_5 := ($cast ($int<16>) (kval_4_4_2 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_5_5 := ($cast ($int<16>) (kval_4_5_2 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_6_5 := ($cast ($int<16>) (kval_4_6_2 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_7_5 := ($cast ($int<16>) (kval_4_7_2 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_8_5 := ($cast ($int<16>) (kval_4_8_2 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_4_5 := (((mul_val_4_1_5 + mul_val_4_2_5) + (mul_val_4_3_5 + mul_val_4_4_5)) + ((mul_val_4_5_5 + mul_val_4_6_5) + (mul_val_4_7_5 + mul_val_4_8_5))) $buffering 1
    $guard (readk_3) tempk1_4_3 := core4_kp3 $buffering 1// bits of buffering = 64. 
    $guard (not_readk_3) tempk2_4_3 := conv4_kp3 $buffering 1// bits of buffering = 64. 
    read_k_4526_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_4_3 := ( $mux mode_2 0   ( $mux read_k_4526_delayed_1_0 tempk1_4_3  tempk2_4_3 )  )  $buffering 1
    kr_4_1_3 := ( $slice kread_4_3 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_4_2_3 := ( $slice kread_4_3 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_4_3_3 := ( $slice kread_4_3 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_4_4_3 := ( $slice kread_4_3 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_4_5_3 := ( $slice kread_4_3 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_4_6_3 := ( $slice kread_4_3 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_4_7_3 := ( $slice kread_4_3 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_4_8_3 := ( $slice kread_4_3 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_4_1_3 := ($bitcast ($int<8>) kr_4_1_3 ) $buffering 1
    $volatile kval_4_2_3 := ($bitcast ($int<8>) kr_4_2_3 ) $buffering 1
    $volatile kval_4_3_3 := ($bitcast ($int<8>) kr_4_3_3 ) $buffering 1
    $volatile kval_4_4_3 := ($bitcast ($int<8>) kr_4_4_3 ) $buffering 1
    $volatile kval_4_5_3 := ($bitcast ($int<8>) kr_4_5_3 ) $buffering 1
    $volatile kval_4_6_3 := ($bitcast ($int<8>) kr_4_6_3 ) $buffering 1
    $volatile kval_4_7_3 := ($bitcast ($int<8>) kr_4_7_3 ) $buffering 1
    $volatile kval_4_8_3 := ($bitcast ($int<8>) kr_4_8_3 ) $buffering 1
    mul_val_4_1_3 := ($cast ($int<16>) (kval_4_1_3 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_2_3 := ($cast ($int<16>) (kval_4_2_3 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_3_3 := ($cast ($int<16>) (kval_4_3_3 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_4_3 := ($cast ($int<16>) (kval_4_4_3 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_5_3 := ($cast ($int<16>) (kval_4_5_3 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_6_3 := ($cast ($int<16>) (kval_4_6_3 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_7_3 := ($cast ($int<16>) (kval_4_7_3 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_8_3 := ($cast ($int<16>) (kval_4_8_3 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_4_3 := (((mul_val_4_1_3 + mul_val_4_2_3) + (mul_val_4_3_3 + mul_val_4_4_3)) + ((mul_val_4_5_3 + mul_val_4_6_3) + (mul_val_4_7_3 + mul_val_4_8_3))) $buffering 1
    mul_val_4_1_6 := ($cast ($int<16>) (kval_4_1_3 * ival1_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_2_6 := ($cast ($int<16>) (kval_4_2_3 * ival2_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_3_6 := ($cast ($int<16>) (kval_4_3_3 * ival3_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_4_6 := ($cast ($int<16>) (kval_4_4_3 * ival4_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_5_6 := ($cast ($int<16>) (kval_4_5_3 * ival5_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_6_6 := ($cast ($int<16>) (kval_4_6_3 * ival6_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_7_6 := ($cast ($int<16>) (kval_4_7_3 * ival7_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_8_6 := ($cast ($int<16>) (kval_4_8_3 * ival8_4) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_4_6 := (((mul_val_4_1_6 + mul_val_4_2_6) + (mul_val_4_3_6 + mul_val_4_4_6)) + ((mul_val_4_5_6 + mul_val_4_6_6) + (mul_val_4_7_6 + mul_val_4_8_6))) $buffering 1
    $volatile acc_val4_1 := ((t_acc_val_4_1 + t_acc_val_4_2) + t_acc_val_4_3) $buffering 1
    $volatile acc_val4_2 := ((t_acc_val_4_4 + t_acc_val_4_5) + t_acc_val_4_6) $buffering 1
    store_kernel_4740_delayed_1_0 := store_kernel $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel_4740_delayed_1_0) conv4_kp1 := kread_4_1 $buffering 1// bits of buffering = 64. 
    store_kernel_4744_delayed_1_0 := store_kernel $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel_4744_delayed_1_0) conv4_kp2 := kread_4_2 $buffering 1// bits of buffering = 64. 
    store_3_4748_delayed_1_0 := store_3 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_3_4748_delayed_1_0) conv4_kp3 := kread_4_3 $buffering 1// bits of buffering = 64. 
    $guard (read_k) tempk1_5_1 := core5_kp1 $buffering 1// bits of buffering = 64. 
    $guard (not_read_k) tempk2_5_1 := conv5_kp1 $buffering 1// bits of buffering = 64. 
    read_k_4761_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_5_1 := ( $mux read_k_4761_delayed_1_0 tempk1_5_1  tempk2_5_1 )  $buffering 1
    kr_5_1_1 := ( $slice kread_5_1 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_5_2_1 := ( $slice kread_5_1 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_5_3_1 := ( $slice kread_5_1 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_5_4_1 := ( $slice kread_5_1 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_5_5_1 := ( $slice kread_5_1 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_5_6_1 := ( $slice kread_5_1 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_5_7_1 := ( $slice kread_5_1 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_5_8_1 := ( $slice kread_5_1 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_5_1_1 := ($bitcast ($int<8>) kr_5_1_1 ) $buffering 1
    $volatile kval_5_2_1 := ($bitcast ($int<8>) kr_5_2_1 ) $buffering 1
    $volatile kval_5_3_1 := ($bitcast ($int<8>) kr_5_3_1 ) $buffering 1
    $volatile kval_5_4_1 := ($bitcast ($int<8>) kr_5_4_1 ) $buffering 1
    $volatile kval_5_5_1 := ($bitcast ($int<8>) kr_5_5_1 ) $buffering 1
    $volatile kval_5_6_1 := ($bitcast ($int<8>) kr_5_6_1 ) $buffering 1
    $volatile kval_5_7_1 := ($bitcast ($int<8>) kr_5_7_1 ) $buffering 1
    $volatile kval_5_8_1 := ($bitcast ($int<8>) kr_5_8_1 ) $buffering 1
    mul_val_5_1_1 := ($cast ($int<16>) (kval_5_1_1 * ival1_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_2_1 := ($cast ($int<16>) (kval_5_2_1 * ival2_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_3_1 := ($cast ($int<16>) (kval_5_3_1 * ival3_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_4_1 := ($cast ($int<16>) (kval_5_4_1 * ival4_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_5_1 := ($cast ($int<16>) (kval_5_5_1 * ival5_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_6_1 := ($cast ($int<16>) (kval_5_6_1 * ival6_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_7_1 := ($cast ($int<16>) (kval_5_7_1 * ival7_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_8_1 := ($cast ($int<16>) (kval_5_8_1 * ival8_1) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_5_1 := (((mul_val_5_1_1 + mul_val_5_2_1) + (mul_val_5_3_1 + mul_val_5_4_1)) + ((mul_val_5_5_1 + mul_val_5_6_1) + (mul_val_5_7_1 + mul_val_5_8_1))) $buffering 1
    mul_val_5_1_4 := ($cast ($int<16>) (kval_5_1_1 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_2_4 := ($cast ($int<16>) (kval_5_2_1 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_3_4 := ($cast ($int<16>) (kval_5_3_1 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_4_4 := ($cast ($int<16>) (kval_5_4_1 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_5_4 := ($cast ($int<16>) (kval_5_5_1 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_6_4 := ($cast ($int<16>) (kval_5_6_1 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_7_4 := ($cast ($int<16>) (kval_5_7_1 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_8_4 := ($cast ($int<16>) (kval_5_8_1 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_5_4 := (((mul_val_5_1_4 + mul_val_5_2_4) + (mul_val_5_3_4 + mul_val_5_4_4)) + ((mul_val_5_5_4 + mul_val_5_6_4) + (mul_val_5_7_4 + mul_val_5_8_4))) $buffering 1
    $guard (read_k) tempk1_5_2 := core5_kp2 $buffering 1// bits of buffering = 64. 
    $guard (not_read_k) tempk2_5_2 := conv5_kp2 $buffering 1// bits of buffering = 64. 
    read_k_4969_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_5_2 := ( $mux read_k_4969_delayed_1_0 tempk1_5_2  tempk2_5_2 )  $buffering 1
    kr_5_1_2 := ( $slice kread_5_2 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_5_2_2 := ( $slice kread_5_2 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_5_3_2 := ( $slice kread_5_2 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_5_4_2 := ( $slice kread_5_2 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_5_5_2 := ( $slice kread_5_2 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_5_6_2 := ( $slice kread_5_2 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_5_7_2 := ( $slice kread_5_2 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_5_8_2 := ( $slice kread_5_2 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_5_1_2 := ($bitcast ($int<8>) kr_5_1_2 ) $buffering 1
    $volatile kval_5_2_2 := ($bitcast ($int<8>) kr_5_2_2 ) $buffering 1
    $volatile kval_5_3_2 := ($bitcast ($int<8>) kr_5_3_2 ) $buffering 1
    $volatile kval_5_4_2 := ($bitcast ($int<8>) kr_5_4_2 ) $buffering 1
    $volatile kval_5_5_2 := ($bitcast ($int<8>) kr_5_5_2 ) $buffering 1
    $volatile kval_5_6_2 := ($bitcast ($int<8>) kr_5_6_2 ) $buffering 1
    $volatile kval_5_7_2 := ($bitcast ($int<8>) kr_5_7_2 ) $buffering 1
    $volatile kval_5_8_2 := ($bitcast ($int<8>) kr_5_8_2 ) $buffering 1
    mul_val_5_1_2 := ($cast ($int<16>) (kval_5_1_2 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_2_2 := ($cast ($int<16>) (kval_5_2_2 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_3_2 := ($cast ($int<16>) (kval_5_3_2 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_4_2 := ($cast ($int<16>) (kval_5_4_2 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_5_2 := ($cast ($int<16>) (kval_5_5_2 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_6_2 := ($cast ($int<16>) (kval_5_6_2 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_7_2 := ($cast ($int<16>) (kval_5_7_2 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_8_2 := ($cast ($int<16>) (kval_5_8_2 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_5_2 := (((mul_val_5_1_2 + mul_val_5_2_2) + (mul_val_5_3_2 + mul_val_5_4_2)) + ((mul_val_5_5_2 + mul_val_5_6_2) + (mul_val_5_7_2 + mul_val_5_8_2))) $buffering 1
    mul_val_5_1_5 := ($cast ($int<16>) (kval_5_1_2 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_2_5 := ($cast ($int<16>) (kval_5_2_2 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_3_5 := ($cast ($int<16>) (kval_5_3_2 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_4_5 := ($cast ($int<16>) (kval_5_4_2 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_5_5 := ($cast ($int<16>) (kval_5_5_2 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_6_5 := ($cast ($int<16>) (kval_5_6_2 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_7_5 := ($cast ($int<16>) (kval_5_7_2 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_8_5 := ($cast ($int<16>) (kval_5_8_2 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_5_5 := (((mul_val_5_1_5 + mul_val_5_2_5) + (mul_val_5_3_5 + mul_val_5_4_5)) + ((mul_val_5_5_5 + mul_val_5_6_5) + (mul_val_5_7_5 + mul_val_5_8_5))) $buffering 1
    $guard (readk_3) tempk1_5_3 := core5_kp3 $buffering 1// bits of buffering = 64. 
    $guard (not_readk_3) tempk2_5_3 := conv5_kp3 $buffering 1// bits of buffering = 64. 
    read_k_5179_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_5_3 := ( $mux mode_2 0   ( $mux read_k_5179_delayed_1_0 tempk1_5_3  tempk2_5_3 )  )  $buffering 1
    kr_5_1_3 := ( $slice kread_5_3 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_5_2_3 := ( $slice kread_5_3 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_5_3_3 := ( $slice kread_5_3 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_5_4_3 := ( $slice kread_5_3 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_5_5_3 := ( $slice kread_5_3 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_5_6_3 := ( $slice kread_5_3 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_5_7_3 := ( $slice kread_5_3 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_5_8_3 := ( $slice kread_5_3 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_5_1_3 := ($bitcast ($int<8>) kr_5_1_3 ) $buffering 1
    $volatile kval_5_2_3 := ($bitcast ($int<8>) kr_5_2_3 ) $buffering 1
    $volatile kval_5_3_3 := ($bitcast ($int<8>) kr_5_3_3 ) $buffering 1
    $volatile kval_5_4_3 := ($bitcast ($int<8>) kr_5_4_3 ) $buffering 1
    $volatile kval_5_5_3 := ($bitcast ($int<8>) kr_5_5_3 ) $buffering 1
    $volatile kval_5_6_3 := ($bitcast ($int<8>) kr_5_6_3 ) $buffering 1
    $volatile kval_5_7_3 := ($bitcast ($int<8>) kr_5_7_3 ) $buffering 1
    $volatile kval_5_8_3 := ($bitcast ($int<8>) kr_5_8_3 ) $buffering 1
    mul_val_5_1_3 := ($cast ($int<16>) (kval_5_1_3 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_2_3 := ($cast ($int<16>) (kval_5_2_3 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_3_3 := ($cast ($int<16>) (kval_5_3_3 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_4_3 := ($cast ($int<16>) (kval_5_4_3 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_5_3 := ($cast ($int<16>) (kval_5_5_3 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_6_3 := ($cast ($int<16>) (kval_5_6_3 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_7_3 := ($cast ($int<16>) (kval_5_7_3 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_8_3 := ($cast ($int<16>) (kval_5_8_3 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_5_3 := (((mul_val_5_1_3 + mul_val_5_2_3) + (mul_val_5_3_3 + mul_val_5_4_3)) + ((mul_val_5_5_3 + mul_val_5_6_3) + (mul_val_5_7_3 + mul_val_5_8_3))) $buffering 1
    mul_val_5_1_6 := ($cast ($int<16>) (kval_5_1_3 * ival1_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_2_6 := ($cast ($int<16>) (kval_5_2_3 * ival2_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_3_6 := ($cast ($int<16>) (kval_5_3_3 * ival3_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_4_6 := ($cast ($int<16>) (kval_5_4_3 * ival4_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_5_6 := ($cast ($int<16>) (kval_5_5_3 * ival5_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_6_6 := ($cast ($int<16>) (kval_5_6_3 * ival6_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_7_6 := ($cast ($int<16>) (kval_5_7_3 * ival7_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_8_6 := ($cast ($int<16>) (kval_5_8_3 * ival8_4) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_5_6 := (((mul_val_5_1_6 + mul_val_5_2_6) + (mul_val_5_3_6 + mul_val_5_4_6)) + ((mul_val_5_5_6 + mul_val_5_6_6) + (mul_val_5_7_6 + mul_val_5_8_6))) $buffering 1
    $volatile acc_val5_1 := ((t_acc_val_5_1 + t_acc_val_5_2) + t_acc_val_5_3) $buffering 1
    $volatile acc_val5_2 := ((t_acc_val_5_4 + t_acc_val_5_5) + t_acc_val_5_6) $buffering 1
    store_kernel_5393_delayed_1_0 := store_kernel $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel_5393_delayed_1_0) conv5_kp1 := kread_5_1 $buffering 1// bits of buffering = 64. 
    store_kernel_5397_delayed_1_0 := store_kernel $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel_5397_delayed_1_0) conv5_kp2 := kread_5_2 $buffering 1// bits of buffering = 64. 
    store_3_5401_delayed_1_0 := store_3 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_3_5401_delayed_1_0) conv5_kp3 := kread_5_3 $buffering 1// bits of buffering = 64. 
    $guard (read_k) tempk1_6_1 := core6_kp1 $buffering 1// bits of buffering = 64. 
    $guard (not_read_k) tempk2_6_1 := conv6_kp1 $buffering 1// bits of buffering = 64. 
    read_k_5414_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_6_1 := ( $mux read_k_5414_delayed_1_0 tempk1_6_1  tempk2_6_1 )  $buffering 1
    kr_6_1_1 := ( $slice kread_6_1 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_6_2_1 := ( $slice kread_6_1 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_6_3_1 := ( $slice kread_6_1 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_6_4_1 := ( $slice kread_6_1 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_6_5_1 := ( $slice kread_6_1 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_6_6_1 := ( $slice kread_6_1 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_6_7_1 := ( $slice kread_6_1 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_6_8_1 := ( $slice kread_6_1 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_6_1_1 := ($bitcast ($int<8>) kr_6_1_1 ) $buffering 1
    $volatile kval_6_2_1 := ($bitcast ($int<8>) kr_6_2_1 ) $buffering 1
    $volatile kval_6_3_1 := ($bitcast ($int<8>) kr_6_3_1 ) $buffering 1
    $volatile kval_6_4_1 := ($bitcast ($int<8>) kr_6_4_1 ) $buffering 1
    $volatile kval_6_5_1 := ($bitcast ($int<8>) kr_6_5_1 ) $buffering 1
    $volatile kval_6_6_1 := ($bitcast ($int<8>) kr_6_6_1 ) $buffering 1
    $volatile kval_6_7_1 := ($bitcast ($int<8>) kr_6_7_1 ) $buffering 1
    $volatile kval_6_8_1 := ($bitcast ($int<8>) kr_6_8_1 ) $buffering 1
    mul_val_6_1_1 := ($cast ($int<16>) (kval_6_1_1 * ival1_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_2_1 := ($cast ($int<16>) (kval_6_2_1 * ival2_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_3_1 := ($cast ($int<16>) (kval_6_3_1 * ival3_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_4_1 := ($cast ($int<16>) (kval_6_4_1 * ival4_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_5_1 := ($cast ($int<16>) (kval_6_5_1 * ival5_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_6_1 := ($cast ($int<16>) (kval_6_6_1 * ival6_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_7_1 := ($cast ($int<16>) (kval_6_7_1 * ival7_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_8_1 := ($cast ($int<16>) (kval_6_8_1 * ival8_1) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_6_1 := (((mul_val_6_1_1 + mul_val_6_2_1) + (mul_val_6_3_1 + mul_val_6_4_1)) + ((mul_val_6_5_1 + mul_val_6_6_1) + (mul_val_6_7_1 + mul_val_6_8_1))) $buffering 1
    mul_val_6_1_4 := ($cast ($int<16>) (kval_6_1_1 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_2_4 := ($cast ($int<16>) (kval_6_2_1 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_3_4 := ($cast ($int<16>) (kval_6_3_1 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_4_4 := ($cast ($int<16>) (kval_6_4_1 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_5_4 := ($cast ($int<16>) (kval_6_5_1 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_6_4 := ($cast ($int<16>) (kval_6_6_1 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_7_4 := ($cast ($int<16>) (kval_6_7_1 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_8_4 := ($cast ($int<16>) (kval_6_8_1 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_6_4 := (((mul_val_6_1_4 + mul_val_6_2_4) + (mul_val_6_3_4 + mul_val_6_4_4)) + ((mul_val_6_5_4 + mul_val_6_6_4) + (mul_val_6_7_4 + mul_val_6_8_4))) $buffering 1
    $guard (read_k) tempk1_6_2 := core6_kp2 $buffering 1// bits of buffering = 64. 
    $guard (not_read_k) tempk2_6_2 := conv6_kp2 $buffering 1// bits of buffering = 64. 
    read_k_5622_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_6_2 := ( $mux read_k_5622_delayed_1_0 tempk1_6_2  tempk2_6_2 )  $buffering 1
    kr_6_1_2 := ( $slice kread_6_2 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_6_2_2 := ( $slice kread_6_2 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_6_3_2 := ( $slice kread_6_2 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_6_4_2 := ( $slice kread_6_2 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_6_5_2 := ( $slice kread_6_2 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_6_6_2 := ( $slice kread_6_2 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_6_7_2 := ( $slice kread_6_2 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_6_8_2 := ( $slice kread_6_2 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_6_1_2 := ($bitcast ($int<8>) kr_6_1_2 ) $buffering 1
    $volatile kval_6_2_2 := ($bitcast ($int<8>) kr_6_2_2 ) $buffering 1
    $volatile kval_6_3_2 := ($bitcast ($int<8>) kr_6_3_2 ) $buffering 1
    $volatile kval_6_4_2 := ($bitcast ($int<8>) kr_6_4_2 ) $buffering 1
    $volatile kval_6_5_2 := ($bitcast ($int<8>) kr_6_5_2 ) $buffering 1
    $volatile kval_6_6_2 := ($bitcast ($int<8>) kr_6_6_2 ) $buffering 1
    $volatile kval_6_7_2 := ($bitcast ($int<8>) kr_6_7_2 ) $buffering 1
    $volatile kval_6_8_2 := ($bitcast ($int<8>) kr_6_8_2 ) $buffering 1
    mul_val_6_1_2 := ($cast ($int<16>) (kval_6_1_2 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_2_2 := ($cast ($int<16>) (kval_6_2_2 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_3_2 := ($cast ($int<16>) (kval_6_3_2 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_4_2 := ($cast ($int<16>) (kval_6_4_2 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_5_2 := ($cast ($int<16>) (kval_6_5_2 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_6_2 := ($cast ($int<16>) (kval_6_6_2 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_7_2 := ($cast ($int<16>) (kval_6_7_2 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_8_2 := ($cast ($int<16>) (kval_6_8_2 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_6_2 := (((mul_val_6_1_2 + mul_val_6_2_2) + (mul_val_6_3_2 + mul_val_6_4_2)) + ((mul_val_6_5_2 + mul_val_6_6_2) + (mul_val_6_7_2 + mul_val_6_8_2))) $buffering 1
    mul_val_6_1_5 := ($cast ($int<16>) (kval_6_1_2 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_2_5 := ($cast ($int<16>) (kval_6_2_2 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_3_5 := ($cast ($int<16>) (kval_6_3_2 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_4_5 := ($cast ($int<16>) (kval_6_4_2 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_5_5 := ($cast ($int<16>) (kval_6_5_2 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_6_5 := ($cast ($int<16>) (kval_6_6_2 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_7_5 := ($cast ($int<16>) (kval_6_7_2 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_8_5 := ($cast ($int<16>) (kval_6_8_2 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_6_5 := (((mul_val_6_1_5 + mul_val_6_2_5) + (mul_val_6_3_5 + mul_val_6_4_5)) + ((mul_val_6_5_5 + mul_val_6_6_5) + (mul_val_6_7_5 + mul_val_6_8_5))) $buffering 1
    $guard (readk_3) tempk1_6_3 := core6_kp3 $buffering 1// bits of buffering = 64. 
    $guard (not_readk_3) tempk2_6_3 := conv6_kp3 $buffering 1// bits of buffering = 64. 
    read_k_5832_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_6_3 := ( $mux mode_2 0   ( $mux read_k_5832_delayed_1_0 tempk1_6_3  tempk2_6_3 )  )  $buffering 1
    kr_6_1_3 := ( $slice kread_6_3 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_6_2_3 := ( $slice kread_6_3 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_6_3_3 := ( $slice kread_6_3 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_6_4_3 := ( $slice kread_6_3 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_6_5_3 := ( $slice kread_6_3 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_6_6_3 := ( $slice kread_6_3 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_6_7_3 := ( $slice kread_6_3 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_6_8_3 := ( $slice kread_6_3 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_6_1_3 := ($bitcast ($int<8>) kr_6_1_3 ) $buffering 1
    $volatile kval_6_2_3 := ($bitcast ($int<8>) kr_6_2_3 ) $buffering 1
    $volatile kval_6_3_3 := ($bitcast ($int<8>) kr_6_3_3 ) $buffering 1
    $volatile kval_6_4_3 := ($bitcast ($int<8>) kr_6_4_3 ) $buffering 1
    $volatile kval_6_5_3 := ($bitcast ($int<8>) kr_6_5_3 ) $buffering 1
    $volatile kval_6_6_3 := ($bitcast ($int<8>) kr_6_6_3 ) $buffering 1
    $volatile kval_6_7_3 := ($bitcast ($int<8>) kr_6_7_3 ) $buffering 1
    $volatile kval_6_8_3 := ($bitcast ($int<8>) kr_6_8_3 ) $buffering 1
    mul_val_6_1_3 := ($cast ($int<16>) (kval_6_1_3 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_2_3 := ($cast ($int<16>) (kval_6_2_3 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_3_3 := ($cast ($int<16>) (kval_6_3_3 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_4_3 := ($cast ($int<16>) (kval_6_4_3 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_5_3 := ($cast ($int<16>) (kval_6_5_3 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_6_3 := ($cast ($int<16>) (kval_6_6_3 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_7_3 := ($cast ($int<16>) (kval_6_7_3 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_8_3 := ($cast ($int<16>) (kval_6_8_3 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_6_3 := (((mul_val_6_1_3 + mul_val_6_2_3) + (mul_val_6_3_3 + mul_val_6_4_3)) + ((mul_val_6_5_3 + mul_val_6_6_3) + (mul_val_6_7_3 + mul_val_6_8_3))) $buffering 1
    mul_val_6_1_6 := ($cast ($int<16>) (kval_6_1_3 * ival1_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_2_6 := ($cast ($int<16>) (kval_6_2_3 * ival2_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_3_6 := ($cast ($int<16>) (kval_6_3_3 * ival3_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_4_6 := ($cast ($int<16>) (kval_6_4_3 * ival4_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_5_6 := ($cast ($int<16>) (kval_6_5_3 * ival5_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_6_6 := ($cast ($int<16>) (kval_6_6_3 * ival6_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_7_6 := ($cast ($int<16>) (kval_6_7_3 * ival7_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_8_6 := ($cast ($int<16>) (kval_6_8_3 * ival8_4) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_6_6 := (((mul_val_6_1_6 + mul_val_6_2_6) + (mul_val_6_3_6 + mul_val_6_4_6)) + ((mul_val_6_5_6 + mul_val_6_6_6) + (mul_val_6_7_6 + mul_val_6_8_6))) $buffering 1
    $volatile acc_val6_1 := ((t_acc_val_6_1 + t_acc_val_6_2) + t_acc_val_6_3) $buffering 1
    $volatile acc_val6_2 := ((t_acc_val_6_4 + t_acc_val_6_5) + t_acc_val_6_6) $buffering 1
    store_kernel_6046_delayed_1_0 := store_kernel $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel_6046_delayed_1_0) conv6_kp1 := kread_6_1 $buffering 1// bits of buffering = 64. 
    store_kernel_6050_delayed_1_0 := store_kernel $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel_6050_delayed_1_0) conv6_kp2 := kread_6_2 $buffering 1// bits of buffering = 64. 
    store_3_6054_delayed_1_0 := store_3 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_3_6054_delayed_1_0) conv6_kp3 := kread_6_3 $buffering 1// bits of buffering = 64. 
    $guard (read_k) tempk1_7_1 := core7_kp1 $buffering 1// bits of buffering = 64. 
    $guard (not_read_k) tempk2_7_1 := conv7_kp1 $buffering 1// bits of buffering = 64. 
    read_k_6067_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_7_1 := ( $mux read_k_6067_delayed_1_0 tempk1_7_1  tempk2_7_1 )  $buffering 1
    kr_7_1_1 := ( $slice kread_7_1 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_7_2_1 := ( $slice kread_7_1 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_7_3_1 := ( $slice kread_7_1 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_7_4_1 := ( $slice kread_7_1 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_7_5_1 := ( $slice kread_7_1 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_7_6_1 := ( $slice kread_7_1 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_7_7_1 := ( $slice kread_7_1 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_7_8_1 := ( $slice kread_7_1 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_7_1_1 := ($bitcast ($int<8>) kr_7_1_1 ) $buffering 1
    $volatile kval_7_2_1 := ($bitcast ($int<8>) kr_7_2_1 ) $buffering 1
    $volatile kval_7_3_1 := ($bitcast ($int<8>) kr_7_3_1 ) $buffering 1
    $volatile kval_7_4_1 := ($bitcast ($int<8>) kr_7_4_1 ) $buffering 1
    $volatile kval_7_5_1 := ($bitcast ($int<8>) kr_7_5_1 ) $buffering 1
    $volatile kval_7_6_1 := ($bitcast ($int<8>) kr_7_6_1 ) $buffering 1
    $volatile kval_7_7_1 := ($bitcast ($int<8>) kr_7_7_1 ) $buffering 1
    $volatile kval_7_8_1 := ($bitcast ($int<8>) kr_7_8_1 ) $buffering 1
    mul_val_7_1_1 := ($cast ($int<16>) (kval_7_1_1 * ival1_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_2_1 := ($cast ($int<16>) (kval_7_2_1 * ival2_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_3_1 := ($cast ($int<16>) (kval_7_3_1 * ival3_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_4_1 := ($cast ($int<16>) (kval_7_4_1 * ival4_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_5_1 := ($cast ($int<16>) (kval_7_5_1 * ival5_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_6_1 := ($cast ($int<16>) (kval_7_6_1 * ival6_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_7_1 := ($cast ($int<16>) (kval_7_7_1 * ival7_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_8_1 := ($cast ($int<16>) (kval_7_8_1 * ival8_1) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_7_1 := (((mul_val_7_1_1 + mul_val_7_2_1) + (mul_val_7_3_1 + mul_val_7_4_1)) + ((mul_val_7_5_1 + mul_val_7_6_1) + (mul_val_7_7_1 + mul_val_7_8_1))) $buffering 1
    mul_val_7_1_4 := ($cast ($int<16>) (kval_7_1_1 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_2_4 := ($cast ($int<16>) (kval_7_2_1 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_3_4 := ($cast ($int<16>) (kval_7_3_1 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_4_4 := ($cast ($int<16>) (kval_7_4_1 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_5_4 := ($cast ($int<16>) (kval_7_5_1 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_6_4 := ($cast ($int<16>) (kval_7_6_1 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_7_4 := ($cast ($int<16>) (kval_7_7_1 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_8_4 := ($cast ($int<16>) (kval_7_8_1 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_7_4 := (((mul_val_7_1_4 + mul_val_7_2_4) + (mul_val_7_3_4 + mul_val_7_4_4)) + ((mul_val_7_5_4 + mul_val_7_6_4) + (mul_val_7_7_4 + mul_val_7_8_4))) $buffering 1
    $guard (read_k) tempk1_7_2 := core7_kp2 $buffering 1// bits of buffering = 64. 
    $guard (not_read_k) tempk2_7_2 := conv7_kp2 $buffering 1// bits of buffering = 64. 
    read_k_6275_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_7_2 := ( $mux read_k_6275_delayed_1_0 tempk1_7_2  tempk2_7_2 )  $buffering 1
    kr_7_1_2 := ( $slice kread_7_2 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_7_2_2 := ( $slice kread_7_2 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_7_3_2 := ( $slice kread_7_2 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_7_4_2 := ( $slice kread_7_2 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_7_5_2 := ( $slice kread_7_2 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_7_6_2 := ( $slice kread_7_2 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_7_7_2 := ( $slice kread_7_2 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_7_8_2 := ( $slice kread_7_2 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_7_1_2 := ($bitcast ($int<8>) kr_7_1_2 ) $buffering 1
    $volatile kval_7_2_2 := ($bitcast ($int<8>) kr_7_2_2 ) $buffering 1
    $volatile kval_7_3_2 := ($bitcast ($int<8>) kr_7_3_2 ) $buffering 1
    $volatile kval_7_4_2 := ($bitcast ($int<8>) kr_7_4_2 ) $buffering 1
    $volatile kval_7_5_2 := ($bitcast ($int<8>) kr_7_5_2 ) $buffering 1
    $volatile kval_7_6_2 := ($bitcast ($int<8>) kr_7_6_2 ) $buffering 1
    $volatile kval_7_7_2 := ($bitcast ($int<8>) kr_7_7_2 ) $buffering 1
    $volatile kval_7_8_2 := ($bitcast ($int<8>) kr_7_8_2 ) $buffering 1
    mul_val_7_1_2 := ($cast ($int<16>) (kval_7_1_2 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_2_2 := ($cast ($int<16>) (kval_7_2_2 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_3_2 := ($cast ($int<16>) (kval_7_3_2 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_4_2 := ($cast ($int<16>) (kval_7_4_2 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_5_2 := ($cast ($int<16>) (kval_7_5_2 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_6_2 := ($cast ($int<16>) (kval_7_6_2 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_7_2 := ($cast ($int<16>) (kval_7_7_2 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_8_2 := ($cast ($int<16>) (kval_7_8_2 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_7_2 := (((mul_val_7_1_2 + mul_val_7_2_2) + (mul_val_7_3_2 + mul_val_7_4_2)) + ((mul_val_7_5_2 + mul_val_7_6_2) + (mul_val_7_7_2 + mul_val_7_8_2))) $buffering 1
    mul_val_7_1_5 := ($cast ($int<16>) (kval_7_1_2 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_2_5 := ($cast ($int<16>) (kval_7_2_2 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_3_5 := ($cast ($int<16>) (kval_7_3_2 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_4_5 := ($cast ($int<16>) (kval_7_4_2 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_5_5 := ($cast ($int<16>) (kval_7_5_2 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_6_5 := ($cast ($int<16>) (kval_7_6_2 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_7_5 := ($cast ($int<16>) (kval_7_7_2 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_8_5 := ($cast ($int<16>) (kval_7_8_2 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_7_5 := (((mul_val_7_1_5 + mul_val_7_2_5) + (mul_val_7_3_5 + mul_val_7_4_5)) + ((mul_val_7_5_5 + mul_val_7_6_5) + (mul_val_7_7_5 + mul_val_7_8_5))) $buffering 1
    $guard (readk_3) tempk1_7_3 := core7_kp3 $buffering 1// bits of buffering = 64. 
    $guard (not_readk_3) tempk2_7_3 := conv7_kp3 $buffering 1// bits of buffering = 64. 
    read_k_6485_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_7_3 := ( $mux mode_2 0   ( $mux read_k_6485_delayed_1_0 tempk1_7_3  tempk2_7_3 )  )  $buffering 1
    kr_7_1_3 := ( $slice kread_7_3 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_7_2_3 := ( $slice kread_7_3 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_7_3_3 := ( $slice kread_7_3 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_7_4_3 := ( $slice kread_7_3 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_7_5_3 := ( $slice kread_7_3 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_7_6_3 := ( $slice kread_7_3 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_7_7_3 := ( $slice kread_7_3 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_7_8_3 := ( $slice kread_7_3 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_7_1_3 := ($bitcast ($int<8>) kr_7_1_3 ) $buffering 1
    $volatile kval_7_2_3 := ($bitcast ($int<8>) kr_7_2_3 ) $buffering 1
    $volatile kval_7_3_3 := ($bitcast ($int<8>) kr_7_3_3 ) $buffering 1
    $volatile kval_7_4_3 := ($bitcast ($int<8>) kr_7_4_3 ) $buffering 1
    $volatile kval_7_5_3 := ($bitcast ($int<8>) kr_7_5_3 ) $buffering 1
    $volatile kval_7_6_3 := ($bitcast ($int<8>) kr_7_6_3 ) $buffering 1
    $volatile kval_7_7_3 := ($bitcast ($int<8>) kr_7_7_3 ) $buffering 1
    $volatile kval_7_8_3 := ($bitcast ($int<8>) kr_7_8_3 ) $buffering 1
    mul_val_7_1_3 := ($cast ($int<16>) (kval_7_1_3 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_2_3 := ($cast ($int<16>) (kval_7_2_3 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_3_3 := ($cast ($int<16>) (kval_7_3_3 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_4_3 := ($cast ($int<16>) (kval_7_4_3 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_5_3 := ($cast ($int<16>) (kval_7_5_3 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_6_3 := ($cast ($int<16>) (kval_7_6_3 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_7_3 := ($cast ($int<16>) (kval_7_7_3 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_8_3 := ($cast ($int<16>) (kval_7_8_3 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_7_3 := (((mul_val_7_1_3 + mul_val_7_2_3) + (mul_val_7_3_3 + mul_val_7_4_3)) + ((mul_val_7_5_3 + mul_val_7_6_3) + (mul_val_7_7_3 + mul_val_7_8_3))) $buffering 1
    mul_val_7_1_6 := ($cast ($int<16>) (kval_7_1_3 * ival1_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_2_6 := ($cast ($int<16>) (kval_7_2_3 * ival2_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_3_6 := ($cast ($int<16>) (kval_7_3_3 * ival3_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_4_6 := ($cast ($int<16>) (kval_7_4_3 * ival4_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_5_6 := ($cast ($int<16>) (kval_7_5_3 * ival5_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_6_6 := ($cast ($int<16>) (kval_7_6_3 * ival6_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_7_6 := ($cast ($int<16>) (kval_7_7_3 * ival7_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_8_6 := ($cast ($int<16>) (kval_7_8_3 * ival8_4) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_7_6 := (((mul_val_7_1_6 + mul_val_7_2_6) + (mul_val_7_3_6 + mul_val_7_4_6)) + ((mul_val_7_5_6 + mul_val_7_6_6) + (mul_val_7_7_6 + mul_val_7_8_6))) $buffering 1
    $volatile acc_val7_1 := ((t_acc_val_7_1 + t_acc_val_7_2) + t_acc_val_7_3) $buffering 1
    $volatile acc_val7_2 := ((t_acc_val_7_4 + t_acc_val_7_5) + t_acc_val_7_6) $buffering 1
    store_kernel_6699_delayed_1_0 := store_kernel $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel_6699_delayed_1_0) conv7_kp1 := kread_7_1 $buffering 1// bits of buffering = 64. 
    store_kernel_6703_delayed_1_0 := store_kernel $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel_6703_delayed_1_0) conv7_kp2 := kread_7_2 $buffering 1// bits of buffering = 64. 
    store_3_6707_delayed_1_0 := store_3 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_3_6707_delayed_1_0) conv7_kp3 := kread_7_3 $buffering 1// bits of buffering = 64. 
    $guard (read_k) tempk1_8_1 := core8_kp1 $buffering 1// bits of buffering = 64. 
    $guard (not_read_k) tempk2_8_1 := conv8_kp1 $buffering 1// bits of buffering = 64. 
    read_k_6720_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_8_1 := ( $mux read_k_6720_delayed_1_0 tempk1_8_1  tempk2_8_1 )  $buffering 1
    kr_8_1_1 := ( $slice kread_8_1 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_8_2_1 := ( $slice kread_8_1 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_8_3_1 := ( $slice kread_8_1 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_8_4_1 := ( $slice kread_8_1 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_8_5_1 := ( $slice kread_8_1 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_8_6_1 := ( $slice kread_8_1 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_8_7_1 := ( $slice kread_8_1 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_8_8_1 := ( $slice kread_8_1 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_8_1_1 := ($bitcast ($int<8>) kr_8_1_1 ) $buffering 1
    $volatile kval_8_2_1 := ($bitcast ($int<8>) kr_8_2_1 ) $buffering 1
    $volatile kval_8_3_1 := ($bitcast ($int<8>) kr_8_3_1 ) $buffering 1
    $volatile kval_8_4_1 := ($bitcast ($int<8>) kr_8_4_1 ) $buffering 1
    $volatile kval_8_5_1 := ($bitcast ($int<8>) kr_8_5_1 ) $buffering 1
    $volatile kval_8_6_1 := ($bitcast ($int<8>) kr_8_6_1 ) $buffering 1
    $volatile kval_8_7_1 := ($bitcast ($int<8>) kr_8_7_1 ) $buffering 1
    $volatile kval_8_8_1 := ($bitcast ($int<8>) kr_8_8_1 ) $buffering 1
    mul_val_8_1_1 := ($cast ($int<16>) (kval_8_1_1 * ival1_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_2_1 := ($cast ($int<16>) (kval_8_2_1 * ival2_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_3_1 := ($cast ($int<16>) (kval_8_3_1 * ival3_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_4_1 := ($cast ($int<16>) (kval_8_4_1 * ival4_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_5_1 := ($cast ($int<16>) (kval_8_5_1 * ival5_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_6_1 := ($cast ($int<16>) (kval_8_6_1 * ival6_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_7_1 := ($cast ($int<16>) (kval_8_7_1 * ival7_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_8_1 := ($cast ($int<16>) (kval_8_8_1 * ival8_1) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_8_1 := (((mul_val_8_1_1 + mul_val_8_2_1) + (mul_val_8_3_1 + mul_val_8_4_1)) + ((mul_val_8_5_1 + mul_val_8_6_1) + (mul_val_8_7_1 + mul_val_8_8_1))) $buffering 1
    mul_val_8_1_4 := ($cast ($int<16>) (kval_8_1_1 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_2_4 := ($cast ($int<16>) (kval_8_2_1 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_3_4 := ($cast ($int<16>) (kval_8_3_1 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_4_4 := ($cast ($int<16>) (kval_8_4_1 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_5_4 := ($cast ($int<16>) (kval_8_5_1 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_6_4 := ($cast ($int<16>) (kval_8_6_1 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_7_4 := ($cast ($int<16>) (kval_8_7_1 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_8_4 := ($cast ($int<16>) (kval_8_8_1 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_8_4 := (((mul_val_8_1_4 + mul_val_8_2_4) + (mul_val_8_3_4 + mul_val_8_4_4)) + ((mul_val_8_5_4 + mul_val_8_6_4) + (mul_val_8_7_4 + mul_val_8_8_4))) $buffering 1
    $guard (read_k) tempk1_8_2 := core8_kp2 $buffering 1// bits of buffering = 64. 
    $guard (not_read_k) tempk2_8_2 := conv8_kp2 $buffering 1// bits of buffering = 64. 
    read_k_6928_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_8_2 := ( $mux read_k_6928_delayed_1_0 tempk1_8_2  tempk2_8_2 )  $buffering 1
    kr_8_1_2 := ( $slice kread_8_2 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_8_2_2 := ( $slice kread_8_2 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_8_3_2 := ( $slice kread_8_2 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_8_4_2 := ( $slice kread_8_2 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_8_5_2 := ( $slice kread_8_2 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_8_6_2 := ( $slice kread_8_2 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_8_7_2 := ( $slice kread_8_2 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_8_8_2 := ( $slice kread_8_2 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_8_1_2 := ($bitcast ($int<8>) kr_8_1_2 ) $buffering 1
    $volatile kval_8_2_2 := ($bitcast ($int<8>) kr_8_2_2 ) $buffering 1
    $volatile kval_8_3_2 := ($bitcast ($int<8>) kr_8_3_2 ) $buffering 1
    $volatile kval_8_4_2 := ($bitcast ($int<8>) kr_8_4_2 ) $buffering 1
    $volatile kval_8_5_2 := ($bitcast ($int<8>) kr_8_5_2 ) $buffering 1
    $volatile kval_8_6_2 := ($bitcast ($int<8>) kr_8_6_2 ) $buffering 1
    $volatile kval_8_7_2 := ($bitcast ($int<8>) kr_8_7_2 ) $buffering 1
    $volatile kval_8_8_2 := ($bitcast ($int<8>) kr_8_8_2 ) $buffering 1
    mul_val_8_1_2 := ($cast ($int<16>) (kval_8_1_2 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_2_2 := ($cast ($int<16>) (kval_8_2_2 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_3_2 := ($cast ($int<16>) (kval_8_3_2 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_4_2 := ($cast ($int<16>) (kval_8_4_2 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_5_2 := ($cast ($int<16>) (kval_8_5_2 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_6_2 := ($cast ($int<16>) (kval_8_6_2 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_7_2 := ($cast ($int<16>) (kval_8_7_2 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_8_2 := ($cast ($int<16>) (kval_8_8_2 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_8_2 := (((mul_val_8_1_2 + mul_val_8_2_2) + (mul_val_8_3_2 + mul_val_8_4_2)) + ((mul_val_8_5_2 + mul_val_8_6_2) + (mul_val_8_7_2 + mul_val_8_8_2))) $buffering 1
    mul_val_8_1_5 := ($cast ($int<16>) (kval_8_1_2 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_2_5 := ($cast ($int<16>) (kval_8_2_2 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_3_5 := ($cast ($int<16>) (kval_8_3_2 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_4_5 := ($cast ($int<16>) (kval_8_4_2 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_5_5 := ($cast ($int<16>) (kval_8_5_2 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_6_5 := ($cast ($int<16>) (kval_8_6_2 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_7_5 := ($cast ($int<16>) (kval_8_7_2 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_8_5 := ($cast ($int<16>) (kval_8_8_2 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_8_5 := (((mul_val_8_1_5 + mul_val_8_2_5) + (mul_val_8_3_5 + mul_val_8_4_5)) + ((mul_val_8_5_5 + mul_val_8_6_5) + (mul_val_8_7_5 + mul_val_8_8_5))) $buffering 1
    $guard (readk_3) tempk1_8_3 := core8_kp3 $buffering 1// bits of buffering = 64. 
    $guard (not_readk_3) tempk2_8_3 := conv8_kp3 $buffering 1// bits of buffering = 64. 
    read_k_7138_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_8_3 := ( $mux mode_2 0   ( $mux read_k_7138_delayed_1_0 tempk1_8_3  tempk2_8_3 )  )  $buffering 1
    kr_8_1_3 := ( $slice kread_8_3 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_8_2_3 := ( $slice kread_8_3 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_8_3_3 := ( $slice kread_8_3 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_8_4_3 := ( $slice kread_8_3 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_8_5_3 := ( $slice kread_8_3 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_8_6_3 := ( $slice kread_8_3 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_8_7_3 := ( $slice kread_8_3 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_8_8_3 := ( $slice kread_8_3 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_8_1_3 := ($bitcast ($int<8>) kr_8_1_3 ) $buffering 1
    $volatile kval_8_2_3 := ($bitcast ($int<8>) kr_8_2_3 ) $buffering 1
    $volatile kval_8_3_3 := ($bitcast ($int<8>) kr_8_3_3 ) $buffering 1
    $volatile kval_8_4_3 := ($bitcast ($int<8>) kr_8_4_3 ) $buffering 1
    $volatile kval_8_5_3 := ($bitcast ($int<8>) kr_8_5_3 ) $buffering 1
    $volatile kval_8_6_3 := ($bitcast ($int<8>) kr_8_6_3 ) $buffering 1
    $volatile kval_8_7_3 := ($bitcast ($int<8>) kr_8_7_3 ) $buffering 1
    $volatile kval_8_8_3 := ($bitcast ($int<8>) kr_8_8_3 ) $buffering 1
    mul_val_8_1_3 := ($cast ($int<16>) (kval_8_1_3 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_2_3 := ($cast ($int<16>) (kval_8_2_3 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_3_3 := ($cast ($int<16>) (kval_8_3_3 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_4_3 := ($cast ($int<16>) (kval_8_4_3 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_5_3 := ($cast ($int<16>) (kval_8_5_3 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_6_3 := ($cast ($int<16>) (kval_8_6_3 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_7_3 := ($cast ($int<16>) (kval_8_7_3 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_8_3 := ($cast ($int<16>) (kval_8_8_3 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_8_3 := (((mul_val_8_1_3 + mul_val_8_2_3) + (mul_val_8_3_3 + mul_val_8_4_3)) + ((mul_val_8_5_3 + mul_val_8_6_3) + (mul_val_8_7_3 + mul_val_8_8_3))) $buffering 1
    mul_val_8_1_6 := ($cast ($int<16>) (kval_8_1_3 * ival1_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_2_6 := ($cast ($int<16>) (kval_8_2_3 * ival2_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_3_6 := ($cast ($int<16>) (kval_8_3_3 * ival3_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_4_6 := ($cast ($int<16>) (kval_8_4_3 * ival4_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_5_6 := ($cast ($int<16>) (kval_8_5_3 * ival5_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_6_6 := ($cast ($int<16>) (kval_8_6_3 * ival6_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_7_6 := ($cast ($int<16>) (kval_8_7_3 * ival7_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_8_6 := ($cast ($int<16>) (kval_8_8_3 * ival8_4) ) $buffering 1// bits of buffering = 16. 
    $volatile t_acc_val_8_6 := (((mul_val_8_1_6 + mul_val_8_2_6) + (mul_val_8_3_6 + mul_val_8_4_6)) + ((mul_val_8_5_6 + mul_val_8_6_6) + (mul_val_8_7_6 + mul_val_8_8_6))) $buffering 1
    $volatile acc_val8_1 := ((t_acc_val_8_1 + t_acc_val_8_2) + t_acc_val_8_3) $buffering 1
    $volatile acc_val8_2 := ((t_acc_val_8_4 + t_acc_val_8_5) + t_acc_val_8_6) $buffering 1
    store_kernel_7352_delayed_1_0 := store_kernel $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel_7352_delayed_1_0) conv8_kp1 := kread_8_1 $buffering 1// bits of buffering = 64. 
    store_kernel_7356_delayed_1_0 := store_kernel $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel_7356_delayed_1_0) conv8_kp2 := kread_8_2 $buffering 1// bits of buffering = 64. 
    store_3_7360_delayed_1_0 := store_3 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_3_7360_delayed_1_0) conv8_kp3 := kread_8_3 $buffering 1// bits of buffering = 64. 
    acc_pipe1_1 := ($bitcast ($uint<16>) acc_val1_1 ) $buffering 1// bits of buffering = 16. 
    acc_pipe1_2 := ($bitcast ($uint<16>) acc_val2_1 ) $buffering 1// bits of buffering = 16. 
    acc_pipe1_3 := ($bitcast ($uint<16>) acc_val3_1 ) $buffering 1// bits of buffering = 16. 
    acc_pipe1_4 := ($bitcast ($uint<16>) acc_val4_1 ) $buffering 1// bits of buffering = 16. 
    acc_pipe1_5 := ($bitcast ($uint<16>) acc_val5_1 ) $buffering 1// bits of buffering = 16. 
    acc_pipe1_6 := ($bitcast ($uint<16>) acc_val6_1 ) $buffering 1// bits of buffering = 16. 
    acc_pipe1_7 := ($bitcast ($uint<16>) acc_val7_1 ) $buffering 1// bits of buffering = 16. 
    acc_pipe1_8 := ($bitcast ($uint<16>) acc_val8_1 ) $buffering 1// bits of buffering = 16. 
    acc_pipe2_1 := ($bitcast ($uint<16>) acc_val1_2 ) $buffering 1// bits of buffering = 16. 
    acc_pipe2_2 := ($bitcast ($uint<16>) acc_val2_2 ) $buffering 1// bits of buffering = 16. 
    acc_pipe2_3 := ($bitcast ($uint<16>) acc_val3_2 ) $buffering 1// bits of buffering = 16. 
    acc_pipe2_4 := ($bitcast ($uint<16>) acc_val4_2 ) $buffering 1// bits of buffering = 16. 
    acc_pipe2_5 := ($bitcast ($uint<16>) acc_val5_2 ) $buffering 1// bits of buffering = 16. 
    acc_pipe2_6 := ($bitcast ($uint<16>) acc_val6_2 ) $buffering 1// bits of buffering = 16. 
    acc_pipe2_7 := ($bitcast ($uint<16>) acc_val7_2 ) $buffering 1// bits of buffering = 16. 
    acc_pipe2_8 := ($bitcast ($uint<16>) acc_val8_2 ) $buffering 1// bits of buffering = 16. 
    $while ( ~ all_done_flag )
  }
}
$pipeline $depth 8 $buffering 1 $fullrate $opaque $module [writeModule_convolution]
$in ( index : $uint<8>   address : $uint<32>   data : $uint<64>  )
$out ( done : $uint<1>  )
$is
{
  $volatile cnd1 := (index == 0 ) $buffering 1
  $volatile cnd2 := (index == 1 ) $buffering 1
  $volatile cnd3 := (index == 2 ) $buffering 1
  $volatile cnd4 := (index == 3 ) $buffering 1
  $volatile cnd5 := (index == 4 ) $buffering 1
  $guard (cnd1) $call memoryModule (0  (0  + address) data ) (out1 ) 
  $guard (cnd2) $call memoryModule (0  (0  + address) data ) (out2 ) 
  $guard (cnd3) $call memoryModule (0  (0  + address) data ) (out3 ) 
  $guard (cnd4) $call memoryModule (0  (0  + address) data ) (out4 ) 
  $guard (cnd5) $call memoryModule (0  (0  + address) data ) (out5 ) 
  done := (index [] 0 ) $buffering 1// bits of buffering = 1. 
  $attribute delay 6
}
$opaque $module [sendModule]
$in ( rb : $uint<16>   cb : $uint<16>   chl_out : $uint<16>   shift_val : $uint<16>   activation : $uint<8>   index : $uint<8>  )
$out ()
$is
{
  $branchblock [sendBlock]
  {
    $volatile row_size := ($bitcast ($uint<32>) (chl_out * cb) ) $buffering 1
    $volatile chl_out_1 := (chl_out - 1 ) $buffering 1
    $volatile apply_relu := (activation == 1 ) $buffering 1
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi address1 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  n_address1 $on   $loopback 
    // type of target is $uint<32>
    $phi address2 := 			  ($bitcast ($uint<32>) row_size ) $on   $entry 			  n_address2 $on   $loopback 
    // type of target is $uint<32>
    $phi chl := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  n_chl $on   $loopback 
    // type of target is $uint<16>
    $phi col := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_col $on   $loopback 
    // type of target is $uint<16>
    $phi row := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_row $on   $loopback 
    // type of target is $uint<16>
    $endmerge
    $volatile row_change := (col == cb) $buffering 1
    SUB_u16_u16_7571_7571_delayed_1_0 := (rb - 1 ) $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile chl_change := (row_change & (row >= SUB_u16_u16_7571_7571_delayed_1_0)) $buffering 1
    $volatile n_col := ( $mux row_change 1   (col + 1 ) )  $buffering 1
    $volatile n_row := ( $mux chl_change 1   ( $mux row_change (row + 2 )  row )  )  $buffering 1
    $volatile n_chl := ( $mux chl_change (chl + 1 )  chl )  $buffering 1
    type_cast_7605_7605_delayed_1_0 := ($bitcast ($uint<32>) chl_out ) $buffering 1 $cut_through // bits of buffering = 32. 
    $volatile tmp1 := (address1 + type_cast_7605_7605_delayed_1_0) $buffering 1
    type_cast_7611_7611_delayed_1_0 := ($bitcast ($uint<32>) chl_out ) $buffering 1 $cut_through // bits of buffering = 32. 
    $volatile tmp2 := (address2 + type_cast_7611_7611_delayed_1_0) $buffering 1
    $volatile tmp_sum := ( $mux row_change row_size  0  )  $buffering 1
    $volatile n_address1 := ( $mux chl_change ($bitcast ($uint<32>) n_chl )  (tmp1 + tmp_sum) )  $buffering 1
    $volatile n_address2 := ( $mux chl_change (($bitcast ($uint<32>) n_chl ) + row_size)  (tmp2 + tmp_sum) )  $buffering 1
    read_val1_1 := output_pipe1_1 $buffering 1// bits of buffering = 16. 
    read_val2_1 := output_pipe2_1 $buffering 1// bits of buffering = 16. 
    read_val3_1 := output_pipe3_1 $buffering 1// bits of buffering = 16. 
    read_val4_1 := output_pipe4_1 $buffering 1// bits of buffering = 16. 
    read_val5_1 := output_pipe5_1 $buffering 1// bits of buffering = 16. 
    read_val6_1 := output_pipe6_1 $buffering 1// bits of buffering = 16. 
    read_val7_1 := output_pipe7_1 $buffering 1// bits of buffering = 16. 
    read_val8_1 := output_pipe8_1 $buffering 1// bits of buffering = 16. 
    read_val1_2 := output_pipe1_2 $buffering 1// bits of buffering = 16. 
    read_val2_2 := output_pipe2_2 $buffering 1// bits of buffering = 16. 
    read_val3_2 := output_pipe3_2 $buffering 1// bits of buffering = 16. 
    read_val4_2 := output_pipe4_2 $buffering 1// bits of buffering = 16. 
    read_val5_2 := output_pipe5_2 $buffering 1// bits of buffering = 16. 
    read_val6_2 := output_pipe6_2 $buffering 1// bits of buffering = 16. 
    read_val7_2 := output_pipe7_2 $buffering 1// bits of buffering = 16. 
    read_val8_2 := output_pipe8_2 $buffering 1// bits of buffering = 16. 
    $volatile tmp1_1 := ( $mux (apply_relu & ((read_val1_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val1_1 >> shift_val) ) )  $buffering 1
    $volatile tmp2_1 := ( $mux (apply_relu & ((read_val2_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val2_1 >> shift_val) ) )  $buffering 1
    $volatile tmp3_1 := ( $mux (apply_relu & ((read_val3_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val3_1 >> shift_val) ) )  $buffering 1
    $volatile tmp4_1 := ( $mux (apply_relu & ((read_val4_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val4_1 >> shift_val) ) )  $buffering 1
    $volatile tmp5_1 := ( $mux (apply_relu & ((read_val5_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val5_1 >> shift_val) ) )  $buffering 1
    $volatile tmp6_1 := ( $mux (apply_relu & ((read_val6_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val6_1 >> shift_val) ) )  $buffering 1
    $volatile tmp7_1 := ( $mux (apply_relu & ((read_val7_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val7_1 >> shift_val) ) )  $buffering 1
    $volatile tmp8_1 := ( $mux (apply_relu & ((read_val8_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val8_1 >> shift_val) ) )  $buffering 1
    $volatile tmp1_2 := ( $mux (apply_relu & ((read_val1_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val1_2 >> shift_val) ) )  $buffering 1
    $volatile tmp2_2 := ( $mux (apply_relu & ((read_val2_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val2_2 >> shift_val) ) )  $buffering 1
    $volatile tmp3_2 := ( $mux (apply_relu & ((read_val3_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val3_2 >> shift_val) ) )  $buffering 1
    $volatile tmp4_2 := ( $mux (apply_relu & ((read_val4_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val4_2 >> shift_val) ) )  $buffering 1
    $volatile tmp5_2 := ( $mux (apply_relu & ((read_val5_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val5_2 >> shift_val) ) )  $buffering 1
    $volatile tmp6_2 := ( $mux (apply_relu & ((read_val6_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val6_2 >> shift_val) ) )  $buffering 1
    $volatile tmp7_2 := ( $mux (apply_relu & ((read_val7_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val7_2 >> shift_val) ) )  $buffering 1
    $volatile tmp8_2 := ( $mux (apply_relu & ((read_val8_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val8_2 >> shift_val) ) )  $buffering 1
    $volatile rd1 := (((tmp1_1 && tmp2_1) && (tmp3_1 && tmp4_1)) && ((tmp5_1 && tmp6_1) && (tmp7_1 && tmp8_1))) $buffering 1
    $volatile rd2 := (((tmp1_2 && tmp2_2) && (tmp3_2 && tmp4_2)) && ((tmp5_2 && tmp6_2) && (tmp7_2 && tmp8_2))) $buffering 1
    $call writeModule_convolution (index address1 rd1 ) (a1 ) 
    $call writeModule_convolution (index address2 rd2 ) (a2 ) 
    $volatile continue_flag := ((chl < chl_out_1) | ( ~ chl_change )) $buffering 1
    $while continue_flag
  }
}
$pipeline $depth 8 $buffering 1 $fullrate $opaque $module [readModule_convolutionk]
$in ( index : $uint<8>   address : $uint<32>  )
$out ( data : $uint<64>  )
$is
{
  $call memoryModule (1  (0  + address) 0  ) (data ) 
  $attribute delay 6
}
$pipeline $depth 15 $buffering 2 $fullrate $opaque $module [writeToPipe1]
$in ( index : $uint<2>   in_data1 : $uint<64>  )
$out ( done : $uint<1>  )
$is
{
  $volatile c1 := (index == 1 ) $buffering 1
  $volatile c2 := (index == 2 ) $buffering 1
  $volatile c3 := (index == 3 ) $buffering 1
  $guard (c1) core1_kp1 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c2) core1_kp2 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c3) core1_kp3 := in_data1 $buffering 1// bits of buffering = 64. 
  done := (in_data1 [] 0 ) $buffering 1// bits of buffering = 1. 
  $attribute delay 3
}
$pipeline $depth 15 $buffering 2 $fullrate $opaque $module [writeToPipe2]
$in ( index : $uint<2>   in_data1 : $uint<64>  )
$out ( done : $uint<1>  )
$is
{
  $volatile c1 := (index == 1 ) $buffering 1
  $volatile c2 := (index == 2 ) $buffering 1
  $volatile c3 := (index == 3 ) $buffering 1
  $guard (c1) core2_kp1 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c2) core2_kp2 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c3) core2_kp3 := in_data1 $buffering 1// bits of buffering = 64. 
  done := (in_data1 [] 0 ) $buffering 1// bits of buffering = 1. 
  $attribute delay 3
}
$pipeline $depth 15 $buffering 2 $fullrate $opaque $module [writeToPipe3]
$in ( index : $uint<2>   in_data1 : $uint<64>  )
$out ( done : $uint<1>  )
$is
{
  $volatile c1 := (index == 1 ) $buffering 1
  $volatile c2 := (index == 2 ) $buffering 1
  $volatile c3 := (index == 3 ) $buffering 1
  $guard (c1) core3_kp1 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c2) core3_kp2 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c3) core3_kp3 := in_data1 $buffering 1// bits of buffering = 64. 
  done := (in_data1 [] 0 ) $buffering 1// bits of buffering = 1. 
  $attribute delay 3
}
$pipeline $depth 15 $buffering 2 $fullrate $opaque $module [writeToPipe4]
$in ( index : $uint<2>   in_data1 : $uint<64>  )
$out ( done : $uint<1>  )
$is
{
  $volatile c1 := (index == 1 ) $buffering 1
  $volatile c2 := (index == 2 ) $buffering 1
  $volatile c3 := (index == 3 ) $buffering 1
  $guard (c1) core4_kp1 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c2) core4_kp2 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c3) core4_kp3 := in_data1 $buffering 1// bits of buffering = 64. 
  done := (in_data1 [] 0 ) $buffering 1// bits of buffering = 1. 
  $attribute delay 3
}
$pipeline $depth 15 $buffering 2 $fullrate $opaque $module [writeToPipe5]
$in ( index : $uint<2>   in_data1 : $uint<64>  )
$out ( done : $uint<1>  )
$is
{
  $volatile c1 := (index == 1 ) $buffering 1
  $volatile c2 := (index == 2 ) $buffering 1
  $volatile c3 := (index == 3 ) $buffering 1
  $guard (c1) core5_kp1 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c2) core5_kp2 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c3) core5_kp3 := in_data1 $buffering 1// bits of buffering = 64. 
  done := (in_data1 [] 0 ) $buffering 1// bits of buffering = 1. 
  $attribute delay 3
}
$pipeline $depth 15 $buffering 2 $fullrate $opaque $module [writeToPipe6]
$in ( index : $uint<2>   in_data1 : $uint<64>  )
$out ( done : $uint<1>  )
$is
{
  $volatile c1 := (index == 1 ) $buffering 1
  $volatile c2 := (index == 2 ) $buffering 1
  $volatile c3 := (index == 3 ) $buffering 1
  $guard (c1) core6_kp1 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c2) core6_kp2 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c3) core6_kp3 := in_data1 $buffering 1// bits of buffering = 64. 
  done := (in_data1 [] 0 ) $buffering 1// bits of buffering = 1. 
  $attribute delay 3
}
$pipeline $depth 15 $buffering 2 $fullrate $opaque $module [writeToPipe7]
$in ( index : $uint<2>   in_data1 : $uint<64>  )
$out ( done : $uint<1>  )
$is
{
  $volatile c1 := (index == 1 ) $buffering 1
  $volatile c2 := (index == 2 ) $buffering 1
  $volatile c3 := (index == 3 ) $buffering 1
  $guard (c1) core7_kp1 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c2) core7_kp2 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c3) core7_kp3 := in_data1 $buffering 1// bits of buffering = 64. 
  done := (in_data1 [] 0 ) $buffering 1// bits of buffering = 1. 
  $attribute delay 3
}
$pipeline $depth 15 $buffering 2 $fullrate $opaque $module [writeToPipe8]
$in ( index : $uint<2>   in_data1 : $uint<64>  )
$out ( done : $uint<1>  )
$is
{
  $volatile c1 := (index == 1 ) $buffering 1
  $volatile c2 := (index == 2 ) $buffering 1
  $volatile c3 := (index == 3 ) $buffering 1
  $guard (c1) core8_kp1 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c2) core8_kp2 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c3) core8_kp3 := in_data1 $buffering 1// bits of buffering = 64. 
  done := (in_data1 [] 0 ) $buffering 1// bits of buffering = 1. 
  $attribute delay 3
}
$module [loadKernel]
$in ( chl_in : $uint<16>   chl_out : $uint<16>   rk : $uint<16>   ck : $uint<16>   index : $uint<8>  )
$out ()
$is
{
  $branchblock [load_block]
  {
    $volatile row_size := (chl_in * ck) $buffering 1
    $volatile chl_size := ($bitcast ($uint<32>) (row_size * rk) ) $buffering 1
    $volatile chl_size2 := (chl_size << 1 ) $buffering 1
    $volatile chl_size3 := (chl_size2 + chl_size) $buffering 1
    $volatile chl_size4 := (chl_size << 2 ) $buffering 1
    $volatile chl_size5 := (chl_size4 + chl_size) $buffering 1
    $volatile chl_size6 := (chl_size4 + chl_size2) $buffering 1
    $volatile chl_size7 := (chl_size4 + chl_size3) $buffering 1
    $volatile chl_size8 := (chl_size << 3 ) $buffering 1
    $volatile count_update := (chl_size8 - ($bitcast ($uint<32>) row_size )) $buffering 1
    $volatile rk_s := ($bitcast ($uint<2>) rk ) $buffering 1
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi chl_num := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_chl_num $on   $loopback 
    // type of target is $uint<16>
    $phi ea := 			  ($bitcast ($uint<32>) (row_size - 1 ) ) $on   $entry 			  n_ea $on   $loopback 
    // type of target is $uint<32>
    $phi mycount := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nmycount $on   $loopback 
    // type of target is $uint<32>
    $phi ind := 			  ($bitcast ($uint<2>) 1  ) $on   $entry 			  n_ind $on   $loopback 
    // type of target is $uint<2>
    $endmerge
    $volatile next_row := (ind == rk_s) $buffering 1
    $volatile nxt_chl := ((mycount == ea) & next_row) $buffering 1
    $volatile nmycount := (mycount + ( $mux next_row (1  + ( $mux nxt_chl count_update  0  ) )  0  ) ) $buffering 1
    $volatile n_chl_num := ( $mux nxt_chl (chl_num + 1 )  chl_num )  $buffering 1
    $volatile n_ea := (ea + ( $mux nxt_chl chl_size8  0  ) ) $buffering 1
    $volatile n_ind := ( $mux next_row 1   (ind + 1 ) )  $buffering 1
    SHL_u16_u16_8441_8441_delayed_1_0 := (row_size << 1 ) $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile add_val := ($bitcast ($uint<32>) (( $mux (ind == 2 ) row_size  _b0  )  | ( $mux (ind == 3 ) SHL_u16_u16_8441_8441_delayed_1_0  _b0  ) ) ) $buffering 1
    $call readModule_convolutionk (index (mycount + add_val) ) (fetch_val1 ) 
    $call readModule_convolutionk (index ((mycount + add_val) + chl_size) ) (fetch_val2 ) 
    $call readModule_convolutionk (index ((mycount + add_val) + chl_size2) ) (fetch_val3 ) 
    $call readModule_convolutionk (index ((mycount + add_val) + chl_size3) ) (fetch_val4 ) 
    $call readModule_convolutionk (index ((mycount + add_val) + chl_size4) ) (fetch_val5 ) 
    $call readModule_convolutionk (index ((mycount + add_val) + chl_size5) ) (fetch_val6 ) 
    $call readModule_convolutionk (index ((mycount + add_val) + chl_size6) ) (fetch_val7 ) 
    $call readModule_convolutionk (index ((mycount + add_val) + chl_size7) ) (fetch_val8 ) 
    ind_8509_delayed_6_0 := ind $buffering 6 $cut_through // bits of buffering = 12. 
    $call writeToPipe1 (ind_8509_delayed_6_0 fetch_val1 ) (a1 ) 
    ind_8513_delayed_6_0 := ind $buffering 6 $cut_through // bits of buffering = 12. 
    $call writeToPipe2 (ind_8513_delayed_6_0 fetch_val2 ) (a2 ) 
    ind_8517_delayed_6_0 := ind $buffering 6 $cut_through // bits of buffering = 12. 
    $call writeToPipe3 (ind_8517_delayed_6_0 fetch_val3 ) (a3 ) 
    ind_8521_delayed_6_0 := ind $buffering 6 $cut_through // bits of buffering = 12. 
    $call writeToPipe4 (ind_8521_delayed_6_0 fetch_val4 ) (a4 ) 
    ind_8525_delayed_6_0 := ind $buffering 6 $cut_through // bits of buffering = 12. 
    $call writeToPipe5 (ind_8525_delayed_6_0 fetch_val5 ) (a5 ) 
    ind_8529_delayed_6_0 := ind $buffering 6 $cut_through // bits of buffering = 12. 
    $call writeToPipe6 (ind_8529_delayed_6_0 fetch_val6 ) (a6 ) 
    ind_8533_delayed_6_0 := ind $buffering 6 $cut_through // bits of buffering = 12. 
    $call writeToPipe7 (ind_8533_delayed_6_0 fetch_val7 ) (a7 ) 
    ind_8537_delayed_6_0 := ind $buffering 6 $cut_through // bits of buffering = 12. 
    $call writeToPipe8 (ind_8537_delayed_6_0 fetch_val8 ) (a8 ) 
    $volatile exit_cond := (nxt_chl & (chl_num == chl_out)) $buffering 1
    $while ( ~ exit_cond )
  }
}
$module [convolution3D_3]
$in ( rb : $uint<16>   cb : $uint<16>   chl_out_in : $uint<16>   chl_in_in : $uint<16>   rk : $uint<16>   ck : $uint<16>   index_in : $uint<8>   index_k : $uint<8>   index_out : $uint<8>   ct : $uint<16>   shift_val : $uint<16>   activation : $uint<8>  )
$out ()
$is
{
  $volatile chl_out := (chl_out_in >> 3 ) $buffering 1
  $volatile chl_in := (chl_in_in >> 3 ) $buffering 1
  $volatile op_size := (($bitcast ($uint<32>) rb ) * (($bitcast ($uint<32>) (cb * chl_out) ) >> 1 )) $buffering 1
  $parallelblock[topBlocks]
  {
    $call convolveCore (rb cb chl_in chl_out rk ck ) () 
    $call sendModule (rb cb chl_out shift_val activation index_out ) () 
    $call loadKernel (chl_in chl_out rk ck index_k ) () 
    $call access_T (rb ct chl_in chl_out rk index_in ) () 
    $call accumulator (chl_in ck op_size ) () 
  }
}
$pipeline $depth 15 $buffering 2 $fullrate $opaque $module [writeToPipe]
$in ( index : $uint<2>   in_data1 : $uint<8>  )
$out ( done : $uint<1>  )
$is
{
  $volatile c1 := (index == 1 ) $buffering 1
  $volatile c2 := (index == 2 ) $buffering 1
  $volatile c3 := (index == 3 ) $buffering 1
  $guard (c1) core_kp1 := in_data1 $buffering 1// bits of buffering = 8. 
  $guard (c2) core_kp2 := in_data1 $buffering 1// bits of buffering = 8. 
  $guard (c3) core_kp3 := in_data1 $buffering 1// bits of buffering = 8. 
  done := (in_data1 [] 0 ) $buffering 1// bits of buffering = 1. 
  $attribute delay 3
}
$module [kernelModule_generic]
$in ( chl_in : $uint<16>   chl_out : $uint<16>   rk : $uint<16>   ck : $uint<16>   index : $uint<8>  )
$out ()
$is
{
  $branchblock [load_block]
  {
    $volatile row_size := (chl_in * ck) $buffering 1
    $volatile chl_size := ($bitcast ($uint<32>) (row_size * rk) ) $buffering 1
    $volatile count_update := (chl_size - ($bitcast ($uint<32>) row_size )) $buffering 1
    $volatile rk_s := ($bitcast ($uint<2>) rk ) $buffering 1
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi chl_num := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_chl_num $on   $loopback 
    // type of target is $uint<16>
    $phi ea := 			  ($bitcast ($uint<32>) (row_size - 1 ) ) $on   $entry 			  n_ea $on   $loopback 
    // type of target is $uint<32>
    $phi mycount := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nmycount $on   $loopback 
    // type of target is $uint<32>
    $phi ind := 			  ($bitcast ($uint<2>) 1  ) $on   $entry 			  n_ind $on   $loopback 
    // type of target is $uint<2>
    $endmerge
    $volatile next_row := (ind == rk_s) $buffering 1
    $volatile nxt_chl := ((mycount == ea) & next_row) $buffering 1
    $volatile nmycount := (mycount + ( $mux next_row (1  + ( $mux nxt_chl count_update  0  ) )  0  ) ) $buffering 1
    $volatile n_chl_num := ( $mux nxt_chl (chl_num + 1 )  chl_num )  $buffering 1
    $volatile n_ea := (ea + ( $mux nxt_chl chl_size  0  ) ) $buffering 1
    $volatile n_ind := ( $mux next_row 1   (ind + 1 ) )  $buffering 1
    SHL_u16_u16_8772_8772_delayed_1_0 := (row_size << 1 ) $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile add_val := ($bitcast ($uint<32>) (( $mux (ind == 2 ) row_size  _b0  )  | ( $mux (ind == 3 ) SHL_u16_u16_8772_8772_delayed_1_0  _b0  ) ) ) $buffering 1
    $call readModule_convolutionk (index ((mycount + add_val) >> 3 ) ) (fetch_val1 ) 
    SHL_u64_u64_8797_8797_delayed_6_0 := (($bitcast ($uint<64>) (7  - ((mycount + add_val) & 7 )) ) << 3 ) $buffering 6 $cut_through // bits of buffering = 384. 
    $volatile val1 := ($bitcast ($uint<8>) (fetch_val1 >> SHL_u64_u64_8797_8797_delayed_6_0) ) $buffering 1
    ind_8801_delayed_6_0 := ind $buffering 6 $cut_through // bits of buffering = 12. 
    $call writeToPipe (ind_8801_delayed_6_0 val1 ) (a1 ) 
    $volatile exit_cond := (nxt_chl & (chl_num == chl_out)) $buffering 1
    $while ( ~ exit_cond )
  }
}
$module [core_generic]
$in ( rb : $uint<16>   cb : $uint<16>   chl_in_read : $uint<16>   chl_out : $uint<16>   rk : $uint<16>   ck : $uint<16>  )
$out ()
$is
{
  $branchblock [conv_block]
  {
    $volatile num_row := (rb - 2 ) $buffering 1
    $volatile num_col := (cb - 1 ) $buffering 1
    $volatile chl_in := (chl_in_read - 1 ) $buffering 1
    $volatile ck_s := (($bitcast ($uint<2>) ck ) - 1 ) $buffering 1
    $volatile mode_2 := (rk == 2 ) $buffering 1
    $volatile not_mode_2 := ( ~ mode_2 ) $buffering 1
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi row := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux chl_done_flag 0   ( $mux row_done (row + 2 )  row )  )  $on   $loopback 
    // type of target is $uint<16>
    $phi col := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done ( $mux col_done 0   (col + 1 ) )   col )  $on   $loopback 
    // type of target is $uint<16>
    $phi num := 			  ( $mux chl_done ( $mux num_done 0   (num + 1 ) )   num )  $on   $loopback 			  ($bitcast ($uint<2>) 0  ) $on   $entry 
    // type of target is $uint<2>
    $phi chl := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux chl_done 0   (chl + 1 ) )  $on   $loopback 
    // type of target is $uint<16>
    $phi chl_out_var := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  (chl_out_var + ( $mux chl_done_flag 1   0  ) ) $on   $loopback 
    // type of target is $uint<16>
    $endmerge
    $volatile nd := (num == ck_s) $buffering 1
    $volatile read_ip := ((col == 0 ) | nd) $buffering 1
    $volatile not_read_ip := ( ~ read_ip ) $buffering 1
    $volatile write_input := ((col < num_col) & (num > 0 )) $buffering 1
    $volatile read_k := ((col == 0 ) & (row == 0 )) $buffering 1
    $volatile not_read_k := ( ~ read_k ) $buffering 1
    $volatile chl_done := (chl == chl_in) $buffering 1
    $volatile num_done := (nd & chl_done) $buffering 1
    $volatile col_done := (col == num_col) $buffering 1
    $volatile row_done := (col_done & num_done) $buffering 1
    $volatile out_done_flag := (row >= num_row) $buffering 1
    $volatile store_kernel := (out_done_flag ~& col_done) $buffering 1
    $volatile chl_done_flag := (out_done_flag & row_done) $buffering 1
    $volatile all_done_flag := ((chl_out_var == chl_out) & chl_done_flag) $buffering 1
    $volatile read_ip3 := (not_mode_2 & read_ip) $buffering 1
    $volatile not_read_ip3 := (not_mode_2 & not_read_ip) $buffering 1
    $volatile write_input3 := (write_input & not_mode_2) $buffering 1
    $guard (read_ip) temp2_1 := core_ip_generic1 $buffering 1// bits of buffering = 8. 
    $guard (not_read_ip) temp1_1 := conv_ip_generic1 $buffering 1// bits of buffering = 8. 
    read_ip_9021_delayed_1_0 := read_ip $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile iread1 := ( $mux read_ip_9021_delayed_1_0 temp2_1  temp1_1 )  $buffering 1
    write_input_9026_delayed_1_0 := write_input $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (write_input_9026_delayed_1_0) conv_ip_generic1 := iread1 $buffering 1// bits of buffering = 8. 
    $volatile ival1_1 := ($bitcast ($int<8>) iread1 ) $buffering 1
    $guard (read_ip) temp2_2 := core_ip_generic2 $buffering 1// bits of buffering = 8. 
    $guard (not_read_ip) temp1_2 := conv_ip_generic2 $buffering 1// bits of buffering = 8. 
    read_ip_9043_delayed_1_0 := read_ip $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile iread2 := ( $mux read_ip_9043_delayed_1_0 temp2_2  temp1_2 )  $buffering 1
    write_input_9048_delayed_1_0 := write_input $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (write_input_9048_delayed_1_0) conv_ip_generic2 := iread2 $buffering 1// bits of buffering = 8. 
    $volatile ival1_2 := ($bitcast ($int<8>) iread2 ) $buffering 1
    $guard (read_ip) temp2_3 := core_ip_generic3 $buffering 1// bits of buffering = 8. 
    $guard (not_read_ip) temp1_3 := conv_ip_generic3 $buffering 1// bits of buffering = 8. 
    read_ip_9065_delayed_1_0 := read_ip $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile iread3 := ( $mux read_ip_9065_delayed_1_0 temp2_3  temp1_3 )  $buffering 1
    write_input_9070_delayed_1_0 := write_input $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (write_input_9070_delayed_1_0) conv_ip_generic3 := iread3 $buffering 1// bits of buffering = 8. 
    $volatile ival1_3 := ($bitcast ($int<8>) iread3 ) $buffering 1
    $guard (read_ip3) temp2_4 := core_ip_generic4 $buffering 1// bits of buffering = 8. 
    $guard (not_read_ip3) temp1_4 := conv_ip_generic4 $buffering 1// bits of buffering = 8. 
    read_ip_9089_delayed_1_0 := read_ip $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile iread4 := ( $mux mode_2 0   ( $mux read_ip_9089_delayed_1_0 temp2_4  temp1_4 )  )  $buffering 1
    write_input3_9095_delayed_1_0 := write_input3 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (write_input3_9095_delayed_1_0) conv_ip_generic4 := iread4 $buffering 1// bits of buffering = 8. 
    $volatile ival1_4 := ($bitcast ($int<8>) iread4 ) $buffering 1
    $volatile readk_3 := (read_k & not_mode_2) $buffering 1
    $volatile not_readk_3 := (not_read_k & not_mode_2) $buffering 1
    $volatile store_3 := (store_kernel & not_mode_2) $buffering 1
    $guard (read_k) tempk1__1 := core_kp1 $buffering 1// bits of buffering = 8. 
    $guard (not_read_k) tempk2__1 := conv_kp1 $buffering 1// bits of buffering = 8. 
    read_k_9127_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread__1 := ( $mux read_k_9127_delayed_1_0 tempk1__1  tempk2__1 )  $buffering 1
    $volatile kval__1_1 := ($bitcast ($int<8>) kread__1 ) $buffering 1
    t_acc_val__1 := ($cast ($int<16>) (kval__1_1 * ival1_1) ) $buffering 1// bits of buffering = 16. 
    t_acc_val__4 := ($cast ($int<16>) (kval__1_1 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    $guard (read_k) tempk1__2 := core_kp2 $buffering 1// bits of buffering = 8. 
    $guard (not_read_k) tempk2__2 := conv_kp2 $buffering 1// bits of buffering = 8. 
    read_k_9157_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread__2 := ( $mux read_k_9157_delayed_1_0 tempk1__2  tempk2__2 )  $buffering 1
    $volatile kval__1_2 := ($bitcast ($int<8>) kread__2 ) $buffering 1
    t_acc_val__2 := ($cast ($int<16>) (kval__1_2 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    t_acc_val__5 := ($cast ($int<16>) (kval__1_2 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    $guard (readk_3) tempk1__3 := core_kp3 $buffering 1// bits of buffering = 8. 
    $guard (not_readk_3) tempk2__3 := conv_kp3 $buffering 1// bits of buffering = 8. 
    read_k_9189_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread__3 := ( $mux mode_2 0   ( $mux read_k_9189_delayed_1_0 tempk1__3  tempk2__3 )  )  $buffering 1
    $volatile kval__1_3 := ($bitcast ($int<8>) kread__3 ) $buffering 1
    t_acc_val__3 := ($cast ($int<16>) (kval__1_3 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    t_acc_val__6 := ($cast ($int<16>) (kval__1_3 * ival1_4) ) $buffering 1// bits of buffering = 16. 
    $volatile acc_val1 := ((t_acc_val__1 + t_acc_val__2) + t_acc_val__3) $buffering 1
    $volatile acc_val2 := ((t_acc_val__4 + t_acc_val__5) + t_acc_val__6) $buffering 1
    store_kernel_9225_delayed_1_0 := store_kernel $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel_9225_delayed_1_0) conv_kp1 := kread__1 $buffering 1// bits of buffering = 8. 
    store_kernel_9229_delayed_1_0 := store_kernel $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel_9229_delayed_1_0) conv_kp2 := kread__2 $buffering 1// bits of buffering = 8. 
    store_3_9233_delayed_1_0 := store_3 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_3_9233_delayed_1_0) conv_kp3 := kread__3 $buffering 1// bits of buffering = 8. 
    acc_pipe1 := ($bitcast ($uint<16>) acc_val1 ) $buffering 1// bits of buffering = 16. 
    acc_pipe2 := ($bitcast ($uint<16>) acc_val2 ) $buffering 1// bits of buffering = 16. 
    $while ( ~ all_done_flag )
  }
}
$pipeline $depth 8 $buffering 1 $fullrate $opaque $module [readModule_convolution2]
$in ( index : $uint<8>   address : $uint<32>  )
$out ( data : $uint<64>  )
$is
{
  $volatile cnd1 := (index == 0 ) $buffering 1
  $volatile cnd2 := (index == 1 ) $buffering 1
  $volatile cnd3 := (index == 2 ) $buffering 1
  $volatile cnd4 := (index == 3 ) $buffering 1
  $volatile cnd5 := (index == 4 ) $buffering 1
  $guard (cnd1) $call memoryModule (1  (0  + address) 0  ) (val1 ) 
  $guard (cnd2) $call memoryModule (1  (0  + address) 0  ) (val2 ) 
  $guard (cnd3) $call memoryModule (1  (0  + address) 0  ) (val3 ) 
  $guard (cnd4) $call memoryModule (1  (0  + address) 0  ) (val4 ) 
  $guard (cnd5) $call memoryModule (1  (0  + address) 0  ) (val5 ) 
  cnd1_9320_delayed_4_0 := cnd1 $buffering 4 $cut_through // bits of buffering = 4. 
  cnd2_9324_delayed_4_0 := cnd2 $buffering 4 $cut_through // bits of buffering = 4. 
  cnd3_9329_delayed_4_0 := cnd3 $buffering 4 $cut_through // bits of buffering = 4. 
  cnd4_9334_delayed_4_0 := cnd4 $buffering 4 $cut_through // bits of buffering = 4. 
  cnd5_9338_delayed_4_0 := cnd5 $buffering 4 $cut_through // bits of buffering = 4. 
  data := (((( $mux cnd1_9320_delayed_4_0 val1  _b0  )  | ( $mux cnd2_9324_delayed_4_0 val2  _b0  ) ) | ( $mux cnd3_9329_delayed_4_0 val3  _b0  ) ) | (( $mux cnd4_9334_delayed_4_0 val4  _b0  )  | ( $mux cnd5_9338_delayed_4_0 val5  _b0  ) )) $buffering 1// bits of buffering = 64. 
  $attribute delay 7
}
$opaque $module [sendModule_generic]
$in ( rb : $uint<16>   cb : $uint<16>   chl_out : $uint<16>   shift_val : $uint<16>   activation : $uint<8>   index : $uint<8>  )
$out ()
$is
{
  $branchblock [sendBlock]
  {
    $volatile row_size := ($bitcast ($uint<32>) (chl_out * cb) ) $buffering 1
    $volatile chl_out_1 := (chl_out - 1 ) $buffering 1
    $volatile apply_relu := (activation == 1 ) $buffering 1
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi address1 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  n_address1 $on   $loopback 
    // type of target is $uint<32>
    $phi address2 := 			  ($bitcast ($uint<32>) row_size ) $on   $entry 			  n_address2 $on   $loopback 
    // type of target is $uint<32>
    $phi chl := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  n_chl $on   $loopback 
    // type of target is $uint<16>
    $phi col := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_col $on   $loopback 
    // type of target is $uint<16>
    $phi row := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_row $on   $loopback 
    // type of target is $uint<16>
    $endmerge
    $volatile row_change := (col == cb) $buffering 1
    SUB_u16_u16_9408_9408_delayed_1_0 := (rb - 1 ) $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile chl_change := (row_change & (row >= SUB_u16_u16_9408_9408_delayed_1_0)) $buffering 1
    $volatile n_col := ( $mux row_change 1   (col + 1 ) )  $buffering 1
    $volatile n_row := ( $mux chl_change 1   ( $mux row_change (row + 2 )  row )  )  $buffering 1
    $volatile n_chl := ( $mux chl_change (chl + 1 )  chl )  $buffering 1
    type_cast_9442_9442_delayed_1_0 := ($bitcast ($uint<32>) chl_out ) $buffering 1 $cut_through // bits of buffering = 32. 
    $volatile tmp1 := (address1 + type_cast_9442_9442_delayed_1_0) $buffering 1
    type_cast_9448_9448_delayed_1_0 := ($bitcast ($uint<32>) chl_out ) $buffering 1 $cut_through // bits of buffering = 32. 
    $volatile tmp2 := (address2 + type_cast_9448_9448_delayed_1_0) $buffering 1
    $volatile tmp_sum := ( $mux row_change row_size  0  )  $buffering 1
    $volatile n_address1 := ( $mux chl_change ($bitcast ($uint<32>) n_chl )  (tmp1 + tmp_sum) )  $buffering 1
    $volatile n_address2 := ( $mux chl_change (($bitcast ($uint<32>) n_chl ) + row_size)  (tmp2 + tmp_sum) )  $buffering 1
    $volatile add1 := (address1 >> 3 ) $buffering 1
    $volatile add2 := (address2 >> 3 ) $buffering 1
    read_val1_1 := output_pipe1 $buffering 1// bits of buffering = 16. 
    read_val1_2 := output_pipe2 $buffering 1// bits of buffering = 16. 
    $volatile tmp1_1 := ( $mux (apply_relu & ((read_val1_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val1_1 >> shift_val) ) )  $buffering 1
    $volatile tmp1_2 := ( $mux (apply_relu & ((read_val1_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val1_2 >> shift_val) ) )  $buffering 1
    $volatile shift1 := (($bitcast ($uint<64>) (7  - (address1 & 7 )) ) << 3 ) $buffering 1
    $volatile shift2 := (($bitcast ($uint<64>) (7  - (address2 & 7 )) ) << 3 ) $buffering 1
    $volatile bitmask1 := (($bitcast ($uint<64>) 255  ) << shift1) $buffering 1
    $volatile rev_bm1 := ( ~ bitmask1 ) $buffering 1
    $volatile bitmask2 := (($bitcast ($uint<64>) 255  ) << shift2) $buffering 1
    $volatile rev_bm2 := ( ~ bitmask2 ) $buffering 1
    $volatile same_write := (add1 == add2) $buffering 1
    $call readModule_convolution2 (index add1 ) (fetch_val1 ) 
    $guard (~same_write) $call readModule_convolution2 (index add2 ) (fetch_val2 ) 
    SHL_u64_u64_9581_9581_delayed_7_0 := (($bitcast ($uint<64>) tmp1_1 ) << shift1) $buffering 7 $cut_through // bits of buffering = 448. 
    same_write_9582_delayed_7_0 := same_write $buffering 7 $cut_through // bits of buffering = 7. 
    SHL_u64_u64_9586_9586_delayed_7_0 := (($bitcast ($uint<64>) tmp1_2 ) << shift2) $buffering 7 $cut_through // bits of buffering = 448. 
    rev_bm1_9588_delayed_7_0 := rev_bm1 $buffering 7 $cut_through // bits of buffering = 448. 
    rev_bm2_9590_delayed_7_0 := rev_bm2 $buffering 7 $cut_through // bits of buffering = 448. 
    rev_bm1_9594_delayed_7_0 := rev_bm1 $buffering 7 $cut_through // bits of buffering = 448. 
    $volatile rd1 := (SHL_u64_u64_9581_9581_delayed_7_0 + ( $mux same_write_9582_delayed_7_0 (SHL_u64_u64_9586_9586_delayed_7_0 + ((fetch_val1 & rev_bm1_9588_delayed_7_0) & rev_bm2_9590_delayed_7_0))  (fetch_val1 & rev_bm1_9594_delayed_7_0) ) ) $buffering 1
    same_write_9599_delayed_7_0 := same_write $buffering 7 $cut_through // bits of buffering = 7. 
    SHL_u64_u64_9604_9604_delayed_7_0 := (($bitcast ($uint<64>) tmp1_2 ) << shift2) $buffering 7 $cut_through // bits of buffering = 448. 
    rev_bm2_9606_delayed_7_0 := rev_bm2 $buffering 7 $cut_through // bits of buffering = 448. 
    $guard (~same_write_9599_delayed_7_0) $volatile rd2 := (SHL_u64_u64_9604_9604_delayed_7_0 + (fetch_val2 & rev_bm2_9606_delayed_7_0)) $buffering 1
    add1_9611_delayed_7_0 := add1 $buffering 7 $cut_through // bits of buffering = 224. 
    $call writeModule_convolution (index add1_9611_delayed_7_0 rd1 ) (a1 ) 
    same_write_9615_delayed_7_0 := same_write $buffering 7 $cut_through // bits of buffering = 7. 
    add2_9617_delayed_7_0 := add2 $buffering 7 $cut_through // bits of buffering = 224. 
    $guard (~same_write_9615_delayed_7_0) $call writeModule_convolution (index add2_9617_delayed_7_0 rd2 ) (a2 ) 
    $volatile continue_flag := ((chl < chl_out_1) | ( ~ chl_change )) $buffering 1
    $while continue_flag
  }
}
$module [inputModule_generic]
$in ( row_in : $uint<16>   ct : $uint<16>   chl_in : $uint<16>   chl_out : $uint<16>   rk : $uint<16>   index : $uint<8>  )
$out ()
$is
{
  $branchblock [access_block]
  {
    $volatile m_factor := ($bitcast ($uint<32>) (ct * chl_in) ) $buffering 1
    $volatile m2_factor := (m_factor << 1 ) $buffering 1
    $volatile m3_factor := (m2_factor + m_factor) $buffering 1
    $volatile mode_3 := (rk == 3 ) $buffering 1
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi address := 			  0  $on   $entry 			  n_address $on   $loopback 
    // type of target is $uint<32>
    $phi row1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  n_row1 $on   $loopback 
    // type of target is $uint<16>
    $phi chl_num := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  n_chl_num $on   $loopback 
    // type of target is $uint<16>
    $phi mycounter := 			  ($bitcast ($uint<32>) 1  ) $on   $entry 			  n_mycounter $on   $loopback 
    // type of target is $uint<32>
    $endmerge
    $volatile next_row := (mycounter == m_factor) $buffering 1
    $volatile tmp_cnt := (mycounter + 1 ) $buffering 1
    $volatile n_mycounter := ( $mux next_row 1   tmp_cnt )  $buffering 1
    $volatile update_row := ( $mux next_row (row1 + 2 )  row1 )  $buffering 1
    $volatile continue_flag1 := (update_row < row_in) $buffering 1
    $volatile n_row1 := ( $mux continue_flag1 update_row  0  )  $buffering 1
    $volatile n_address := ( $mux continue_flag1 ((address + 1 ) + ( $mux next_row m_factor  0  ) )  0  )  $buffering 1
    $call readModule_convolution (index (address >> 3 ) ) (val1 ) 
    type_cast_9741_9741_delayed_1_0 := ($bitcast ($uint<32>) m_factor ) $buffering 1 $cut_through // bits of buffering = 32. 
    $call readModule_convolution (index ((address + type_cast_9741_9741_delayed_1_0) >> 3 ) ) (val2 ) 
    type_cast_9750_9750_delayed_1_0 := ($bitcast ($uint<32>) m2_factor ) $buffering 1 $cut_through // bits of buffering = 32. 
    $call readModule_convolution (index ((address + type_cast_9750_9750_delayed_1_0) >> 3 ) ) (val3 ) 
    type_cast_9760_9760_delayed_1_0 := ($bitcast ($uint<32>) m3_factor ) $buffering 1 $cut_through // bits of buffering = 32. 
    $guard (mode_3) $call readModule_convolution (index ((address + type_cast_9760_9760_delayed_1_0) >> 3 ) ) (val4 ) 
    type_cast_9775_9775_delayed_7_0 := ($bitcast ($uint<64>) ((7  - (address & 7 )) << 3 ) ) $buffering 7 $cut_through // bits of buffering = 448. 
    $volatile rd1 := (val1 >> type_cast_9775_9775_delayed_7_0) $buffering 1
    type_cast_9783_9783_delayed_1_0 := ($bitcast ($uint<32>) m_factor ) $buffering 1 $cut_through // bits of buffering = 32. 
    type_cast_9790_9790_delayed_7_0 := ($bitcast ($uint<64>) ((7  - ((address + type_cast_9783_9783_delayed_1_0) & 7 )) << 3 ) ) $buffering 7 $cut_through // bits of buffering = 448. 
    $volatile rd2 := (val2 >> type_cast_9790_9790_delayed_7_0) $buffering 1
    type_cast_9798_9798_delayed_1_0 := ($bitcast ($uint<32>) m2_factor ) $buffering 1 $cut_through // bits of buffering = 32. 
    type_cast_9805_9805_delayed_7_0 := ($bitcast ($uint<64>) ((7  - ((address + type_cast_9798_9798_delayed_1_0) & 7 )) << 3 ) ) $buffering 7 $cut_through // bits of buffering = 448. 
    $volatile rd3 := (val3 >> type_cast_9805_9805_delayed_7_0) $buffering 1
    type_cast_9813_9813_delayed_1_0 := ($bitcast ($uint<32>) m3_factor ) $buffering 1 $cut_through // bits of buffering = 32. 
    type_cast_9820_9820_delayed_7_0 := ($bitcast ($uint<64>) ((7  - ((address + type_cast_9813_9813_delayed_1_0) & 7 )) << 3 ) ) $buffering 7 $cut_through // bits of buffering = 448. 
    $volatile rd4 := (val4 >> type_cast_9820_9820_delayed_7_0) $buffering 1
    core_ip_generic1 := ($bitcast ($uint<8>) rd1 ) $buffering 1// bits of buffering = 8. 
    core_ip_generic2 := ($bitcast ($uint<8>) rd2 ) $buffering 1// bits of buffering = 8. 
    core_ip_generic3 := ($bitcast ($uint<8>) rd3 ) $buffering 1// bits of buffering = 8. 
    $guard (mode_3) core_ip_generic4 := ($bitcast ($uint<8>) rd4 ) $buffering 1// bits of buffering = 8. 
    $volatile n_chl_num := ( $mux continue_flag1 chl_num  (chl_num + 1 ) )  $buffering 1
    $volatile not_end_flag := ((n_chl_num != chl_out) | continue_flag1) $buffering 1
    $while not_end_flag
  }
}
$module [convolutionSmall]
$in ( rb : $uint<16>   cb : $uint<16>   chl_out : $uint<16>   chl_in : $uint<16>   rk : $uint<16>   ck : $uint<16>   index_in : $uint<8>   index_k : $uint<8>   index_out : $uint<8>   ct : $uint<16>   shift_val : $uint<16>   activation : $uint<8>  )
$out ()
$is
{
  $volatile op_size := (($bitcast ($uint<32>) rb ) * (($bitcast ($uint<32>) (cb * chl_out) ) >> 1 )) $buffering 1
  $parallelblock[topBlocks]
  {
    $call kernelModule_generic (chl_in chl_out rk ck index_k ) () 
    $call core_generic (rb cb chl_in chl_out rk ck ) () 
    $call sendModule_generic (rb cb chl_out shift_val activation index_out ) () 
    $call inputModule_generic (rb ct chl_in chl_out rk index_in ) () 
    $call acc_generic (chl_in ck op_size ) () 
  }
}
$opaque $module [writeModule1]
$in ( index : $uint<8>   address : $uint<32>   data : $uint<64>  )
$out ()
$is
{
  $volatile cnd1 := (index == 0 ) $buffering 1
  $volatile cnd2 := (index == 1 ) $buffering 1
  $guard (cnd1) $call memoryModule (0  (0  + address) data ) (out1 ) 
  $guard (cnd2) $call memoryModule (0  (0  + address) data ) (out2 ) 
}
$module [readFromSystemPipe]
$in ( index : $uint<8>  )
$out ()
$is
{
  $branchblock [body]
  {
    call := system_input_pipe $buffering 1// bits of buffering = 8. 
    conv := ($cast ($uint<32>) call ) $buffering 1// bits of buffering = 32. 
    $volatile shl := (conv << ($bitcast ($uint<32>) _b00000000000000000000000000001000  )) $buffering 1
    call1 := system_input_pipe $buffering 1// bits of buffering = 8. 
    conv2 := ($cast ($uint<32>) call1 ) $buffering 1// bits of buffering = 32. 
    $volatile add := (shl | conv2) $buffering 1
    $volatile shl4 := (add << ($bitcast ($uint<32>) _b00000000000000000000000000001000  )) $buffering 1
    call5 := system_input_pipe $buffering 1// bits of buffering = 8. 
    conv6 := ($cast ($uint<32>) call5 ) $buffering 1// bits of buffering = 32. 
    $volatile add7 := (shl4 | conv6) $buffering 1
    $volatile cmp60 := (add7 == ($bitcast ($uint<32>) _b00000000000000000000000000000000  )) $buffering 1
    $if cmp60 $then 
    $place[entry_forx_xend]
    $else 
    $place[entry_forx_xbodyx_xpreheader]
    $endif
    $merge entry_forx_xbodyx_xpreheader 
    $endmerge
    $place[forx_xbodyx_xpreheader_forx_xbody]
    $merge forx_xbody_forx_xbody forx_xbodyx_xpreheader_forx_xbody 
    $phi iNsTr_6 := 			  ($cast ($uint<32>) inc ) $on   forx_xbody_forx_xbody 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   forx_xbodyx_xpreheader_forx_xbody 
    // type of target is $uint<32>
    $endmerge
    call12 := system_input_pipe $buffering 1// bits of buffering = 8. 
    conv13 := ($cast ($uint<64>) call12 ) $buffering 1// bits of buffering = 64. 
    $volatile shl15 := (conv13 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    call16 := system_input_pipe $buffering 1// bits of buffering = 8. 
    conv18 := ($cast ($uint<64>) call16 ) $buffering 1// bits of buffering = 64. 
    $volatile add19 := (shl15 | conv18) $buffering 1
    $volatile shl21 := (add19 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    call22 := system_input_pipe $buffering 1// bits of buffering = 8. 
    conv24 := ($cast ($uint<64>) call22 ) $buffering 1// bits of buffering = 64. 
    $volatile add25 := (shl21 | conv24) $buffering 1
    $volatile shl27 := (add25 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    call28 := system_input_pipe $buffering 1// bits of buffering = 8. 
    conv30 := ($cast ($uint<64>) call28 ) $buffering 1// bits of buffering = 64. 
    $volatile add31 := (shl27 | conv30) $buffering 1
    $volatile shl33 := (add31 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    call34 := system_input_pipe $buffering 1// bits of buffering = 8. 
    conv36 := ($cast ($uint<64>) call34 ) $buffering 1// bits of buffering = 64. 
    $volatile add37 := (shl33 | conv36) $buffering 1
    $volatile shl39 := (add37 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    call40 := system_input_pipe $buffering 1// bits of buffering = 8. 
    conv42 := ($cast ($uint<64>) call40 ) $buffering 1// bits of buffering = 64. 
    $volatile add43 := (shl39 | conv42) $buffering 1
    $volatile shl45 := (add43 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    call46 := system_input_pipe $buffering 1// bits of buffering = 8. 
    conv48 := ($cast ($uint<64>) call46 ) $buffering 1// bits of buffering = 64. 
    $volatile add49 := (shl45 | conv48) $buffering 1
    $volatile shl51 := (add49 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    call52 := system_input_pipe $buffering 1// bits of buffering = 8. 
    conv54 := ($cast ($uint<64>) call52 ) $buffering 1// bits of buffering = 64. 
    $volatile add55 := (shl51 | conv54) $buffering 1
    $call writeModule1 (index iNsTr_6 add55 ) () 
    $volatile inc := (iNsTr_6 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
    $volatile exitcond1 := (inc == add7) $buffering 1
    $if exitcond1 $then 
    $place[forx_xbody_forx_xendx_xloopexit]
    $else 
    $place[forx_xbody_forx_xbody]
    $endif
    $merge forx_xbody_forx_xendx_xloopexit 
    $endmerge
    $place[forx_xendx_xloopexit_forx_xend]
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend 
    $endmerge
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
$module [fill_input]
$in ()
$out ()
$is
{
  $branchblock [body]
  {
    $place[bbx_xnph_forx_xbody]
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody 
    $phi iNsTr_1 := 			  ($cast ($uint<8>) ($bitcast ($uint<8>) _b00000000  ) ) $on   bbx_xnph_forx_xbody 			  ($cast ($uint<8>) inc ) $on   forx_xbody_forx_xbody 
    // type of target is $uint<8>
    $endmerge
    $call readFromSystemPipe (iNsTr_1 ) () 
    $volatile inc := (iNsTr_1 + ($bitcast ($uint<8>) _b00000001  )) $buffering 1
    $volatile exitcond1 := (inc == ($bitcast ($uint<8>) _b00010011  )) $buffering 1
    $if exitcond1 $then 
    $place[forx_xbody_forx_xend]
    $else 
    $place[forx_xbody_forx_xbody]
    $endif
    $merge forx_xbody_forx_xend 
    $endmerge
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
$module [progx_xoptx_xo_storage_initializer_]
$in ()
$out ()
$is
{
  $null
  $attribute initializer 
}
$module [global_storage_initializer_]
$in ()
$out ()
$is
{
  $parallelblock[pb]
  {
    $call progx_xoptx_xo_storage_initializer_ () () 
  }
}
$pipeline $depth 8 $buffering 1 $fullrate $opaque $module [readModule_maxPool]
$in ( index : $uint<8>   address : $uint<32>  )
$out ( data : $uint<64>  )
$is
{
  $volatile cnd1 := (index == 2 ) $buffering 1
  $volatile cnd2 := (index == 3 ) $buffering 1
  $volatile cnd3 := (index == 4 ) $buffering 1
  $guard (cnd1) $call memoryModule (1  (0  + address) 0  ) (val1 ) 
  $guard (cnd2) $call memoryModule (1  (0  + address) 0  ) (val2 ) 
  $guard (cnd1) $call memoryModule (1  (0  + address) 0  ) (val3 ) 
  cnd1_10267_delayed_4_0 := cnd1 $buffering 4 $cut_through // bits of buffering = 4. 
  cnd2_10271_delayed_4_0 := cnd2 $buffering 4 $cut_through // bits of buffering = 4. 
  cnd3_10276_delayed_4_0 := cnd3 $buffering 4 $cut_through // bits of buffering = 4. 
  data := ((( $mux cnd1_10267_delayed_4_0 val1  _b0  )  | ( $mux cnd2_10271_delayed_4_0 val2  _b0  ) ) | ( $mux cnd3_10276_delayed_4_0 val3  _b0  ) ) $buffering 1// bits of buffering = 64. 
  $attribute delay 7
}
$pipeline $depth 8 $buffering 1 $fullrate $opaque $module [writeModule_maxPool]
$in ( index : $uint<8>   address : $uint<32>   data : $uint<64>  )
$out ( done : $uint<1>  )
$is
{
  $call memoryModule (0  (0  + address) data ) (out1 ) 
  done := (index [] 0 ) $buffering 1// bits of buffering = 1. 
  $attribute delay 6
}
$pipeline $depth 15 $buffering 1 $fullrate $module [maxPool4]
$in ( addr : $uint<32>   addr1 : $uint<32>   addr2 : $uint<32>   addr3 : $uint<32>   addr4 : $uint<32>   index1 : $uint<8>   index2 : $uint<8>  )
$out ( output : $uint<8>  )
$is
{
  $call readModule_maxPool (index1 addr1 ) (c1 ) 
  $call readModule_maxPool (index1 addr2 ) (c2 ) 
  $call readModule_maxPool (index1 addr3 ) (c3 ) 
  $call readModule_maxPool (index1 addr4 ) (c4 ) 
  sliced_v11 := ( $slice c1 63 56 )  $buffering 1// bits of buffering = 8. 
  sliced_v12 := ( $slice c1 55 48 )  $buffering 1// bits of buffering = 8. 
  sliced_v13 := ( $slice c1 47 40 )  $buffering 1// bits of buffering = 8. 
  sliced_v14 := ( $slice c1 39 32 )  $buffering 1// bits of buffering = 8. 
  sliced_v15 := ( $slice c1 31 24 )  $buffering 1// bits of buffering = 8. 
  sliced_v16 := ( $slice c1 23 16 )  $buffering 1// bits of buffering = 8. 
  sliced_v17 := ( $slice c1 15 8 )  $buffering 1// bits of buffering = 8. 
  sliced_v18 := ( $slice c1 7 0 )  $buffering 1// bits of buffering = 8. 
  sliced_v21 := ( $slice c2 63 56 )  $buffering 1// bits of buffering = 8. 
  sliced_v22 := ( $slice c2 55 48 )  $buffering 1// bits of buffering = 8. 
  sliced_v23 := ( $slice c2 47 40 )  $buffering 1// bits of buffering = 8. 
  sliced_v24 := ( $slice c2 39 32 )  $buffering 1// bits of buffering = 8. 
  sliced_v25 := ( $slice c2 31 24 )  $buffering 1// bits of buffering = 8. 
  sliced_v26 := ( $slice c2 23 16 )  $buffering 1// bits of buffering = 8. 
  sliced_v27 := ( $slice c2 15 8 )  $buffering 1// bits of buffering = 8. 
  sliced_v28 := ( $slice c2 7 0 )  $buffering 1// bits of buffering = 8. 
  sliced_v31 := ( $slice c3 63 56 )  $buffering 1// bits of buffering = 8. 
  sliced_v32 := ( $slice c3 55 48 )  $buffering 1// bits of buffering = 8. 
  sliced_v33 := ( $slice c3 47 40 )  $buffering 1// bits of buffering = 8. 
  sliced_v34 := ( $slice c3 39 32 )  $buffering 1// bits of buffering = 8. 
  sliced_v35 := ( $slice c3 31 24 )  $buffering 1// bits of buffering = 8. 
  sliced_v36 := ( $slice c3 23 16 )  $buffering 1// bits of buffering = 8. 
  sliced_v37 := ( $slice c3 15 8 )  $buffering 1// bits of buffering = 8. 
  sliced_v38 := ( $slice c3 7 0 )  $buffering 1// bits of buffering = 8. 
  sliced_v41 := ( $slice c4 63 56 )  $buffering 1// bits of buffering = 8. 
  sliced_v42 := ( $slice c4 55 48 )  $buffering 1// bits of buffering = 8. 
  sliced_v43 := ( $slice c4 47 40 )  $buffering 1// bits of buffering = 8. 
  sliced_v44 := ( $slice c4 39 32 )  $buffering 1// bits of buffering = 8. 
  sliced_v45 := ( $slice c4 31 24 )  $buffering 1// bits of buffering = 8. 
  sliced_v46 := ( $slice c4 23 16 )  $buffering 1// bits of buffering = 8. 
  sliced_v47 := ( $slice c4 15 8 )  $buffering 1// bits of buffering = 8. 
  sliced_v48 := ( $slice c4 7 0 )  $buffering 1// bits of buffering = 8. 
  $volatile a11 := ($bitcast ($int<8>) sliced_v11 ) $buffering 1
  $volatile a12 := ($bitcast ($int<8>) sliced_v12 ) $buffering 1
  $volatile a13 := ($bitcast ($int<8>) sliced_v13 ) $buffering 1
  $volatile a14 := ($bitcast ($int<8>) sliced_v14 ) $buffering 1
  $volatile a15 := ($bitcast ($int<8>) sliced_v15 ) $buffering 1
  $volatile a16 := ($bitcast ($int<8>) sliced_v16 ) $buffering 1
  $volatile a17 := ($bitcast ($int<8>) sliced_v17 ) $buffering 1
  $volatile a18 := ($bitcast ($int<8>) sliced_v18 ) $buffering 1
  $volatile a21 := ($bitcast ($int<8>) sliced_v21 ) $buffering 1
  $volatile a22 := ($bitcast ($int<8>) sliced_v22 ) $buffering 1
  $volatile a23 := ($bitcast ($int<8>) sliced_v23 ) $buffering 1
  $volatile a24 := ($bitcast ($int<8>) sliced_v24 ) $buffering 1
  $volatile a25 := ($bitcast ($int<8>) sliced_v25 ) $buffering 1
  $volatile a26 := ($bitcast ($int<8>) sliced_v26 ) $buffering 1
  $volatile a27 := ($bitcast ($int<8>) sliced_v27 ) $buffering 1
  $volatile a28 := ($bitcast ($int<8>) sliced_v28 ) $buffering 1
  $volatile a31 := ($bitcast ($int<8>) sliced_v31 ) $buffering 1
  $volatile a32 := ($bitcast ($int<8>) sliced_v32 ) $buffering 1
  $volatile a33 := ($bitcast ($int<8>) sliced_v33 ) $buffering 1
  $volatile a34 := ($bitcast ($int<8>) sliced_v34 ) $buffering 1
  $volatile a35 := ($bitcast ($int<8>) sliced_v35 ) $buffering 1
  $volatile a36 := ($bitcast ($int<8>) sliced_v36 ) $buffering 1
  $volatile a37 := ($bitcast ($int<8>) sliced_v37 ) $buffering 1
  $volatile a38 := ($bitcast ($int<8>) sliced_v38 ) $buffering 1
  $volatile a41 := ($bitcast ($int<8>) sliced_v41 ) $buffering 1
  $volatile a42 := ($bitcast ($int<8>) sliced_v42 ) $buffering 1
  $volatile a43 := ($bitcast ($int<8>) sliced_v43 ) $buffering 1
  $volatile a44 := ($bitcast ($int<8>) sliced_v44 ) $buffering 1
  $volatile a45 := ($bitcast ($int<8>) sliced_v45 ) $buffering 1
  $volatile a46 := ($bitcast ($int<8>) sliced_v46 ) $buffering 1
  $volatile a47 := ($bitcast ($int<8>) sliced_v47 ) $buffering 1
  $volatile a48 := ($bitcast ($int<8>) sliced_v48 ) $buffering 1
  $volatile t11 := ( $mux (a11 > a21) a11  a21 )  $buffering 1
  $volatile t12 := ( $mux (a31 > a41) a31  a41 )  $buffering 1
  $volatile out1 := ( $mux (t11 > t12) t11  t12 )  $buffering 1
  $volatile t21 := ( $mux (a12 > a22) a12  a22 )  $buffering 1
  $volatile t22 := ( $mux (a32 > a42) a32  a42 )  $buffering 1
  $volatile out2 := ( $mux (t21 > t22) t21  t22 )  $buffering 1
  $volatile t31 := ( $mux (a13 > a23) a13  a23 )  $buffering 1
  $volatile t32 := ( $mux (a33 > a43) a33  a43 )  $buffering 1
  $volatile out3 := ( $mux (t31 > t32) t31  t32 )  $buffering 1
  $volatile t41 := ( $mux (a14 > a24) a14  a24 )  $buffering 1
  $volatile t42 := ( $mux (a34 > a44) a34  a44 )  $buffering 1
  $volatile out4 := ( $mux (t41 > t42) t41  t42 )  $buffering 1
  $volatile t51 := ( $mux (a15 > a25) a15  a25 )  $buffering 1
  $volatile t52 := ( $mux (a35 > a45) a35  a45 )  $buffering 1
  $volatile out5 := ( $mux (t51 > t52) t51  t52 )  $buffering 1
  $volatile t61 := ( $mux (a16 > a26) a16  a26 )  $buffering 1
  $volatile t62 := ( $mux (a36 > a46) a36  a46 )  $buffering 1
  $volatile out6 := ( $mux (t61 > t62) t61  t62 )  $buffering 1
  $volatile t71 := ( $mux (a17 > a27) a17  a27 )  $buffering 1
  $volatile t72 := ( $mux (a37 > a47) a37  a47 )  $buffering 1
  $volatile out7 := ( $mux (t71 > t72) t71  t72 )  $buffering 1
  $volatile t81 := ( $mux (a18 > a28) a18  a28 )  $buffering 1
  $volatile t82 := ( $mux (a38 > a48) a38  a48 )  $buffering 1
  $volatile out8 := ( $mux (t81 > t82) t81  t82 )  $buffering 1
  addr_10775_delayed_8_0 := addr $buffering 8 $cut_through // bits of buffering = 256. 
  index2_10774_delayed_8_0 := index2 $buffering 8 $cut_through // bits of buffering = 64. 
  $call writeModule_maxPool (index2_10774_delayed_8_0 addr_10775_delayed_8_0 (((($bitcast ($uint<8>) out1 ) && ($bitcast ($uint<8>) out2 )) && (($bitcast ($uint<8>) out3 ) && ($bitcast ($uint<8>) out4 ))) && ((($bitcast ($uint<8>) out5 ) && ($bitcast ($uint<8>) out6 )) && (($bitcast ($uint<8>) out7 ) && ($bitcast ($uint<8>) out8 )))) ) (d1 ) 
  output := ($bitcast ($uint<8>) out1 ) $buffering 1// bits of buffering = 8. 
  $attribute delay 16
}
$module [maxPool3D]
$in ( cb : $uint<16>   rb : $uint<16>   ct : $uint<16>   chl_out : $uint<16>   index_in : $uint<8>   index_out : $uint<8>  )
$out ()
$is
{
  $branchblock [body]
  {
    $volatile shr91 := (chl_out >> ($bitcast ($uint<16>) _b0000000000000011  )) $buffering 1
    $volatile mul := (shr91 * ct) $buffering 1
    conv23 := ($cast ($uint<32>) shr91 ) $buffering 1// bits of buffering = 32. 
    conv25 := ($cast ($uint<32>) mul ) $buffering 1// bits of buffering = 32. 
    conv37 := ($cast ($uint<32>) ct ) $buffering 1// bits of buffering = 32. 
    $volatile mul42 := (conv23 << ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
    $volatile add := (conv25 + conv23) $buffering 1
    $place[entry_whilex_xbody]
    $merge entry_whilex_xbody 
    $phi iNsTr_1_at_entry := 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   entry_whilex_xbody 
    // type of target is $uint<32>
    $phi row18x_x1_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   entry_whilex_xbody 
    // type of target is $uint<16>
    $phi colx_x1_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   entry_whilex_xbody 
    // type of target is $uint<16>
    $phi chlx_x0_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   entry_whilex_xbody 
    // type of target is $uint<16>
    $endmerge
    $dopipeline $depth 15 $buffering 1
    $fullrate 
    $merge $entry $loopback 
    $phi iNsTr_1 := 			  ($cast ($uint<32>) add79 ) $on   $loopback 			  iNsTr_1_at_entry $on   $entry 
    // type of target is $uint<32>
    $phi row18x_x1 := 			  ($cast ($uint<16>) inc76x_xrow18x_x1 ) $on   $loopback 			  row18x_x1_at_entry $on   $entry 
    // type of target is $uint<16>
    $phi colx_x1 := 			  ($cast ($uint<16>) colx_x2 ) $on   $loopback 			  colx_x1_at_entry $on   $entry 
    // type of target is $uint<16>
    $phi chlx_x0 := 			  chlx_x0_at_entry $on   $entry 			  ($cast ($uint<16>) chlx_x1 ) $on   $loopback 
    // type of target is $uint<16>
    $endmerge
    conv31 := ($cast ($uint<32>) chlx_x0 ) $buffering 1// bits of buffering = 32. 
    conv35 := ($cast ($uint<32>) colx_x1 ) $buffering 1// bits of buffering = 32. 
    conv39 := ($cast ($uint<32>) row18x_x1 ) $buffering 1// bits of buffering = 32. 
    $volatile mul40 := (conv39 * conv37) $buffering 1
    $volatile add41 := (conv35 + mul40) $buffering 1
    $volatile shl := (mul42 * add41) $buffering 1
    $volatile add43 := (shl + conv31) $buffering 1
    $volatile add50 := (add43 + conv23) $buffering 1
    $volatile add54 := (add43 + conv25) $buffering 1
    $volatile add57 := (add + add43) $buffering 1
    iNsTr_1_10941_delayed_1_0 := iNsTr_1 $buffering 1 $cut_through // bits of buffering = 32. 
    $call maxPool4 (iNsTr_1_10941_delayed_1_0 add43 add50 add54 add57 index_in index_out ) (call ) 
    $volatile inc := (chlx_x0 + ($bitcast ($uint<16>) _b0000000000000001  )) $buffering 1
    $volatile cmp := (inc == shr91) $buffering 1
    inc67 := ($cast ($uint<16>) cmp ) $buffering 1// bits of buffering = 16. 
    colx_x1_10967_delayed_1_0 := colx_x1 $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile inc67x_xcolx_x1 := (inc67 + colx_x1_10967_delayed_1_0) $buffering 1
    $volatile chlx_x1 := ( $mux cmp ($bitcast ($uint<16>) _b0000000000000000  )  inc )  $buffering 1
    $volatile cmp72 := (inc67x_xcolx_x1 == cb) $buffering 1
    inc76 := ($cast ($uint<16>) cmp72 ) $buffering 1// bits of buffering = 16. 
    row18x_x1_10988_delayed_2_0 := row18x_x1 $buffering 2 $cut_through // bits of buffering = 32. 
    $volatile inc76x_xrow18x_x1 := (inc76 + row18x_x1_10988_delayed_2_0) $buffering 1
    $volatile colx_x2 := ( $mux cmp72 ($bitcast ($uint<16>) _b0000000000000000  )  inc67x_xcolx_x1 )  $buffering 1
    $volatile add79 := (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
    $volatile cmp84 := (inc76x_xrow18x_x1 == rb) $buffering 1
    $volatile whilex_xbody_whilex_xend_taken := cmp84 $buffering 1
    $while ( ~ cmp84 )
    $if whilex_xbody_whilex_xend_taken $then 
    $place[whilex_xbody_whilex_xend]
    $endif
    $merge whilex_xbody_whilex_xend 
    $phi inc76x_xrow18x_x1x_xlcssa := 			  ($cast ($uint<16>) inc76x_xrow18x_x1 ) $on   whilex_xbody_whilex_xend 
    // type of target is $uint<16>
    $endmerge
    conv89 := ($cast ($uint<8>) inc76x_xrow18x_x1x_xlcssa ) $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv89 $buffering 1// bits of buffering = 8. 
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
$opaque $module [readModule1]
$in ( address : $uint<32>  )
$out ( data : $uint<64>  )
$is
{
  $call memoryModule (1  (0  + address) 0  ) (data ) 
}
$pipeline $depth 8 $buffering 1 $fullrate $opaque $module [readModule_zeropad]
$in ( index : $uint<8>   address : $uint<32>  )
$out ( data : $uint<64>  )
$is
{
  $volatile cnd1 := (index == 0 ) $buffering 1
  $volatile cnd2 := (index == 1 ) $buffering 1
  $guard (cnd1) $call memoryModule (1  (0  + address) 0  ) (val1 ) 
  $guard (cnd2) $call memoryModule (1  (0  + address) 0  ) (val2 ) 
  cnd1_11078_delayed_4_0 := cnd1 $buffering 4 $cut_through // bits of buffering = 4. 
  cnd2_11082_delayed_4_0 := cnd2 $buffering 4 $cut_through // bits of buffering = 4. 
  data := (( $mux cnd1_11078_delayed_4_0 val1  _b0  )  | ( $mux cnd2_11082_delayed_4_0 val2  _b0  ) ) $buffering 1// bits of buffering = 64. 
  $attribute delay 7
}
$module [sendOutput]
$in ()
$out ()
$is
{
  $branchblock [body]
  {
    $place[bbx_xnph_forx_xbody]
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody 
    $phi iNsTr_1 := 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody 			  ($cast ($uint<32>) inc ) $on   forx_xbody_forx_xbody 
    // type of target is $uint<32>
    $endmerge
    $call readModule1 (iNsTr_1 ) (call ) 
    conv := ($cast ($uint<8>) call ) $buffering 1// bits of buffering = 8. 
    $volatile shr := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    conv8 := ($cast ($uint<8>) shr ) $buffering 1// bits of buffering = 8. 
    $volatile shr11 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  )) $buffering 1
    conv14 := ($cast ($uint<8>) shr11 ) $buffering 1// bits of buffering = 8. 
    $volatile shr17 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  )) $buffering 1
    conv20 := ($cast ($uint<8>) shr17 ) $buffering 1// bits of buffering = 8. 
    $volatile shr23 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  )) $buffering 1
    conv26 := ($cast ($uint<8>) shr23 ) $buffering 1// bits of buffering = 8. 
    $volatile shr29 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  )) $buffering 1
    conv32 := ($cast ($uint<8>) shr29 ) $buffering 1// bits of buffering = 8. 
    $volatile shr35 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  )) $buffering 1
    conv38 := ($cast ($uint<8>) shr35 ) $buffering 1// bits of buffering = 8. 
    $volatile shr41 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  )) $buffering 1
    conv44 := ($cast ($uint<8>) shr41 ) $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv44 $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv38 $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv32 $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv26 $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv20 $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv14 $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv8 $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv $buffering 1// bits of buffering = 8. 
    $volatile inc := (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
    $volatile exitcond1 := (inc == ($bitcast ($uint<32>) _b00000000000000000100100110000000  )) $buffering 1
    $if exitcond1 $then 
    $place[forx_xbody_forx_xend]
    $else 
    $place[forx_xbody_forx_xbody]
    $endif
    $merge forx_xbody_forx_xend 
    $endmerge
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
$module [timer]
$in ()
$out ( T : $uint<64>  )
$is
{
  timer_req := ($bitcast ($uint<1>) _b1  ) $buffering 1// bits of buffering = 1. 
  T := timer_resp $buffering 1// bits of buffering = 64. 
}
$pipeline $depth 8 $buffering 1 $fullrate $opaque $module [writeModule_zeropad]
$in ( index : $uint<8>   address : $uint<32>   data : $uint<64>  )
$out ( done : $uint<1>  )
$is
{
  $volatile cnd1 := (index == 0 ) $buffering 1
  $volatile cnd2 := (index == 1 ) $buffering 1
  $guard (cnd1) $call memoryModule (0  (0  + address) data ) (out1 ) 
  $guard (cnd2) $call memoryModule (0  (0  + address) data ) (out2 ) 
  done := (index [] 0 ) $buffering 1// bits of buffering = 1. 
  $attribute delay 6
}
$module [zeropad_same]
$in ( inp_d0 : $uint<16>   inp_d1 : $uint<16>   inp_d2 : $uint<16>   out_d0 : $uint<16>   out_d1 : $uint<16>   out_d2 : $uint<16>   index1 : $uint<8>   index2 : $uint<8>  )
$out ( done : $uint<8>  )
$is
{
  $branchblock [body]
  {
    out_d232 := ($cast ($uint<32>) inp_d2 ) $buffering 1// bits of buffering = 32. 
    $volatile out_int := (out_d0 * out_d1) $buffering 1
    out_int1 := ($cast ($uint<32>) out_int ) $buffering 1// bits of buffering = 32. 
    $volatile output_size := (out_int1 * out_d232) $buffering 1
    $volatile cmp264448 := (output_size > ($bitcast ($uint<32>) _b00000000000000000000000000000011  )) $buffering 1
    $if cmp264448 $then 
    $place[forx_xend250_bbx_xnph450]
    $else 
    $place[forx_xend250_forx_xend273]
    $endif
    $merge forx_xend250_bbx_xnph450 
    $endmerge
    $volatile tmp476 := (output_size >> ($bitcast ($uint<32>) _b00000000000000000000000000000011  )) $buffering 1
    $volatile tmp477 := (tmp476 > ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
    $volatile tmp476x_xop := (tmp476 + ($bitcast ($uint<32>) _b11111111111111111111111111111111  )) $buffering 1
    iNsTr_52 := ($cast ($uint<32>) tmp476x_xop ) $buffering 1// bits of buffering = 32. 
    $volatile xx_xop513 := (iNsTr_52 + ($bitcast ($uint<32>) 1  )) $buffering 1
    $volatile tmp481 := ( $mux tmp477 xx_xop513  ($bitcast ($uint<32>) 1  ) )  $buffering 1
    $place[bbx_xnph451_forx_xbody266]
    $merge bbx_xnph451_forx_xbody266 forx_xbody266_forx_xbody266 
    $phi indvar469 := 			  ($cast ($uint<32>) indvarx_xnext470 ) $on   forx_xbody266_forx_xbody266 			  ($cast ($uint<32>) ($bitcast ($uint<32>) 0  ) ) $on   bbx_xnph451_forx_xbody266 
    // type of target is $uint<32>
    $endmerge
    $call writeModule_zeropad (index2 indvar469 ($bitcast ($uint<64>) 0  ) ) (done1 ) 
    $volatile indvarx_xnext470 := (indvar469 + ($bitcast ($uint<32>) 1  )) $buffering 1
    $volatile exitcond := (indvarx_xnext470 == tmp481) $buffering 1
    $if exitcond $then 
    $place[forx_xbody266_forx_xend273x_xloopexit]
    $else 
    $place[forx_xbody266_forx_xbody266]
    $endif
    $merge forx_xbody266_forx_xend273x_xloopexit 
    $endmerge
    $place[forx_xend273x_xloopexit_forx_xend273]
    $merge forx_xend250_forx_xend273 forx_xend273x_xloopexit_forx_xend273 
    $endmerge
    $volatile input_dim0_init := ($bitcast ($uint<16>) 0  ) $buffering 1
    $volatile input_dim1_init := ($bitcast ($uint<16>) 0  ) $buffering 1
    $volatile input_dim2_init := ($bitcast ($uint<16>) 0  ) $buffering 1
    $volatile pad := ((out_d0 - inp_d0) >> 1 ) $buffering 1
    $volatile add_dest_dim0_init := pad $buffering 1
    $volatile add_dest_dim1_init := pad $buffering 1
    $volatile add_src_init := ($bitcast ($uint<32>) 0  ) $buffering 1
    $dopipeline $depth 15 $buffering 1
    $fullrate 
    $merge $entry $loopback 
    $phi input_dim0 := 			  input_dim0_init $on   $entry 			  next_input_dim0 $on   $loopback 
    // type of target is $uint<16>
    $phi input_dim1 := 			  input_dim1_init $on   $entry 			  next_input_dim1 $on   $loopback 
    // type of target is $uint<16>
    $phi input_dim2 := 			  input_dim2_init $on   $entry 			  next_input_dim2 $on   $loopback 
    // type of target is $uint<16>
    $phi add_dest_dim0 := 			  add_dest_dim0_init $on   $entry 			  next_add_dest_dim0 $on   $loopback 
    // type of target is $uint<16>
    $phi add_dest_dim1 := 			  add_dest_dim1_init $on   $entry 			  next_add_dest_dim1 $on   $loopback 
    // type of target is $uint<16>
    $phi add_src := 			  add_src_init $on   $entry 			  next_add_src $on   $loopback 
    // type of target is $uint<32>
    $endmerge
    $volatile nao := (out_d1 * add_dest_dim0) $buffering 1
    $volatile nao1 := (nao + add_dest_dim1) $buffering 1
    $volatile nao2 := (out_d2 * nao1) $buffering 1
    $volatile nao3 := (input_dim2 + nao2) $buffering 1
    $volatile add_out := (nao3 >> 3 ) $buffering 1
    $call readModule_zeropad (index1 ($bitcast ($uint<32>) add_src ) ) (i1 ) 
    type_cast_11473_11473_delayed_7_0 := ($bitcast ($uint<32>) add_out ) $buffering 7 $cut_through // bits of buffering = 224. 
    $call writeModule_zeropad (index2 type_cast_11473_11473_delayed_7_0 i1 ) (done2 ) 
    $volatile dim2_limit := (inp_d2 - 8 ) $buffering 1
    dim2_limit_11484_delayed_1_0 := dim2_limit $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile cmp_dim2 := (input_dim2 < dim2_limit_11484_delayed_1_0) $buffering 1
    SUB_u16_u16_11491_11491_delayed_1_0 := (inp_d1 - 1 ) $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile cmp_dim1 := (input_dim1 == SUB_u16_u16_11491_11491_delayed_1_0) $buffering 1
    $volatile cmp_dim0 := (( ~ cmp_dim2 ) & cmp_dim1) $buffering 1
    $volatile nid2_true := (input_dim2 + 8 ) $buffering 1
    $volatile nid2_false := (input_dim1 + 1 ) $buffering 1
    $volatile nid2_false1 := (add_dest_dim1 + 1 ) $buffering 1
    $volatile nid1_true := (input_dim0 + 1 ) $buffering 1
    $volatile nid1_true1 := (add_dest_dim0 + 1 ) $buffering 1
    $volatile nid1_true4 := pad $buffering 1
    $volatile next_add_src := (add_src + 1 ) $buffering 1
    nid1_true4_11537_delayed_1_0 := nid1_true4 $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile next_add_dest_dim1 := ( $mux ( ~ cmp_dim2 ) ( $mux cmp_dim1 nid1_true4_11537_delayed_1_0  nid2_false1 )   add_dest_dim1 )  $buffering 1
    $volatile next_add_dest_dim0 := ( $mux cmp_dim0 nid1_true1  add_dest_dim0 )  $buffering 1
    $volatile next_input_dim2 := ( $mux cmp_dim2 nid2_true  0  )  $buffering 1
    $volatile next_input_dim1 := ( $mux ( ~ cmp_dim2 ) ( $mux cmp_dim1 pad  nid2_false )   input_dim1 )  $buffering 1
    $volatile next_input_dim0 := ( $mux cmp_dim0 nid1_true  input_dim0 )  $buffering 1
    SUB_u16_u16_11575_11575_delayed_1_0 := (inp_d0 - 1 ) $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile dim0_end := (input_dim0 < SUB_u16_u16_11575_11575_delayed_1_0) $buffering 1
    $volatile continue_flag := (dim0_end | ( ~ cmp_dim0 )) $buffering 1
    $while continue_flag
    done := index1 $buffering 1// bits of buffering = 8. 
  }
}
$module [systemTOP]
$in ()
$out ()
$is
{
  $branchblock [body]
  {
    $place[entry_forx_xbodyx_xi]
    $merge entry_forx_xbodyx_xi forx_xbodyx_xi_forx_xbodyx_xi 
    $phi iNsTr_1 := 			  ($cast ($uint<8>) ($bitcast ($uint<8>) _b00000000  ) ) $on   entry_forx_xbodyx_xi 			  ($cast ($uint<8>) incx_xi ) $on   forx_xbodyx_xi_forx_xbodyx_xi 
    // type of target is $uint<8>
    $endmerge
    $call readFromSystemPipe (iNsTr_1 ) () 
    $volatile incx_xi := (iNsTr_1 + ($bitcast ($uint<8>) _b00000001  )) $buffering 1
    $volatile exitcond1 := (incx_xi == ($bitcast ($uint<8>) _b00010011  )) $buffering 1
    $if exitcond1 $then 
    $place[forx_xbodyx_xi_fill_inputx_xexit]
    $else 
    $place[forx_xbodyx_xi_forx_xbodyx_xi]
    $endif
    $merge forx_xbodyx_xi_fill_inputx_xexit 
    $endmerge
    $call timer () (call ) 
    $call zeropad_same (($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000011100010  ) ($bitcast ($uint<16>) _b0000000011100010  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) (callx_xi ) 
    system_output_pipe := callx_xi $buffering 1// bits of buffering = 8. 
    $call convolutionSmall (($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000001000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<16>) _b0000000011100010  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $call zeropad_same (($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000001000000  ) ($bitcast ($uint<16>) _b0000000011100010  ) ($bitcast ($uint<16>) _b0000000011100010  ) ($bitcast ($uint<16>) _b0000000001000000  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) (callx_xi64 ) 
    system_output_pipe := callx_xi64 $buffering 1// bits of buffering = 8. 
    $call convolution3D_3 (($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000001000000  ) ($bitcast ($uint<16>) _b0000000001000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000010  ) ($bitcast ($uint<16>) _b0000000011100010  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $place[fill_inputx_xexit_whilex_xbodyx_xi]
    $merge fill_inputx_xexit_whilex_xbodyx_xi 
    $phi iNsTr_11_at_entry := 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   fill_inputx_xexit_whilex_xbodyx_xi 
    // type of target is $uint<32>
    $phi row18x_x1x_xi_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   fill_inputx_xexit_whilex_xbodyx_xi 
    // type of target is $uint<16>
    $phi colx_x1x_xi_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   fill_inputx_xexit_whilex_xbodyx_xi 
    // type of target is $uint<16>
    $phi chlx_x0x_xi_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   fill_inputx_xexit_whilex_xbodyx_xi 
    // type of target is $uint<16>
    $endmerge
    $dopipeline $depth 15 $buffering 1
    $fullrate 
    $merge $entry $loopback 
    $phi iNsTr_11 := 			  ($cast ($uint<32>) add79x_xi ) $on   $loopback 			  iNsTr_11_at_entry $on   $entry 
    // type of target is $uint<32>
    $phi row18x_x1x_xi := 			  ($cast ($uint<16>) inc76x_xrow18x_x1x_xi ) $on   $loopback 			  row18x_x1x_xi_at_entry $on   $entry 
    // type of target is $uint<16>
    $phi colx_x1x_xi := 			  ($cast ($uint<16>) colx_x2x_xi ) $on   $loopback 			  colx_x1x_xi_at_entry $on   $entry 
    // type of target is $uint<16>
    $phi chlx_x0x_xi := 			  ($cast ($uint<16>) chlx_x1x_xi ) $on   $loopback 			  chlx_x0x_xi_at_entry $on   $entry 
    // type of target is $uint<16>
    $endmerge
    conv31x_xi := ($cast ($uint<32>) chlx_x0x_xi ) $buffering 1// bits of buffering = 32. 
    conv35x_xi := ($cast ($uint<32>) colx_x1x_xi ) $buffering 1// bits of buffering = 32. 
    conv39x_xi := ($cast ($uint<32>) row18x_x1x_xi ) $buffering 1// bits of buffering = 32. 
    $volatile mul40x_xi := (conv39x_xi * ($bitcast ($uint<32>) _b00000000000000000000000011100000  )) $buffering 1
    $volatile add41x_xi := (conv35x_xi + mul40x_xi) $buffering 1
    $volatile shlx_xi := (add41x_xi << ($bitcast ($uint<32>) _b00000000000000000000000000000100  )) $buffering 1
    $volatile add43x_xi := (shlx_xi + conv31x_xi) $buffering 1
    $volatile add50x_xi := (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000000000001000  )) $buffering 1
    $volatile add54x_xi := (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000011100000000  )) $buffering 1
    $volatile add57x_xi := (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000011100001000  )) $buffering 1
    iNsTr_11_11816_delayed_1_0 := iNsTr_11 $buffering 1 $cut_through // bits of buffering = 32. 
    $call maxPool4 (iNsTr_11_11816_delayed_1_0 add43x_xi add50x_xi add54x_xi add57x_xi ($bitcast ($uint<8>) _b00000010  ) ($bitcast ($uint<8>) _b00000000  ) ) (callx_xi65 ) 
    $volatile incx_xi66 := (chlx_x0x_xi + ($bitcast ($uint<16>) _b0000000000000001  )) $buffering 1
    $volatile cmpx_xi := (incx_xi66 == ($bitcast ($uint<16>) _b0000000000001000  )) $buffering 1
    inc67x_xi := ($cast ($uint<16>) cmpx_xi ) $buffering 1// bits of buffering = 16. 
    colx_x1x_xi_11845_delayed_1_0 := colx_x1x_xi $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile inc67x_xcolx_x1x_xi := (inc67x_xi + colx_x1x_xi_11845_delayed_1_0) $buffering 1
    $volatile chlx_x1x_xi := ( $mux cmpx_xi ($bitcast ($uint<16>) _b0000000000000000  )  incx_xi66 )  $buffering 1
    $volatile cmp72x_xi := (inc67x_xcolx_x1x_xi == ($bitcast ($uint<16>) _b0000000001110000  )) $buffering 1
    inc76x_xi := ($cast ($uint<16>) cmp72x_xi ) $buffering 1// bits of buffering = 16. 
    row18x_x1x_xi_11867_delayed_2_0 := row18x_x1x_xi $buffering 2 $cut_through // bits of buffering = 32. 
    $volatile inc76x_xrow18x_x1x_xi := (inc76x_xi + row18x_x1x_xi_11867_delayed_2_0) $buffering 1
    $volatile colx_x2x_xi := ( $mux cmp72x_xi ($bitcast ($uint<16>) _b0000000000000000  )  inc67x_xcolx_x1x_xi )  $buffering 1
    $volatile add79x_xi := (iNsTr_11 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
    $volatile cmp84x_xi := (inc76x_xrow18x_x1x_xi == ($bitcast ($uint<16>) _b0000000001110000  )) $buffering 1
    $volatile whilex_xbodyx_xi_maxPool3Dx_xexit_taken := cmp84x_xi $buffering 1
    $while ( ~ cmp84x_xi )
    $if whilex_xbodyx_xi_maxPool3Dx_xexit_taken $then 
    $place[whilex_xbodyx_xi_maxPool3Dx_xexit]
    $endif
    $merge whilex_xbodyx_xi_maxPool3Dx_xexit 
    $phi inc76x_xrow18x_x1x_xix_xlcssa := 			  ($cast ($uint<16>) inc76x_xrow18x_x1x_xi ) $on   whilex_xbodyx_xi_maxPool3Dx_xexit 
    // type of target is $uint<16>
    $endmerge
    conv89x_xi := ($cast ($uint<8>) inc76x_xrow18x_x1x_xix_xlcssa ) $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv89x_xi $buffering 1// bits of buffering = 8. 
    $call zeropad_same (($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000001000000  ) ($bitcast ($uint<16>) _b0000000001110010  ) ($bitcast ($uint<16>) _b0000000001110010  ) ($bitcast ($uint<16>) _b0000000001000000  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) (callx_xi67 ) 
    system_output_pipe := callx_xi67 $buffering 1// bits of buffering = 8. 
    $call convolution3D_3 (($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000010000000  ) ($bitcast ($uint<16>) _b0000000001000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000010  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<16>) _b0000000001110010  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $call zeropad_same (($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000010000000  ) ($bitcast ($uint<16>) _b0000000001110010  ) ($bitcast ($uint<16>) _b0000000001110010  ) ($bitcast ($uint<16>) _b0000000010000000  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) (callx_xi68 ) 
    system_output_pipe := callx_xi68 $buffering 1// bits of buffering = 8. 
    $call convolution3D_3 (($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000010000000  ) ($bitcast ($uint<16>) _b0000000010000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000011  ) ($bitcast ($uint<8>) _b00000011  ) ($bitcast ($uint<16>) _b0000000001110010  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $place[maxPool3Dx_xexit_whilex_xbodyx_xi94]
    $merge maxPool3Dx_xexit_whilex_xbodyx_xi94 
    $phi iNsTr_23_at_entry := 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   maxPool3Dx_xexit_whilex_xbodyx_xi94 
    // type of target is $uint<32>
    $phi row18x_x1x_xi69_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   maxPool3Dx_xexit_whilex_xbodyx_xi94 
    // type of target is $uint<16>
    $phi colx_x1x_xi70_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   maxPool3Dx_xexit_whilex_xbodyx_xi94 
    // type of target is $uint<16>
    $phi chlx_x0x_xi71_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   maxPool3Dx_xexit_whilex_xbodyx_xi94 
    // type of target is $uint<16>
    $endmerge
    $dopipeline $depth 15 $buffering 1
    $fullrate 
    $merge $entry $loopback 
    $phi iNsTr_23 := 			  ($cast ($uint<32>) add79x_xi92 ) $on   $loopback 			  iNsTr_23_at_entry $on   $entry 
    // type of target is $uint<32>
    $phi row18x_x1x_xi69 := 			  ($cast ($uint<16>) inc76x_xrow18x_x1x_xi90 ) $on   $loopback 			  row18x_x1x_xi69_at_entry $on   $entry 
    // type of target is $uint<16>
    $phi colx_x1x_xi70 := 			  ($cast ($uint<16>) colx_x2x_xi91 ) $on   $loopback 			  colx_x1x_xi70_at_entry $on   $entry 
    // type of target is $uint<16>
    $phi chlx_x0x_xi71 := 			  ($cast ($uint<16>) chlx_x1x_xi87 ) $on   $loopback 			  chlx_x0x_xi71_at_entry $on   $entry 
    // type of target is $uint<16>
    $endmerge
    conv31x_xi72 := ($cast ($uint<32>) chlx_x0x_xi71 ) $buffering 1// bits of buffering = 32. 
    conv35x_xi73 := ($cast ($uint<32>) colx_x1x_xi70 ) $buffering 1// bits of buffering = 32. 
    conv39x_xi74 := ($cast ($uint<32>) row18x_x1x_xi69 ) $buffering 1// bits of buffering = 32. 
    $volatile mul40x_xi75 := (conv39x_xi74 * ($bitcast ($uint<32>) _b00000000000000000000000001110000  )) $buffering 1
    $volatile add41x_xi76 := (conv35x_xi73 + mul40x_xi75) $buffering 1
    $volatile shlx_xi77 := (add41x_xi76 << ($bitcast ($uint<32>) _b00000000000000000000000000000101  )) $buffering 1
    $volatile add43x_xi78 := (shlx_xi77 + conv31x_xi72) $buffering 1
    $volatile add50x_xi79 := (add43x_xi78 + ($bitcast ($uint<32>) _b00000000000000000000000000010000  )) $buffering 1
    $volatile add54x_xi80 := (add43x_xi78 + ($bitcast ($uint<32>) _b00000000000000000000011100000000  )) $buffering 1
    $volatile add57x_xi81 := (add43x_xi78 + ($bitcast ($uint<32>) _b00000000000000000000011100010000  )) $buffering 1
    iNsTr_23_12102_delayed_1_0 := iNsTr_23 $buffering 1 $cut_through // bits of buffering = 32. 
    $call maxPool4 (iNsTr_23_12102_delayed_1_0 add43x_xi78 add50x_xi79 add54x_xi80 add57x_xi81 ($bitcast ($uint<8>) _b00000011  ) ($bitcast ($uint<8>) _b00000000  ) ) (callx_xi82 ) 
    $volatile incx_xi83 := (chlx_x0x_xi71 + ($bitcast ($uint<16>) _b0000000000000001  )) $buffering 1
    $volatile cmpx_xi84 := (incx_xi83 == ($bitcast ($uint<16>) _b0000000000010000  )) $buffering 1
    inc67x_xi85 := ($cast ($uint<16>) cmpx_xi84 ) $buffering 1// bits of buffering = 16. 
    colx_x1x_xi70_12131_delayed_1_0 := colx_x1x_xi70 $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile inc67x_xcolx_x1x_xi86 := (inc67x_xi85 + colx_x1x_xi70_12131_delayed_1_0) $buffering 1
    $volatile chlx_x1x_xi87 := ( $mux cmpx_xi84 ($bitcast ($uint<16>) _b0000000000000000  )  incx_xi83 )  $buffering 1
    $volatile cmp72x_xi88 := (inc67x_xcolx_x1x_xi86 == ($bitcast ($uint<16>) _b0000000000111000  )) $buffering 1
    inc76x_xi89 := ($cast ($uint<16>) cmp72x_xi88 ) $buffering 1// bits of buffering = 16. 
    row18x_x1x_xi69_12153_delayed_2_0 := row18x_x1x_xi69 $buffering 2 $cut_through // bits of buffering = 32. 
    $volatile inc76x_xrow18x_x1x_xi90 := (inc76x_xi89 + row18x_x1x_xi69_12153_delayed_2_0) $buffering 1
    $volatile colx_x2x_xi91 := ( $mux cmp72x_xi88 ($bitcast ($uint<16>) _b0000000000000000  )  inc67x_xcolx_x1x_xi86 )  $buffering 1
    $volatile add79x_xi92 := (iNsTr_23 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
    $volatile cmp84x_xi93 := (inc76x_xrow18x_x1x_xi90 == ($bitcast ($uint<16>) _b0000000000111000  )) $buffering 1
    $volatile whilex_xbodyx_xi94_maxPool3Dx_xexit96_taken := cmp84x_xi93 $buffering 1
    $while ( ~ cmp84x_xi93 )
    $if whilex_xbodyx_xi94_maxPool3Dx_xexit96_taken $then 
    $place[whilex_xbodyx_xi94_maxPool3Dx_xexit96]
    $endif
    $merge whilex_xbodyx_xi94_maxPool3Dx_xexit96 
    $phi inc76x_xrow18x_x1x_xi90x_xlcssa := 			  ($cast ($uint<16>) inc76x_xrow18x_x1x_xi90 ) $on   whilex_xbodyx_xi94_maxPool3Dx_xexit96 
    // type of target is $uint<16>
    $endmerge
    conv := ($bitcast ($uint<64>) ($cast ($int<64>) call ) ) $buffering 1// bits of buffering = 64. 
    conv89x_xi95 := ($cast ($uint<8>) inc76x_xrow18x_x1x_xi90x_xlcssa ) $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv89x_xi95 $buffering 1// bits of buffering = 8. 
    $call zeropad_same (($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000000111010  ) ($bitcast ($uint<16>) _b0000000000111010  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) (callx_xi97 ) 
    system_output_pipe := callx_xi97 $buffering 1// bits of buffering = 8. 
    $call convolution3D_3 (($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000000010000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000100  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<16>) _b0000000000111010  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $call zeropad_same (($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000000000111010  ) ($bitcast ($uint<16>) _b0000000000111010  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) (callx_xi98 ) 
    system_output_pipe := callx_xi98 $buffering 1// bits of buffering = 8. 
    $call convolution3D_3 (($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000101  ) ($bitcast ($uint<8>) _b00000100  ) ($bitcast ($uint<16>) _b0000000000111010  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $place[maxPool3Dx_xexit96_whilex_xbodyx_xi124]
    $merge maxPool3Dx_xexit96_whilex_xbodyx_xi124 
    $phi iNsTr_35_at_entry := 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   maxPool3Dx_xexit96_whilex_xbodyx_xi124 
    // type of target is $uint<32>
    $phi row18x_x1x_xi99_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   maxPool3Dx_xexit96_whilex_xbodyx_xi124 
    // type of target is $uint<16>
    $phi colx_x1x_xi100_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   maxPool3Dx_xexit96_whilex_xbodyx_xi124 
    // type of target is $uint<16>
    $phi chlx_x0x_xi101_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   maxPool3Dx_xexit96_whilex_xbodyx_xi124 
    // type of target is $uint<16>
    $endmerge
    $dopipeline $depth 15 $buffering 1
    $fullrate 
    $merge $entry $loopback 
    $phi iNsTr_35 := 			  ($cast ($uint<32>) add79x_xi122 ) $on   $loopback 			  iNsTr_35_at_entry $on   $entry 
    // type of target is $uint<32>
    $phi row18x_x1x_xi99 := 			  ($cast ($uint<16>) inc76x_xrow18x_x1x_xi120 ) $on   $loopback 			  row18x_x1x_xi99_at_entry $on   $entry 
    // type of target is $uint<16>
    $phi colx_x1x_xi100 := 			  ($cast ($uint<16>) colx_x2x_xi121 ) $on   $loopback 			  colx_x1x_xi100_at_entry $on   $entry 
    // type of target is $uint<16>
    $phi chlx_x0x_xi101 := 			  ($cast ($uint<16>) chlx_x1x_xi117 ) $on   $loopback 			  chlx_x0x_xi101_at_entry $on   $entry 
    // type of target is $uint<16>
    $endmerge
    conv31x_xi102 := ($cast ($uint<32>) chlx_x0x_xi101 ) $buffering 1// bits of buffering = 32. 
    conv35x_xi103 := ($cast ($uint<32>) colx_x1x_xi100 ) $buffering 1// bits of buffering = 32. 
    conv39x_xi104 := ($cast ($uint<32>) row18x_x1x_xi99 ) $buffering 1// bits of buffering = 32. 
    $volatile mul40x_xi105 := (conv39x_xi104 * ($bitcast ($uint<32>) _b00000000000000000000000000111000  )) $buffering 1
    $volatile add41x_xi106 := (conv35x_xi103 + mul40x_xi105) $buffering 1
    $volatile shlx_xi107 := (add41x_xi106 << ($bitcast ($uint<32>) _b00000000000000000000000000000110  )) $buffering 1
    $volatile add43x_xi108 := (shlx_xi107 + conv31x_xi102) $buffering 1
    $volatile add50x_xi109 := (add43x_xi108 + ($bitcast ($uint<32>) _b00000000000000000000000000100000  )) $buffering 1
    $volatile add54x_xi110 := (add43x_xi108 + ($bitcast ($uint<32>) _b00000000000000000000011100000000  )) $buffering 1
    $volatile add57x_xi111 := (add43x_xi108 + ($bitcast ($uint<32>) _b00000000000000000000011100100000  )) $buffering 1
    iNsTr_35_12394_delayed_1_0 := iNsTr_35 $buffering 1 $cut_through // bits of buffering = 32. 
    $call maxPool4 (iNsTr_35_12394_delayed_1_0 add43x_xi108 add50x_xi109 add54x_xi110 add57x_xi111 ($bitcast ($uint<8>) _b00000100  ) ($bitcast ($uint<8>) _b00000000  ) ) (callx_xi112 ) 
    $volatile incx_xi113 := (chlx_x0x_xi101 + ($bitcast ($uint<16>) _b0000000000000001  )) $buffering 1
    $volatile cmpx_xi114 := (incx_xi113 == ($bitcast ($uint<16>) _b0000000000100000  )) $buffering 1
    inc67x_xi115 := ($cast ($uint<16>) cmpx_xi114 ) $buffering 1// bits of buffering = 16. 
    colx_x1x_xi100_12423_delayed_1_0 := colx_x1x_xi100 $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile inc67x_xcolx_x1x_xi116 := (inc67x_xi115 + colx_x1x_xi100_12423_delayed_1_0) $buffering 1
    $volatile chlx_x1x_xi117 := ( $mux cmpx_xi114 ($bitcast ($uint<16>) _b0000000000000000  )  incx_xi113 )  $buffering 1
    $volatile cmp72x_xi118 := (inc67x_xcolx_x1x_xi116 == ($bitcast ($uint<16>) _b0000000000011100  )) $buffering 1
    inc76x_xi119 := ($cast ($uint<16>) cmp72x_xi118 ) $buffering 1// bits of buffering = 16. 
    row18x_x1x_xi99_12445_delayed_2_0 := row18x_x1x_xi99 $buffering 2 $cut_through // bits of buffering = 32. 
    $volatile inc76x_xrow18x_x1x_xi120 := (inc76x_xi119 + row18x_x1x_xi99_12445_delayed_2_0) $buffering 1
    $volatile colx_x2x_xi121 := ( $mux cmp72x_xi118 ($bitcast ($uint<16>) _b0000000000000000  )  inc67x_xcolx_x1x_xi116 )  $buffering 1
    $volatile add79x_xi122 := (iNsTr_35 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
    $volatile cmp84x_xi123 := (inc76x_xrow18x_x1x_xi120 == ($bitcast ($uint<16>) _b0000000000011100  )) $buffering 1
    $volatile whilex_xbodyx_xi124_maxPool3Dx_xexit126_taken := cmp84x_xi123 $buffering 1
    $while ( ~ cmp84x_xi123 )
    $if whilex_xbodyx_xi124_maxPool3Dx_xexit126_taken $then 
    $place[whilex_xbodyx_xi124_maxPool3Dx_xexit126]
    $endif
    $merge whilex_xbodyx_xi124_maxPool3Dx_xexit126 
    $phi inc76x_xrow18x_x1x_xi120x_xlcssa := 			  ($cast ($uint<16>) inc76x_xrow18x_x1x_xi120 ) $on   whilex_xbodyx_xi124_maxPool3Dx_xexit126 
    // type of target is $uint<16>
    $endmerge
    conv89x_xi125 := ($cast ($uint<8>) inc76x_xrow18x_x1x_xi120x_xlcssa ) $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv89x_xi125 $buffering 1// bits of buffering = 8. 
    $call zeropad_same (($bitcast ($uint<16>) _b0000000000011100  ) ($bitcast ($uint<16>) _b0000000000011100  ) ($bitcast ($uint<16>) _b0000001000000000  ) ($bitcast ($uint<16>) _b0000000000011110  ) ($bitcast ($uint<16>) _b0000000000011110  ) ($bitcast ($uint<16>) _b0000001000000000  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) (callx_xi127 ) 
    system_output_pipe := callx_xi127 $buffering 1// bits of buffering = 8. 
    $call convolution3D_3 (($bitcast ($uint<16>) _b0000000000011100  ) ($bitcast ($uint<16>) _b0000000000011100  ) ($bitcast ($uint<16>) _b0000001000000000  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000110  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<16>) _b0000000000011110  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $call zeropad_same (($bitcast ($uint<16>) _b0000000000011100  ) ($bitcast ($uint<16>) _b0000000000011100  ) ($bitcast ($uint<16>) _b0000001000000000  ) ($bitcast ($uint<16>) _b0000000000011110  ) ($bitcast ($uint<16>) _b0000000000011110  ) ($bitcast ($uint<16>) _b0000001000000000  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) (callx_xi128 ) 
    system_output_pipe := callx_xi128 $buffering 1// bits of buffering = 8. 
    $call convolution3D_3 (($bitcast ($uint<16>) _b0000000000011100  ) ($bitcast ($uint<16>) _b0000000000011100  ) ($bitcast ($uint<16>) _b0000001000000000  ) ($bitcast ($uint<16>) _b0000001000000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000111  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<16>) _b0000000000011110  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $call ct_core (($bitcast ($uint<16>) _b0000000000011100  ) ($bitcast ($uint<16>) _b0000000000011100  ) ($bitcast ($uint<16>) _b0000001000000000  ) ($bitcast ($uint<16>) _b0000000000000010  ) ($bitcast ($uint<16>) _b0000000000000010  ) ($bitcast ($uint<16>) _b0000000000111001  ) ($bitcast ($uint<16>) _b0000000000111001  ) ($bitcast ($uint<16>) _b0000001000000000  ) ($bitcast ($uint<16>) _b0000000000000010  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) (callx_xi129 ) 
    system_output_pipe := callx_xi129 $buffering 1// bits of buffering = 8. 
    $call convolution3D_3 (($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000001000000000  ) ($bitcast ($uint<16>) _b0000000000000010  ) ($bitcast ($uint<16>) _b0000000000000010  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00001000  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<16>) _b0000000000111001  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $call concat_core (($bitcast ($uint<16>) _b0000000000100000  ) ($bitcast ($uint<16>) _b0000000000100000  ) ($bitcast ($uint<32>) _b00000000000110001000000000000000  ) ($bitcast ($uint<8>) _b00000100  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) (callx_xi130 ) 
    system_output_pipe := callx_xi130 $buffering 1// bits of buffering = 8. 
    $call zeropad_same (($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000001000000000  ) ($bitcast ($uint<16>) _b0000000000111010  ) ($bitcast ($uint<16>) _b0000000000111010  ) ($bitcast ($uint<16>) _b0000001000000000  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000000  ) ) (callx_xi131 ) 
    system_output_pipe := callx_xi131 $buffering 1// bits of buffering = 8. 
    $call convolution3D_3 (($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000001000000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00001001  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<16>) _b0000000000111010  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $call zeropad_same (($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000000000111010  ) ($bitcast ($uint<16>) _b0000000000111010  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000000  ) ) (callx_xi132 ) 
    system_output_pipe := callx_xi132 $buffering 1// bits of buffering = 8. 
    $call convolution3D_3 (($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00001010  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<16>) _b0000000000111010  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $call ct_core (($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000000000000010  ) ($bitcast ($uint<16>) _b0000000000000010  ) ($bitcast ($uint<16>) _b0000000001110001  ) ($bitcast ($uint<16>) _b0000000001110001  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000000000000010  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000000  ) ) (callx_xi133 ) 
    system_output_pipe := callx_xi133 $buffering 1// bits of buffering = 8. 
    $call convolution3D_3 (($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000010000000  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000000000000010  ) ($bitcast ($uint<16>) _b0000000000000010  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00001011  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<16>) _b0000000001110001  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $call concat_core (($bitcast ($uint<16>) _b0000000000010000  ) ($bitcast ($uint<16>) _b0000000000010000  ) ($bitcast ($uint<32>) _b00000000001100010000000000000000  ) ($bitcast ($uint<8>) _b00000011  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000000  ) ) (callx_xi134 ) 
    system_output_pipe := callx_xi134 $buffering 1// bits of buffering = 8. 
    $call zeropad_same (($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000000001110010  ) ($bitcast ($uint<16>) _b0000000001110010  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) (callx_xi135 ) 
    system_output_pipe := callx_xi135 $buffering 1// bits of buffering = 8. 
    $call convolution3D_3 (($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000010000000  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00001100  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<16>) _b0000000001110010  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $call zeropad_same (($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000010000000  ) ($bitcast ($uint<16>) _b0000000001110010  ) ($bitcast ($uint<16>) _b0000000001110010  ) ($bitcast ($uint<16>) _b0000000010000000  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) (callx_xi136 ) 
    system_output_pipe := callx_xi136 $buffering 1// bits of buffering = 8. 
    $call convolution3D_3 (($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000010000000  ) ($bitcast ($uint<16>) _b0000000010000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00001101  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<16>) _b0000000001110010  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $call ct_core (($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000000000000010  ) ($bitcast ($uint<16>) _b0000000000000010  ) ($bitcast ($uint<16>) _b0000000011100001  ) ($bitcast ($uint<16>) _b0000000011100001  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000000000000010  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) (callx_xi137 ) 
    system_output_pipe := callx_xi137 $buffering 1// bits of buffering = 8. 
    $call convolution3D_3 (($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000001000000  ) ($bitcast ($uint<16>) _b0000000010000000  ) ($bitcast ($uint<16>) _b0000000000000010  ) ($bitcast ($uint<16>) _b0000000000000010  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00001110  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<16>) _b0000000011100001  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $call concat_core (($bitcast ($uint<16>) _b0000000000001000  ) ($bitcast ($uint<16>) _b0000000000001000  ) ($bitcast ($uint<32>) _b00000000011000100000000000000000  ) ($bitcast ($uint<8>) _b00000010  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) (callx_xi138 ) 
    system_output_pipe := callx_xi138 $buffering 1// bits of buffering = 8. 
    $call zeropad_same (($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000010000000  ) ($bitcast ($uint<16>) _b0000000011100010  ) ($bitcast ($uint<16>) _b0000000011100010  ) ($bitcast ($uint<16>) _b0000000010000000  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000000  ) ) (callx_xi139 ) 
    system_output_pipe := callx_xi139 $buffering 1// bits of buffering = 8. 
    $call convolution3D_3 (($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000001000000  ) ($bitcast ($uint<16>) _b0000000010000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00001111  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<16>) _b0000000011100010  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $call zeropad_same (($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000001000000  ) ($bitcast ($uint<16>) _b0000000011100010  ) ($bitcast ($uint<16>) _b0000000011100010  ) ($bitcast ($uint<16>) _b0000000001000000  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000000  ) ) (callx_xi140 ) 
    system_output_pipe := callx_xi140 $buffering 1// bits of buffering = 8. 
    $call convolution3D_3 (($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000001000000  ) ($bitcast ($uint<16>) _b0000000001000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00010000  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<16>) _b0000000011100010  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $call zeropad_same (($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000001000000  ) ($bitcast ($uint<16>) _b0000000011100010  ) ($bitcast ($uint<16>) _b0000000011100010  ) ($bitcast ($uint<16>) _b0000000001000000  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000000  ) ) (callx_xi141 ) 
    system_output_pipe := callx_xi141 $buffering 1// bits of buffering = 8. 
    $call convolutionSmall (($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000001000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00010001  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<16>) _b0000000011100010  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<8>) _b00000010  ) ) () 
    $call timer () (call1 ) 
    conv2 := ($bitcast ($uint<64>) ($cast ($int<64>) call1 ) ) $buffering 1// bits of buffering = 64. 
    $volatile sub := (conv2 - conv) $buffering 1
    conv6 := ($cast ($uint<8>) sub ) $buffering 1// bits of buffering = 8. 
    $volatile shr := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    conv10 := ($cast ($uint<8>) shr ) $buffering 1// bits of buffering = 8. 
    $volatile shr13 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  )) $buffering 1
    conv16 := ($cast ($uint<8>) shr13 ) $buffering 1// bits of buffering = 8. 
    $volatile shr19 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  )) $buffering 1
    conv22 := ($cast ($uint<8>) shr19 ) $buffering 1// bits of buffering = 8. 
    $volatile shr25 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  )) $buffering 1
    conv28 := ($cast ($uint<8>) shr25 ) $buffering 1// bits of buffering = 8. 
    $volatile shr31 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  )) $buffering 1
    conv34 := ($cast ($uint<8>) shr31 ) $buffering 1// bits of buffering = 8. 
    $volatile shr37 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  )) $buffering 1
    conv40 := ($cast ($uint<8>) shr37 ) $buffering 1// bits of buffering = 8. 
    $volatile shr43 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  )) $buffering 1
    conv46 := ($cast ($uint<8>) shr43 ) $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv46 $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv40 $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv34 $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv28 $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv22 $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv16 $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv10 $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv6 $buffering 1// bits of buffering = 8. 
    $call sendOutput () () 
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
$module [timerDaemon]
$in ()
$out ()
$is
{
  $branchblock [loop]
  {
    $dopipeline $depth 7 $buffering 1
    $fullrate 
    $merge $entry $loopback 
    $phi COUNTER := 			  ($bitcast ($uint<64>) _b0  ) $on   $entry 			  nCOUNTER $on   $loopback 
    // type of target is $uint<64>
    $phi req := 			  timer_req $on   $entry ,   $loopback 
    // type of target is $uint<1>
    $endmerge
    $volatile nCOUNTER := (COUNTER + 1 ) $buffering 1
    $guard (req) timer_resp := COUNTER $buffering 1// bits of buffering = 64. 
    $while 1 
  }
}
$module [zeropad]
$in ( input_dim0 : $uint<16>   input_dim1 : $uint<16>   input_dim2 : $uint<16>   out_dim0 : $uint<16>   out_dim1 : $uint<16>   out_dim2 : $uint<16>   index1 : $uint<8>   index2 : $uint<8>  )
$out ()
$is
{
  $branchblock [body]
  {
    $call zeropad_same (input_dim0 input_dim1 input_dim2 out_dim0 out_dim1 out_dim2 index1 index2 ) (call ) 
    system_output_pipe := call $buffering 1// bits of buffering = 8. 
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
// use of gated clocks in modules 
