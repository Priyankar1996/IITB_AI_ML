// Access the input tensor and write to iput pipe
$module [inputModule_generic]
$in(row_in ct chl_in chl_out rk: $uint<16> index : $uint<8>)
$out()
$is
{
	$branchblock [access_block]
	{
		m_factor := ($bitcast ($uint<32>) (ct * chl_in))
		m2_factor := (m_factor << 1)
		m3_factor := (m2_factor+m_factor)
		m4_factor := (m_factor << 2)
		mode_3 := (rk == 3)

		// Pipeline for sending inputs
		$dopipeline $depth 15 $buffering 2 $fullrate
		$merge $entry $loopback
		$phi address := 0 $on $entry n_address $on $loopback
		$phi row1 := ($bitcast ($uint<16>) 0) $on $entry n_row1 $on $loopback
		$phi chl_num := ($bitcast ($uint<16>) 0) $on $entry n_chl_num $on $loopback
		$phi mycounter := ($bitcast ($uint<32>) 1) $on $entry n_mycounter $on $loopback
		$endmerge
		
		// $call timer (4) (time_pipe)
		$volatile next_row :=  (mycounter == m_factor)
		$volatile tmp_cnt := (mycounter + 1)
		$volatile n_mycounter := ($mux next_row 1 tmp_cnt )
		$volatile update_row := ($mux next_row (row1 + N_ROWS_generic) row1 )
		$volatile continue_flag1 := (update_row < row_in)
		
		$volatile n_row1 := ($mux continue_flag1 update_row 0)
		$volatile n_address := ($mux continue_flag1 ((address + 1) + ($mux next_row m_factor  0)) 0)
		
		$call readModule_convolution (index (address>>3)) (val1)
        $call readModule_convolution (index ((address+($bitcast ($uint<32>) m_factor))>>3)) (val2)
        $call readModule_convolution (index ((address+($bitcast ($uint<32>) m2_factor))>>3)) (val3)
        $guard (mode_3) $call readModule_convolution (index ((address+($bitcast ($uint<32>) m3_factor))>>3)) (val4)

		$volatile rd1 := (val1 >> ($bitcast ($uint<64>) ((7-(address & 7))<<3)))
		$volatile rd2 := (val2 >> ($bitcast ($uint<64>) ((7-((address+($bitcast ($uint<32>) m_factor)) & 7))<<3)))
		$volatile rd3 := (val3 >> ($bitcast ($uint<64>) ((7-((address+($bitcast ($uint<32>) m2_factor)) & 7))<<3)))
		$volatile rd4 := (val4 >> ($bitcast ($uint<64>) ((7-((address+($bitcast ($uint<32>) m3_factor)) & 7))<<3)))
		core_ip_generic1 := ($bitcast ($uint<8>) rd1)
		core_ip_generic2 := ($bitcast ($uint<8>) rd2)
		core_ip_generic3 := ($bitcast ($uint<8>) rd3)
		$guard (mode_3) core_ip_generic4 := ($bitcast ($uint<8>) rd4)

		$volatile n_chl_num := ($mux continue_flag1 chl_num (chl_num + 1))
		$volatile not_end_flag := ((n_chl_num != chl_out) | continue_flag1)

		$while not_end_flag

		// $call timer (101) (time_pipe)
	}
}
