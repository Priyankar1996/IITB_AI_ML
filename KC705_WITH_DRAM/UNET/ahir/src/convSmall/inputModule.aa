// Access the input tensor and write to iput pipe
$module [inputModule_generic]
$in(row_in ct chl_in chl_out rk pad : $uint<16> index : $uint<8>)
$out()
$is
{
	$branchblock [access_block]
	{
		ct_new := (ct + (pad<<1))
		row_size_total := ($bitcast ($uint<32>) (ct_new * chl_in))
		p_chl_in := ($bitcast ($uint<32>) (pad*chl_in))
		m_factor := ($bitcast ($uint<32>) (ct*chl_in))
		m2_factor := (m_factor << 1)
		m3_factor := (m2_factor+m_factor)
		m4_factor := (m2_factor << 2)
		mode_3 := (rk == 3)
		addr_init := (-1*(($bitcast ($uint<32>) pad)*m_factor))

		// Pipeline for sending inputs
		$dopipeline $depth 15 $buffering 2 $fullrate
		$merge $entry $loopback
		$phi address := addr_init $on $entry n_address $on $loopback
		$phi row1 := ($bitcast ($uint<16>) 0) $on $entry n_row1 $on $loopback
		$phi chl_num := ($bitcast ($uint<16>) 0) $on $entry n_chl_num $on $loopback
		$phi mycounter := ($bitcast ($uint<32>) 1) $on $entry n_mycounter $on $loopback
		$endmerge
		
		$volatile next_row :=  (mycounter == row_size_total)
		$volatile tmp_cnt := (mycounter + 1)
		$volatile n_mycounter := ($mux next_row 1 tmp_cnt )
		$volatile update_row := ($mux next_row (row1 + N_ROWS_S) row1 )
		$volatile continue_flag1 := (update_row < row_in)
		$volatile mc_lt_p := ((mycounter <= p_chl_in) | (mycounter > (row_size_total - p_chl_in))) 
		
		$volatile n_row1 := ($mux continue_flag1 update_row 0)
		$volatile n_address := ($mux continue_flag1 (address + ($mux next_row m_factor ($mux mc_lt_p 0 1))) addr_init)
		
	 	$volatile p1_zero := (mc_lt_p | ((row1 < pad) | (row1 >= ((row_in + 3) - pad))))
	 	$volatile p2_zero := (mc_lt_p | (((row1+1) < pad) | (row1 >= ((row_in + 2)- pad))))
	 	$volatile p3_zero := (mc_lt_p | (((row1+2) < pad) | (row1 >= ((row_in + 1)- pad))))
	 	$volatile p4_zero := (mc_lt_p | (((row1+3) < pad) | (row1 >= (row_in - pad))))
		$volatile addr2 := (address+ m_factor)
		$volatile addr3 := (address+ m2_factor)
		$volatile addr4 := (address+ m3_factor)
		$volatile guard_4 := (mode_3 & (~p4_zero))
		$guard (~p1_zero) $call readModule_convolution (index (address>>3)) (val1)
		$guard (~p2_zero) $call readModule_convolution (index (addr2>>3)) (val2)
		$guard (~p3_zero) $call readModule_convolution (index (addr3>>3)) (val3)
		$guard (guard_4) $call readModule_convolution (index (addr4>>3)) (val4)
		

		$volatile rd1 := ($mux p1_zero 0 (val1 >> ($bitcast ($uint<64>) ((7-(address & 7))<<3))))
		$volatile rd2 := ($mux p2_zero 0 (val2 >> ($bitcast ($uint<64>) ((7-(addr2 & 7))<<3))))
		$volatile rd3 := ($mux p3_zero 0 (val3 >> ($bitcast ($uint<64>) ((7-(addr3 & 7))<<3))))
		$volatile rd4 := ($mux p4_zero 0 (val4 >> ($bitcast ($uint<64>) ((7-(addr4 & 7))<<3))))
		core_ip_generic1 := ($bitcast ($uint<8>) rd1)
		core_ip_generic2 := ($bitcast ($uint<8>) rd2)
		core_ip_generic3 := ($bitcast ($uint<8>) rd3)
		$guard (mode_3) core_ip_generic4 := ($bitcast ($uint<8>) rd4)
		$volatile n_chl_num := ($mux continue_flag1 chl_num (chl_num + 1))
		$volatile not_end_flag := ((n_chl_num != chl_out) | continue_flag1)

		$while not_end_flag
		// $call timer (101) (time_pipe)
	}
}
