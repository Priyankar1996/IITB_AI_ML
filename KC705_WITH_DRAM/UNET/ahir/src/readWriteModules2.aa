$opaque $module [readModule1]
$in (address : $uint<32>)
$out (data : $uint<64>)
$is
{
	$call memoryModule (1 (T1_base + address) 0 255) (data)
}

$opaque $module [writeModule1]
$in (index : $uint<8> address : $uint<32> data : $uint<64>)
$out ()
$is
{
	cnd1 := (index == 0)
	cnd2 := (index == 1)
	$guard (cnd1) $call memoryModule (0 (K_base + address) data 255) (out1)
	$guard (cnd2) $call memoryModule (0 (T0_base + address) data 255) (out2)
}

$pipeline $depth 8 $buffering 1 $fullrate
$opaque $module [readModule_maxPool]
$in (index : $uint<8> address : $uint<32>)
$out (data : $uint<64>)
$is
{
	cnd1 := (index == 2)
	cnd2 := (index == 3)
	cnd3 := (index == 4)
	$guard (cnd1) $call memoryModule (1 (T2_base + address) 0 255) (val1)
	$guard (cnd2) $call memoryModule (1 (T3_base + address) 0 255) (val2)
	$guard (cnd1) $call memoryModule (1 (T4_base + address) 0 255) (val3)
	
	data := ( $excmux cnd1 val1 cnd2 val2 cnd3 val3 )
}

$pipeline $depth 8 $buffering 1 $fullrate
$opaque $module [writeModule_maxPool]
$in (index : $uint<8> address : $uint<32> data : $uint<64>)
$out (done : $uint<1>)
$is
{
	$call memoryModule (0 (T0_base + address) data 255) (out1)
	done := (index [] 0)
}

$pipeline $depth 7 $buffering 1 $fullrate
$opaque $module [readModule_convolution]
$in (index : $uint<8> address : $uint<32>)
$out (data : $uint<64>)
$is
{
	$volatile  cnd1 := (index == 0)
	$volatile  cnd2 := (index == 1)
	$guard (cnd1) $call memoryModule (1 (T0_base + address) 0 255) (val1)
	$guard (cnd2) $call memoryModule (1 (T1_base + address) 0 255) (val2)
	
	data := ($mux cnd1 val1 val2)
}

$pipeline $depth 8 $buffering 1 $fullrate
$opaque $module [readModule_convolutionk]
$in (index : $uint<8> address : $uint<32>)
$out (data : $uint<64>)
$is
{
	$call memoryModule (1 (K_base + address) 0 255) (data)
}

$pipeline $depth 8 $buffering 1 $fullrate
$opaque $module [writeModule_convolution]
$in (index : $uint<8> address : $uint<32> data : $uint<64> bm : $uint<8>)
$out (done : $uint<1>)
$is
{
	cnd1 := (index == 0)
	cnd2 := (index == 1)
	cnd3 := (index == 2)
	cnd4 := (index == 3)
	cnd5 := (index == 4)
	$guard (cnd1) $call memoryModule (0 (T0_base + address) data bm) (out1)
	$guard (cnd2) $call memoryModule (0 (T1_base + address) data bm) (out2)
	$guard (cnd3) $call memoryModule (0 (T2_base + address) data bm) (out3)
	$guard (cnd4) $call memoryModule (0 (T3_base + address) data bm) (out4)
	$guard (cnd5) $call memoryModule (0 (T4_base + address) data bm) (out5)
	done := (index [] 0)
}

$pipeline $depth 8 $buffering 1 $fullrate
$opaque $module [readModule_convolution2]
$in (index : $uint<8> address : $uint<32>)
$out (data : $uint<64>)
$is
{
	cnd1 := (index == 0)
	cnd2 := (index == 1)
	cnd3 := (index == 2)
	cnd4 := (index == 3)
	cnd5 := (index == 4)
	$guard (cnd1) $call memoryModule (1 (T0_base + address) 0 255) (val1)
	$guard (cnd2) $call memoryModule (1 (T1_base + address) 0 255) (val2)
	$guard (cnd3) $call memoryModule (1 (T2_base + address) 0 255) (val3)
	$guard (cnd4) $call memoryModule (1 (T3_base + address) 0 255) (val4)
	$guard (cnd5) $call memoryModule (1 (T4_base + address) 0 255) (val5)
	data := ($excmux cnd1 val1 cnd2 val2 cnd3 val3 cnd4 val4 cnd5 val5)
}
