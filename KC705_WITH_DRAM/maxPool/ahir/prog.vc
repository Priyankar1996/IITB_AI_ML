// Virtual circuit produced from Aa description by Aa2VC 
// $pipe  MAIN_MEM_REQUEST : $uint<110>  $depth 16 
// can point into  foreign( $void )
// in scope  top-level
$pipe [MAIN_MEM_REQUEST] 110 $depth 16 
// $pipe  MAIN_MEM_RESPONSE : $uint<65>  $depth 16 
// can point into 
// in scope  top-level
$pipe [MAIN_MEM_RESPONSE] 65 $depth 16 
// $pipe  system_input_pipe : $uint<8>  $depth 1 
// can point into 
// in scope  top-level
$pipe [system_input_pipe] 8 $depth 1 
// $pipe  system_output_pipe : $uint<8>  $depth 1 
// can point into  foreign( $void )
// in scope  top-level
$pipe [system_output_pipe] 8 $depth 1 
// $noblock $pipe  timer_req : $uint<1>  $depth 1 
// can point into 
// in scope  top-level
$noblock $pipe [timer_req] 1 $depth 1 
// $pipe  timer_resp : $uint<64>  $depth 1 
// can point into 
// in scope  top-level
$pipe [timer_resp] 64 $depth 1 
// Declared gated clocks.
$pipeline $depth 15 $buffering 1 $fullrate $module [memoryModule] 
{
  $in r_wbar:$int<1>
  // can point into 
  addr:$int<32>
  // can point into  foreign( $void )
  data_in:$int<64>
  // can point into 
  $out data_out:$int<64>
  // can point into 
  // pipe-declarations for block %memoryModule
  //  file prog.linked.opt.aa, line 22
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // pipelined module
    :|:[assign_stmt_51_to_assign_stmt_59] 
    {
      $T [r_wbar_update_enable] 
      $T [r_wbar_update_enable_out] 
      r_wbar_update_enable &-> (r_wbar_update_enable_out)
      $null &-> (r_wbar_update_enable)
      $T [addr_update_enable] 
      $T [addr_update_enable_out] 
      addr_update_enable &-> (addr_update_enable_out)
      $null &-> (addr_update_enable)
      $T [data_in_update_enable] 
      $T [data_in_update_enable_out] 
      data_in_update_enable &-> (data_in_update_enable_out)
      $null &-> (data_in_update_enable)
      $T [data_out_update_enable] 
      $T [data_out_update_enable_in] 
      $null &-> (data_out_update_enable)
      $null <-& (data_out_update_enable_in) 
      $null &-> (data_out_update_enable)
      data_out_update_enable <-& (data_out_update_enable_in) 
      // start:  	MAIN_MEM_REQUEST := (((($bitcast ($uint<1>) _b0  ) && r_wbar) && ($bitcast ($uint<8>) _b1  )) && ((($bitcast ($uint<4>) _b0  ) && addr) && data_in)) $buffering 1// bits of buffering = 110. 
      //  file prog.linked.opt.aa, line 27
      // Source expression
      // (((($bitcast ($uint<1>) _b0  ) && r_wbar) && ($bitcast ($uint<8>) _b1  )) && ((($bitcast ($uint<4>) _b0  ) && addr) && data_in))
      $T[CONCAT_u10_u110_50_sample_start_] 
      $T[CONCAT_u10_u110_50_sample_completed_] 
      $T[CONCAT_u10_u110_50_update_start_] 
      $T[CONCAT_u10_u110_50_update_completed_] 
      // ((($bitcast ($uint<1>) _b0  ) && r_wbar) && ($bitcast ($uint<8>) _b1  ))
      // (($bitcast ($uint<1>) _b0  ) && r_wbar)
      // r_wbar
      // ((($bitcast ($uint<4>) _b0  ) && addr) && data_in)
      // (($bitcast ($uint<4>) _b0  ) && addr)
      // addr
      // data_in
      // start: Forward dependencies from ((($bitcast ($uint<1>) _b0  ) && r_wbar) && ($bitcast ($uint<8>) _b1  )) to transition CONCAT_u10_u110_50_sample_start_
      CONCAT_u10_u110_50_sample_start_ <-& ($entry)
      // done: Forward dependencies from ((($bitcast ($uint<1>) _b0  ) && r_wbar) && ($bitcast ($uint<8>) _b1  )) to transition CONCAT_u10_u110_50_sample_start_
      // start: Forward dependencies from ((($bitcast ($uint<4>) _b0  ) && addr) && data_in) to transition CONCAT_u10_u110_50_sample_start_
      CONCAT_u10_u110_50_sample_start_ <-& ($entry)
      CONCAT_u10_u110_50_sample_start_ <-& ($entry)
      // done: Forward dependencies from ((($bitcast ($uint<4>) _b0  ) && addr) && data_in) to transition CONCAT_u10_u110_50_sample_start_
      ;;[CONCAT_u10_u110_50_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[CONCAT_u10_u110_50_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      CONCAT_u10_u110_50_sample_start_ &-> (CONCAT_u10_u110_50_Sample)
      CONCAT_u10_u110_50_sample_completed_ <-& (CONCAT_u10_u110_50_Sample)
      CONCAT_u10_u110_50_sample_completed_ &-> ($null)
      CONCAT_u10_u110_50_update_start_ &-> (CONCAT_u10_u110_50_Update)
      CONCAT_u10_u110_50_update_completed_ <-& (CONCAT_u10_u110_50_Update)
      // RAW reenables for ((($bitcast ($uint<1>) _b0  ) && r_wbar) && ($bitcast ($uint<8>) _b1  ))
      r_wbar_update_enable o<-& (CONCAT_u10_u110_50_sample_completed_ 0)
      // RAW reenables for ((($bitcast ($uint<4>) _b0  ) && addr) && data_in)
      addr_update_enable o<-& (CONCAT_u10_u110_50_sample_completed_ 0)
      data_in_update_enable o<-& (CONCAT_u10_u110_50_sample_completed_ 0)
      // self-release: 
      CONCAT_u10_u110_50_sample_start_ o<-& (CONCAT_u10_u110_50_sample_completed_ 1)
      $null &-> (CONCAT_u10_u110_50_update_start_)
      CONCAT_u10_u110_50_update_start_ o<-& (CONCAT_u10_u110_50_update_completed_ 0)
      // Target expression
      // (as target) MAIN_MEM_REQUEST
      $T[WPIPE_MAIN_MEM_REQUEST_35_sample_start_] 
      $T[WPIPE_MAIN_MEM_REQUEST_35_sample_completed_] 
      $T[WPIPE_MAIN_MEM_REQUEST_35_update_start_] 
      $T[WPIPE_MAIN_MEM_REQUEST_35_update_completed_] 
      ;;[WPIPE_MAIN_MEM_REQUEST_35_Sample] 
      {
        // pipe write sample-start MAIN_MEM_REQUEST
        $T [req] $T [ack] 
      }
      ;;[WPIPE_MAIN_MEM_REQUEST_35_Update] 
      {
        // pipe write update (complete) MAIN_MEM_REQUEST
        $T [req] $T [ack] 
      }
      WPIPE_MAIN_MEM_REQUEST_35_sample_start_ &-> (WPIPE_MAIN_MEM_REQUEST_35_Sample)
      WPIPE_MAIN_MEM_REQUEST_35_sample_completed_ <-& (WPIPE_MAIN_MEM_REQUEST_35_Sample)
      WPIPE_MAIN_MEM_REQUEST_35_update_start_ <-& (WPIPE_MAIN_MEM_REQUEST_35_sample_completed_)
      WPIPE_MAIN_MEM_REQUEST_35_update_start_ &-> (WPIPE_MAIN_MEM_REQUEST_35_Update)
      WPIPE_MAIN_MEM_REQUEST_35_update_completed_ <-& (WPIPE_MAIN_MEM_REQUEST_35_Update)
      WPIPE_MAIN_MEM_REQUEST_35_sample_start_ o<-& (WPIPE_MAIN_MEM_REQUEST_35_update_completed_ 0)
      // start: Forward dependencies from (((($bitcast ($uint<1>) _b0  ) && r_wbar) && ($bitcast ($uint<8>) _b1  )) && ((($bitcast ($uint<4>) _b0  ) && addr) && data_in)) to transition WPIPE_MAIN_MEM_REQUEST_35_sample_start_
      WPIPE_MAIN_MEM_REQUEST_35_sample_start_ <-& (CONCAT_u10_u110_50_update_completed_)
      // done: Forward dependencies from (((($bitcast ($uint<1>) _b0  ) && r_wbar) && ($bitcast ($uint<8>) _b1  )) && ((($bitcast ($uint<4>) _b0  ) && addr) && data_in)) to transition WPIPE_MAIN_MEM_REQUEST_35_sample_start_
      // RAW reenables for (((($bitcast ($uint<1>) _b0  ) && r_wbar) && ($bitcast ($uint<8>) _b1  )) && ((($bitcast ($uint<4>) _b0  ) && addr) && data_in))
      CONCAT_u10_u110_50_update_start_ o<-& (WPIPE_MAIN_MEM_REQUEST_35_sample_completed_ 0)
      // end:  	MAIN_MEM_REQUEST := (((($bitcast ($uint<1>) _b0  ) && r_wbar) && ($bitcast ($uint<8>) _b1  )) && ((($bitcast ($uint<4>) _b0  ) && addr) && data_in)) $buffering 1// bits of buffering = 110. 
      // start:  	error := ( $slice MAIN_MEM_RESPONSE 64 64 )  $buffering 1// bits of buffering = 1. 
      //  file prog.linked.opt.aa, line 28
      // Source expression
      // ( $slice MAIN_MEM_RESPONSE 64 64 ) 
      $T[slice_54_sample_start_] 
      $T[slice_54_sample_completed_] 
      $T[slice_54_update_start_] 
      $T[slice_54_update_completed_] 
      // MAIN_MEM_RESPONSE
      $T[RPIPE_MAIN_MEM_RESPONSE_53_sample_start_] 
      $T[RPIPE_MAIN_MEM_RESPONSE_53_sample_completed_] 
      $T[RPIPE_MAIN_MEM_RESPONSE_53_update_start_] 
      $T[RPIPE_MAIN_MEM_RESPONSE_53_update_completed_] 
      ;;[RPIPE_MAIN_MEM_RESPONSE_53_Sample] 
      {
        // pipe read sample
        $T [rr] $T [ra] 
      }
      ;;[RPIPE_MAIN_MEM_RESPONSE_53_Update] 
      {
        // pipe read update
        $T [cr] $T [ca] 
      }
      RPIPE_MAIN_MEM_RESPONSE_53_sample_start_ &-> (RPIPE_MAIN_MEM_RESPONSE_53_Sample)
      RPIPE_MAIN_MEM_RESPONSE_53_sample_completed_ <-& (RPIPE_MAIN_MEM_RESPONSE_53_Sample)
      RPIPE_MAIN_MEM_RESPONSE_53_update_start_ <-& (RPIPE_MAIN_MEM_RESPONSE_53_sample_completed_)
      RPIPE_MAIN_MEM_RESPONSE_53_update_start_ &-> (RPIPE_MAIN_MEM_RESPONSE_53_Update)
      RPIPE_MAIN_MEM_RESPONSE_53_update_completed_ <-& (RPIPE_MAIN_MEM_RESPONSE_53_Update)
      RPIPE_MAIN_MEM_RESPONSE_53_sample_start_ o<-& (RPIPE_MAIN_MEM_RESPONSE_53_update_completed_ 0)
      // start: Forward dependencies from MAIN_MEM_RESPONSE to transition slice_54_sample_start_
      slice_54_sample_start_ <-& (RPIPE_MAIN_MEM_RESPONSE_53_update_completed_)
      // done: Forward dependencies from MAIN_MEM_RESPONSE to transition slice_54_sample_start_
      ;;[slice_54_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_54_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_54_sample_start_ &-> (slice_54_Sample)
      slice_54_sample_completed_ <-& (slice_54_Sample)
      slice_54_sample_completed_ &-> ($null)
      slice_54_update_start_ &-> (slice_54_Update)
      slice_54_update_completed_ <-& (slice_54_Update)
      // RAW reenables for MAIN_MEM_RESPONSE
      RPIPE_MAIN_MEM_RESPONSE_53_update_start_ o<-& (slice_54_sample_completed_ 0)
      // self-release: 
      slice_54_sample_start_ o<-& (slice_54_sample_completed_ 1)
      $null &-> (slice_54_update_start_)
      slice_54_update_start_ o<-& (slice_54_update_completed_ 0)
      // Target expression
      // (as target) error
      // start: WAR dependencies for error
      // done: WAR dependencies for error
      // end:  	error := ( $slice MAIN_MEM_RESPONSE 64 64 )  $buffering 1// bits of buffering = 1. 
      // start:  	data_out := ( $slice MAIN_MEM_RESPONSE 63 0 )  $buffering 1// bits of buffering = 64. 
      //  file prog.linked.opt.aa, line 29
      // Source expression
      // ( $slice MAIN_MEM_RESPONSE 63 0 ) 
      $T[slice_58_sample_start_] 
      $T[slice_58_sample_completed_] 
      $T[slice_58_update_start_] 
      $T[slice_58_update_completed_] 
      // MAIN_MEM_RESPONSE
      $T[RPIPE_MAIN_MEM_RESPONSE_57_sample_start_] 
      $T[RPIPE_MAIN_MEM_RESPONSE_57_sample_completed_] 
      $T[RPIPE_MAIN_MEM_RESPONSE_57_update_start_] 
      $T[RPIPE_MAIN_MEM_RESPONSE_57_update_completed_] 
      ;;[RPIPE_MAIN_MEM_RESPONSE_57_Sample] 
      {
        // pipe read sample
        $T [rr] $T [ra] 
      }
      ;;[RPIPE_MAIN_MEM_RESPONSE_57_Update] 
      {
        // pipe read update
        $T [cr] $T [ca] 
      }
      RPIPE_MAIN_MEM_RESPONSE_57_sample_start_ &-> (RPIPE_MAIN_MEM_RESPONSE_57_Sample)
      RPIPE_MAIN_MEM_RESPONSE_57_sample_completed_ <-& (RPIPE_MAIN_MEM_RESPONSE_57_Sample)
      RPIPE_MAIN_MEM_RESPONSE_57_update_start_ <-& (RPIPE_MAIN_MEM_RESPONSE_57_sample_completed_)
      RPIPE_MAIN_MEM_RESPONSE_57_update_start_ &-> (RPIPE_MAIN_MEM_RESPONSE_57_Update)
      RPIPE_MAIN_MEM_RESPONSE_57_update_completed_ <-& (RPIPE_MAIN_MEM_RESPONSE_57_Update)
      RPIPE_MAIN_MEM_RESPONSE_57_sample_start_ o<-& (RPIPE_MAIN_MEM_RESPONSE_57_update_completed_ 0)
      // start: Forward dependencies from MAIN_MEM_RESPONSE to transition slice_58_sample_start_
      slice_58_sample_start_ <-& (RPIPE_MAIN_MEM_RESPONSE_57_update_completed_)
      // done: Forward dependencies from MAIN_MEM_RESPONSE to transition slice_58_sample_start_
      ;;[slice_58_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_58_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_58_sample_start_ &-> (slice_58_Sample)
      slice_58_sample_completed_ <-& (slice_58_Sample)
      slice_58_sample_completed_ &-> ($null)
      slice_58_update_start_ &-> (slice_58_Update)
      slice_58_update_completed_ <-& (slice_58_Update)
      // RAW reenables for MAIN_MEM_RESPONSE
      RPIPE_MAIN_MEM_RESPONSE_57_update_start_ o<-& (slice_58_sample_completed_ 0)
      // self-release: 
      slice_58_sample_start_ o<-& (slice_58_sample_completed_ 1)
      $null &-> (slice_58_update_start_)
      slice_58_update_start_ o<-& (slice_58_update_completed_ 0)
      // Target expression
      // (as target) data_out
      // data_out
      // write to interface object
      // start: WAR dependencies for data_out
      // done: WAR dependencies for data_out
      // data_out
      // write to interface object
      slice_58_update_start_ <-& (data_out_update_enable)
      // end:  	data_out := ( $slice MAIN_MEM_RESPONSE 63 0 )  $buffering 1// bits of buffering = 64. 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MAIN_MEM_REQUEST
      // read-dependencies for pipe MAIN_MEM_REQUEST
      // write-dependencies for pipe MAIN_MEM_REQUEST
      // signal write dependencies for MAIN_MEM_REQUEST
      // pipe read/write dependencies for pipe MAIN_MEM_RESPONSE
      // read-dependencies for pipe MAIN_MEM_RESPONSE
      RPIPE_MAIN_MEM_RESPONSE_57_sample_start_ <-& (RPIPE_MAIN_MEM_RESPONSE_53_update_completed_)
      // ring dependency in pipeline.
      RPIPE_MAIN_MEM_RESPONSE_53_update_start_ o<-& (RPIPE_MAIN_MEM_RESPONSE_57_update_completed_ 0)
      // write-dependencies for pipe MAIN_MEM_RESPONSE
      // signal write dependencies for MAIN_MEM_RESPONSE
    }
    ( data_out_update_enable_in)
    ( r_wbar_update_enable_out addr_update_enable_out data_in_update_enable_out)
    $P [r_wbar_update_enable] 
    $P [addr_update_enable] 
    $P [data_in_update_enable] 
    $P [data_out_update_enable] 
    $bind r_wbar_update_enable <= assign_stmt_51_to_assign_stmt_59 : r_wbar_update_enable_out
    $bind addr_update_enable <= assign_stmt_51_to_assign_stmt_59 : addr_update_enable_out
    $bind data_in_update_enable <= assign_stmt_51_to_assign_stmt_59 : data_in_update_enable_out
    $bind data_out_update_enable => assign_stmt_51_to_assign_stmt_59 : data_out_update_enable_in
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %memoryModule
    //  file prog.linked.opt.aa, line 22
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_37_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<8>) _b1  )
    $constant $W[type_cast_41_wire_constant] : $int<8> := _b00000001// 1
    // ($bitcast ($uint<4>) _b0  )
    $constant $W[type_cast_45_wire_constant] : $int<4> := _b0000// 0
    // 	MAIN_MEM_REQUEST := (((($bitcast ($uint<1>) _b0  ) && r_wbar) && ($bitcast ($uint<8>) _b1  )) && ((($bitcast ($uint<4>) _b0  ) && addr) && data_in)) $buffering 1// bits of buffering = 110. 
    //  file prog.linked.opt.aa, line 27
    // (($bitcast ($uint<1>) _b0  ) && r_wbar)
    $intermediate $W[CONCAT_u1_u2_39_wire] : $int<2>
    // ((($bitcast ($uint<1>) _b0  ) && r_wbar) && ($bitcast ($uint<8>) _b1  ))
    $intermediate $W[CONCAT_u2_u10_42_wire] : $int<10>
    // (($bitcast ($uint<4>) _b0  ) && addr)
    $intermediate $W[CONCAT_u4_u36_47_wire] : $int<36>
    // ((($bitcast ($uint<4>) _b0  ) && addr) && data_in)
    $intermediate $W[CONCAT_u36_u100_49_wire] : $int<100>
    // (((($bitcast ($uint<1>) _b0  ) && r_wbar) && ($bitcast ($uint<8>) _b1  )) && ((($bitcast ($uint<4>) _b0  ) && addr) && data_in))
    $intermediate $W[CONCAT_u10_u110_50_wire] : $int<110>
    // MAIN_MEM_REQUEST
    // 	error := ( $slice MAIN_MEM_RESPONSE 64 64 )  $buffering 1// bits of buffering = 1. 
    //  file prog.linked.opt.aa, line 28
    // MAIN_MEM_RESPONSE
    $W[RPIPE_MAIN_MEM_RESPONSE_53_wire] : $int<65>
    // error
    $W[error_55] : $int<1>
    // 	data_out := ( $slice MAIN_MEM_RESPONSE 63 0 )  $buffering 1// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 29
    // MAIN_MEM_RESPONSE
    $W[RPIPE_MAIN_MEM_RESPONSE_57_wire] : $int<65>
    // data_out
    // 	MAIN_MEM_REQUEST := (((($bitcast ($uint<1>) _b0  ) && r_wbar) && ($bitcast ($uint<8>) _b1  )) && ((($bitcast ($uint<4>) _b0  ) && addr) && data_in)) $buffering 1// bits of buffering = 110. 
    //  file prog.linked.opt.aa, line 27
    // (($bitcast ($uint<1>) _b0  ) && r_wbar)
    &&[CONCAT_u1_u2_39_inst] (type_cast_37_wire_constant r_wbar) (CONCAT_u1_u2_39_wire)   $flowthrough 
    $delay CONCAT_u1_u2_39_inst 0
    // ((($bitcast ($uint<1>) _b0  ) && r_wbar) && ($bitcast ($uint<8>) _b1  ))
    &&[CONCAT_u2_u10_42_inst] (CONCAT_u1_u2_39_wire type_cast_41_wire_constant) (CONCAT_u2_u10_42_wire)   $flowthrough 
    $delay CONCAT_u2_u10_42_inst 0
    // (($bitcast ($uint<4>) _b0  ) && addr)
    &&[CONCAT_u4_u36_47_inst] (type_cast_45_wire_constant addr) (CONCAT_u4_u36_47_wire)   $flowthrough 
    $delay CONCAT_u4_u36_47_inst 0
    // ((($bitcast ($uint<4>) _b0  ) && addr) && data_in)
    &&[CONCAT_u36_u100_49_inst] (CONCAT_u4_u36_47_wire data_in) (CONCAT_u36_u100_49_wire)   $flowthrough 
    $delay CONCAT_u36_u100_49_inst 0
    // (((($bitcast ($uint<1>) _b0  ) && r_wbar) && ($bitcast ($uint<8>) _b1  )) && ((($bitcast ($uint<4>) _b0  ) && addr) && data_in))
    &&[CONCAT_u10_u110_50_inst] (CONCAT_u2_u10_42_wire CONCAT_u36_u100_49_wire) (CONCAT_u10_u110_50_wire)    $fullrate
    $buffering  $out CONCAT_u10_u110_50_inst CONCAT_u10_u110_50_wire 1
    $delay CONCAT_u10_u110_50_inst 1
    // MAIN_MEM_REQUEST
    $ioport $out [WPIPE_MAIN_MEM_REQUEST_35_inst]  (CONCAT_u10_u110_50_wire) (MAIN_MEM_REQUEST)  $fullrate 
    // 	error := ( $slice MAIN_MEM_RESPONSE 64 64 )  $buffering 1// bits of buffering = 1. 
    //  file prog.linked.opt.aa, line 28
    // MAIN_MEM_RESPONSE
    $ioport $in [RPIPE_MAIN_MEM_RESPONSE_53_inst] (MAIN_MEM_RESPONSE) (RPIPE_MAIN_MEM_RESPONSE_53_wire)  $fullrate 
    $buffering $out RPIPE_MAIN_MEM_RESPONSE_53_inst RPIPE_MAIN_MEM_RESPONSE_53_wire 1
    // ( $slice MAIN_MEM_RESPONSE 64 64 ) 
    [:] [slice_54_inst] (RPIPE_MAIN_MEM_RESPONSE_53_wire 64 64) (error_55)  $fullrate
    $buffering  $out slice_54_inst error_55 1
    $delay slice_54_inst 1
    // 	data_out := ( $slice MAIN_MEM_RESPONSE 63 0 )  $buffering 1// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 29
    // MAIN_MEM_RESPONSE
    $ioport $in [RPIPE_MAIN_MEM_RESPONSE_57_inst] (MAIN_MEM_RESPONSE) (RPIPE_MAIN_MEM_RESPONSE_57_wire)  $fullrate 
    $buffering $out RPIPE_MAIN_MEM_RESPONSE_57_inst RPIPE_MAIN_MEM_RESPONSE_57_wire 1
    // ( $slice MAIN_MEM_RESPONSE 63 0 ) 
    [:] [slice_58_inst] (RPIPE_MAIN_MEM_RESPONSE_57_wire 63 0) (data_out)  $fullrate
    $buffering  $out slice_58_inst data_out 1
    $delay slice_58_inst 1
  }
  // end data-path
  // 	MAIN_MEM_REQUEST := (((($bitcast ($uint<1>) _b0  ) && r_wbar) && ($bitcast ($uint<8>) _b1  )) && ((($bitcast ($uint<4>) _b0  ) && addr) && data_in)) $buffering 1// bits of buffering = 110. 
  //  file prog.linked.opt.aa, line 27
  // (((($bitcast ($uint<1>) _b0  ) && r_wbar) && ($bitcast ($uint<8>) _b1  )) && ((($bitcast ($uint<4>) _b0  ) && addr) && data_in))
  // ((($bitcast ($uint<1>) _b0  ) && r_wbar) && ($bitcast ($uint<8>) _b1  ))
  // (($bitcast ($uint<1>) _b0  ) && r_wbar)
  // r_wbar
  // ((($bitcast ($uint<4>) _b0  ) && addr) && data_in)
  // (($bitcast ($uint<4>) _b0  ) && addr)
  // addr
  // data_in
  CONCAT_u10_u110_50_inst <=> (assign_stmt_51_to_assign_stmt_59/CONCAT_u10_u110_50_Sample/rr assign_stmt_51_to_assign_stmt_59/CONCAT_u10_u110_50_Update/cr) (assign_stmt_51_to_assign_stmt_59/CONCAT_u10_u110_50_Sample/ra assign_stmt_51_to_assign_stmt_59/CONCAT_u10_u110_50_Update/ca)
  // MAIN_MEM_REQUEST
  WPIPE_MAIN_MEM_REQUEST_35_inst <=> (assign_stmt_51_to_assign_stmt_59/WPIPE_MAIN_MEM_REQUEST_35_Sample/req assign_stmt_51_to_assign_stmt_59/WPIPE_MAIN_MEM_REQUEST_35_Update/req) (assign_stmt_51_to_assign_stmt_59/WPIPE_MAIN_MEM_REQUEST_35_Sample/ack assign_stmt_51_to_assign_stmt_59/WPIPE_MAIN_MEM_REQUEST_35_Update/ack)
  // 	error := ( $slice MAIN_MEM_RESPONSE 64 64 )  $buffering 1// bits of buffering = 1. 
  //  file prog.linked.opt.aa, line 28
  // MAIN_MEM_RESPONSE
  RPIPE_MAIN_MEM_RESPONSE_53_inst <=> (assign_stmt_51_to_assign_stmt_59/RPIPE_MAIN_MEM_RESPONSE_53_Sample/rr assign_stmt_51_to_assign_stmt_59/RPIPE_MAIN_MEM_RESPONSE_53_Update/cr) (assign_stmt_51_to_assign_stmt_59/RPIPE_MAIN_MEM_RESPONSE_53_Sample/ra assign_stmt_51_to_assign_stmt_59/RPIPE_MAIN_MEM_RESPONSE_53_Update/ca)
  // ( $slice MAIN_MEM_RESPONSE 64 64 ) 
  slice_54_inst <=> (assign_stmt_51_to_assign_stmt_59/slice_54_Sample/rr assign_stmt_51_to_assign_stmt_59/slice_54_Update/cr) (assign_stmt_51_to_assign_stmt_59/slice_54_Sample/ra assign_stmt_51_to_assign_stmt_59/slice_54_Update/ca)
  // 	data_out := ( $slice MAIN_MEM_RESPONSE 63 0 )  $buffering 1// bits of buffering = 64. 
  //  file prog.linked.opt.aa, line 29
  // MAIN_MEM_RESPONSE
  RPIPE_MAIN_MEM_RESPONSE_57_inst <=> (assign_stmt_51_to_assign_stmt_59/RPIPE_MAIN_MEM_RESPONSE_57_Sample/rr assign_stmt_51_to_assign_stmt_59/RPIPE_MAIN_MEM_RESPONSE_57_Update/cr) (assign_stmt_51_to_assign_stmt_59/RPIPE_MAIN_MEM_RESPONSE_57_Sample/ra assign_stmt_51_to_assign_stmt_59/RPIPE_MAIN_MEM_RESPONSE_57_Update/ca)
  // ( $slice MAIN_MEM_RESPONSE 63 0 ) 
  slice_58_inst <=> (assign_stmt_51_to_assign_stmt_59/slice_58_Sample/rr assign_stmt_51_to_assign_stmt_59/slice_58_Update/cr) (assign_stmt_51_to_assign_stmt_59/slice_58_Sample/ra assign_stmt_51_to_assign_stmt_59/slice_58_Update/ca)
  $attribute delay => "4"
}
$module [writeModule1] 
{
  $in address:$int<32>
  // can point into 
  data:$int<64>
  // can point into 
  // pipe-declarations for block %writeModule1
  //  file prog.linked.opt.aa, line 32
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[call_stmt_70] 
    {
      // start: 	$call memoryModule (0  (0  + address) data ) (out1 ) 
      //  file prog.linked.opt.aa, line 37
      $T[call_stmt_70_sample_start_] 
      $T[call_stmt_70_sample_completed_] 
      $T[call_stmt_70_update_start_] 
      $T[call_stmt_70_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // (0  + address)
      // address
      // Call input argument 2
      // data
      // start: Forward dependencies from (0  + address) to transition call_stmt_70_sample_start_
      // done: Forward dependencies from (0  + address) to transition call_stmt_70_sample_start_
      // start: Forward dependencies from data to transition call_stmt_70_sample_start_
      // done: Forward dependencies from data to transition call_stmt_70_sample_start_
      ;;[call_stmt_70_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_70_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_70_sample_start_ &-> (call_stmt_70_Sample)
      call_stmt_70_sample_completed_ <-& (call_stmt_70_Sample)
      call_stmt_70_sample_completed_ &-> ($null)
      call_stmt_70_update_start_ &-> (call_stmt_70_Update)
      call_stmt_70_update_completed_ <-& (call_stmt_70_Update)
      // Call output argument 0
      // (as target) out1
      // start: WAR dependencies for out1
      // done: WAR dependencies for out1
      // end: 	$call memoryModule (0  (0  + address) data ) (out1 ) 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MAIN_MEM_REQUEST
      // read-dependencies for pipe MAIN_MEM_REQUEST
      // write-dependencies for pipe MAIN_MEM_REQUEST
      // signal write dependencies for MAIN_MEM_REQUEST
      // pipe read/write dependencies for pipe MAIN_MEM_RESPONSE
      // read-dependencies for pipe MAIN_MEM_RESPONSE
      // write-dependencies for pipe MAIN_MEM_RESPONSE
      // signal write dependencies for MAIN_MEM_RESPONSE
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %writeModule1
    //  file prog.linked.opt.aa, line 32
    // 	$call memoryModule (0  (0  + address) data ) (out1 ) 
    //  file prog.linked.opt.aa, line 37
    // 0 
    $constant $W[konst_64_wire_constant] : $int<1> := _b0// 0
    // 0 
    $constant $W[konst_65_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // 	$call memoryModule (0  (0  + address) data ) (out1 ) 
    //  file prog.linked.opt.aa, line 37
    // (0  + address)
    $intermediate $W[ADD_u32_u32_67_wire] : $int<32>
    // out1
    $W[out1_70] : $int<64>
    // 	$call memoryModule (0  (0  + address) data ) (out1 ) 
    //  file prog.linked.opt.aa, line 37
    // (0  + address)
    +[ADD_u32_u32_67_inst] (konst_65_wire_constant address) (ADD_u32_u32_67_wire)   $flowthrough 
    $delay ADD_u32_u32_67_inst 0
    $call [call_stmt_70_call] $module memoryModule(konst_64_wire_constant ADD_u32_u32_67_wire data) (out1_70)  
    $delay call_stmt_70_call 4
    $buffering  $in call_stmt_70_call konst_64_wire_constant 1
    $buffering  $in call_stmt_70_call ADD_u32_u32_67_wire 1
    $buffering  $in call_stmt_70_call data 1
    $buffering  $out call_stmt_70_call out1_70 1
  }
  // end data-path
  // 	$call memoryModule (0  (0  + address) data ) (out1 ) 
  //  file prog.linked.opt.aa, line 37
  // (0  + address)
  // address
  // data
  call_stmt_70_call <=> (call_stmt_70/call_stmt_70_Sample/crr call_stmt_70/call_stmt_70_Update/ccr) (call_stmt_70/call_stmt_70_Sample/cra call_stmt_70/call_stmt_70_Update/cca)
}
$module [fill_input] 
{
  // pipe-declarations for block %fill_input
  //  file prog.linked.opt.aa, line 39
  // pipe-declarations for block %fill_input%body
  //  file prog.linked.opt.aa, line 44
  // pipe-declarations for block %fill_input%body%
  //  file prog.linked.opt.aa, line 47
  // pipe-declarations for block %fill_input%body%
  //  file prog.linked.opt.aa, line 89
  // pipe-declarations for block %fill_input%body%
  //  file prog.linked.opt.aa, line 92
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_73] // Branch Block  file prog.linked.opt.aa, line 44
    {
      $P [branch_block_stmt_73__entry__]
      branch_block_stmt_73__entry__ <-| ($entry)
      $P [branch_block_stmt_73__exit__]
      branch_block_stmt_73__exit__ |-> ($exit)
      $P [bbx_xnph_forx_xbody]
      $P [merge_stmt_75__exit__] 
      $P [assign_stmt_86_to_assign_stmt_231__entry__] 
      $P [assign_stmt_86_to_assign_stmt_231__exit__] 
      $P [if_stmt_232__entry__] 
      $P [if_stmt_232__exit__] 
      $P [merge_stmt_238__entry__] 
      $P [merge_stmt_238__exit__] 
      $P [return__]
      $P [merge_stmt_240__exit__] 
      ::[assign_stmt_86_to_assign_stmt_231] 
      {
        // start:  		call := system_input_pipe $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 51
        // Source expression
        // system_input_pipe
        $T[RPIPE_system_input_pipe_85_sample_start_] 
        $T[RPIPE_system_input_pipe_85_sample_completed_] 
        $T[RPIPE_system_input_pipe_85_update_start_] 
        $T[RPIPE_system_input_pipe_85_update_completed_] 
        ;;[RPIPE_system_input_pipe_85_Sample] 
        {
          // pipe read sample
          $T [rr] $T [ra] 
        }
        ;;[RPIPE_system_input_pipe_85_Update] 
        {
          // pipe read update
          $T [cr] $T [ca] 
        }
        RPIPE_system_input_pipe_85_sample_start_ &-> (RPIPE_system_input_pipe_85_Sample)
        RPIPE_system_input_pipe_85_sample_completed_ <-& (RPIPE_system_input_pipe_85_Sample)
        RPIPE_system_input_pipe_85_update_start_ <-& (RPIPE_system_input_pipe_85_sample_completed_)
        RPIPE_system_input_pipe_85_update_start_ &-> (RPIPE_system_input_pipe_85_Update)
        RPIPE_system_input_pipe_85_update_completed_ <-& (RPIPE_system_input_pipe_85_Update)
        // Target expression
        // (as target) call
        // start: WAR dependencies for call
        // done: WAR dependencies for call
        // end:  		call := system_input_pipe $buffering 1// bits of buffering = 8. 
        // start:  		conv := ($cast ($uint<64>) call ) $buffering 1// bits of buffering = 64. 
        //  file prog.linked.opt.aa, line 52
        // Source expression
        // ($cast ($uint<64>) call )
        $T[type_cast_89_sample_start_] 
        $T[type_cast_89_sample_completed_] 
        $T[type_cast_89_update_start_] 
        $T[type_cast_89_update_completed_] 
        // call
        // start: Forward dependencies from call to transition type_cast_89_sample_start_
        type_cast_89_sample_start_ <-& (RPIPE_system_input_pipe_85_update_completed_)
        // done: Forward dependencies from call to transition type_cast_89_sample_start_
        ;;[type_cast_89_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_89_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_89_sample_start_ &-> (type_cast_89_Sample)
        type_cast_89_sample_completed_ <-& (type_cast_89_Sample)
        type_cast_89_sample_completed_ &-> ($null)
        type_cast_89_update_start_ &-> (type_cast_89_Update)
        type_cast_89_update_completed_ <-& (type_cast_89_Update)
        // Target expression
        // (as target) conv
        // start: WAR dependencies for conv
        // done: WAR dependencies for conv
        // end:  		conv := ($cast ($uint<64>) call ) $buffering 1// bits of buffering = 64. 
        // start: WAR dependencies for shl
        // done: WAR dependencies for shl
        // start:  		$volatile shl := (conv << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
        //  file prog.linked.opt.aa, line 53
        // volatile! 
        // Source expression
        // (conv << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
        // conv
        // Target expression
        // (as target) shl
        // start: WAR dependencies for shl
        // done: WAR dependencies for shl
        // end:  		$volatile shl := (conv << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
        // start:  		call2 := system_input_pipe $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 54
        // Source expression
        // system_input_pipe
        $T[RPIPE_system_input_pipe_98_sample_start_] 
        $T[RPIPE_system_input_pipe_98_sample_completed_] 
        $T[RPIPE_system_input_pipe_98_update_start_] 
        $T[RPIPE_system_input_pipe_98_update_completed_] 
        ;;[RPIPE_system_input_pipe_98_Sample] 
        {
          // pipe read sample
          $T [rr] $T [ra] 
        }
        ;;[RPIPE_system_input_pipe_98_Update] 
        {
          // pipe read update
          $T [cr] $T [ca] 
        }
        RPIPE_system_input_pipe_98_sample_start_ &-> (RPIPE_system_input_pipe_98_Sample)
        RPIPE_system_input_pipe_98_sample_completed_ <-& (RPIPE_system_input_pipe_98_Sample)
        RPIPE_system_input_pipe_98_update_start_ <-& (RPIPE_system_input_pipe_98_sample_completed_)
        RPIPE_system_input_pipe_98_update_start_ &-> (RPIPE_system_input_pipe_98_Update)
        RPIPE_system_input_pipe_98_update_completed_ <-& (RPIPE_system_input_pipe_98_Update)
        // Target expression
        // (as target) call2
        // start: WAR dependencies for call2
        // done: WAR dependencies for call2
        // end:  		call2 := system_input_pipe $buffering 1// bits of buffering = 8. 
        // start:  		conv4 := ($cast ($uint<64>) call2 ) $buffering 1// bits of buffering = 64. 
        //  file prog.linked.opt.aa, line 55
        // Source expression
        // ($cast ($uint<64>) call2 )
        $T[type_cast_102_sample_start_] 
        $T[type_cast_102_sample_completed_] 
        $T[type_cast_102_update_start_] 
        $T[type_cast_102_update_completed_] 
        // call2
        // start: Forward dependencies from call2 to transition type_cast_102_sample_start_
        type_cast_102_sample_start_ <-& (RPIPE_system_input_pipe_98_update_completed_)
        // done: Forward dependencies from call2 to transition type_cast_102_sample_start_
        ;;[type_cast_102_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_102_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_102_sample_start_ &-> (type_cast_102_Sample)
        type_cast_102_sample_completed_ <-& (type_cast_102_Sample)
        type_cast_102_sample_completed_ &-> ($null)
        type_cast_102_update_start_ &-> (type_cast_102_Update)
        type_cast_102_update_completed_ <-& (type_cast_102_Update)
        // Target expression
        // (as target) conv4
        // start: WAR dependencies for conv4
        // done: WAR dependencies for conv4
        // end:  		conv4 := ($cast ($uint<64>) call2 ) $buffering 1// bits of buffering = 64. 
        // start: WAR dependencies for add
        // done: WAR dependencies for add
        // start:  		$volatile add := (shl | conv4) $buffering 1
        //  file prog.linked.opt.aa, line 56
        // volatile! 
        // Source expression
        // (shl | conv4)
        // shl
        // conv4
        // Target expression
        // (as target) add
        // start: WAR dependencies for add
        // done: WAR dependencies for add
        // end:  		$volatile add := (shl | conv4) $buffering 1
        // start: WAR dependencies for shl6
        // done: WAR dependencies for shl6
        // start:  		$volatile shl6 := (add << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
        //  file prog.linked.opt.aa, line 57
        // volatile! 
        // Source expression
        // (add << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
        // add
        // Target expression
        // (as target) shl6
        // start: WAR dependencies for shl6
        // done: WAR dependencies for shl6
        // end:  		$volatile shl6 := (add << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
        // start:  		call7 := system_input_pipe $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 58
        // Source expression
        // system_input_pipe
        $T[RPIPE_system_input_pipe_116_sample_start_] 
        $T[RPIPE_system_input_pipe_116_sample_completed_] 
        $T[RPIPE_system_input_pipe_116_update_start_] 
        $T[RPIPE_system_input_pipe_116_update_completed_] 
        ;;[RPIPE_system_input_pipe_116_Sample] 
        {
          // pipe read sample
          $T [rr] $T [ra] 
        }
        ;;[RPIPE_system_input_pipe_116_Update] 
        {
          // pipe read update
          $T [cr] $T [ca] 
        }
        RPIPE_system_input_pipe_116_sample_start_ &-> (RPIPE_system_input_pipe_116_Sample)
        RPIPE_system_input_pipe_116_sample_completed_ <-& (RPIPE_system_input_pipe_116_Sample)
        RPIPE_system_input_pipe_116_update_start_ <-& (RPIPE_system_input_pipe_116_sample_completed_)
        RPIPE_system_input_pipe_116_update_start_ &-> (RPIPE_system_input_pipe_116_Update)
        RPIPE_system_input_pipe_116_update_completed_ <-& (RPIPE_system_input_pipe_116_Update)
        // Target expression
        // (as target) call7
        // start: WAR dependencies for call7
        // done: WAR dependencies for call7
        // end:  		call7 := system_input_pipe $buffering 1// bits of buffering = 8. 
        // start:  		conv9 := ($cast ($uint<64>) call7 ) $buffering 1// bits of buffering = 64. 
        //  file prog.linked.opt.aa, line 59
        // Source expression
        // ($cast ($uint<64>) call7 )
        $T[type_cast_120_sample_start_] 
        $T[type_cast_120_sample_completed_] 
        $T[type_cast_120_update_start_] 
        $T[type_cast_120_update_completed_] 
        // call7
        // start: Forward dependencies from call7 to transition type_cast_120_sample_start_
        type_cast_120_sample_start_ <-& (RPIPE_system_input_pipe_116_update_completed_)
        // done: Forward dependencies from call7 to transition type_cast_120_sample_start_
        ;;[type_cast_120_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_120_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_120_sample_start_ &-> (type_cast_120_Sample)
        type_cast_120_sample_completed_ <-& (type_cast_120_Sample)
        type_cast_120_sample_completed_ &-> ($null)
        type_cast_120_update_start_ &-> (type_cast_120_Update)
        type_cast_120_update_completed_ <-& (type_cast_120_Update)
        // Target expression
        // (as target) conv9
        // start: WAR dependencies for conv9
        // done: WAR dependencies for conv9
        // end:  		conv9 := ($cast ($uint<64>) call7 ) $buffering 1// bits of buffering = 64. 
        // start: WAR dependencies for add10
        // done: WAR dependencies for add10
        // start:  		$volatile add10 := (shl6 | conv9) $buffering 1
        //  file prog.linked.opt.aa, line 60
        // volatile! 
        // Source expression
        // (shl6 | conv9)
        // shl6
        // conv9
        // Target expression
        // (as target) add10
        // start: WAR dependencies for add10
        // done: WAR dependencies for add10
        // end:  		$volatile add10 := (shl6 | conv9) $buffering 1
        // start: WAR dependencies for shl12
        // done: WAR dependencies for shl12
        // start:  		$volatile shl12 := (add10 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
        //  file prog.linked.opt.aa, line 61
        // volatile! 
        // Source expression
        // (add10 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
        // add10
        // Target expression
        // (as target) shl12
        // start: WAR dependencies for shl12
        // done: WAR dependencies for shl12
        // end:  		$volatile shl12 := (add10 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
        // start:  		call13 := system_input_pipe $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 62
        // Source expression
        // system_input_pipe
        $T[RPIPE_system_input_pipe_134_sample_start_] 
        $T[RPIPE_system_input_pipe_134_sample_completed_] 
        $T[RPIPE_system_input_pipe_134_update_start_] 
        $T[RPIPE_system_input_pipe_134_update_completed_] 
        ;;[RPIPE_system_input_pipe_134_Sample] 
        {
          // pipe read sample
          $T [rr] $T [ra] 
        }
        ;;[RPIPE_system_input_pipe_134_Update] 
        {
          // pipe read update
          $T [cr] $T [ca] 
        }
        RPIPE_system_input_pipe_134_sample_start_ &-> (RPIPE_system_input_pipe_134_Sample)
        RPIPE_system_input_pipe_134_sample_completed_ <-& (RPIPE_system_input_pipe_134_Sample)
        RPIPE_system_input_pipe_134_update_start_ <-& (RPIPE_system_input_pipe_134_sample_completed_)
        RPIPE_system_input_pipe_134_update_start_ &-> (RPIPE_system_input_pipe_134_Update)
        RPIPE_system_input_pipe_134_update_completed_ <-& (RPIPE_system_input_pipe_134_Update)
        // Target expression
        // (as target) call13
        // start: WAR dependencies for call13
        // done: WAR dependencies for call13
        // end:  		call13 := system_input_pipe $buffering 1// bits of buffering = 8. 
        // start:  		conv15 := ($cast ($uint<64>) call13 ) $buffering 1// bits of buffering = 64. 
        //  file prog.linked.opt.aa, line 63
        // Source expression
        // ($cast ($uint<64>) call13 )
        $T[type_cast_138_sample_start_] 
        $T[type_cast_138_sample_completed_] 
        $T[type_cast_138_update_start_] 
        $T[type_cast_138_update_completed_] 
        // call13
        // start: Forward dependencies from call13 to transition type_cast_138_sample_start_
        type_cast_138_sample_start_ <-& (RPIPE_system_input_pipe_134_update_completed_)
        // done: Forward dependencies from call13 to transition type_cast_138_sample_start_
        ;;[type_cast_138_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_138_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_138_sample_start_ &-> (type_cast_138_Sample)
        type_cast_138_sample_completed_ <-& (type_cast_138_Sample)
        type_cast_138_sample_completed_ &-> ($null)
        type_cast_138_update_start_ &-> (type_cast_138_Update)
        type_cast_138_update_completed_ <-& (type_cast_138_Update)
        // Target expression
        // (as target) conv15
        // start: WAR dependencies for conv15
        // done: WAR dependencies for conv15
        // end:  		conv15 := ($cast ($uint<64>) call13 ) $buffering 1// bits of buffering = 64. 
        // start: WAR dependencies for add16
        // done: WAR dependencies for add16
        // start:  		$volatile add16 := (shl12 | conv15) $buffering 1
        //  file prog.linked.opt.aa, line 64
        // volatile! 
        // Source expression
        // (shl12 | conv15)
        // shl12
        // conv15
        // Target expression
        // (as target) add16
        // start: WAR dependencies for add16
        // done: WAR dependencies for add16
        // end:  		$volatile add16 := (shl12 | conv15) $buffering 1
        // start: WAR dependencies for shl18
        // done: WAR dependencies for shl18
        // start:  		$volatile shl18 := (add16 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
        //  file prog.linked.opt.aa, line 65
        // volatile! 
        // Source expression
        // (add16 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
        // add16
        // Target expression
        // (as target) shl18
        // start: WAR dependencies for shl18
        // done: WAR dependencies for shl18
        // end:  		$volatile shl18 := (add16 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
        // start:  		call19 := system_input_pipe $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 66
        // Source expression
        // system_input_pipe
        $T[RPIPE_system_input_pipe_152_sample_start_] 
        $T[RPIPE_system_input_pipe_152_sample_completed_] 
        $T[RPIPE_system_input_pipe_152_update_start_] 
        $T[RPIPE_system_input_pipe_152_update_completed_] 
        ;;[RPIPE_system_input_pipe_152_Sample] 
        {
          // pipe read sample
          $T [rr] $T [ra] 
        }
        ;;[RPIPE_system_input_pipe_152_Update] 
        {
          // pipe read update
          $T [cr] $T [ca] 
        }
        RPIPE_system_input_pipe_152_sample_start_ &-> (RPIPE_system_input_pipe_152_Sample)
        RPIPE_system_input_pipe_152_sample_completed_ <-& (RPIPE_system_input_pipe_152_Sample)
        RPIPE_system_input_pipe_152_update_start_ <-& (RPIPE_system_input_pipe_152_sample_completed_)
        RPIPE_system_input_pipe_152_update_start_ &-> (RPIPE_system_input_pipe_152_Update)
        RPIPE_system_input_pipe_152_update_completed_ <-& (RPIPE_system_input_pipe_152_Update)
        // Target expression
        // (as target) call19
        // start: WAR dependencies for call19
        // done: WAR dependencies for call19
        // end:  		call19 := system_input_pipe $buffering 1// bits of buffering = 8. 
        // start:  		conv21 := ($cast ($uint<64>) call19 ) $buffering 1// bits of buffering = 64. 
        //  file prog.linked.opt.aa, line 67
        // Source expression
        // ($cast ($uint<64>) call19 )
        $T[type_cast_156_sample_start_] 
        $T[type_cast_156_sample_completed_] 
        $T[type_cast_156_update_start_] 
        $T[type_cast_156_update_completed_] 
        // call19
        // start: Forward dependencies from call19 to transition type_cast_156_sample_start_
        type_cast_156_sample_start_ <-& (RPIPE_system_input_pipe_152_update_completed_)
        // done: Forward dependencies from call19 to transition type_cast_156_sample_start_
        ;;[type_cast_156_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_156_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_156_sample_start_ &-> (type_cast_156_Sample)
        type_cast_156_sample_completed_ <-& (type_cast_156_Sample)
        type_cast_156_sample_completed_ &-> ($null)
        type_cast_156_update_start_ &-> (type_cast_156_Update)
        type_cast_156_update_completed_ <-& (type_cast_156_Update)
        // Target expression
        // (as target) conv21
        // start: WAR dependencies for conv21
        // done: WAR dependencies for conv21
        // end:  		conv21 := ($cast ($uint<64>) call19 ) $buffering 1// bits of buffering = 64. 
        // start: WAR dependencies for add22
        // done: WAR dependencies for add22
        // start:  		$volatile add22 := (shl18 | conv21) $buffering 1
        //  file prog.linked.opt.aa, line 68
        // volatile! 
        // Source expression
        // (shl18 | conv21)
        // shl18
        // conv21
        // Target expression
        // (as target) add22
        // start: WAR dependencies for add22
        // done: WAR dependencies for add22
        // end:  		$volatile add22 := (shl18 | conv21) $buffering 1
        // start: WAR dependencies for shl24
        // done: WAR dependencies for shl24
        // start:  		$volatile shl24 := (add22 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
        //  file prog.linked.opt.aa, line 69
        // volatile! 
        // Source expression
        // (add22 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
        // add22
        // Target expression
        // (as target) shl24
        // start: WAR dependencies for shl24
        // done: WAR dependencies for shl24
        // end:  		$volatile shl24 := (add22 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
        // start:  		call25 := system_input_pipe $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 70
        // Source expression
        // system_input_pipe
        $T[RPIPE_system_input_pipe_170_sample_start_] 
        $T[RPIPE_system_input_pipe_170_sample_completed_] 
        $T[RPIPE_system_input_pipe_170_update_start_] 
        $T[RPIPE_system_input_pipe_170_update_completed_] 
        ;;[RPIPE_system_input_pipe_170_Sample] 
        {
          // pipe read sample
          $T [rr] $T [ra] 
        }
        ;;[RPIPE_system_input_pipe_170_Update] 
        {
          // pipe read update
          $T [cr] $T [ca] 
        }
        RPIPE_system_input_pipe_170_sample_start_ &-> (RPIPE_system_input_pipe_170_Sample)
        RPIPE_system_input_pipe_170_sample_completed_ <-& (RPIPE_system_input_pipe_170_Sample)
        RPIPE_system_input_pipe_170_update_start_ <-& (RPIPE_system_input_pipe_170_sample_completed_)
        RPIPE_system_input_pipe_170_update_start_ &-> (RPIPE_system_input_pipe_170_Update)
        RPIPE_system_input_pipe_170_update_completed_ <-& (RPIPE_system_input_pipe_170_Update)
        // Target expression
        // (as target) call25
        // start: WAR dependencies for call25
        // done: WAR dependencies for call25
        // end:  		call25 := system_input_pipe $buffering 1// bits of buffering = 8. 
        // start:  		conv27 := ($cast ($uint<64>) call25 ) $buffering 1// bits of buffering = 64. 
        //  file prog.linked.opt.aa, line 71
        // Source expression
        // ($cast ($uint<64>) call25 )
        $T[type_cast_174_sample_start_] 
        $T[type_cast_174_sample_completed_] 
        $T[type_cast_174_update_start_] 
        $T[type_cast_174_update_completed_] 
        // call25
        // start: Forward dependencies from call25 to transition type_cast_174_sample_start_
        type_cast_174_sample_start_ <-& (RPIPE_system_input_pipe_170_update_completed_)
        // done: Forward dependencies from call25 to transition type_cast_174_sample_start_
        ;;[type_cast_174_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_174_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_174_sample_start_ &-> (type_cast_174_Sample)
        type_cast_174_sample_completed_ <-& (type_cast_174_Sample)
        type_cast_174_sample_completed_ &-> ($null)
        type_cast_174_update_start_ &-> (type_cast_174_Update)
        type_cast_174_update_completed_ <-& (type_cast_174_Update)
        // Target expression
        // (as target) conv27
        // start: WAR dependencies for conv27
        // done: WAR dependencies for conv27
        // end:  		conv27 := ($cast ($uint<64>) call25 ) $buffering 1// bits of buffering = 64. 
        // start: WAR dependencies for add28
        // done: WAR dependencies for add28
        // start:  		$volatile add28 := (shl24 | conv27) $buffering 1
        //  file prog.linked.opt.aa, line 72
        // volatile! 
        // Source expression
        // (shl24 | conv27)
        // shl24
        // conv27
        // Target expression
        // (as target) add28
        // start: WAR dependencies for add28
        // done: WAR dependencies for add28
        // end:  		$volatile add28 := (shl24 | conv27) $buffering 1
        // start: WAR dependencies for shl30
        // done: WAR dependencies for shl30
        // start:  		$volatile shl30 := (add28 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
        //  file prog.linked.opt.aa, line 73
        // volatile! 
        // Source expression
        // (add28 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
        // add28
        // Target expression
        // (as target) shl30
        // start: WAR dependencies for shl30
        // done: WAR dependencies for shl30
        // end:  		$volatile shl30 := (add28 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
        // start:  		call31 := system_input_pipe $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 74
        // Source expression
        // system_input_pipe
        $T[RPIPE_system_input_pipe_188_sample_start_] 
        $T[RPIPE_system_input_pipe_188_sample_completed_] 
        $T[RPIPE_system_input_pipe_188_update_start_] 
        $T[RPIPE_system_input_pipe_188_update_completed_] 
        ;;[RPIPE_system_input_pipe_188_Sample] 
        {
          // pipe read sample
          $T [rr] $T [ra] 
        }
        ;;[RPIPE_system_input_pipe_188_Update] 
        {
          // pipe read update
          $T [cr] $T [ca] 
        }
        RPIPE_system_input_pipe_188_sample_start_ &-> (RPIPE_system_input_pipe_188_Sample)
        RPIPE_system_input_pipe_188_sample_completed_ <-& (RPIPE_system_input_pipe_188_Sample)
        RPIPE_system_input_pipe_188_update_start_ <-& (RPIPE_system_input_pipe_188_sample_completed_)
        RPIPE_system_input_pipe_188_update_start_ &-> (RPIPE_system_input_pipe_188_Update)
        RPIPE_system_input_pipe_188_update_completed_ <-& (RPIPE_system_input_pipe_188_Update)
        // Target expression
        // (as target) call31
        // start: WAR dependencies for call31
        // done: WAR dependencies for call31
        // end:  		call31 := system_input_pipe $buffering 1// bits of buffering = 8. 
        // start:  		conv33 := ($cast ($uint<64>) call31 ) $buffering 1// bits of buffering = 64. 
        //  file prog.linked.opt.aa, line 75
        // Source expression
        // ($cast ($uint<64>) call31 )
        $T[type_cast_192_sample_start_] 
        $T[type_cast_192_sample_completed_] 
        $T[type_cast_192_update_start_] 
        $T[type_cast_192_update_completed_] 
        // call31
        // start: Forward dependencies from call31 to transition type_cast_192_sample_start_
        type_cast_192_sample_start_ <-& (RPIPE_system_input_pipe_188_update_completed_)
        // done: Forward dependencies from call31 to transition type_cast_192_sample_start_
        ;;[type_cast_192_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_192_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_192_sample_start_ &-> (type_cast_192_Sample)
        type_cast_192_sample_completed_ <-& (type_cast_192_Sample)
        type_cast_192_sample_completed_ &-> ($null)
        type_cast_192_update_start_ &-> (type_cast_192_Update)
        type_cast_192_update_completed_ <-& (type_cast_192_Update)
        // Target expression
        // (as target) conv33
        // start: WAR dependencies for conv33
        // done: WAR dependencies for conv33
        // end:  		conv33 := ($cast ($uint<64>) call31 ) $buffering 1// bits of buffering = 64. 
        // start: WAR dependencies for add34
        // done: WAR dependencies for add34
        // start:  		$volatile add34 := (shl30 | conv33) $buffering 1
        //  file prog.linked.opt.aa, line 76
        // volatile! 
        // Source expression
        // (shl30 | conv33)
        // shl30
        // conv33
        // Target expression
        // (as target) add34
        // start: WAR dependencies for add34
        // done: WAR dependencies for add34
        // end:  		$volatile add34 := (shl30 | conv33) $buffering 1
        // start: WAR dependencies for shl36
        // done: WAR dependencies for shl36
        // start:  		$volatile shl36 := (add34 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
        //  file prog.linked.opt.aa, line 77
        // volatile! 
        // Source expression
        // (add34 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
        // add34
        // Target expression
        // (as target) shl36
        // start: WAR dependencies for shl36
        // done: WAR dependencies for shl36
        // end:  		$volatile shl36 := (add34 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
        // start:  		call37 := system_input_pipe $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 78
        // Source expression
        // system_input_pipe
        $T[RPIPE_system_input_pipe_206_sample_start_] 
        $T[RPIPE_system_input_pipe_206_sample_completed_] 
        $T[RPIPE_system_input_pipe_206_update_start_] 
        $T[RPIPE_system_input_pipe_206_update_completed_] 
        ;;[RPIPE_system_input_pipe_206_Sample] 
        {
          // pipe read sample
          $T [rr] $T [ra] 
        }
        ;;[RPIPE_system_input_pipe_206_Update] 
        {
          // pipe read update
          $T [cr] $T [ca] 
        }
        RPIPE_system_input_pipe_206_sample_start_ &-> (RPIPE_system_input_pipe_206_Sample)
        RPIPE_system_input_pipe_206_sample_completed_ <-& (RPIPE_system_input_pipe_206_Sample)
        RPIPE_system_input_pipe_206_update_start_ <-& (RPIPE_system_input_pipe_206_sample_completed_)
        RPIPE_system_input_pipe_206_update_start_ &-> (RPIPE_system_input_pipe_206_Update)
        RPIPE_system_input_pipe_206_update_completed_ <-& (RPIPE_system_input_pipe_206_Update)
        // Target expression
        // (as target) call37
        // start: WAR dependencies for call37
        // done: WAR dependencies for call37
        // end:  		call37 := system_input_pipe $buffering 1// bits of buffering = 8. 
        // start:  		conv39 := ($cast ($uint<64>) call37 ) $buffering 1// bits of buffering = 64. 
        //  file prog.linked.opt.aa, line 79
        // Source expression
        // ($cast ($uint<64>) call37 )
        $T[type_cast_210_sample_start_] 
        $T[type_cast_210_sample_completed_] 
        $T[type_cast_210_update_start_] 
        $T[type_cast_210_update_completed_] 
        // call37
        // start: Forward dependencies from call37 to transition type_cast_210_sample_start_
        type_cast_210_sample_start_ <-& (RPIPE_system_input_pipe_206_update_completed_)
        // done: Forward dependencies from call37 to transition type_cast_210_sample_start_
        ;;[type_cast_210_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_210_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_210_sample_start_ &-> (type_cast_210_Sample)
        type_cast_210_sample_completed_ <-& (type_cast_210_Sample)
        type_cast_210_sample_completed_ &-> ($null)
        type_cast_210_update_start_ &-> (type_cast_210_Update)
        type_cast_210_update_completed_ <-& (type_cast_210_Update)
        // Target expression
        // (as target) conv39
        // start: WAR dependencies for conv39
        // done: WAR dependencies for conv39
        // end:  		conv39 := ($cast ($uint<64>) call37 ) $buffering 1// bits of buffering = 64. 
        // start: WAR dependencies for add40
        // done: WAR dependencies for add40
        // start:  		$volatile add40 := (shl36 | conv39) $buffering 1
        //  file prog.linked.opt.aa, line 80
        // volatile! 
        // Source expression
        // (shl36 | conv39)
        // shl36
        // conv39
        // Target expression
        // (as target) add40
        // start: WAR dependencies for add40
        // done: WAR dependencies for add40
        // end:  		$volatile add40 := (shl36 | conv39) $buffering 1
        // start: 		$call writeModule1 (iNsTr_1 add40 ) () 
        //  file prog.linked.opt.aa, line 81
        $T[call_stmt_219_sample_start_] 
        $T[call_stmt_219_sample_completed_] 
        $T[call_stmt_219_update_start_] 
        $T[call_stmt_219_update_completed_] 
        // Call input argument 0
        // iNsTr_1
        // Call input argument 1
        // add40
        // start: Forward dependencies from iNsTr_1 to transition call_stmt_219_sample_start_
        // done: Forward dependencies from iNsTr_1 to transition call_stmt_219_sample_start_
        // start: Forward dependencies from add40 to transition call_stmt_219_sample_start_
        call_stmt_219_sample_start_ <-& (type_cast_192_update_completed_)
        call_stmt_219_sample_start_ <-& (type_cast_89_update_completed_)
        call_stmt_219_sample_start_ <-& (type_cast_102_update_completed_)
        call_stmt_219_sample_start_ <-& (type_cast_120_update_completed_)
        call_stmt_219_sample_start_ <-& (type_cast_138_update_completed_)
        call_stmt_219_sample_start_ <-& (type_cast_156_update_completed_)
        call_stmt_219_sample_start_ <-& (type_cast_174_update_completed_)
        call_stmt_219_sample_start_ <-& (type_cast_210_update_completed_)
        // done: Forward dependencies from add40 to transition call_stmt_219_sample_start_
        ;;[call_stmt_219_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_219_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_219_sample_start_ &-> (call_stmt_219_Sample)
        call_stmt_219_sample_completed_ <-& (call_stmt_219_Sample)
        call_stmt_219_sample_completed_ &-> ($null)
        call_stmt_219_update_start_ &-> (call_stmt_219_Update)
        call_stmt_219_update_completed_ <-& (call_stmt_219_Update)
        // end: 		$call writeModule1 (iNsTr_1 add40 ) () 
        // start: WAR dependencies for inc
        // ignored out-of-scope w_root 			$phi iNsTr_1 := 			  ($cast ($uint<32>) inc ) $on   forx_xbody_forx_xbody 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody 
        // type of target is $uint<32>
        // done: WAR dependencies for inc
        // start:  		$volatile inc := (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
        //  file prog.linked.opt.aa, line 82
        // volatile! 
        // Source expression
        // (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  ))
        // iNsTr_1
        // Target expression
        // (as target) inc
        // start: WAR dependencies for inc
        // ignored out-of-scope w_root 			$phi iNsTr_1 := 			  ($cast ($uint<32>) inc ) $on   forx_xbody_forx_xbody 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody 
        // type of target is $uint<32>
        // done: WAR dependencies for inc
        // end:  		$volatile inc := (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
        // start: WAR dependencies for exitcond1
        // ignored out-of-scope w_root 			$phi iNsTr_1 := 			  ($cast ($uint<32>) inc ) $on   forx_xbody_forx_xbody 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody 
        // type of target is $uint<32>
        // done: WAR dependencies for exitcond1
        // start:  		$volatile exitcond1 := (inc == ($bitcast ($uint<32>) _b00000000000000110001000000000000  )) $buffering 1
        //  file prog.linked.opt.aa, line 83
        // volatile! 
        // Source expression
        // (inc == ($bitcast ($uint<32>) _b00000000000000110001000000000000  ))
        // inc
        // Target expression
        // (as target) exitcond1
        // start: WAR dependencies for exitcond1
        // ignored out-of-scope w_root 			$phi iNsTr_1 := 			  ($cast ($uint<32>) inc ) $on   forx_xbody_forx_xbody 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody 
        // type of target is $uint<32>
        // done: WAR dependencies for exitcond1
        // end:  		$volatile exitcond1 := (inc == ($bitcast ($uint<32>) _b00000000000000110001000000000000  )) $buffering 1
        // load-store dependencies..
        // pipe read/write dependencies for pipe MAIN_MEM_REQUEST
        // read-dependencies for pipe MAIN_MEM_REQUEST
        // write-dependencies for pipe MAIN_MEM_REQUEST
        // signal write dependencies for MAIN_MEM_REQUEST
        // pipe read/write dependencies for pipe MAIN_MEM_RESPONSE
        // read-dependencies for pipe MAIN_MEM_RESPONSE
        // write-dependencies for pipe MAIN_MEM_RESPONSE
        // signal write dependencies for MAIN_MEM_RESPONSE
        // pipe read/write dependencies for pipe system_input_pipe
        // read-dependencies for pipe system_input_pipe
        RPIPE_system_input_pipe_98_sample_start_ <-& (RPIPE_system_input_pipe_85_update_completed_)
        RPIPE_system_input_pipe_116_sample_start_ <-& (RPIPE_system_input_pipe_98_update_completed_)
        RPIPE_system_input_pipe_134_sample_start_ <-& (RPIPE_system_input_pipe_116_update_completed_)
        RPIPE_system_input_pipe_152_sample_start_ <-& (RPIPE_system_input_pipe_134_update_completed_)
        RPIPE_system_input_pipe_170_sample_start_ <-& (RPIPE_system_input_pipe_152_update_completed_)
        RPIPE_system_input_pipe_188_sample_start_ <-& (RPIPE_system_input_pipe_170_update_completed_)
        RPIPE_system_input_pipe_206_sample_start_ <-& (RPIPE_system_input_pipe_188_update_completed_)
        // write-dependencies for pipe system_input_pipe
        // signal write dependencies for system_input_pipe
      }
      assign_stmt_86_to_assign_stmt_231__entry__ |-> (assign_stmt_86_to_assign_stmt_231)
      assign_stmt_86_to_assign_stmt_231__exit__ <-| (assign_stmt_86_to_assign_stmt_231)
      // if-statement  
      //  file prog.linked.opt.aa, line 84
      ;;[if_stmt_232_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_232__entry__ |-> (if_stmt_232_dead_link)
      if_stmt_232__exit__ <-| (if_stmt_232_dead_link)
      ;;[if_stmt_232_eval_test] 
      {
        // test expression evaluate and trigger branch 
        $T [branch_req] 
      }
      if_stmt_232__entry__ |-> (if_stmt_232_eval_test)
      $P [R_exitcond1_233_place]
      R_exitcond1_233_place <-| (if_stmt_232_eval_test)
      ;;[if_stmt_232_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_232_else_link] 
      {
        $T [else_choice_transition] 
      }
      R_exitcond1_233_place |-> (if_stmt_232_if_link if_stmt_232_else_link)
      $P [forx_xbody_forx_xend]
      forx_xbody_forx_xend <-| (if_stmt_232_if_link)
      $P [forx_xbody_forx_xbody]
      forx_xbody_forx_xbody <-| (if_stmt_232_else_link)
      // control-path for merge  
      //  file prog.linked.opt.aa, line 47
      //---------------------   merge statement  file prog.linked.opt.aa, line 47  --------------------------
      ||[bbx_xnph_forx_xbody_PhiReq] 
      {
        ;;[phi_stmt_76] 
        {
          ||[phi_stmt_76_sources] 
          {
            // sources for 			$phi iNsTr_1 := 			  ($cast ($uint<32>) inc ) $on   forx_xbody_forx_xbody 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody 
            // type of target is $uint<32>
            // constant source .... delay transition 
            $T [type_cast_80_konst_delay_trans] $delay
          }
          $T [phi_stmt_76_req] 
        }
      }
      bbx_xnph_forx_xbody |-> (bbx_xnph_forx_xbody_PhiReq)
      ||[forx_xbody_forx_xbody_PhiReq] 
      {
        ;;[phi_stmt_76] 
        {
          ||[phi_stmt_76_sources] 
          {
            // sources for 			$phi iNsTr_1 := 			  ($cast ($uint<32>) inc ) $on   forx_xbody_forx_xbody 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody 
            // type of target is $uint<32>
            // trivial non-constant source .... interlock-buffer introduced 
            // ($cast ($uint<32>) inc )
            ;;[type_cast_82] 
            {
              // type-cast expression
              ||[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]  
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca] 
                }
              }
            }
          }
          $T [phi_stmt_76_req] 
        }
      }
      forx_xbody_forx_xbody |-> (forx_xbody_forx_xbody_PhiReq)
      $P [merge_stmt_75_PhiReqMerge] 
      merge_stmt_75_PhiReqMerge <-| ( bbx_xnph_forx_xbody_PhiReq  forx_xbody_forx_xbody_PhiReq )
      ||[merge_stmt_75_PhiAck] 
      {
        $T [phi_stmt_76_ack] 
      }
      merge_stmt_75_PhiReqMerge |-> (merge_stmt_75_PhiAck)
      merge_stmt_75__exit__  <-| (merge_stmt_75_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 47  --------------------------
      // control-path for merge  
      //  file prog.linked.opt.aa, line 89
      ;;[merge_stmt_238_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_238__entry__ |-> (merge_stmt_238_dead_link)
      merge_stmt_238__exit__ <-| (merge_stmt_238_dead_link)
      //---------------------   merge statement  file prog.linked.opt.aa, line 89  --------------------------
      ||[forx_xbody_forx_xend_PhiReq] 
      {
        // no phi statements in merge..
      }
      forx_xbody_forx_xend |-> (forx_xbody_forx_xend_PhiReq)
      $P [merge_stmt_238_PhiReqMerge] 
      merge_stmt_238_PhiReqMerge <-| ( forx_xbody_forx_xend_PhiReq )
      ||[merge_stmt_238_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_238_PhiReqMerge |-> (merge_stmt_238_PhiAck)
      merge_stmt_238__exit__  <-| (merge_stmt_238_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 89  --------------------------
      // control-path for merge  
      //  file prog.linked.opt.aa, line 92
      //---------------------   merge statement  file prog.linked.opt.aa, line 92  --------------------------
      ||[return___PhiReq] 
      {
        // no phi statements in merge..
      }
      return__ |-> (return___PhiReq)
      $P [merge_stmt_240_PhiReqMerge] 
      merge_stmt_240_PhiReqMerge <-| ( return___PhiReq )
      ||[merge_stmt_240_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_240_PhiReqMerge |-> (merge_stmt_240_PhiAck)
      merge_stmt_240__exit__  <-| (merge_stmt_240_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 92  --------------------------
      bbx_xnph_forx_xbody <-| (branch_block_stmt_73__entry__)
      assign_stmt_86_to_assign_stmt_231__entry__ <-| (merge_stmt_75__exit__)
      if_stmt_232__entry__ <-| (assign_stmt_86_to_assign_stmt_231__exit__)
      merge_stmt_238__entry__ <-| (if_stmt_232__exit__)
      return__ <-| (merge_stmt_238__exit__)
      merge_stmt_240__exit__ |-> (branch_block_stmt_73__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %fill_input%body%
    //  file prog.linked.opt.aa, line 47
    // constant-object-declarations for block %fill_input%body%
    //  file prog.linked.opt.aa, line 89
    // constant-object-declarations for block %fill_input%body%
    //  file prog.linked.opt.aa, line 92
    // constant-object-declarations for block %fill_input%body
    //  file prog.linked.opt.aa, line 44
    // constant-object-declarations for block %fill_input
    //  file prog.linked.opt.aa, line 39
    // constant-declarations for block %fill_input%body
    //  file prog.linked.opt.aa, line 44
    // constant-declarations for block %fill_input%body%
    //  file prog.linked.opt.aa, line 47
    // constant-declarations for phi:  			$phi iNsTr_1 := 			  ($cast ($uint<32>) inc ) $on   forx_xbody_forx_xbody 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody 
    // type of target is $uint<32>
    //  file prog.linked.opt.aa, line 48
    // ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) )
    $constant $W[type_cast_80_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )
    $constant $W[type_cast_94_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000001000// 8
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )
    $constant $W[type_cast_112_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000001000// 8
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )
    $constant $W[type_cast_130_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000001000// 8
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )
    $constant $W[type_cast_148_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000001000// 8
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )
    $constant $W[type_cast_166_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000001000// 8
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )
    $constant $W[type_cast_184_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000001000// 8
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )
    $constant $W[type_cast_202_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000001000// 8
    // 		$call writeModule1 (iNsTr_1 add40 ) () 
    //  file prog.linked.opt.aa, line 81
    // ($bitcast ($uint<32>) _b00000000000000000000000000000001  )
    $constant $W[type_cast_223_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // ($bitcast ($uint<32>) _b00000000000000110001000000000000  )
    $constant $W[type_cast_229_wire_constant] : $int<32> := _b00000000000000110001000000000000// 200704
    // if-statement  
    //  file prog.linked.opt.aa, line 84
    // constant-declarations for block %fill_input%body%
    //  file prog.linked.opt.aa, line 89
    // constant-declarations for block %fill_input%body%
    //  file prog.linked.opt.aa, line 92
    // block %fill_input%body
    //  file prog.linked.opt.aa, line 44
    // merge-statement  
    //  file prog.linked.opt.aa, line 47
    // 			$phi iNsTr_1 := 			  ($cast ($uint<32>) inc ) $on   forx_xbody_forx_xbody 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody 
    // type of target is $uint<32>
    //  file prog.linked.opt.aa, line 48
    // ($cast ($uint<32>) inc )
    $intermediate $W[type_cast_82_wire] : $int<32>
    // iNsTr_1
    $W[iNsTr_1_76] : $int<32>
    // 		call := system_input_pipe $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 51
    // call
    $W[call_86] : $int<8>
    // 		conv := ($cast ($uint<64>) call ) $buffering 1// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 52
    // conv
    $W[conv_90] : $int<64>
    // 		$volatile shl := (conv << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    //  file prog.linked.opt.aa, line 53
    // shl
    $W[shl_96] : $int<64>
    // 		call2 := system_input_pipe $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 54
    // call2
    $W[call2_99] : $int<8>
    // 		conv4 := ($cast ($uint<64>) call2 ) $buffering 1// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 55
    // conv4
    $W[conv4_103] : $int<64>
    // 		$volatile add := (shl | conv4) $buffering 1
    //  file prog.linked.opt.aa, line 56
    // add
    $W[add_108] : $int<64>
    // 		$volatile shl6 := (add << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    //  file prog.linked.opt.aa, line 57
    // shl6
    $W[shl6_114] : $int<64>
    // 		call7 := system_input_pipe $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 58
    // call7
    $W[call7_117] : $int<8>
    // 		conv9 := ($cast ($uint<64>) call7 ) $buffering 1// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 59
    // conv9
    $W[conv9_121] : $int<64>
    // 		$volatile add10 := (shl6 | conv9) $buffering 1
    //  file prog.linked.opt.aa, line 60
    // add10
    $W[add10_126] : $int<64>
    // 		$volatile shl12 := (add10 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    //  file prog.linked.opt.aa, line 61
    // shl12
    $W[shl12_132] : $int<64>
    // 		call13 := system_input_pipe $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 62
    // call13
    $W[call13_135] : $int<8>
    // 		conv15 := ($cast ($uint<64>) call13 ) $buffering 1// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 63
    // conv15
    $W[conv15_139] : $int<64>
    // 		$volatile add16 := (shl12 | conv15) $buffering 1
    //  file prog.linked.opt.aa, line 64
    // add16
    $W[add16_144] : $int<64>
    // 		$volatile shl18 := (add16 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    //  file prog.linked.opt.aa, line 65
    // shl18
    $W[shl18_150] : $int<64>
    // 		call19 := system_input_pipe $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 66
    // call19
    $W[call19_153] : $int<8>
    // 		conv21 := ($cast ($uint<64>) call19 ) $buffering 1// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 67
    // conv21
    $W[conv21_157] : $int<64>
    // 		$volatile add22 := (shl18 | conv21) $buffering 1
    //  file prog.linked.opt.aa, line 68
    // add22
    $W[add22_162] : $int<64>
    // 		$volatile shl24 := (add22 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    //  file prog.linked.opt.aa, line 69
    // shl24
    $W[shl24_168] : $int<64>
    // 		call25 := system_input_pipe $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 70
    // call25
    $W[call25_171] : $int<8>
    // 		conv27 := ($cast ($uint<64>) call25 ) $buffering 1// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 71
    // conv27
    $W[conv27_175] : $int<64>
    // 		$volatile add28 := (shl24 | conv27) $buffering 1
    //  file prog.linked.opt.aa, line 72
    // add28
    $W[add28_180] : $int<64>
    // 		$volatile shl30 := (add28 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    //  file prog.linked.opt.aa, line 73
    // shl30
    $W[shl30_186] : $int<64>
    // 		call31 := system_input_pipe $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 74
    // call31
    $W[call31_189] : $int<8>
    // 		conv33 := ($cast ($uint<64>) call31 ) $buffering 1// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 75
    // conv33
    $W[conv33_193] : $int<64>
    // 		$volatile add34 := (shl30 | conv33) $buffering 1
    //  file prog.linked.opt.aa, line 76
    // add34
    $W[add34_198] : $int<64>
    // 		$volatile shl36 := (add34 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    //  file prog.linked.opt.aa, line 77
    // shl36
    $W[shl36_204] : $int<64>
    // 		call37 := system_input_pipe $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 78
    // call37
    $W[call37_207] : $int<8>
    // 		conv39 := ($cast ($uint<64>) call37 ) $buffering 1// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 79
    // conv39
    $W[conv39_211] : $int<64>
    // 		$volatile add40 := (shl36 | conv39) $buffering 1
    //  file prog.linked.opt.aa, line 80
    // add40
    $W[add40_216] : $int<64>
    // 		$call writeModule1 (iNsTr_1 add40 ) () 
    //  file prog.linked.opt.aa, line 81
    // 		$volatile inc := (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
    //  file prog.linked.opt.aa, line 82
    // inc
    $W[inc_225] : $int<32>
    // 		$volatile exitcond1 := (inc == ($bitcast ($uint<32>) _b00000000000000110001000000000000  )) $buffering 1
    //  file prog.linked.opt.aa, line 83
    // exitcond1
    $W[exitcond1_231] : $int<1>
    // if statement  
    //  file prog.linked.opt.aa, line 84
    // datapath-instances for block %fill_input%body
    //  file prog.linked.opt.aa, line 44
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 47
    // 			$phi iNsTr_1 := 			  ($cast ($uint<32>) inc ) $on   forx_xbody_forx_xbody 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody 
    // type of target is $uint<32>
    //  file prog.linked.opt.aa, line 48
    // ($cast ($uint<32>) inc )
    # := [type_cast_82_inst] (inc_225) (type_cast_82_wire)    
    $buffering  $out type_cast_82_inst type_cast_82_wire 1
    $delay type_cast_82_inst 1
    $phi [phi_stmt_76] (type_cast_80_wire_constant type_cast_82_wire) ( iNsTr_1_76 ) 
    // 		call := system_input_pipe $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 51
    // system_input_pipe
    $ioport $in [RPIPE_system_input_pipe_85_inst] (system_input_pipe) (call_86) 
    $buffering $out RPIPE_system_input_pipe_85_inst call_86 1
    // 		conv := ($cast ($uint<64>) call ) $buffering 1// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 52
    // ($cast ($uint<64>) call )
    # := [type_cast_89_inst] (call_86) (conv_90)    
    $buffering  $out type_cast_89_inst conv_90 1
    $delay type_cast_89_inst 1
    // 		$volatile shl := (conv << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    //  file prog.linked.opt.aa, line 53
    // (conv << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
    <<[SHL_u64_u64_95_inst] (conv_90 type_cast_94_wire_constant) (shl_96)   $flowthrough 
    $delay SHL_u64_u64_95_inst 0
    // 		call2 := system_input_pipe $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 54
    // system_input_pipe
    $ioport $in [RPIPE_system_input_pipe_98_inst] (system_input_pipe) (call2_99) 
    $buffering $out RPIPE_system_input_pipe_98_inst call2_99 1
    // 		conv4 := ($cast ($uint<64>) call2 ) $buffering 1// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 55
    // ($cast ($uint<64>) call2 )
    # := [type_cast_102_inst] (call2_99) (conv4_103)    
    $buffering  $out type_cast_102_inst conv4_103 1
    $delay type_cast_102_inst 1
    // 		$volatile add := (shl | conv4) $buffering 1
    //  file prog.linked.opt.aa, line 56
    // (shl | conv4)
    |[OR_u64_u64_107_inst] (shl_96 conv4_103) (add_108)   $flowthrough 
    $delay OR_u64_u64_107_inst 0
    // 		$volatile shl6 := (add << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    //  file prog.linked.opt.aa, line 57
    // (add << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
    <<[SHL_u64_u64_113_inst] (add_108 type_cast_112_wire_constant) (shl6_114)   $flowthrough 
    $delay SHL_u64_u64_113_inst 0
    // 		call7 := system_input_pipe $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 58
    // system_input_pipe
    $ioport $in [RPIPE_system_input_pipe_116_inst] (system_input_pipe) (call7_117) 
    $buffering $out RPIPE_system_input_pipe_116_inst call7_117 1
    // 		conv9 := ($cast ($uint<64>) call7 ) $buffering 1// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 59
    // ($cast ($uint<64>) call7 )
    # := [type_cast_120_inst] (call7_117) (conv9_121)    
    $buffering  $out type_cast_120_inst conv9_121 1
    $delay type_cast_120_inst 1
    // 		$volatile add10 := (shl6 | conv9) $buffering 1
    //  file prog.linked.opt.aa, line 60
    // (shl6 | conv9)
    |[OR_u64_u64_125_inst] (shl6_114 conv9_121) (add10_126)   $flowthrough 
    $delay OR_u64_u64_125_inst 0
    // 		$volatile shl12 := (add10 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    //  file prog.linked.opt.aa, line 61
    // (add10 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
    <<[SHL_u64_u64_131_inst] (add10_126 type_cast_130_wire_constant) (shl12_132)   $flowthrough 
    $delay SHL_u64_u64_131_inst 0
    // 		call13 := system_input_pipe $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 62
    // system_input_pipe
    $ioport $in [RPIPE_system_input_pipe_134_inst] (system_input_pipe) (call13_135) 
    $buffering $out RPIPE_system_input_pipe_134_inst call13_135 1
    // 		conv15 := ($cast ($uint<64>) call13 ) $buffering 1// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 63
    // ($cast ($uint<64>) call13 )
    # := [type_cast_138_inst] (call13_135) (conv15_139)    
    $buffering  $out type_cast_138_inst conv15_139 1
    $delay type_cast_138_inst 1
    // 		$volatile add16 := (shl12 | conv15) $buffering 1
    //  file prog.linked.opt.aa, line 64
    // (shl12 | conv15)
    |[OR_u64_u64_143_inst] (shl12_132 conv15_139) (add16_144)   $flowthrough 
    $delay OR_u64_u64_143_inst 0
    // 		$volatile shl18 := (add16 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    //  file prog.linked.opt.aa, line 65
    // (add16 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
    <<[SHL_u64_u64_149_inst] (add16_144 type_cast_148_wire_constant) (shl18_150)   $flowthrough 
    $delay SHL_u64_u64_149_inst 0
    // 		call19 := system_input_pipe $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 66
    // system_input_pipe
    $ioport $in [RPIPE_system_input_pipe_152_inst] (system_input_pipe) (call19_153) 
    $buffering $out RPIPE_system_input_pipe_152_inst call19_153 1
    // 		conv21 := ($cast ($uint<64>) call19 ) $buffering 1// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 67
    // ($cast ($uint<64>) call19 )
    # := [type_cast_156_inst] (call19_153) (conv21_157)    
    $buffering  $out type_cast_156_inst conv21_157 1
    $delay type_cast_156_inst 1
    // 		$volatile add22 := (shl18 | conv21) $buffering 1
    //  file prog.linked.opt.aa, line 68
    // (shl18 | conv21)
    |[OR_u64_u64_161_inst] (shl18_150 conv21_157) (add22_162)   $flowthrough 
    $delay OR_u64_u64_161_inst 0
    // 		$volatile shl24 := (add22 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    //  file prog.linked.opt.aa, line 69
    // (add22 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
    <<[SHL_u64_u64_167_inst] (add22_162 type_cast_166_wire_constant) (shl24_168)   $flowthrough 
    $delay SHL_u64_u64_167_inst 0
    // 		call25 := system_input_pipe $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 70
    // system_input_pipe
    $ioport $in [RPIPE_system_input_pipe_170_inst] (system_input_pipe) (call25_171) 
    $buffering $out RPIPE_system_input_pipe_170_inst call25_171 1
    // 		conv27 := ($cast ($uint<64>) call25 ) $buffering 1// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 71
    // ($cast ($uint<64>) call25 )
    # := [type_cast_174_inst] (call25_171) (conv27_175)    
    $buffering  $out type_cast_174_inst conv27_175 1
    $delay type_cast_174_inst 1
    // 		$volatile add28 := (shl24 | conv27) $buffering 1
    //  file prog.linked.opt.aa, line 72
    // (shl24 | conv27)
    |[OR_u64_u64_179_inst] (shl24_168 conv27_175) (add28_180)   $flowthrough 
    $delay OR_u64_u64_179_inst 0
    // 		$volatile shl30 := (add28 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    //  file prog.linked.opt.aa, line 73
    // (add28 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
    <<[SHL_u64_u64_185_inst] (add28_180 type_cast_184_wire_constant) (shl30_186)   $flowthrough 
    $delay SHL_u64_u64_185_inst 0
    // 		call31 := system_input_pipe $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 74
    // system_input_pipe
    $ioport $in [RPIPE_system_input_pipe_188_inst] (system_input_pipe) (call31_189) 
    $buffering $out RPIPE_system_input_pipe_188_inst call31_189 1
    // 		conv33 := ($cast ($uint<64>) call31 ) $buffering 1// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 75
    // ($cast ($uint<64>) call31 )
    # := [type_cast_192_inst] (call31_189) (conv33_193)    
    $buffering  $out type_cast_192_inst conv33_193 1
    $delay type_cast_192_inst 1
    // 		$volatile add34 := (shl30 | conv33) $buffering 1
    //  file prog.linked.opt.aa, line 76
    // (shl30 | conv33)
    |[OR_u64_u64_197_inst] (shl30_186 conv33_193) (add34_198)   $flowthrough 
    $delay OR_u64_u64_197_inst 0
    // 		$volatile shl36 := (add34 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    //  file prog.linked.opt.aa, line 77
    // (add34 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
    <<[SHL_u64_u64_203_inst] (add34_198 type_cast_202_wire_constant) (shl36_204)   $flowthrough 
    $delay SHL_u64_u64_203_inst 0
    // 		call37 := system_input_pipe $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 78
    // system_input_pipe
    $ioport $in [RPIPE_system_input_pipe_206_inst] (system_input_pipe) (call37_207) 
    $buffering $out RPIPE_system_input_pipe_206_inst call37_207 1
    // 		conv39 := ($cast ($uint<64>) call37 ) $buffering 1// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 79
    // ($cast ($uint<64>) call37 )
    # := [type_cast_210_inst] (call37_207) (conv39_211)    
    $buffering  $out type_cast_210_inst conv39_211 1
    $delay type_cast_210_inst 1
    // 		$volatile add40 := (shl36 | conv39) $buffering 1
    //  file prog.linked.opt.aa, line 80
    // (shl36 | conv39)
    |[OR_u64_u64_215_inst] (shl36_204 conv39_211) (add40_216)   $flowthrough 
    $delay OR_u64_u64_215_inst 0
    // 		$call writeModule1 (iNsTr_1 add40 ) () 
    //  file prog.linked.opt.aa, line 81
    $call [call_stmt_219_call] $module writeModule1(iNsTr_1_76 add40_216) ()  
    $delay call_stmt_219_call 4
    $buffering  $in call_stmt_219_call iNsTr_1_76 1
    $buffering  $in call_stmt_219_call add40_216 1
    // 		$volatile inc := (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
    //  file prog.linked.opt.aa, line 82
    // (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  ))
    +[ADD_u32_u32_224_inst] (iNsTr_1_76 type_cast_223_wire_constant) (inc_225)   $flowthrough 
    $delay ADD_u32_u32_224_inst 0
    // 		$volatile exitcond1 := (inc == ($bitcast ($uint<32>) _b00000000000000110001000000000000  )) $buffering 1
    //  file prog.linked.opt.aa, line 83
    // (inc == ($bitcast ($uint<32>) _b00000000000000110001000000000000  ))
    ==[EQ_u32_u1_230_inst] (inc_225 type_cast_229_wire_constant) (exitcond1_231)   $flowthrough 
    $delay EQ_u32_u1_230_inst 0
    // datapath-instances for if  
    //  file prog.linked.opt.aa, line 84
    ==0? [if_stmt_232_branch] (exitcond1_231)
  }
  // end data-path
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 47
  // ($cast ($uint<32>) inc )
  type_cast_82_inst <=> (branch_block_stmt_73/forx_xbody_forx_xbody_PhiReq/phi_stmt_76/phi_stmt_76_sources/type_cast_82/SplitProtocol/Sample/rr branch_block_stmt_73/forx_xbody_forx_xbody_PhiReq/phi_stmt_76/phi_stmt_76_sources/type_cast_82/SplitProtocol/Update/cr) (branch_block_stmt_73/forx_xbody_forx_xbody_PhiReq/phi_stmt_76/phi_stmt_76_sources/type_cast_82/SplitProtocol/Sample/ra branch_block_stmt_73/forx_xbody_forx_xbody_PhiReq/phi_stmt_76/phi_stmt_76_sources/type_cast_82/SplitProtocol/Update/ca)
  phi_stmt_76 <=> (branch_block_stmt_73/bbx_xnph_forx_xbody_PhiReq/phi_stmt_76/phi_stmt_76_req branch_block_stmt_73/forx_xbody_forx_xbody_PhiReq/phi_stmt_76/phi_stmt_76_req) (branch_block_stmt_73/merge_stmt_75_PhiAck/phi_stmt_76_ack)
  // 		call := system_input_pipe $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 51
  // system_input_pipe
  RPIPE_system_input_pipe_85_inst <=> (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_85_Sample/rr branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_85_Update/cr) (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_85_Sample/ra branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_85_Update/ca)
  // 		conv := ($cast ($uint<64>) call ) $buffering 1// bits of buffering = 64. 
  //  file prog.linked.opt.aa, line 52
  // call
  // ($cast ($uint<64>) call )
  type_cast_89_inst <=> (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_89_Sample/rr branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_89_Update/cr) (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_89_Sample/ra branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_89_Update/ca)
  // 		$volatile shl := (conv << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
  //  file prog.linked.opt.aa, line 53
  // (conv << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
  // conv
  // 		call2 := system_input_pipe $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 54
  // system_input_pipe
  RPIPE_system_input_pipe_98_inst <=> (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_98_Sample/rr branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_98_Update/cr) (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_98_Sample/ra branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_98_Update/ca)
  // 		conv4 := ($cast ($uint<64>) call2 ) $buffering 1// bits of buffering = 64. 
  //  file prog.linked.opt.aa, line 55
  // call2
  // ($cast ($uint<64>) call2 )
  type_cast_102_inst <=> (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_102_Sample/rr branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_102_Update/cr) (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_102_Sample/ra branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_102_Update/ca)
  // 		$volatile add := (shl | conv4) $buffering 1
  //  file prog.linked.opt.aa, line 56
  // (shl | conv4)
  // shl
  // conv4
  // 		$volatile shl6 := (add << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
  //  file prog.linked.opt.aa, line 57
  // (add << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
  // add
  // 		call7 := system_input_pipe $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 58
  // system_input_pipe
  RPIPE_system_input_pipe_116_inst <=> (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_116_Sample/rr branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_116_Update/cr) (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_116_Sample/ra branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_116_Update/ca)
  // 		conv9 := ($cast ($uint<64>) call7 ) $buffering 1// bits of buffering = 64. 
  //  file prog.linked.opt.aa, line 59
  // call7
  // ($cast ($uint<64>) call7 )
  type_cast_120_inst <=> (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_120_Sample/rr branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_120_Update/cr) (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_120_Sample/ra branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_120_Update/ca)
  // 		$volatile add10 := (shl6 | conv9) $buffering 1
  //  file prog.linked.opt.aa, line 60
  // (shl6 | conv9)
  // shl6
  // conv9
  // 		$volatile shl12 := (add10 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
  //  file prog.linked.opt.aa, line 61
  // (add10 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
  // add10
  // 		call13 := system_input_pipe $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 62
  // system_input_pipe
  RPIPE_system_input_pipe_134_inst <=> (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_134_Sample/rr branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_134_Update/cr) (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_134_Sample/ra branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_134_Update/ca)
  // 		conv15 := ($cast ($uint<64>) call13 ) $buffering 1// bits of buffering = 64. 
  //  file prog.linked.opt.aa, line 63
  // call13
  // ($cast ($uint<64>) call13 )
  type_cast_138_inst <=> (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_138_Sample/rr branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_138_Update/cr) (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_138_Sample/ra branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_138_Update/ca)
  // 		$volatile add16 := (shl12 | conv15) $buffering 1
  //  file prog.linked.opt.aa, line 64
  // (shl12 | conv15)
  // shl12
  // conv15
  // 		$volatile shl18 := (add16 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
  //  file prog.linked.opt.aa, line 65
  // (add16 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
  // add16
  // 		call19 := system_input_pipe $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 66
  // system_input_pipe
  RPIPE_system_input_pipe_152_inst <=> (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_152_Sample/rr branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_152_Update/cr) (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_152_Sample/ra branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_152_Update/ca)
  // 		conv21 := ($cast ($uint<64>) call19 ) $buffering 1// bits of buffering = 64. 
  //  file prog.linked.opt.aa, line 67
  // call19
  // ($cast ($uint<64>) call19 )
  type_cast_156_inst <=> (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_156_Sample/rr branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_156_Update/cr) (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_156_Sample/ra branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_156_Update/ca)
  // 		$volatile add22 := (shl18 | conv21) $buffering 1
  //  file prog.linked.opt.aa, line 68
  // (shl18 | conv21)
  // shl18
  // conv21
  // 		$volatile shl24 := (add22 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
  //  file prog.linked.opt.aa, line 69
  // (add22 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
  // add22
  // 		call25 := system_input_pipe $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 70
  // system_input_pipe
  RPIPE_system_input_pipe_170_inst <=> (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_170_Sample/rr branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_170_Update/cr) (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_170_Sample/ra branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_170_Update/ca)
  // 		conv27 := ($cast ($uint<64>) call25 ) $buffering 1// bits of buffering = 64. 
  //  file prog.linked.opt.aa, line 71
  // call25
  // ($cast ($uint<64>) call25 )
  type_cast_174_inst <=> (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_174_Sample/rr branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_174_Update/cr) (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_174_Sample/ra branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_174_Update/ca)
  // 		$volatile add28 := (shl24 | conv27) $buffering 1
  //  file prog.linked.opt.aa, line 72
  // (shl24 | conv27)
  // shl24
  // conv27
  // 		$volatile shl30 := (add28 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
  //  file prog.linked.opt.aa, line 73
  // (add28 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
  // add28
  // 		call31 := system_input_pipe $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 74
  // system_input_pipe
  RPIPE_system_input_pipe_188_inst <=> (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_188_Sample/rr branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_188_Update/cr) (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_188_Sample/ra branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_188_Update/ca)
  // 		conv33 := ($cast ($uint<64>) call31 ) $buffering 1// bits of buffering = 64. 
  //  file prog.linked.opt.aa, line 75
  // call31
  // ($cast ($uint<64>) call31 )
  type_cast_192_inst <=> (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_192_Sample/rr branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_192_Update/cr) (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_192_Sample/ra branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_192_Update/ca)
  // 		$volatile add34 := (shl30 | conv33) $buffering 1
  //  file prog.linked.opt.aa, line 76
  // (shl30 | conv33)
  // shl30
  // conv33
  // 		$volatile shl36 := (add34 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
  //  file prog.linked.opt.aa, line 77
  // (add34 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
  // add34
  // 		call37 := system_input_pipe $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 78
  // system_input_pipe
  RPIPE_system_input_pipe_206_inst <=> (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_206_Sample/rr branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_206_Update/cr) (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_206_Sample/ra branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/RPIPE_system_input_pipe_206_Update/ca)
  // 		conv39 := ($cast ($uint<64>) call37 ) $buffering 1// bits of buffering = 64. 
  //  file prog.linked.opt.aa, line 79
  // call37
  // ($cast ($uint<64>) call37 )
  type_cast_210_inst <=> (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_210_Sample/rr branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_210_Update/cr) (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_210_Sample/ra branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/type_cast_210_Update/ca)
  // 		$volatile add40 := (shl36 | conv39) $buffering 1
  //  file prog.linked.opt.aa, line 80
  // (shl36 | conv39)
  // shl36
  // conv39
  // 		$call writeModule1 (iNsTr_1 add40 ) () 
  //  file prog.linked.opt.aa, line 81
  // iNsTr_1
  // add40
  call_stmt_219_call <=> (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/call_stmt_219_Sample/crr branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/call_stmt_219_Update/ccr) (branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/call_stmt_219_Sample/cra branch_block_stmt_73/assign_stmt_86_to_assign_stmt_231/call_stmt_219_Update/cca)
  // 		$volatile inc := (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
  //  file prog.linked.opt.aa, line 82
  // (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  ))
  // iNsTr_1
  // 		$volatile exitcond1 := (inc == ($bitcast ($uint<32>) _b00000000000000110001000000000000  )) $buffering 1
  //  file prog.linked.opt.aa, line 83
  // (inc == ($bitcast ($uint<32>) _b00000000000000110001000000000000  ))
  // inc
  // CP-DP links for if  
  //  file prog.linked.opt.aa, line 84
  if_stmt_232_branch <=> (branch_block_stmt_73/if_stmt_232_eval_test/branch_req) (branch_block_stmt_73/if_stmt_232_else_link/else_choice_transition branch_block_stmt_73/if_stmt_232_if_link/if_choice_transition)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 89
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 92
}
$module [progx_xoptx_xo_storage_initializer_] 
{
  // pipe-declarations for block %progx_xoptx_xo_storage_initializer_
  //  file prog.linked.opt.aa, line 96
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %progx_xoptx_xo_storage_initializer_
    //  file prog.linked.opt.aa, line 96
  }
  // end data-path
  $attribute initializer => ""
}
$module [global_storage_initializer_] 
{
  // pipe-declarations for block %global_storage_initializer_
  //  file prog.linked.opt.aa, line 104
  // pipe-declarations for block %global_storage_initializer_%pb
  //  file prog.linked.opt.aa, line 109
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ||[parallel_block_stmt_247] 
    {
      ::[call_stmt_248] 
      {
        // start: 		$call progx_xoptx_xo_storage_initializer_ () () 
        //  file prog.linked.opt.aa, line 111
        $T[call_stmt_248_sample_start_] 
        $T[call_stmt_248_sample_completed_] 
        $T[call_stmt_248_update_start_] 
        $T[call_stmt_248_update_completed_] 
        ;;[call_stmt_248_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_248_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_248_sample_start_ &-> (call_stmt_248_Sample)
        call_stmt_248_sample_completed_ <-& (call_stmt_248_Sample)
        call_stmt_248_sample_completed_ &-> ($null)
        call_stmt_248_update_start_ &-> (call_stmt_248_Update)
        call_stmt_248_update_completed_ <-& (call_stmt_248_Update)
        // end: 		$call progx_xoptx_xo_storage_initializer_ () () 
        // load-store dependencies..
      }
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %global_storage_initializer_%pb
    //  file prog.linked.opt.aa, line 109
    // constant-object-declarations for block %global_storage_initializer_
    //  file prog.linked.opt.aa, line 104
    // constant-declarations for block %global_storage_initializer_%pb
    //  file prog.linked.opt.aa, line 109
    // 		$call progx_xoptx_xo_storage_initializer_ () () 
    //  file prog.linked.opt.aa, line 111
    // block %global_storage_initializer_%pb
    //  file prog.linked.opt.aa, line 109
    // 		$call progx_xoptx_xo_storage_initializer_ () () 
    //  file prog.linked.opt.aa, line 111
    // datapath-instances for block %global_storage_initializer_%pb
    //  file prog.linked.opt.aa, line 109
    // 		$call progx_xoptx_xo_storage_initializer_ () () 
    //  file prog.linked.opt.aa, line 111
    $call [call_stmt_248_call] $module progx_xoptx_xo_storage_initializer_() ()  
    $delay call_stmt_248_call 4
  }
  // end data-path
  // 		$call progx_xoptx_xo_storage_initializer_ () () 
  //  file prog.linked.opt.aa, line 111
  call_stmt_248_call <=> (parallel_block_stmt_247/call_stmt_248/call_stmt_248_Sample/crr parallel_block_stmt_247/call_stmt_248/call_stmt_248_Update/ccr) (parallel_block_stmt_247/call_stmt_248/call_stmt_248_Sample/cra parallel_block_stmt_247/call_stmt_248/call_stmt_248_Update/cca)
}
$pipeline $depth 8 $buffering 1 $fullrate $module [readModule_maxPool] 
{
  $in index:$int<8>
  // can point into  foreign( $void )
  address:$int<32>
  // can point into  foreign( $void )
  $out data:$int<64>
  // can point into 
  // pipe-declarations for block %readModule_maxPool
  //  file prog.linked.opt.aa, line 114
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // pipelined module
    :|:[call_stmt_261] 
    {
      $T [index_update_enable] 
      $T [index_update_enable_out] 
      index_update_enable &-> (index_update_enable_out)
      $null &-> (index_update_enable)
      $T [address_update_enable] 
      $T [address_update_enable_out] 
      address_update_enable &-> (address_update_enable_out)
      $null &-> (address_update_enable)
      $T [data_update_enable] 
      $T [data_update_enable_in] 
      $null &-> (data_update_enable)
      $null <-& (data_update_enable_in) 
      $null &-> (data_update_enable)
      data_update_enable <-& (data_update_enable_in) 
      // start: 	$call memoryModule (1  (0  + address) 0  ) (data ) 
      //  file prog.linked.opt.aa, line 119
      $T[call_stmt_261_sample_start_] 
      $T[call_stmt_261_sample_completed_] 
      $T[call_stmt_261_update_start_] 
      $T[call_stmt_261_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // (0  + address)
      // address
      // Call input argument 2
      // start: Forward dependencies from (0  + address) to transition call_stmt_261_sample_start_
      call_stmt_261_sample_start_ <-& ($entry)
      // done: Forward dependencies from (0  + address) to transition call_stmt_261_sample_start_
      // RAW reenables for (0  + address)
      address_update_enable o<-& (call_stmt_261_sample_completed_ 0)
      ;;[call_stmt_261_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_261_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_261_sample_start_ &-> (call_stmt_261_Sample)
      call_stmt_261_sample_completed_ <-& (call_stmt_261_Sample)
      call_stmt_261_sample_completed_ &-> ($null)
      call_stmt_261_update_start_ &-> (call_stmt_261_Update)
      call_stmt_261_update_completed_ <-& (call_stmt_261_Update)
      // Call output argument 0
      // (as target) data
      // data
      // write to interface object
      // data
      // write to interface object
      call_stmt_261_update_start_ <-& (data_update_enable)
      // self-release: 
      call_stmt_261_sample_start_ o<-& (call_stmt_261_sample_completed_ 1)
      $null &-> (call_stmt_261_update_start_)
      call_stmt_261_update_start_ o<-& (call_stmt_261_update_completed_ 0)
      // start: WAR dependencies for data
      // done: WAR dependencies for data
      // end: 	$call memoryModule (1  (0  + address) 0  ) (data ) 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MAIN_MEM_REQUEST
      // read-dependencies for pipe MAIN_MEM_REQUEST
      // write-dependencies for pipe MAIN_MEM_REQUEST
      // signal write dependencies for MAIN_MEM_REQUEST
      // pipe read/write dependencies for pipe MAIN_MEM_RESPONSE
      // read-dependencies for pipe MAIN_MEM_RESPONSE
      // write-dependencies for pipe MAIN_MEM_RESPONSE
      // signal write dependencies for MAIN_MEM_RESPONSE
    }
    ( data_update_enable_in)
    ( index_update_enable_out address_update_enable_out)
    $P [index_update_enable] 
    $P [address_update_enable] 
    $P [data_update_enable] 
    $bind index_update_enable <= call_stmt_261 : index_update_enable_out
    $bind address_update_enable <= call_stmt_261 : address_update_enable_out
    $bind data_update_enable => call_stmt_261 : data_update_enable_in
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %readModule_maxPool
    //  file prog.linked.opt.aa, line 114
    // 	$call memoryModule (1  (0  + address) 0  ) (data ) 
    //  file prog.linked.opt.aa, line 119
    // 1 
    $constant $W[konst_255_wire_constant] : $int<1> := _b1// 1
    // 0 
    $constant $W[konst_256_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // 0 
    $constant $W[konst_259_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // 	$call memoryModule (1  (0  + address) 0  ) (data ) 
    //  file prog.linked.opt.aa, line 119
    // (0  + address)
    $intermediate $W[ADD_u32_u32_258_wire] : $int<32>
    // data
    // 	$call memoryModule (1  (0  + address) 0  ) (data ) 
    //  file prog.linked.opt.aa, line 119
    // (0  + address)
    +[ADD_u32_u32_258_inst] (konst_256_wire_constant address) (ADD_u32_u32_258_wire)   $flowthrough 
    $delay ADD_u32_u32_258_inst 0
    $call [call_stmt_261_call] $module memoryModule(konst_255_wire_constant ADD_u32_u32_258_wire konst_259_wire_constant) (data)   $fullrate
    $delay call_stmt_261_call 4
    $buffering  $in call_stmt_261_call konst_255_wire_constant 1
    $buffering  $in call_stmt_261_call ADD_u32_u32_258_wire 1
    $buffering  $in call_stmt_261_call konst_259_wire_constant 1
    $buffering  $out call_stmt_261_call data 1
  }
  // end data-path
  // 	$call memoryModule (1  (0  + address) 0  ) (data ) 
  //  file prog.linked.opt.aa, line 119
  // (0  + address)
  // address
  call_stmt_261_call <=> (call_stmt_261/call_stmt_261_Sample/crr call_stmt_261/call_stmt_261_Update/ccr) (call_stmt_261/call_stmt_261_Sample/cra call_stmt_261/call_stmt_261_Update/cca)
  $attribute delay => "6"
}
$pipeline $depth 8 $buffering 1 $fullrate $module [writeModule_maxPool] 
{
  $in index:$int<8>
  // can point into  foreign( $void )
  address:$int<32>
  // can point into 
  data:$int<64>
  // can point into 
  $out done:$int<1>
  // can point into  foreign( $void )
  // pipe-declarations for block %writeModule_maxPool
  //  file prog.linked.opt.aa, line 122
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // pipelined module
    :|:[call_stmt_274_to_assign_stmt_279] 
    {
      $T [index_update_enable] 
      $T [index_update_enable_out] 
      index_update_enable &-> (index_update_enable_out)
      $null &-> (index_update_enable)
      $T [address_update_enable] 
      $T [address_update_enable_out] 
      address_update_enable &-> (address_update_enable_out)
      $null &-> (address_update_enable)
      $T [data_update_enable] 
      $T [data_update_enable_out] 
      data_update_enable &-> (data_update_enable_out)
      $null &-> (data_update_enable)
      $T [done_update_enable] 
      $T [done_update_enable_in] 
      $null &-> (done_update_enable)
      $null <-& (done_update_enable_in) 
      $null &-> (done_update_enable)
      done_update_enable <-& (done_update_enable_in) 
      // start: 	$call memoryModule (0  (0  + address) data ) (out1 ) 
      //  file prog.linked.opt.aa, line 127
      $T[call_stmt_274_sample_start_] 
      $T[call_stmt_274_sample_completed_] 
      $T[call_stmt_274_update_start_] 
      $T[call_stmt_274_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // (0  + address)
      // address
      // Call input argument 2
      // data
      // start: Forward dependencies from (0  + address) to transition call_stmt_274_sample_start_
      call_stmt_274_sample_start_ <-& ($entry)
      // done: Forward dependencies from (0  + address) to transition call_stmt_274_sample_start_
      // RAW reenables for (0  + address)
      address_update_enable o<-& (call_stmt_274_sample_completed_ 0)
      // start: Forward dependencies from data to transition call_stmt_274_sample_start_
      call_stmt_274_sample_start_ <-& ($entry)
      // done: Forward dependencies from data to transition call_stmt_274_sample_start_
      // RAW reenables for data
      data_update_enable o<-& (call_stmt_274_sample_completed_ 0)
      ;;[call_stmt_274_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_274_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_274_sample_start_ &-> (call_stmt_274_Sample)
      call_stmt_274_sample_completed_ <-& (call_stmt_274_Sample)
      call_stmt_274_sample_completed_ &-> ($null)
      call_stmt_274_update_start_ &-> (call_stmt_274_Update)
      call_stmt_274_update_completed_ <-& (call_stmt_274_Update)
      // Call output argument 0
      // (as target) out1
      // self-release: 
      call_stmt_274_sample_start_ o<-& (call_stmt_274_sample_completed_ 1)
      $null &-> (call_stmt_274_update_start_)
      call_stmt_274_update_start_ o<-& (call_stmt_274_update_completed_ 0)
      // start: WAR dependencies for out1
      // done: WAR dependencies for out1
      // end: 	$call memoryModule (0  (0  + address) data ) (out1 ) 
      // start:  	done := (index [] 0 ) $buffering 1// bits of buffering = 1. 
      //  file prog.linked.opt.aa, line 128
      // Source expression
      // (index [] 0 )
      $T[BITSEL_u8_u1_278_sample_start_] 
      $T[BITSEL_u8_u1_278_sample_completed_] 
      $T[BITSEL_u8_u1_278_update_start_] 
      $T[BITSEL_u8_u1_278_update_completed_] 
      // index
      // start: Forward dependencies from index to transition BITSEL_u8_u1_278_sample_start_
      BITSEL_u8_u1_278_sample_start_ <-& ($entry)
      // done: Forward dependencies from index to transition BITSEL_u8_u1_278_sample_start_
      ;;[BITSEL_u8_u1_278_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[BITSEL_u8_u1_278_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      BITSEL_u8_u1_278_sample_start_ &-> (BITSEL_u8_u1_278_Sample)
      BITSEL_u8_u1_278_sample_completed_ <-& (BITSEL_u8_u1_278_Sample)
      BITSEL_u8_u1_278_sample_completed_ &-> ($null)
      BITSEL_u8_u1_278_update_start_ &-> (BITSEL_u8_u1_278_Update)
      BITSEL_u8_u1_278_update_completed_ <-& (BITSEL_u8_u1_278_Update)
      // RAW reenables for index
      index_update_enable o<-& (BITSEL_u8_u1_278_sample_completed_ 0)
      // self-release: 
      BITSEL_u8_u1_278_sample_start_ o<-& (BITSEL_u8_u1_278_sample_completed_ 1)
      $null &-> (BITSEL_u8_u1_278_update_start_)
      BITSEL_u8_u1_278_update_start_ o<-& (BITSEL_u8_u1_278_update_completed_ 0)
      // Target expression
      // (as target) done
      // done
      // write to interface object
      // start: WAR dependencies for done
      // done: WAR dependencies for done
      // done
      // write to interface object
      BITSEL_u8_u1_278_update_start_ <-& (done_update_enable)
      // end:  	done := (index [] 0 ) $buffering 1// bits of buffering = 1. 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MAIN_MEM_REQUEST
      // read-dependencies for pipe MAIN_MEM_REQUEST
      // write-dependencies for pipe MAIN_MEM_REQUEST
      // signal write dependencies for MAIN_MEM_REQUEST
      // pipe read/write dependencies for pipe MAIN_MEM_RESPONSE
      // read-dependencies for pipe MAIN_MEM_RESPONSE
      // write-dependencies for pipe MAIN_MEM_RESPONSE
      // signal write dependencies for MAIN_MEM_RESPONSE
    }
    ( done_update_enable_in)
    ( index_update_enable_out address_update_enable_out data_update_enable_out)
    $P [index_update_enable] 
    $P [address_update_enable] 
    $P [data_update_enable] 
    $P [done_update_enable] 
    $bind index_update_enable <= call_stmt_274_to_assign_stmt_279 : index_update_enable_out
    $bind address_update_enable <= call_stmt_274_to_assign_stmt_279 : address_update_enable_out
    $bind data_update_enable <= call_stmt_274_to_assign_stmt_279 : data_update_enable_out
    $bind done_update_enable => call_stmt_274_to_assign_stmt_279 : done_update_enable_in
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %writeModule_maxPool
    //  file prog.linked.opt.aa, line 122
    // 	$call memoryModule (0  (0  + address) data ) (out1 ) 
    //  file prog.linked.opt.aa, line 127
    // 0 
    $constant $W[konst_268_wire_constant] : $int<1> := _b0// 0
    // 0 
    $constant $W[konst_269_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // 0 
    $constant $W[konst_277_wire_constant] : $int<8> := _b00000000// 0
    // 	$call memoryModule (0  (0  + address) data ) (out1 ) 
    //  file prog.linked.opt.aa, line 127
    // (0  + address)
    $intermediate $W[ADD_u32_u32_271_wire] : $int<32>
    // out1
    $W[out1_274] : $int<64>
    // 	done := (index [] 0 ) $buffering 1// bits of buffering = 1. 
    //  file prog.linked.opt.aa, line 128
    // done
    // 	$call memoryModule (0  (0  + address) data ) (out1 ) 
    //  file prog.linked.opt.aa, line 127
    // (0  + address)
    +[ADD_u32_u32_271_inst] (konst_269_wire_constant address) (ADD_u32_u32_271_wire)   $flowthrough 
    $delay ADD_u32_u32_271_inst 0
    $call [call_stmt_274_call] $module memoryModule(konst_268_wire_constant ADD_u32_u32_271_wire data) (out1_274)   $fullrate
    $delay call_stmt_274_call 4
    $buffering  $in call_stmt_274_call konst_268_wire_constant 1
    $buffering  $in call_stmt_274_call ADD_u32_u32_271_wire 1
    $buffering  $in call_stmt_274_call data 1
    $buffering  $out call_stmt_274_call out1_274 1
    // 	done := (index [] 0 ) $buffering 1// bits of buffering = 1. 
    //  file prog.linked.opt.aa, line 128
    // (index [] 0 )
    [][BITSEL_u8_u1_278_inst] (index konst_277_wire_constant) (done)    $fullrate
    $buffering  $out BITSEL_u8_u1_278_inst done 1
    $delay BITSEL_u8_u1_278_inst 1
  }
  // end data-path
  // 	$call memoryModule (0  (0  + address) data ) (out1 ) 
  //  file prog.linked.opt.aa, line 127
  // (0  + address)
  // address
  // data
  call_stmt_274_call <=> (call_stmt_274_to_assign_stmt_279/call_stmt_274_Sample/crr call_stmt_274_to_assign_stmt_279/call_stmt_274_Update/ccr) (call_stmt_274_to_assign_stmt_279/call_stmt_274_Sample/cra call_stmt_274_to_assign_stmt_279/call_stmt_274_Update/cca)
  // 	done := (index [] 0 ) $buffering 1// bits of buffering = 1. 
  //  file prog.linked.opt.aa, line 128
  // (index [] 0 )
  // index
  BITSEL_u8_u1_278_inst <=> (call_stmt_274_to_assign_stmt_279/BITSEL_u8_u1_278_Sample/rr call_stmt_274_to_assign_stmt_279/BITSEL_u8_u1_278_Update/cr) (call_stmt_274_to_assign_stmt_279/BITSEL_u8_u1_278_Sample/ra call_stmt_274_to_assign_stmt_279/BITSEL_u8_u1_278_Update/ca)
  $attribute delay => "6"
}
$pipeline $depth 15 $buffering 1 $fullrate $module [maxPool4] 
{
  $in addr:$int<32>
  // can point into 
  addr1:$int<32>
  // can point into  foreign( $void )
  addr2:$int<32>
  // can point into  foreign( $void )
  addr3:$int<32>
  // can point into  foreign( $void )
  addr4:$int<32>
  // can point into  foreign( $void )
  index1:$int<8>
  // can point into  foreign( $void )
  index2:$int<8>
  // can point into  foreign( $void )
  $out output:$int<8>
  // can point into 
  // pipe-declarations for block %maxPool4
  //  file prog.linked.opt.aa, line 131
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // pipelined module
    :|:[call_stmt_293_to_assign_stmt_792] 
    {
      $T [addr_update_enable] 
      $T [addr_update_enable_out] 
      addr_update_enable &-> (addr_update_enable_out)
      $null &-> (addr_update_enable)
      $T [addr1_update_enable] 
      $T [addr1_update_enable_out] 
      addr1_update_enable &-> (addr1_update_enable_out)
      $null &-> (addr1_update_enable)
      $T [addr2_update_enable] 
      $T [addr2_update_enable_out] 
      addr2_update_enable &-> (addr2_update_enable_out)
      $null &-> (addr2_update_enable)
      $T [addr3_update_enable] 
      $T [addr3_update_enable_out] 
      addr3_update_enable &-> (addr3_update_enable_out)
      $null &-> (addr3_update_enable)
      $T [addr4_update_enable] 
      $T [addr4_update_enable_out] 
      addr4_update_enable &-> (addr4_update_enable_out)
      $null &-> (addr4_update_enable)
      $T [index1_update_enable] 
      $T [index1_update_enable_out] 
      index1_update_enable &-> (index1_update_enable_out)
      $null &-> (index1_update_enable)
      $T [index2_update_enable] 
      $T [index2_update_enable_out] 
      index2_update_enable &-> (index2_update_enable_out)
      $null &-> (index2_update_enable)
      $T [output_update_enable] 
      $T [output_update_enable_in] 
      $null &-> (output_update_enable)
      $null <-& (output_update_enable_in) 
      $null &-> (output_update_enable)
      output_update_enable <-& (output_update_enable_in) 
      // start: 	$call readModule_maxPool (index1 addr1 ) (c1 ) 
      //  file prog.linked.opt.aa, line 136
      $T[call_stmt_293_sample_start_] 
      $T[call_stmt_293_sample_completed_] 
      $T[call_stmt_293_update_start_] 
      $T[call_stmt_293_update_completed_] 
      // Call input argument 0
      // index1
      // Call input argument 1
      // addr1
      // start: Forward dependencies from index1 to transition call_stmt_293_sample_start_
      call_stmt_293_sample_start_ <-& ($entry)
      // done: Forward dependencies from index1 to transition call_stmt_293_sample_start_
      // RAW reenables for index1
      index1_update_enable o<-& (call_stmt_293_sample_completed_ 0)
      // start: Forward dependencies from addr1 to transition call_stmt_293_sample_start_
      call_stmt_293_sample_start_ <-& ($entry)
      // done: Forward dependencies from addr1 to transition call_stmt_293_sample_start_
      // RAW reenables for addr1
      addr1_update_enable o<-& (call_stmt_293_sample_completed_ 0)
      ;;[call_stmt_293_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_293_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_293_sample_start_ &-> (call_stmt_293_Sample)
      call_stmt_293_sample_completed_ <-& (call_stmt_293_Sample)
      call_stmt_293_sample_completed_ &-> ($null)
      call_stmt_293_update_start_ &-> (call_stmt_293_Update)
      call_stmt_293_update_completed_ <-& (call_stmt_293_Update)
      // Call output argument 0
      // (as target) c1
      // self-release: 
      call_stmt_293_sample_start_ o<-& (call_stmt_293_sample_completed_ 1)
      $null &-> (call_stmt_293_update_start_)
      call_stmt_293_update_start_ o<-& (call_stmt_293_update_completed_ 0)
      // start: WAR dependencies for c1
      // done: WAR dependencies for c1
      // end: 	$call readModule_maxPool (index1 addr1 ) (c1 ) 
      // start: 	$call readModule_maxPool (index1 addr2 ) (c2 ) 
      //  file prog.linked.opt.aa, line 137
      $T[call_stmt_297_sample_start_] 
      $T[call_stmt_297_sample_completed_] 
      $T[call_stmt_297_update_start_] 
      $T[call_stmt_297_update_completed_] 
      // Call input argument 0
      // index1
      // Call input argument 1
      // addr2
      // start: Forward dependencies from index1 to transition call_stmt_297_sample_start_
      call_stmt_297_sample_start_ <-& ($entry)
      // done: Forward dependencies from index1 to transition call_stmt_297_sample_start_
      // RAW reenables for index1
      index1_update_enable o<-& (call_stmt_297_sample_completed_ 0)
      // start: Forward dependencies from addr2 to transition call_stmt_297_sample_start_
      call_stmt_297_sample_start_ <-& ($entry)
      // done: Forward dependencies from addr2 to transition call_stmt_297_sample_start_
      // RAW reenables for addr2
      addr2_update_enable o<-& (call_stmt_297_sample_completed_ 0)
      ;;[call_stmt_297_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_297_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_297_sample_start_ &-> (call_stmt_297_Sample)
      call_stmt_297_sample_completed_ <-& (call_stmt_297_Sample)
      call_stmt_297_sample_completed_ &-> ($null)
      call_stmt_297_update_start_ &-> (call_stmt_297_Update)
      call_stmt_297_update_completed_ <-& (call_stmt_297_Update)
      // Call output argument 0
      // (as target) c2
      // self-release: 
      call_stmt_297_sample_start_ o<-& (call_stmt_297_sample_completed_ 1)
      $null &-> (call_stmt_297_update_start_)
      call_stmt_297_update_start_ o<-& (call_stmt_297_update_completed_ 0)
      // start: WAR dependencies for c2
      // done: WAR dependencies for c2
      // end: 	$call readModule_maxPool (index1 addr2 ) (c2 ) 
      // start: 	$call readModule_maxPool (index1 addr3 ) (c3 ) 
      //  file prog.linked.opt.aa, line 138
      $T[call_stmt_301_sample_start_] 
      $T[call_stmt_301_sample_completed_] 
      $T[call_stmt_301_update_start_] 
      $T[call_stmt_301_update_completed_] 
      // Call input argument 0
      // index1
      // Call input argument 1
      // addr3
      // start: Forward dependencies from index1 to transition call_stmt_301_sample_start_
      call_stmt_301_sample_start_ <-& ($entry)
      // done: Forward dependencies from index1 to transition call_stmt_301_sample_start_
      // RAW reenables for index1
      index1_update_enable o<-& (call_stmt_301_sample_completed_ 0)
      // start: Forward dependencies from addr3 to transition call_stmt_301_sample_start_
      call_stmt_301_sample_start_ <-& ($entry)
      // done: Forward dependencies from addr3 to transition call_stmt_301_sample_start_
      // RAW reenables for addr3
      addr3_update_enable o<-& (call_stmt_301_sample_completed_ 0)
      ;;[call_stmt_301_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_301_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_301_sample_start_ &-> (call_stmt_301_Sample)
      call_stmt_301_sample_completed_ <-& (call_stmt_301_Sample)
      call_stmt_301_sample_completed_ &-> ($null)
      call_stmt_301_update_start_ &-> (call_stmt_301_Update)
      call_stmt_301_update_completed_ <-& (call_stmt_301_Update)
      // Call output argument 0
      // (as target) c3
      // self-release: 
      call_stmt_301_sample_start_ o<-& (call_stmt_301_sample_completed_ 1)
      $null &-> (call_stmt_301_update_start_)
      call_stmt_301_update_start_ o<-& (call_stmt_301_update_completed_ 0)
      // start: WAR dependencies for c3
      // done: WAR dependencies for c3
      // end: 	$call readModule_maxPool (index1 addr3 ) (c3 ) 
      // start: 	$call readModule_maxPool (index1 addr4 ) (c4 ) 
      //  file prog.linked.opt.aa, line 139
      $T[call_stmt_305_sample_start_] 
      $T[call_stmt_305_sample_completed_] 
      $T[call_stmt_305_update_start_] 
      $T[call_stmt_305_update_completed_] 
      // Call input argument 0
      // index1
      // Call input argument 1
      // addr4
      // start: Forward dependencies from index1 to transition call_stmt_305_sample_start_
      call_stmt_305_sample_start_ <-& ($entry)
      // done: Forward dependencies from index1 to transition call_stmt_305_sample_start_
      // RAW reenables for index1
      index1_update_enable o<-& (call_stmt_305_sample_completed_ 0)
      // start: Forward dependencies from addr4 to transition call_stmt_305_sample_start_
      call_stmt_305_sample_start_ <-& ($entry)
      // done: Forward dependencies from addr4 to transition call_stmt_305_sample_start_
      // RAW reenables for addr4
      addr4_update_enable o<-& (call_stmt_305_sample_completed_ 0)
      ;;[call_stmt_305_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_305_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_305_sample_start_ &-> (call_stmt_305_Sample)
      call_stmt_305_sample_completed_ <-& (call_stmt_305_Sample)
      call_stmt_305_sample_completed_ &-> ($null)
      call_stmt_305_update_start_ &-> (call_stmt_305_Update)
      call_stmt_305_update_completed_ <-& (call_stmt_305_Update)
      // Call output argument 0
      // (as target) c4
      // self-release: 
      call_stmt_305_sample_start_ o<-& (call_stmt_305_sample_completed_ 1)
      $null &-> (call_stmt_305_update_start_)
      call_stmt_305_update_start_ o<-& (call_stmt_305_update_completed_ 0)
      // start: WAR dependencies for c4
      // done: WAR dependencies for c4
      // end: 	$call readModule_maxPool (index1 addr4 ) (c4 ) 
      // start:  	sliced_v11 := ( $slice c1 63 56 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 140
      // Source expression
      // ( $slice c1 63 56 ) 
      $T[slice_308_sample_start_] 
      $T[slice_308_sample_completed_] 
      $T[slice_308_update_start_] 
      $T[slice_308_update_completed_] 
      // c1
      // start: Forward dependencies from c1 to transition slice_308_sample_start_
      slice_308_sample_start_ <-& (call_stmt_293_update_completed_)
      // done: Forward dependencies from c1 to transition slice_308_sample_start_
      ;;[slice_308_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_308_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_308_sample_start_ &-> (slice_308_Sample)
      slice_308_sample_completed_ <-& (slice_308_Sample)
      slice_308_sample_completed_ &-> ($null)
      slice_308_update_start_ &-> (slice_308_Update)
      slice_308_update_completed_ <-& (slice_308_Update)
      // RAW reenables for c1
      call_stmt_293_update_start_ o<-& (slice_308_sample_completed_ 0)
      // self-release: 
      slice_308_sample_start_ o<-& (slice_308_sample_completed_ 1)
      $null &-> (slice_308_update_start_)
      slice_308_update_start_ o<-& (slice_308_update_completed_ 0)
      // Target expression
      // (as target) sliced_v11
      // start: WAR dependencies for sliced_v11
      // done: WAR dependencies for sliced_v11
      // end:  	sliced_v11 := ( $slice c1 63 56 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v12 := ( $slice c1 55 48 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 141
      // Source expression
      // ( $slice c1 55 48 ) 
      $T[slice_312_sample_start_] 
      $T[slice_312_sample_completed_] 
      $T[slice_312_update_start_] 
      $T[slice_312_update_completed_] 
      // c1
      // start: Forward dependencies from c1 to transition slice_312_sample_start_
      slice_312_sample_start_ <-& (call_stmt_293_update_completed_)
      // done: Forward dependencies from c1 to transition slice_312_sample_start_
      ;;[slice_312_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_312_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_312_sample_start_ &-> (slice_312_Sample)
      slice_312_sample_completed_ <-& (slice_312_Sample)
      slice_312_sample_completed_ &-> ($null)
      slice_312_update_start_ &-> (slice_312_Update)
      slice_312_update_completed_ <-& (slice_312_Update)
      // RAW reenables for c1
      call_stmt_293_update_start_ o<-& (slice_312_sample_completed_ 0)
      // self-release: 
      slice_312_sample_start_ o<-& (slice_312_sample_completed_ 1)
      $null &-> (slice_312_update_start_)
      slice_312_update_start_ o<-& (slice_312_update_completed_ 0)
      // Target expression
      // (as target) sliced_v12
      // start: WAR dependencies for sliced_v12
      // done: WAR dependencies for sliced_v12
      // end:  	sliced_v12 := ( $slice c1 55 48 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v13 := ( $slice c1 47 40 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 142
      // Source expression
      // ( $slice c1 47 40 ) 
      $T[slice_316_sample_start_] 
      $T[slice_316_sample_completed_] 
      $T[slice_316_update_start_] 
      $T[slice_316_update_completed_] 
      // c1
      // start: Forward dependencies from c1 to transition slice_316_sample_start_
      slice_316_sample_start_ <-& (call_stmt_293_update_completed_)
      // done: Forward dependencies from c1 to transition slice_316_sample_start_
      ;;[slice_316_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_316_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_316_sample_start_ &-> (slice_316_Sample)
      slice_316_sample_completed_ <-& (slice_316_Sample)
      slice_316_sample_completed_ &-> ($null)
      slice_316_update_start_ &-> (slice_316_Update)
      slice_316_update_completed_ <-& (slice_316_Update)
      // RAW reenables for c1
      call_stmt_293_update_start_ o<-& (slice_316_sample_completed_ 0)
      // self-release: 
      slice_316_sample_start_ o<-& (slice_316_sample_completed_ 1)
      $null &-> (slice_316_update_start_)
      slice_316_update_start_ o<-& (slice_316_update_completed_ 0)
      // Target expression
      // (as target) sliced_v13
      // start: WAR dependencies for sliced_v13
      // done: WAR dependencies for sliced_v13
      // end:  	sliced_v13 := ( $slice c1 47 40 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v14 := ( $slice c1 39 32 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 143
      // Source expression
      // ( $slice c1 39 32 ) 
      $T[slice_320_sample_start_] 
      $T[slice_320_sample_completed_] 
      $T[slice_320_update_start_] 
      $T[slice_320_update_completed_] 
      // c1
      // start: Forward dependencies from c1 to transition slice_320_sample_start_
      slice_320_sample_start_ <-& (call_stmt_293_update_completed_)
      // done: Forward dependencies from c1 to transition slice_320_sample_start_
      ;;[slice_320_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_320_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_320_sample_start_ &-> (slice_320_Sample)
      slice_320_sample_completed_ <-& (slice_320_Sample)
      slice_320_sample_completed_ &-> ($null)
      slice_320_update_start_ &-> (slice_320_Update)
      slice_320_update_completed_ <-& (slice_320_Update)
      // RAW reenables for c1
      call_stmt_293_update_start_ o<-& (slice_320_sample_completed_ 0)
      // self-release: 
      slice_320_sample_start_ o<-& (slice_320_sample_completed_ 1)
      $null &-> (slice_320_update_start_)
      slice_320_update_start_ o<-& (slice_320_update_completed_ 0)
      // Target expression
      // (as target) sliced_v14
      // start: WAR dependencies for sliced_v14
      // done: WAR dependencies for sliced_v14
      // end:  	sliced_v14 := ( $slice c1 39 32 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v15 := ( $slice c1 31 24 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 144
      // Source expression
      // ( $slice c1 31 24 ) 
      $T[slice_324_sample_start_] 
      $T[slice_324_sample_completed_] 
      $T[slice_324_update_start_] 
      $T[slice_324_update_completed_] 
      // c1
      // start: Forward dependencies from c1 to transition slice_324_sample_start_
      slice_324_sample_start_ <-& (call_stmt_293_update_completed_)
      // done: Forward dependencies from c1 to transition slice_324_sample_start_
      ;;[slice_324_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_324_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_324_sample_start_ &-> (slice_324_Sample)
      slice_324_sample_completed_ <-& (slice_324_Sample)
      slice_324_sample_completed_ &-> ($null)
      slice_324_update_start_ &-> (slice_324_Update)
      slice_324_update_completed_ <-& (slice_324_Update)
      // RAW reenables for c1
      call_stmt_293_update_start_ o<-& (slice_324_sample_completed_ 0)
      // self-release: 
      slice_324_sample_start_ o<-& (slice_324_sample_completed_ 1)
      $null &-> (slice_324_update_start_)
      slice_324_update_start_ o<-& (slice_324_update_completed_ 0)
      // Target expression
      // (as target) sliced_v15
      // start: WAR dependencies for sliced_v15
      // done: WAR dependencies for sliced_v15
      // end:  	sliced_v15 := ( $slice c1 31 24 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v16 := ( $slice c1 23 16 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 145
      // Source expression
      // ( $slice c1 23 16 ) 
      $T[slice_328_sample_start_] 
      $T[slice_328_sample_completed_] 
      $T[slice_328_update_start_] 
      $T[slice_328_update_completed_] 
      // c1
      // start: Forward dependencies from c1 to transition slice_328_sample_start_
      slice_328_sample_start_ <-& (call_stmt_293_update_completed_)
      // done: Forward dependencies from c1 to transition slice_328_sample_start_
      ;;[slice_328_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_328_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_328_sample_start_ &-> (slice_328_Sample)
      slice_328_sample_completed_ <-& (slice_328_Sample)
      slice_328_sample_completed_ &-> ($null)
      slice_328_update_start_ &-> (slice_328_Update)
      slice_328_update_completed_ <-& (slice_328_Update)
      // RAW reenables for c1
      call_stmt_293_update_start_ o<-& (slice_328_sample_completed_ 0)
      // self-release: 
      slice_328_sample_start_ o<-& (slice_328_sample_completed_ 1)
      $null &-> (slice_328_update_start_)
      slice_328_update_start_ o<-& (slice_328_update_completed_ 0)
      // Target expression
      // (as target) sliced_v16
      // start: WAR dependencies for sliced_v16
      // done: WAR dependencies for sliced_v16
      // end:  	sliced_v16 := ( $slice c1 23 16 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v17 := ( $slice c1 15 8 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 146
      // Source expression
      // ( $slice c1 15 8 ) 
      $T[slice_332_sample_start_] 
      $T[slice_332_sample_completed_] 
      $T[slice_332_update_start_] 
      $T[slice_332_update_completed_] 
      // c1
      // start: Forward dependencies from c1 to transition slice_332_sample_start_
      slice_332_sample_start_ <-& (call_stmt_293_update_completed_)
      // done: Forward dependencies from c1 to transition slice_332_sample_start_
      ;;[slice_332_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_332_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_332_sample_start_ &-> (slice_332_Sample)
      slice_332_sample_completed_ <-& (slice_332_Sample)
      slice_332_sample_completed_ &-> ($null)
      slice_332_update_start_ &-> (slice_332_Update)
      slice_332_update_completed_ <-& (slice_332_Update)
      // RAW reenables for c1
      call_stmt_293_update_start_ o<-& (slice_332_sample_completed_ 0)
      // self-release: 
      slice_332_sample_start_ o<-& (slice_332_sample_completed_ 1)
      $null &-> (slice_332_update_start_)
      slice_332_update_start_ o<-& (slice_332_update_completed_ 0)
      // Target expression
      // (as target) sliced_v17
      // start: WAR dependencies for sliced_v17
      // done: WAR dependencies for sliced_v17
      // end:  	sliced_v17 := ( $slice c1 15 8 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v18 := ( $slice c1 7 0 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 147
      // Source expression
      // ( $slice c1 7 0 ) 
      $T[slice_336_sample_start_] 
      $T[slice_336_sample_completed_] 
      $T[slice_336_update_start_] 
      $T[slice_336_update_completed_] 
      // c1
      // start: Forward dependencies from c1 to transition slice_336_sample_start_
      slice_336_sample_start_ <-& (call_stmt_293_update_completed_)
      // done: Forward dependencies from c1 to transition slice_336_sample_start_
      ;;[slice_336_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_336_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_336_sample_start_ &-> (slice_336_Sample)
      slice_336_sample_completed_ <-& (slice_336_Sample)
      slice_336_sample_completed_ &-> ($null)
      slice_336_update_start_ &-> (slice_336_Update)
      slice_336_update_completed_ <-& (slice_336_Update)
      // RAW reenables for c1
      call_stmt_293_update_start_ o<-& (slice_336_sample_completed_ 0)
      // self-release: 
      slice_336_sample_start_ o<-& (slice_336_sample_completed_ 1)
      $null &-> (slice_336_update_start_)
      slice_336_update_start_ o<-& (slice_336_update_completed_ 0)
      // Target expression
      // (as target) sliced_v18
      // start: WAR dependencies for sliced_v18
      // done: WAR dependencies for sliced_v18
      // end:  	sliced_v18 := ( $slice c1 7 0 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v21 := ( $slice c2 63 56 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 148
      // Source expression
      // ( $slice c2 63 56 ) 
      $T[slice_340_sample_start_] 
      $T[slice_340_sample_completed_] 
      $T[slice_340_update_start_] 
      $T[slice_340_update_completed_] 
      // c2
      // start: Forward dependencies from c2 to transition slice_340_sample_start_
      slice_340_sample_start_ <-& (call_stmt_297_update_completed_)
      // done: Forward dependencies from c2 to transition slice_340_sample_start_
      ;;[slice_340_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_340_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_340_sample_start_ &-> (slice_340_Sample)
      slice_340_sample_completed_ <-& (slice_340_Sample)
      slice_340_sample_completed_ &-> ($null)
      slice_340_update_start_ &-> (slice_340_Update)
      slice_340_update_completed_ <-& (slice_340_Update)
      // RAW reenables for c2
      call_stmt_297_update_start_ o<-& (slice_340_sample_completed_ 0)
      // self-release: 
      slice_340_sample_start_ o<-& (slice_340_sample_completed_ 1)
      $null &-> (slice_340_update_start_)
      slice_340_update_start_ o<-& (slice_340_update_completed_ 0)
      // Target expression
      // (as target) sliced_v21
      // start: WAR dependencies for sliced_v21
      // done: WAR dependencies for sliced_v21
      // end:  	sliced_v21 := ( $slice c2 63 56 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v22 := ( $slice c2 55 48 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 149
      // Source expression
      // ( $slice c2 55 48 ) 
      $T[slice_344_sample_start_] 
      $T[slice_344_sample_completed_] 
      $T[slice_344_update_start_] 
      $T[slice_344_update_completed_] 
      // c2
      // start: Forward dependencies from c2 to transition slice_344_sample_start_
      slice_344_sample_start_ <-& (call_stmt_297_update_completed_)
      // done: Forward dependencies from c2 to transition slice_344_sample_start_
      ;;[slice_344_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_344_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_344_sample_start_ &-> (slice_344_Sample)
      slice_344_sample_completed_ <-& (slice_344_Sample)
      slice_344_sample_completed_ &-> ($null)
      slice_344_update_start_ &-> (slice_344_Update)
      slice_344_update_completed_ <-& (slice_344_Update)
      // RAW reenables for c2
      call_stmt_297_update_start_ o<-& (slice_344_sample_completed_ 0)
      // self-release: 
      slice_344_sample_start_ o<-& (slice_344_sample_completed_ 1)
      $null &-> (slice_344_update_start_)
      slice_344_update_start_ o<-& (slice_344_update_completed_ 0)
      // Target expression
      // (as target) sliced_v22
      // start: WAR dependencies for sliced_v22
      // done: WAR dependencies for sliced_v22
      // end:  	sliced_v22 := ( $slice c2 55 48 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v23 := ( $slice c2 47 40 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 150
      // Source expression
      // ( $slice c2 47 40 ) 
      $T[slice_348_sample_start_] 
      $T[slice_348_sample_completed_] 
      $T[slice_348_update_start_] 
      $T[slice_348_update_completed_] 
      // c2
      // start: Forward dependencies from c2 to transition slice_348_sample_start_
      slice_348_sample_start_ <-& (call_stmt_297_update_completed_)
      // done: Forward dependencies from c2 to transition slice_348_sample_start_
      ;;[slice_348_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_348_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_348_sample_start_ &-> (slice_348_Sample)
      slice_348_sample_completed_ <-& (slice_348_Sample)
      slice_348_sample_completed_ &-> ($null)
      slice_348_update_start_ &-> (slice_348_Update)
      slice_348_update_completed_ <-& (slice_348_Update)
      // RAW reenables for c2
      call_stmt_297_update_start_ o<-& (slice_348_sample_completed_ 0)
      // self-release: 
      slice_348_sample_start_ o<-& (slice_348_sample_completed_ 1)
      $null &-> (slice_348_update_start_)
      slice_348_update_start_ o<-& (slice_348_update_completed_ 0)
      // Target expression
      // (as target) sliced_v23
      // start: WAR dependencies for sliced_v23
      // done: WAR dependencies for sliced_v23
      // end:  	sliced_v23 := ( $slice c2 47 40 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v24 := ( $slice c2 39 32 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 151
      // Source expression
      // ( $slice c2 39 32 ) 
      $T[slice_352_sample_start_] 
      $T[slice_352_sample_completed_] 
      $T[slice_352_update_start_] 
      $T[slice_352_update_completed_] 
      // c2
      // start: Forward dependencies from c2 to transition slice_352_sample_start_
      slice_352_sample_start_ <-& (call_stmt_297_update_completed_)
      // done: Forward dependencies from c2 to transition slice_352_sample_start_
      ;;[slice_352_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_352_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_352_sample_start_ &-> (slice_352_Sample)
      slice_352_sample_completed_ <-& (slice_352_Sample)
      slice_352_sample_completed_ &-> ($null)
      slice_352_update_start_ &-> (slice_352_Update)
      slice_352_update_completed_ <-& (slice_352_Update)
      // RAW reenables for c2
      call_stmt_297_update_start_ o<-& (slice_352_sample_completed_ 0)
      // self-release: 
      slice_352_sample_start_ o<-& (slice_352_sample_completed_ 1)
      $null &-> (slice_352_update_start_)
      slice_352_update_start_ o<-& (slice_352_update_completed_ 0)
      // Target expression
      // (as target) sliced_v24
      // start: WAR dependencies for sliced_v24
      // done: WAR dependencies for sliced_v24
      // end:  	sliced_v24 := ( $slice c2 39 32 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v25 := ( $slice c2 31 24 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 152
      // Source expression
      // ( $slice c2 31 24 ) 
      $T[slice_356_sample_start_] 
      $T[slice_356_sample_completed_] 
      $T[slice_356_update_start_] 
      $T[slice_356_update_completed_] 
      // c2
      // start: Forward dependencies from c2 to transition slice_356_sample_start_
      slice_356_sample_start_ <-& (call_stmt_297_update_completed_)
      // done: Forward dependencies from c2 to transition slice_356_sample_start_
      ;;[slice_356_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_356_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_356_sample_start_ &-> (slice_356_Sample)
      slice_356_sample_completed_ <-& (slice_356_Sample)
      slice_356_sample_completed_ &-> ($null)
      slice_356_update_start_ &-> (slice_356_Update)
      slice_356_update_completed_ <-& (slice_356_Update)
      // RAW reenables for c2
      call_stmt_297_update_start_ o<-& (slice_356_sample_completed_ 0)
      // self-release: 
      slice_356_sample_start_ o<-& (slice_356_sample_completed_ 1)
      $null &-> (slice_356_update_start_)
      slice_356_update_start_ o<-& (slice_356_update_completed_ 0)
      // Target expression
      // (as target) sliced_v25
      // start: WAR dependencies for sliced_v25
      // done: WAR dependencies for sliced_v25
      // end:  	sliced_v25 := ( $slice c2 31 24 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v26 := ( $slice c2 23 16 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 153
      // Source expression
      // ( $slice c2 23 16 ) 
      $T[slice_360_sample_start_] 
      $T[slice_360_sample_completed_] 
      $T[slice_360_update_start_] 
      $T[slice_360_update_completed_] 
      // c2
      // start: Forward dependencies from c2 to transition slice_360_sample_start_
      slice_360_sample_start_ <-& (call_stmt_297_update_completed_)
      // done: Forward dependencies from c2 to transition slice_360_sample_start_
      ;;[slice_360_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_360_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_360_sample_start_ &-> (slice_360_Sample)
      slice_360_sample_completed_ <-& (slice_360_Sample)
      slice_360_sample_completed_ &-> ($null)
      slice_360_update_start_ &-> (slice_360_Update)
      slice_360_update_completed_ <-& (slice_360_Update)
      // RAW reenables for c2
      call_stmt_297_update_start_ o<-& (slice_360_sample_completed_ 0)
      // self-release: 
      slice_360_sample_start_ o<-& (slice_360_sample_completed_ 1)
      $null &-> (slice_360_update_start_)
      slice_360_update_start_ o<-& (slice_360_update_completed_ 0)
      // Target expression
      // (as target) sliced_v26
      // start: WAR dependencies for sliced_v26
      // done: WAR dependencies for sliced_v26
      // end:  	sliced_v26 := ( $slice c2 23 16 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v27 := ( $slice c2 15 8 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 154
      // Source expression
      // ( $slice c2 15 8 ) 
      $T[slice_364_sample_start_] 
      $T[slice_364_sample_completed_] 
      $T[slice_364_update_start_] 
      $T[slice_364_update_completed_] 
      // c2
      // start: Forward dependencies from c2 to transition slice_364_sample_start_
      slice_364_sample_start_ <-& (call_stmt_297_update_completed_)
      // done: Forward dependencies from c2 to transition slice_364_sample_start_
      ;;[slice_364_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_364_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_364_sample_start_ &-> (slice_364_Sample)
      slice_364_sample_completed_ <-& (slice_364_Sample)
      slice_364_sample_completed_ &-> ($null)
      slice_364_update_start_ &-> (slice_364_Update)
      slice_364_update_completed_ <-& (slice_364_Update)
      // RAW reenables for c2
      call_stmt_297_update_start_ o<-& (slice_364_sample_completed_ 0)
      // self-release: 
      slice_364_sample_start_ o<-& (slice_364_sample_completed_ 1)
      $null &-> (slice_364_update_start_)
      slice_364_update_start_ o<-& (slice_364_update_completed_ 0)
      // Target expression
      // (as target) sliced_v27
      // start: WAR dependencies for sliced_v27
      // done: WAR dependencies for sliced_v27
      // end:  	sliced_v27 := ( $slice c2 15 8 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v28 := ( $slice c2 7 0 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 155
      // Source expression
      // ( $slice c2 7 0 ) 
      $T[slice_368_sample_start_] 
      $T[slice_368_sample_completed_] 
      $T[slice_368_update_start_] 
      $T[slice_368_update_completed_] 
      // c2
      // start: Forward dependencies from c2 to transition slice_368_sample_start_
      slice_368_sample_start_ <-& (call_stmt_297_update_completed_)
      // done: Forward dependencies from c2 to transition slice_368_sample_start_
      ;;[slice_368_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_368_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_368_sample_start_ &-> (slice_368_Sample)
      slice_368_sample_completed_ <-& (slice_368_Sample)
      slice_368_sample_completed_ &-> ($null)
      slice_368_update_start_ &-> (slice_368_Update)
      slice_368_update_completed_ <-& (slice_368_Update)
      // RAW reenables for c2
      call_stmt_297_update_start_ o<-& (slice_368_sample_completed_ 0)
      // self-release: 
      slice_368_sample_start_ o<-& (slice_368_sample_completed_ 1)
      $null &-> (slice_368_update_start_)
      slice_368_update_start_ o<-& (slice_368_update_completed_ 0)
      // Target expression
      // (as target) sliced_v28
      // start: WAR dependencies for sliced_v28
      // done: WAR dependencies for sliced_v28
      // end:  	sliced_v28 := ( $slice c2 7 0 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v31 := ( $slice c3 63 56 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 156
      // Source expression
      // ( $slice c3 63 56 ) 
      $T[slice_372_sample_start_] 
      $T[slice_372_sample_completed_] 
      $T[slice_372_update_start_] 
      $T[slice_372_update_completed_] 
      // c3
      // start: Forward dependencies from c3 to transition slice_372_sample_start_
      slice_372_sample_start_ <-& (call_stmt_301_update_completed_)
      // done: Forward dependencies from c3 to transition slice_372_sample_start_
      ;;[slice_372_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_372_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_372_sample_start_ &-> (slice_372_Sample)
      slice_372_sample_completed_ <-& (slice_372_Sample)
      slice_372_sample_completed_ &-> ($null)
      slice_372_update_start_ &-> (slice_372_Update)
      slice_372_update_completed_ <-& (slice_372_Update)
      // RAW reenables for c3
      call_stmt_301_update_start_ o<-& (slice_372_sample_completed_ 0)
      // self-release: 
      slice_372_sample_start_ o<-& (slice_372_sample_completed_ 1)
      $null &-> (slice_372_update_start_)
      slice_372_update_start_ o<-& (slice_372_update_completed_ 0)
      // Target expression
      // (as target) sliced_v31
      // start: WAR dependencies for sliced_v31
      // done: WAR dependencies for sliced_v31
      // end:  	sliced_v31 := ( $slice c3 63 56 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v32 := ( $slice c3 55 48 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 157
      // Source expression
      // ( $slice c3 55 48 ) 
      $T[slice_376_sample_start_] 
      $T[slice_376_sample_completed_] 
      $T[slice_376_update_start_] 
      $T[slice_376_update_completed_] 
      // c3
      // start: Forward dependencies from c3 to transition slice_376_sample_start_
      slice_376_sample_start_ <-& (call_stmt_301_update_completed_)
      // done: Forward dependencies from c3 to transition slice_376_sample_start_
      ;;[slice_376_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_376_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_376_sample_start_ &-> (slice_376_Sample)
      slice_376_sample_completed_ <-& (slice_376_Sample)
      slice_376_sample_completed_ &-> ($null)
      slice_376_update_start_ &-> (slice_376_Update)
      slice_376_update_completed_ <-& (slice_376_Update)
      // RAW reenables for c3
      call_stmt_301_update_start_ o<-& (slice_376_sample_completed_ 0)
      // self-release: 
      slice_376_sample_start_ o<-& (slice_376_sample_completed_ 1)
      $null &-> (slice_376_update_start_)
      slice_376_update_start_ o<-& (slice_376_update_completed_ 0)
      // Target expression
      // (as target) sliced_v32
      // start: WAR dependencies for sliced_v32
      // done: WAR dependencies for sliced_v32
      // end:  	sliced_v32 := ( $slice c3 55 48 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v33 := ( $slice c3 47 40 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 158
      // Source expression
      // ( $slice c3 47 40 ) 
      $T[slice_380_sample_start_] 
      $T[slice_380_sample_completed_] 
      $T[slice_380_update_start_] 
      $T[slice_380_update_completed_] 
      // c3
      // start: Forward dependencies from c3 to transition slice_380_sample_start_
      slice_380_sample_start_ <-& (call_stmt_301_update_completed_)
      // done: Forward dependencies from c3 to transition slice_380_sample_start_
      ;;[slice_380_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_380_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_380_sample_start_ &-> (slice_380_Sample)
      slice_380_sample_completed_ <-& (slice_380_Sample)
      slice_380_sample_completed_ &-> ($null)
      slice_380_update_start_ &-> (slice_380_Update)
      slice_380_update_completed_ <-& (slice_380_Update)
      // RAW reenables for c3
      call_stmt_301_update_start_ o<-& (slice_380_sample_completed_ 0)
      // self-release: 
      slice_380_sample_start_ o<-& (slice_380_sample_completed_ 1)
      $null &-> (slice_380_update_start_)
      slice_380_update_start_ o<-& (slice_380_update_completed_ 0)
      // Target expression
      // (as target) sliced_v33
      // start: WAR dependencies for sliced_v33
      // done: WAR dependencies for sliced_v33
      // end:  	sliced_v33 := ( $slice c3 47 40 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v34 := ( $slice c3 39 32 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 159
      // Source expression
      // ( $slice c3 39 32 ) 
      $T[slice_384_sample_start_] 
      $T[slice_384_sample_completed_] 
      $T[slice_384_update_start_] 
      $T[slice_384_update_completed_] 
      // c3
      // start: Forward dependencies from c3 to transition slice_384_sample_start_
      slice_384_sample_start_ <-& (call_stmt_301_update_completed_)
      // done: Forward dependencies from c3 to transition slice_384_sample_start_
      ;;[slice_384_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_384_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_384_sample_start_ &-> (slice_384_Sample)
      slice_384_sample_completed_ <-& (slice_384_Sample)
      slice_384_sample_completed_ &-> ($null)
      slice_384_update_start_ &-> (slice_384_Update)
      slice_384_update_completed_ <-& (slice_384_Update)
      // RAW reenables for c3
      call_stmt_301_update_start_ o<-& (slice_384_sample_completed_ 0)
      // self-release: 
      slice_384_sample_start_ o<-& (slice_384_sample_completed_ 1)
      $null &-> (slice_384_update_start_)
      slice_384_update_start_ o<-& (slice_384_update_completed_ 0)
      // Target expression
      // (as target) sliced_v34
      // start: WAR dependencies for sliced_v34
      // done: WAR dependencies for sliced_v34
      // end:  	sliced_v34 := ( $slice c3 39 32 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v35 := ( $slice c3 31 24 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 160
      // Source expression
      // ( $slice c3 31 24 ) 
      $T[slice_388_sample_start_] 
      $T[slice_388_sample_completed_] 
      $T[slice_388_update_start_] 
      $T[slice_388_update_completed_] 
      // c3
      // start: Forward dependencies from c3 to transition slice_388_sample_start_
      slice_388_sample_start_ <-& (call_stmt_301_update_completed_)
      // done: Forward dependencies from c3 to transition slice_388_sample_start_
      ;;[slice_388_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_388_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_388_sample_start_ &-> (slice_388_Sample)
      slice_388_sample_completed_ <-& (slice_388_Sample)
      slice_388_sample_completed_ &-> ($null)
      slice_388_update_start_ &-> (slice_388_Update)
      slice_388_update_completed_ <-& (slice_388_Update)
      // RAW reenables for c3
      call_stmt_301_update_start_ o<-& (slice_388_sample_completed_ 0)
      // self-release: 
      slice_388_sample_start_ o<-& (slice_388_sample_completed_ 1)
      $null &-> (slice_388_update_start_)
      slice_388_update_start_ o<-& (slice_388_update_completed_ 0)
      // Target expression
      // (as target) sliced_v35
      // start: WAR dependencies for sliced_v35
      // done: WAR dependencies for sliced_v35
      // end:  	sliced_v35 := ( $slice c3 31 24 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v36 := ( $slice c3 23 16 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 161
      // Source expression
      // ( $slice c3 23 16 ) 
      $T[slice_392_sample_start_] 
      $T[slice_392_sample_completed_] 
      $T[slice_392_update_start_] 
      $T[slice_392_update_completed_] 
      // c3
      // start: Forward dependencies from c3 to transition slice_392_sample_start_
      slice_392_sample_start_ <-& (call_stmt_301_update_completed_)
      // done: Forward dependencies from c3 to transition slice_392_sample_start_
      ;;[slice_392_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_392_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_392_sample_start_ &-> (slice_392_Sample)
      slice_392_sample_completed_ <-& (slice_392_Sample)
      slice_392_sample_completed_ &-> ($null)
      slice_392_update_start_ &-> (slice_392_Update)
      slice_392_update_completed_ <-& (slice_392_Update)
      // RAW reenables for c3
      call_stmt_301_update_start_ o<-& (slice_392_sample_completed_ 0)
      // self-release: 
      slice_392_sample_start_ o<-& (slice_392_sample_completed_ 1)
      $null &-> (slice_392_update_start_)
      slice_392_update_start_ o<-& (slice_392_update_completed_ 0)
      // Target expression
      // (as target) sliced_v36
      // start: WAR dependencies for sliced_v36
      // done: WAR dependencies for sliced_v36
      // end:  	sliced_v36 := ( $slice c3 23 16 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v37 := ( $slice c3 15 8 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 162
      // Source expression
      // ( $slice c3 15 8 ) 
      $T[slice_396_sample_start_] 
      $T[slice_396_sample_completed_] 
      $T[slice_396_update_start_] 
      $T[slice_396_update_completed_] 
      // c3
      // start: Forward dependencies from c3 to transition slice_396_sample_start_
      slice_396_sample_start_ <-& (call_stmt_301_update_completed_)
      // done: Forward dependencies from c3 to transition slice_396_sample_start_
      ;;[slice_396_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_396_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_396_sample_start_ &-> (slice_396_Sample)
      slice_396_sample_completed_ <-& (slice_396_Sample)
      slice_396_sample_completed_ &-> ($null)
      slice_396_update_start_ &-> (slice_396_Update)
      slice_396_update_completed_ <-& (slice_396_Update)
      // RAW reenables for c3
      call_stmt_301_update_start_ o<-& (slice_396_sample_completed_ 0)
      // self-release: 
      slice_396_sample_start_ o<-& (slice_396_sample_completed_ 1)
      $null &-> (slice_396_update_start_)
      slice_396_update_start_ o<-& (slice_396_update_completed_ 0)
      // Target expression
      // (as target) sliced_v37
      // start: WAR dependencies for sliced_v37
      // done: WAR dependencies for sliced_v37
      // end:  	sliced_v37 := ( $slice c3 15 8 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v38 := ( $slice c3 7 0 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 163
      // Source expression
      // ( $slice c3 7 0 ) 
      $T[slice_400_sample_start_] 
      $T[slice_400_sample_completed_] 
      $T[slice_400_update_start_] 
      $T[slice_400_update_completed_] 
      // c3
      // start: Forward dependencies from c3 to transition slice_400_sample_start_
      slice_400_sample_start_ <-& (call_stmt_301_update_completed_)
      // done: Forward dependencies from c3 to transition slice_400_sample_start_
      ;;[slice_400_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_400_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_400_sample_start_ &-> (slice_400_Sample)
      slice_400_sample_completed_ <-& (slice_400_Sample)
      slice_400_sample_completed_ &-> ($null)
      slice_400_update_start_ &-> (slice_400_Update)
      slice_400_update_completed_ <-& (slice_400_Update)
      // RAW reenables for c3
      call_stmt_301_update_start_ o<-& (slice_400_sample_completed_ 0)
      // self-release: 
      slice_400_sample_start_ o<-& (slice_400_sample_completed_ 1)
      $null &-> (slice_400_update_start_)
      slice_400_update_start_ o<-& (slice_400_update_completed_ 0)
      // Target expression
      // (as target) sliced_v38
      // start: WAR dependencies for sliced_v38
      // done: WAR dependencies for sliced_v38
      // end:  	sliced_v38 := ( $slice c3 7 0 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v41 := ( $slice c4 63 56 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 164
      // Source expression
      // ( $slice c4 63 56 ) 
      $T[slice_404_sample_start_] 
      $T[slice_404_sample_completed_] 
      $T[slice_404_update_start_] 
      $T[slice_404_update_completed_] 
      // c4
      // start: Forward dependencies from c4 to transition slice_404_sample_start_
      slice_404_sample_start_ <-& (call_stmt_305_update_completed_)
      // done: Forward dependencies from c4 to transition slice_404_sample_start_
      ;;[slice_404_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_404_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_404_sample_start_ &-> (slice_404_Sample)
      slice_404_sample_completed_ <-& (slice_404_Sample)
      slice_404_sample_completed_ &-> ($null)
      slice_404_update_start_ &-> (slice_404_Update)
      slice_404_update_completed_ <-& (slice_404_Update)
      // RAW reenables for c4
      call_stmt_305_update_start_ o<-& (slice_404_sample_completed_ 0)
      // self-release: 
      slice_404_sample_start_ o<-& (slice_404_sample_completed_ 1)
      $null &-> (slice_404_update_start_)
      slice_404_update_start_ o<-& (slice_404_update_completed_ 0)
      // Target expression
      // (as target) sliced_v41
      // start: WAR dependencies for sliced_v41
      // done: WAR dependencies for sliced_v41
      // end:  	sliced_v41 := ( $slice c4 63 56 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v42 := ( $slice c4 55 48 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 165
      // Source expression
      // ( $slice c4 55 48 ) 
      $T[slice_408_sample_start_] 
      $T[slice_408_sample_completed_] 
      $T[slice_408_update_start_] 
      $T[slice_408_update_completed_] 
      // c4
      // start: Forward dependencies from c4 to transition slice_408_sample_start_
      slice_408_sample_start_ <-& (call_stmt_305_update_completed_)
      // done: Forward dependencies from c4 to transition slice_408_sample_start_
      ;;[slice_408_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_408_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_408_sample_start_ &-> (slice_408_Sample)
      slice_408_sample_completed_ <-& (slice_408_Sample)
      slice_408_sample_completed_ &-> ($null)
      slice_408_update_start_ &-> (slice_408_Update)
      slice_408_update_completed_ <-& (slice_408_Update)
      // RAW reenables for c4
      call_stmt_305_update_start_ o<-& (slice_408_sample_completed_ 0)
      // self-release: 
      slice_408_sample_start_ o<-& (slice_408_sample_completed_ 1)
      $null &-> (slice_408_update_start_)
      slice_408_update_start_ o<-& (slice_408_update_completed_ 0)
      // Target expression
      // (as target) sliced_v42
      // start: WAR dependencies for sliced_v42
      // done: WAR dependencies for sliced_v42
      // end:  	sliced_v42 := ( $slice c4 55 48 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v43 := ( $slice c4 47 40 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 166
      // Source expression
      // ( $slice c4 47 40 ) 
      $T[slice_412_sample_start_] 
      $T[slice_412_sample_completed_] 
      $T[slice_412_update_start_] 
      $T[slice_412_update_completed_] 
      // c4
      // start: Forward dependencies from c4 to transition slice_412_sample_start_
      slice_412_sample_start_ <-& (call_stmt_305_update_completed_)
      // done: Forward dependencies from c4 to transition slice_412_sample_start_
      ;;[slice_412_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_412_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_412_sample_start_ &-> (slice_412_Sample)
      slice_412_sample_completed_ <-& (slice_412_Sample)
      slice_412_sample_completed_ &-> ($null)
      slice_412_update_start_ &-> (slice_412_Update)
      slice_412_update_completed_ <-& (slice_412_Update)
      // RAW reenables for c4
      call_stmt_305_update_start_ o<-& (slice_412_sample_completed_ 0)
      // self-release: 
      slice_412_sample_start_ o<-& (slice_412_sample_completed_ 1)
      $null &-> (slice_412_update_start_)
      slice_412_update_start_ o<-& (slice_412_update_completed_ 0)
      // Target expression
      // (as target) sliced_v43
      // start: WAR dependencies for sliced_v43
      // done: WAR dependencies for sliced_v43
      // end:  	sliced_v43 := ( $slice c4 47 40 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v44 := ( $slice c4 39 32 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 167
      // Source expression
      // ( $slice c4 39 32 ) 
      $T[slice_416_sample_start_] 
      $T[slice_416_sample_completed_] 
      $T[slice_416_update_start_] 
      $T[slice_416_update_completed_] 
      // c4
      // start: Forward dependencies from c4 to transition slice_416_sample_start_
      slice_416_sample_start_ <-& (call_stmt_305_update_completed_)
      // done: Forward dependencies from c4 to transition slice_416_sample_start_
      ;;[slice_416_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_416_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_416_sample_start_ &-> (slice_416_Sample)
      slice_416_sample_completed_ <-& (slice_416_Sample)
      slice_416_sample_completed_ &-> ($null)
      slice_416_update_start_ &-> (slice_416_Update)
      slice_416_update_completed_ <-& (slice_416_Update)
      // RAW reenables for c4
      call_stmt_305_update_start_ o<-& (slice_416_sample_completed_ 0)
      // self-release: 
      slice_416_sample_start_ o<-& (slice_416_sample_completed_ 1)
      $null &-> (slice_416_update_start_)
      slice_416_update_start_ o<-& (slice_416_update_completed_ 0)
      // Target expression
      // (as target) sliced_v44
      // start: WAR dependencies for sliced_v44
      // done: WAR dependencies for sliced_v44
      // end:  	sliced_v44 := ( $slice c4 39 32 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v45 := ( $slice c4 31 24 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 168
      // Source expression
      // ( $slice c4 31 24 ) 
      $T[slice_420_sample_start_] 
      $T[slice_420_sample_completed_] 
      $T[slice_420_update_start_] 
      $T[slice_420_update_completed_] 
      // c4
      // start: Forward dependencies from c4 to transition slice_420_sample_start_
      slice_420_sample_start_ <-& (call_stmt_305_update_completed_)
      // done: Forward dependencies from c4 to transition slice_420_sample_start_
      ;;[slice_420_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_420_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_420_sample_start_ &-> (slice_420_Sample)
      slice_420_sample_completed_ <-& (slice_420_Sample)
      slice_420_sample_completed_ &-> ($null)
      slice_420_update_start_ &-> (slice_420_Update)
      slice_420_update_completed_ <-& (slice_420_Update)
      // RAW reenables for c4
      call_stmt_305_update_start_ o<-& (slice_420_sample_completed_ 0)
      // self-release: 
      slice_420_sample_start_ o<-& (slice_420_sample_completed_ 1)
      $null &-> (slice_420_update_start_)
      slice_420_update_start_ o<-& (slice_420_update_completed_ 0)
      // Target expression
      // (as target) sliced_v45
      // start: WAR dependencies for sliced_v45
      // done: WAR dependencies for sliced_v45
      // end:  	sliced_v45 := ( $slice c4 31 24 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v46 := ( $slice c4 23 16 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 169
      // Source expression
      // ( $slice c4 23 16 ) 
      $T[slice_424_sample_start_] 
      $T[slice_424_sample_completed_] 
      $T[slice_424_update_start_] 
      $T[slice_424_update_completed_] 
      // c4
      // start: Forward dependencies from c4 to transition slice_424_sample_start_
      slice_424_sample_start_ <-& (call_stmt_305_update_completed_)
      // done: Forward dependencies from c4 to transition slice_424_sample_start_
      ;;[slice_424_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_424_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_424_sample_start_ &-> (slice_424_Sample)
      slice_424_sample_completed_ <-& (slice_424_Sample)
      slice_424_sample_completed_ &-> ($null)
      slice_424_update_start_ &-> (slice_424_Update)
      slice_424_update_completed_ <-& (slice_424_Update)
      // RAW reenables for c4
      call_stmt_305_update_start_ o<-& (slice_424_sample_completed_ 0)
      // self-release: 
      slice_424_sample_start_ o<-& (slice_424_sample_completed_ 1)
      $null &-> (slice_424_update_start_)
      slice_424_update_start_ o<-& (slice_424_update_completed_ 0)
      // Target expression
      // (as target) sliced_v46
      // start: WAR dependencies for sliced_v46
      // done: WAR dependencies for sliced_v46
      // end:  	sliced_v46 := ( $slice c4 23 16 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v47 := ( $slice c4 15 8 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 170
      // Source expression
      // ( $slice c4 15 8 ) 
      $T[slice_428_sample_start_] 
      $T[slice_428_sample_completed_] 
      $T[slice_428_update_start_] 
      $T[slice_428_update_completed_] 
      // c4
      // start: Forward dependencies from c4 to transition slice_428_sample_start_
      slice_428_sample_start_ <-& (call_stmt_305_update_completed_)
      // done: Forward dependencies from c4 to transition slice_428_sample_start_
      ;;[slice_428_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_428_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_428_sample_start_ &-> (slice_428_Sample)
      slice_428_sample_completed_ <-& (slice_428_Sample)
      slice_428_sample_completed_ &-> ($null)
      slice_428_update_start_ &-> (slice_428_Update)
      slice_428_update_completed_ <-& (slice_428_Update)
      // RAW reenables for c4
      call_stmt_305_update_start_ o<-& (slice_428_sample_completed_ 0)
      // self-release: 
      slice_428_sample_start_ o<-& (slice_428_sample_completed_ 1)
      $null &-> (slice_428_update_start_)
      slice_428_update_start_ o<-& (slice_428_update_completed_ 0)
      // Target expression
      // (as target) sliced_v47
      // start: WAR dependencies for sliced_v47
      // done: WAR dependencies for sliced_v47
      // end:  	sliced_v47 := ( $slice c4 15 8 )  $buffering 1// bits of buffering = 8. 
      // start:  	sliced_v48 := ( $slice c4 7 0 )  $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 171
      // Source expression
      // ( $slice c4 7 0 ) 
      $T[slice_432_sample_start_] 
      $T[slice_432_sample_completed_] 
      $T[slice_432_update_start_] 
      $T[slice_432_update_completed_] 
      // c4
      // start: Forward dependencies from c4 to transition slice_432_sample_start_
      slice_432_sample_start_ <-& (call_stmt_305_update_completed_)
      // done: Forward dependencies from c4 to transition slice_432_sample_start_
      ;;[slice_432_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_432_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_432_sample_start_ &-> (slice_432_Sample)
      slice_432_sample_completed_ <-& (slice_432_Sample)
      slice_432_sample_completed_ &-> ($null)
      slice_432_update_start_ &-> (slice_432_Update)
      slice_432_update_completed_ <-& (slice_432_Update)
      // RAW reenables for c4
      call_stmt_305_update_start_ o<-& (slice_432_sample_completed_ 0)
      // self-release: 
      slice_432_sample_start_ o<-& (slice_432_sample_completed_ 1)
      $null &-> (slice_432_update_start_)
      slice_432_update_start_ o<-& (slice_432_update_completed_ 0)
      // Target expression
      // (as target) sliced_v48
      // start: WAR dependencies for sliced_v48
      // done: WAR dependencies for sliced_v48
      // end:  	sliced_v48 := ( $slice c4 7 0 )  $buffering 1// bits of buffering = 8. 
      // start: WAR dependencies for a11
      // done: WAR dependencies for a11
      // start:  	$volatile a11 := ($bitcast ($int<8>) sliced_v11 ) $buffering 1
      //  file prog.linked.opt.aa, line 172
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v11 )
      // sliced_v11
      // Target expression
      // (as target) a11
      // start: WAR dependencies for a11
      // done: WAR dependencies for a11
      // end:  	$volatile a11 := ($bitcast ($int<8>) sliced_v11 ) $buffering 1
      // start: WAR dependencies for a12
      // done: WAR dependencies for a12
      // start:  	$volatile a12 := ($bitcast ($int<8>) sliced_v12 ) $buffering 1
      //  file prog.linked.opt.aa, line 173
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v12 )
      // sliced_v12
      // Target expression
      // (as target) a12
      // start: WAR dependencies for a12
      // done: WAR dependencies for a12
      // end:  	$volatile a12 := ($bitcast ($int<8>) sliced_v12 ) $buffering 1
      // start: WAR dependencies for a13
      // done: WAR dependencies for a13
      // start:  	$volatile a13 := ($bitcast ($int<8>) sliced_v13 ) $buffering 1
      //  file prog.linked.opt.aa, line 174
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v13 )
      // sliced_v13
      // Target expression
      // (as target) a13
      // start: WAR dependencies for a13
      // done: WAR dependencies for a13
      // end:  	$volatile a13 := ($bitcast ($int<8>) sliced_v13 ) $buffering 1
      // start: WAR dependencies for a14
      // done: WAR dependencies for a14
      // start:  	$volatile a14 := ($bitcast ($int<8>) sliced_v14 ) $buffering 1
      //  file prog.linked.opt.aa, line 175
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v14 )
      // sliced_v14
      // Target expression
      // (as target) a14
      // start: WAR dependencies for a14
      // done: WAR dependencies for a14
      // end:  	$volatile a14 := ($bitcast ($int<8>) sliced_v14 ) $buffering 1
      // start: WAR dependencies for a15
      // done: WAR dependencies for a15
      // start:  	$volatile a15 := ($bitcast ($int<8>) sliced_v15 ) $buffering 1
      //  file prog.linked.opt.aa, line 176
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v15 )
      // sliced_v15
      // Target expression
      // (as target) a15
      // start: WAR dependencies for a15
      // done: WAR dependencies for a15
      // end:  	$volatile a15 := ($bitcast ($int<8>) sliced_v15 ) $buffering 1
      // start: WAR dependencies for a16
      // done: WAR dependencies for a16
      // start:  	$volatile a16 := ($bitcast ($int<8>) sliced_v16 ) $buffering 1
      //  file prog.linked.opt.aa, line 177
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v16 )
      // sliced_v16
      // Target expression
      // (as target) a16
      // start: WAR dependencies for a16
      // done: WAR dependencies for a16
      // end:  	$volatile a16 := ($bitcast ($int<8>) sliced_v16 ) $buffering 1
      // start: WAR dependencies for a17
      // done: WAR dependencies for a17
      // start:  	$volatile a17 := ($bitcast ($int<8>) sliced_v17 ) $buffering 1
      //  file prog.linked.opt.aa, line 178
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v17 )
      // sliced_v17
      // Target expression
      // (as target) a17
      // start: WAR dependencies for a17
      // done: WAR dependencies for a17
      // end:  	$volatile a17 := ($bitcast ($int<8>) sliced_v17 ) $buffering 1
      // start: WAR dependencies for a18
      // done: WAR dependencies for a18
      // start:  	$volatile a18 := ($bitcast ($int<8>) sliced_v18 ) $buffering 1
      //  file prog.linked.opt.aa, line 179
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v18 )
      // sliced_v18
      // Target expression
      // (as target) a18
      // start: WAR dependencies for a18
      // done: WAR dependencies for a18
      // end:  	$volatile a18 := ($bitcast ($int<8>) sliced_v18 ) $buffering 1
      // start: WAR dependencies for a21
      // done: WAR dependencies for a21
      // start:  	$volatile a21 := ($bitcast ($int<8>) sliced_v21 ) $buffering 1
      //  file prog.linked.opt.aa, line 180
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v21 )
      // sliced_v21
      // Target expression
      // (as target) a21
      // start: WAR dependencies for a21
      // done: WAR dependencies for a21
      // end:  	$volatile a21 := ($bitcast ($int<8>) sliced_v21 ) $buffering 1
      // start: WAR dependencies for a22
      // done: WAR dependencies for a22
      // start:  	$volatile a22 := ($bitcast ($int<8>) sliced_v22 ) $buffering 1
      //  file prog.linked.opt.aa, line 181
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v22 )
      // sliced_v22
      // Target expression
      // (as target) a22
      // start: WAR dependencies for a22
      // done: WAR dependencies for a22
      // end:  	$volatile a22 := ($bitcast ($int<8>) sliced_v22 ) $buffering 1
      // start: WAR dependencies for a23
      // done: WAR dependencies for a23
      // start:  	$volatile a23 := ($bitcast ($int<8>) sliced_v23 ) $buffering 1
      //  file prog.linked.opt.aa, line 182
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v23 )
      // sliced_v23
      // Target expression
      // (as target) a23
      // start: WAR dependencies for a23
      // done: WAR dependencies for a23
      // end:  	$volatile a23 := ($bitcast ($int<8>) sliced_v23 ) $buffering 1
      // start: WAR dependencies for a24
      // done: WAR dependencies for a24
      // start:  	$volatile a24 := ($bitcast ($int<8>) sliced_v24 ) $buffering 1
      //  file prog.linked.opt.aa, line 183
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v24 )
      // sliced_v24
      // Target expression
      // (as target) a24
      // start: WAR dependencies for a24
      // done: WAR dependencies for a24
      // end:  	$volatile a24 := ($bitcast ($int<8>) sliced_v24 ) $buffering 1
      // start: WAR dependencies for a25
      // done: WAR dependencies for a25
      // start:  	$volatile a25 := ($bitcast ($int<8>) sliced_v25 ) $buffering 1
      //  file prog.linked.opt.aa, line 184
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v25 )
      // sliced_v25
      // Target expression
      // (as target) a25
      // start: WAR dependencies for a25
      // done: WAR dependencies for a25
      // end:  	$volatile a25 := ($bitcast ($int<8>) sliced_v25 ) $buffering 1
      // start: WAR dependencies for a26
      // done: WAR dependencies for a26
      // start:  	$volatile a26 := ($bitcast ($int<8>) sliced_v26 ) $buffering 1
      //  file prog.linked.opt.aa, line 185
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v26 )
      // sliced_v26
      // Target expression
      // (as target) a26
      // start: WAR dependencies for a26
      // done: WAR dependencies for a26
      // end:  	$volatile a26 := ($bitcast ($int<8>) sliced_v26 ) $buffering 1
      // start: WAR dependencies for a27
      // done: WAR dependencies for a27
      // start:  	$volatile a27 := ($bitcast ($int<8>) sliced_v27 ) $buffering 1
      //  file prog.linked.opt.aa, line 186
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v27 )
      // sliced_v27
      // Target expression
      // (as target) a27
      // start: WAR dependencies for a27
      // done: WAR dependencies for a27
      // end:  	$volatile a27 := ($bitcast ($int<8>) sliced_v27 ) $buffering 1
      // start: WAR dependencies for a28
      // done: WAR dependencies for a28
      // start:  	$volatile a28 := ($bitcast ($int<8>) sliced_v28 ) $buffering 1
      //  file prog.linked.opt.aa, line 187
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v28 )
      // sliced_v28
      // Target expression
      // (as target) a28
      // start: WAR dependencies for a28
      // done: WAR dependencies for a28
      // end:  	$volatile a28 := ($bitcast ($int<8>) sliced_v28 ) $buffering 1
      // start: WAR dependencies for a31
      // done: WAR dependencies for a31
      // start:  	$volatile a31 := ($bitcast ($int<8>) sliced_v31 ) $buffering 1
      //  file prog.linked.opt.aa, line 188
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v31 )
      // sliced_v31
      // Target expression
      // (as target) a31
      // start: WAR dependencies for a31
      // done: WAR dependencies for a31
      // end:  	$volatile a31 := ($bitcast ($int<8>) sliced_v31 ) $buffering 1
      // start: WAR dependencies for a32
      // done: WAR dependencies for a32
      // start:  	$volatile a32 := ($bitcast ($int<8>) sliced_v32 ) $buffering 1
      //  file prog.linked.opt.aa, line 189
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v32 )
      // sliced_v32
      // Target expression
      // (as target) a32
      // start: WAR dependencies for a32
      // done: WAR dependencies for a32
      // end:  	$volatile a32 := ($bitcast ($int<8>) sliced_v32 ) $buffering 1
      // start: WAR dependencies for a33
      // done: WAR dependencies for a33
      // start:  	$volatile a33 := ($bitcast ($int<8>) sliced_v33 ) $buffering 1
      //  file prog.linked.opt.aa, line 190
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v33 )
      // sliced_v33
      // Target expression
      // (as target) a33
      // start: WAR dependencies for a33
      // done: WAR dependencies for a33
      // end:  	$volatile a33 := ($bitcast ($int<8>) sliced_v33 ) $buffering 1
      // start: WAR dependencies for a34
      // done: WAR dependencies for a34
      // start:  	$volatile a34 := ($bitcast ($int<8>) sliced_v34 ) $buffering 1
      //  file prog.linked.opt.aa, line 191
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v34 )
      // sliced_v34
      // Target expression
      // (as target) a34
      // start: WAR dependencies for a34
      // done: WAR dependencies for a34
      // end:  	$volatile a34 := ($bitcast ($int<8>) sliced_v34 ) $buffering 1
      // start: WAR dependencies for a35
      // done: WAR dependencies for a35
      // start:  	$volatile a35 := ($bitcast ($int<8>) sliced_v35 ) $buffering 1
      //  file prog.linked.opt.aa, line 192
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v35 )
      // sliced_v35
      // Target expression
      // (as target) a35
      // start: WAR dependencies for a35
      // done: WAR dependencies for a35
      // end:  	$volatile a35 := ($bitcast ($int<8>) sliced_v35 ) $buffering 1
      // start: WAR dependencies for a36
      // done: WAR dependencies for a36
      // start:  	$volatile a36 := ($bitcast ($int<8>) sliced_v36 ) $buffering 1
      //  file prog.linked.opt.aa, line 193
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v36 )
      // sliced_v36
      // Target expression
      // (as target) a36
      // start: WAR dependencies for a36
      // done: WAR dependencies for a36
      // end:  	$volatile a36 := ($bitcast ($int<8>) sliced_v36 ) $buffering 1
      // start: WAR dependencies for a37
      // done: WAR dependencies for a37
      // start:  	$volatile a37 := ($bitcast ($int<8>) sliced_v37 ) $buffering 1
      //  file prog.linked.opt.aa, line 194
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v37 )
      // sliced_v37
      // Target expression
      // (as target) a37
      // start: WAR dependencies for a37
      // done: WAR dependencies for a37
      // end:  	$volatile a37 := ($bitcast ($int<8>) sliced_v37 ) $buffering 1
      // start: WAR dependencies for a38
      // done: WAR dependencies for a38
      // start:  	$volatile a38 := ($bitcast ($int<8>) sliced_v38 ) $buffering 1
      //  file prog.linked.opt.aa, line 195
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v38 )
      // sliced_v38
      // Target expression
      // (as target) a38
      // start: WAR dependencies for a38
      // done: WAR dependencies for a38
      // end:  	$volatile a38 := ($bitcast ($int<8>) sliced_v38 ) $buffering 1
      // start: WAR dependencies for a41
      // done: WAR dependencies for a41
      // start:  	$volatile a41 := ($bitcast ($int<8>) sliced_v41 ) $buffering 1
      //  file prog.linked.opt.aa, line 196
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v41 )
      // sliced_v41
      // Target expression
      // (as target) a41
      // start: WAR dependencies for a41
      // done: WAR dependencies for a41
      // end:  	$volatile a41 := ($bitcast ($int<8>) sliced_v41 ) $buffering 1
      // start: WAR dependencies for a42
      // done: WAR dependencies for a42
      // start:  	$volatile a42 := ($bitcast ($int<8>) sliced_v42 ) $buffering 1
      //  file prog.linked.opt.aa, line 197
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v42 )
      // sliced_v42
      // Target expression
      // (as target) a42
      // start: WAR dependencies for a42
      // done: WAR dependencies for a42
      // end:  	$volatile a42 := ($bitcast ($int<8>) sliced_v42 ) $buffering 1
      // start: WAR dependencies for a43
      // done: WAR dependencies for a43
      // start:  	$volatile a43 := ($bitcast ($int<8>) sliced_v43 ) $buffering 1
      //  file prog.linked.opt.aa, line 198
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v43 )
      // sliced_v43
      // Target expression
      // (as target) a43
      // start: WAR dependencies for a43
      // done: WAR dependencies for a43
      // end:  	$volatile a43 := ($bitcast ($int<8>) sliced_v43 ) $buffering 1
      // start: WAR dependencies for a44
      // done: WAR dependencies for a44
      // start:  	$volatile a44 := ($bitcast ($int<8>) sliced_v44 ) $buffering 1
      //  file prog.linked.opt.aa, line 199
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v44 )
      // sliced_v44
      // Target expression
      // (as target) a44
      // start: WAR dependencies for a44
      // done: WAR dependencies for a44
      // end:  	$volatile a44 := ($bitcast ($int<8>) sliced_v44 ) $buffering 1
      // start: WAR dependencies for a45
      // done: WAR dependencies for a45
      // start:  	$volatile a45 := ($bitcast ($int<8>) sliced_v45 ) $buffering 1
      //  file prog.linked.opt.aa, line 200
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v45 )
      // sliced_v45
      // Target expression
      // (as target) a45
      // start: WAR dependencies for a45
      // done: WAR dependencies for a45
      // end:  	$volatile a45 := ($bitcast ($int<8>) sliced_v45 ) $buffering 1
      // start: WAR dependencies for a46
      // done: WAR dependencies for a46
      // start:  	$volatile a46 := ($bitcast ($int<8>) sliced_v46 ) $buffering 1
      //  file prog.linked.opt.aa, line 201
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v46 )
      // sliced_v46
      // Target expression
      // (as target) a46
      // start: WAR dependencies for a46
      // done: WAR dependencies for a46
      // end:  	$volatile a46 := ($bitcast ($int<8>) sliced_v46 ) $buffering 1
      // start: WAR dependencies for a47
      // done: WAR dependencies for a47
      // start:  	$volatile a47 := ($bitcast ($int<8>) sliced_v47 ) $buffering 1
      //  file prog.linked.opt.aa, line 202
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v47 )
      // sliced_v47
      // Target expression
      // (as target) a47
      // start: WAR dependencies for a47
      // done: WAR dependencies for a47
      // end:  	$volatile a47 := ($bitcast ($int<8>) sliced_v47 ) $buffering 1
      // start: WAR dependencies for a48
      // done: WAR dependencies for a48
      // start:  	$volatile a48 := ($bitcast ($int<8>) sliced_v48 ) $buffering 1
      //  file prog.linked.opt.aa, line 203
      // volatile! 
      // Source expression
      // ($bitcast ($int<8>) sliced_v48 )
      // sliced_v48
      // Target expression
      // (as target) a48
      // start: WAR dependencies for a48
      // done: WAR dependencies for a48
      // end:  	$volatile a48 := ($bitcast ($int<8>) sliced_v48 ) $buffering 1
      // start: WAR dependencies for t11
      // done: WAR dependencies for t11
      // start:  	$volatile t11 := ( $mux (a11 > a21) a11  a21 )  $buffering 1
      //  file prog.linked.opt.aa, line 204
      // volatile! 
      // Source expression
      // ( $mux (a11 > a21) a11  a21 ) 
      // (a11 > a21)
      // a11
      // a21
      // a11
      // a21
      // Target expression
      // (as target) t11
      // start: WAR dependencies for t11
      // done: WAR dependencies for t11
      // end:  	$volatile t11 := ( $mux (a11 > a21) a11  a21 )  $buffering 1
      // start: WAR dependencies for t12
      // done: WAR dependencies for t12
      // start:  	$volatile t12 := ( $mux (a31 > a41) a31  a41 )  $buffering 1
      //  file prog.linked.opt.aa, line 205
      // volatile! 
      // Source expression
      // ( $mux (a31 > a41) a31  a41 ) 
      // (a31 > a41)
      // a31
      // a41
      // a31
      // a41
      // Target expression
      // (as target) t12
      // start: WAR dependencies for t12
      // done: WAR dependencies for t12
      // end:  	$volatile t12 := ( $mux (a31 > a41) a31  a41 )  $buffering 1
      // start: WAR dependencies for out1
      // done: WAR dependencies for out1
      // start:  	$volatile out1 := ( $mux (t11 > t12) t11  t12 )  $buffering 1
      //  file prog.linked.opt.aa, line 206
      // volatile! 
      // Source expression
      // ( $mux (t11 > t12) t11  t12 ) 
      // (t11 > t12)
      // t11
      // t12
      // t11
      // t12
      // Target expression
      // (as target) out1
      // start: WAR dependencies for out1
      // done: WAR dependencies for out1
      // end:  	$volatile out1 := ( $mux (t11 > t12) t11  t12 )  $buffering 1
      // start: WAR dependencies for t21
      // done: WAR dependencies for t21
      // start:  	$volatile t21 := ( $mux (a12 > a22) a12  a22 )  $buffering 1
      //  file prog.linked.opt.aa, line 207
      // volatile! 
      // Source expression
      // ( $mux (a12 > a22) a12  a22 ) 
      // (a12 > a22)
      // a12
      // a22
      // a12
      // a22
      // Target expression
      // (as target) t21
      // start: WAR dependencies for t21
      // done: WAR dependencies for t21
      // end:  	$volatile t21 := ( $mux (a12 > a22) a12  a22 )  $buffering 1
      // start: WAR dependencies for t22
      // done: WAR dependencies for t22
      // start:  	$volatile t22 := ( $mux (a32 > a42) a32  a42 )  $buffering 1
      //  file prog.linked.opt.aa, line 208
      // volatile! 
      // Source expression
      // ( $mux (a32 > a42) a32  a42 ) 
      // (a32 > a42)
      // a32
      // a42
      // a32
      // a42
      // Target expression
      // (as target) t22
      // start: WAR dependencies for t22
      // done: WAR dependencies for t22
      // end:  	$volatile t22 := ( $mux (a32 > a42) a32  a42 )  $buffering 1
      // start: WAR dependencies for out2
      // done: WAR dependencies for out2
      // start:  	$volatile out2 := ( $mux (t21 > t22) t21  t22 )  $buffering 1
      //  file prog.linked.opt.aa, line 209
      // volatile! 
      // Source expression
      // ( $mux (t21 > t22) t21  t22 ) 
      // (t21 > t22)
      // t21
      // t22
      // t21
      // t22
      // Target expression
      // (as target) out2
      // start: WAR dependencies for out2
      // done: WAR dependencies for out2
      // end:  	$volatile out2 := ( $mux (t21 > t22) t21  t22 )  $buffering 1
      // start: WAR dependencies for t31
      // done: WAR dependencies for t31
      // start:  	$volatile t31 := ( $mux (a13 > a23) a13  a23 )  $buffering 1
      //  file prog.linked.opt.aa, line 210
      // volatile! 
      // Source expression
      // ( $mux (a13 > a23) a13  a23 ) 
      // (a13 > a23)
      // a13
      // a23
      // a13
      // a23
      // Target expression
      // (as target) t31
      // start: WAR dependencies for t31
      // done: WAR dependencies for t31
      // end:  	$volatile t31 := ( $mux (a13 > a23) a13  a23 )  $buffering 1
      // start: WAR dependencies for t32
      // done: WAR dependencies for t32
      // start:  	$volatile t32 := ( $mux (a33 > a43) a33  a43 )  $buffering 1
      //  file prog.linked.opt.aa, line 211
      // volatile! 
      // Source expression
      // ( $mux (a33 > a43) a33  a43 ) 
      // (a33 > a43)
      // a33
      // a43
      // a33
      // a43
      // Target expression
      // (as target) t32
      // start: WAR dependencies for t32
      // done: WAR dependencies for t32
      // end:  	$volatile t32 := ( $mux (a33 > a43) a33  a43 )  $buffering 1
      // start: WAR dependencies for out3
      // done: WAR dependencies for out3
      // start:  	$volatile out3 := ( $mux (t31 > t32) t31  t32 )  $buffering 1
      //  file prog.linked.opt.aa, line 212
      // volatile! 
      // Source expression
      // ( $mux (t31 > t32) t31  t32 ) 
      // (t31 > t32)
      // t31
      // t32
      // t31
      // t32
      // Target expression
      // (as target) out3
      // start: WAR dependencies for out3
      // done: WAR dependencies for out3
      // end:  	$volatile out3 := ( $mux (t31 > t32) t31  t32 )  $buffering 1
      // start: WAR dependencies for t41
      // done: WAR dependencies for t41
      // start:  	$volatile t41 := ( $mux (a14 > a24) a14  a24 )  $buffering 1
      //  file prog.linked.opt.aa, line 213
      // volatile! 
      // Source expression
      // ( $mux (a14 > a24) a14  a24 ) 
      // (a14 > a24)
      // a14
      // a24
      // a14
      // a24
      // Target expression
      // (as target) t41
      // start: WAR dependencies for t41
      // done: WAR dependencies for t41
      // end:  	$volatile t41 := ( $mux (a14 > a24) a14  a24 )  $buffering 1
      // start: WAR dependencies for t42
      // done: WAR dependencies for t42
      // start:  	$volatile t42 := ( $mux (a34 > a44) a34  a44 )  $buffering 1
      //  file prog.linked.opt.aa, line 214
      // volatile! 
      // Source expression
      // ( $mux (a34 > a44) a34  a44 ) 
      // (a34 > a44)
      // a34
      // a44
      // a34
      // a44
      // Target expression
      // (as target) t42
      // start: WAR dependencies for t42
      // done: WAR dependencies for t42
      // end:  	$volatile t42 := ( $mux (a34 > a44) a34  a44 )  $buffering 1
      // start: WAR dependencies for out4
      // done: WAR dependencies for out4
      // start:  	$volatile out4 := ( $mux (t41 > t42) t41  t42 )  $buffering 1
      //  file prog.linked.opt.aa, line 215
      // volatile! 
      // Source expression
      // ( $mux (t41 > t42) t41  t42 ) 
      // (t41 > t42)
      // t41
      // t42
      // t41
      // t42
      // Target expression
      // (as target) out4
      // start: WAR dependencies for out4
      // done: WAR dependencies for out4
      // end:  	$volatile out4 := ( $mux (t41 > t42) t41  t42 )  $buffering 1
      // start: WAR dependencies for t51
      // done: WAR dependencies for t51
      // start:  	$volatile t51 := ( $mux (a15 > a25) a15  a25 )  $buffering 1
      //  file prog.linked.opt.aa, line 216
      // volatile! 
      // Source expression
      // ( $mux (a15 > a25) a15  a25 ) 
      // (a15 > a25)
      // a15
      // a25
      // a15
      // a25
      // Target expression
      // (as target) t51
      // start: WAR dependencies for t51
      // done: WAR dependencies for t51
      // end:  	$volatile t51 := ( $mux (a15 > a25) a15  a25 )  $buffering 1
      // start: WAR dependencies for t52
      // done: WAR dependencies for t52
      // start:  	$volatile t52 := ( $mux (a35 > a45) a35  a45 )  $buffering 1
      //  file prog.linked.opt.aa, line 217
      // volatile! 
      // Source expression
      // ( $mux (a35 > a45) a35  a45 ) 
      // (a35 > a45)
      // a35
      // a45
      // a35
      // a45
      // Target expression
      // (as target) t52
      // start: WAR dependencies for t52
      // done: WAR dependencies for t52
      // end:  	$volatile t52 := ( $mux (a35 > a45) a35  a45 )  $buffering 1
      // start: WAR dependencies for out5
      // done: WAR dependencies for out5
      // start:  	$volatile out5 := ( $mux (t51 > t52) t51  t52 )  $buffering 1
      //  file prog.linked.opt.aa, line 218
      // volatile! 
      // Source expression
      // ( $mux (t51 > t52) t51  t52 ) 
      // (t51 > t52)
      // t51
      // t52
      // t51
      // t52
      // Target expression
      // (as target) out5
      // start: WAR dependencies for out5
      // done: WAR dependencies for out5
      // end:  	$volatile out5 := ( $mux (t51 > t52) t51  t52 )  $buffering 1
      // start: WAR dependencies for t61
      // done: WAR dependencies for t61
      // start:  	$volatile t61 := ( $mux (a16 > a26) a16  a26 )  $buffering 1
      //  file prog.linked.opt.aa, line 219
      // volatile! 
      // Source expression
      // ( $mux (a16 > a26) a16  a26 ) 
      // (a16 > a26)
      // a16
      // a26
      // a16
      // a26
      // Target expression
      // (as target) t61
      // start: WAR dependencies for t61
      // done: WAR dependencies for t61
      // end:  	$volatile t61 := ( $mux (a16 > a26) a16  a26 )  $buffering 1
      // start: WAR dependencies for t62
      // done: WAR dependencies for t62
      // start:  	$volatile t62 := ( $mux (a36 > a46) a36  a46 )  $buffering 1
      //  file prog.linked.opt.aa, line 220
      // volatile! 
      // Source expression
      // ( $mux (a36 > a46) a36  a46 ) 
      // (a36 > a46)
      // a36
      // a46
      // a36
      // a46
      // Target expression
      // (as target) t62
      // start: WAR dependencies for t62
      // done: WAR dependencies for t62
      // end:  	$volatile t62 := ( $mux (a36 > a46) a36  a46 )  $buffering 1
      // start: WAR dependencies for out6
      // done: WAR dependencies for out6
      // start:  	$volatile out6 := ( $mux (t61 > t62) t61  t62 )  $buffering 1
      //  file prog.linked.opt.aa, line 221
      // volatile! 
      // Source expression
      // ( $mux (t61 > t62) t61  t62 ) 
      // (t61 > t62)
      // t61
      // t62
      // t61
      // t62
      // Target expression
      // (as target) out6
      // start: WAR dependencies for out6
      // done: WAR dependencies for out6
      // end:  	$volatile out6 := ( $mux (t61 > t62) t61  t62 )  $buffering 1
      // start: WAR dependencies for t71
      // done: WAR dependencies for t71
      // start:  	$volatile t71 := ( $mux (a17 > a27) a17  a27 )  $buffering 1
      //  file prog.linked.opt.aa, line 222
      // volatile! 
      // Source expression
      // ( $mux (a17 > a27) a17  a27 ) 
      // (a17 > a27)
      // a17
      // a27
      // a17
      // a27
      // Target expression
      // (as target) t71
      // start: WAR dependencies for t71
      // done: WAR dependencies for t71
      // end:  	$volatile t71 := ( $mux (a17 > a27) a17  a27 )  $buffering 1
      // start: WAR dependencies for t72
      // done: WAR dependencies for t72
      // start:  	$volatile t72 := ( $mux (a37 > a47) a37  a47 )  $buffering 1
      //  file prog.linked.opt.aa, line 223
      // volatile! 
      // Source expression
      // ( $mux (a37 > a47) a37  a47 ) 
      // (a37 > a47)
      // a37
      // a47
      // a37
      // a47
      // Target expression
      // (as target) t72
      // start: WAR dependencies for t72
      // done: WAR dependencies for t72
      // end:  	$volatile t72 := ( $mux (a37 > a47) a37  a47 )  $buffering 1
      // start: WAR dependencies for out7
      // done: WAR dependencies for out7
      // start:  	$volatile out7 := ( $mux (t71 > t72) t71  t72 )  $buffering 1
      //  file prog.linked.opt.aa, line 224
      // volatile! 
      // Source expression
      // ( $mux (t71 > t72) t71  t72 ) 
      // (t71 > t72)
      // t71
      // t72
      // t71
      // t72
      // Target expression
      // (as target) out7
      // start: WAR dependencies for out7
      // done: WAR dependencies for out7
      // end:  	$volatile out7 := ( $mux (t71 > t72) t71  t72 )  $buffering 1
      // start: WAR dependencies for t81
      // done: WAR dependencies for t81
      // start:  	$volatile t81 := ( $mux (a18 > a28) a18  a28 )  $buffering 1
      //  file prog.linked.opt.aa, line 225
      // volatile! 
      // Source expression
      // ( $mux (a18 > a28) a18  a28 ) 
      // (a18 > a28)
      // a18
      // a28
      // a18
      // a28
      // Target expression
      // (as target) t81
      // start: WAR dependencies for t81
      // done: WAR dependencies for t81
      // end:  	$volatile t81 := ( $mux (a18 > a28) a18  a28 )  $buffering 1
      // start: WAR dependencies for t82
      // done: WAR dependencies for t82
      // start:  	$volatile t82 := ( $mux (a38 > a48) a38  a48 )  $buffering 1
      //  file prog.linked.opt.aa, line 226
      // volatile! 
      // Source expression
      // ( $mux (a38 > a48) a38  a48 ) 
      // (a38 > a48)
      // a38
      // a48
      // a38
      // a48
      // Target expression
      // (as target) t82
      // start: WAR dependencies for t82
      // done: WAR dependencies for t82
      // end:  	$volatile t82 := ( $mux (a38 > a48) a38  a48 )  $buffering 1
      // start: WAR dependencies for out8
      // done: WAR dependencies for out8
      // start:  	$volatile out8 := ( $mux (t81 > t82) t81  t82 )  $buffering 1
      //  file prog.linked.opt.aa, line 227
      // volatile! 
      // Source expression
      // ( $mux (t81 > t82) t81  t82 ) 
      // (t81 > t82)
      // t81
      // t82
      // t81
      // t82
      // Target expression
      // (as target) out8
      // start: WAR dependencies for out8
      // done: WAR dependencies for out8
      // end:  	$volatile out8 := ( $mux (t81 > t82) t81  t82 )  $buffering 1
      // start:  	index2_755_delayed_7_0 := index2 $buffering 7 $cut_through // bits of buffering = 56. 
      //  file prog.linked.opt.aa, line 228
      $T[assign_stmt_757_sample_start_] 
      $T[assign_stmt_757_sample_completed_] 
      $T[assign_stmt_757_update_start_] 
      $T[assign_stmt_757_update_completed_] 
      // Source expression
      // index2
      // Target expression
      // (as target) index2_755_delayed_7_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_757_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_757_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_757_sample_start_ &-> (assign_stmt_757_Sample)
      assign_stmt_757_sample_completed_ <-& (assign_stmt_757_Sample)
      assign_stmt_757_sample_completed_ &-> ($null)
      assign_stmt_757_update_start_ &-> (assign_stmt_757_Update)
      assign_stmt_757_update_completed_ <-& (assign_stmt_757_Update)
      // start: Forward dependencies from index2 to transition assign_stmt_757_sample_start_
      assign_stmt_757_sample_start_ <-& ($entry)
      // done: Forward dependencies from index2 to transition assign_stmt_757_sample_start_
      // RAW reenables for index2
      index2_update_enable o<-& (assign_stmt_757_sample_completed_ 0)
      // self-release: 
      assign_stmt_757_sample_start_ o<-& (assign_stmt_757_sample_completed_ 1)
      $null &-> (assign_stmt_757_update_start_)
      assign_stmt_757_update_start_ o<-& (assign_stmt_757_update_completed_ 0)
      // start: WAR dependencies for index2_755_delayed_7_0
      // done: WAR dependencies for index2_755_delayed_7_0
      // end:  	index2_755_delayed_7_0 := index2 $buffering 7 $cut_through // bits of buffering = 56. 
      // start:  	addr_756_delayed_7_0 := addr $buffering 7 $cut_through // bits of buffering = 224. 
      //  file prog.linked.opt.aa, line 229
      $T[assign_stmt_760_sample_start_] 
      $T[assign_stmt_760_sample_completed_] 
      $T[assign_stmt_760_update_start_] 
      $T[assign_stmt_760_update_completed_] 
      // Source expression
      // addr
      // Target expression
      // (as target) addr_756_delayed_7_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_760_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_760_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_760_sample_start_ &-> (assign_stmt_760_Sample)
      assign_stmt_760_sample_completed_ <-& (assign_stmt_760_Sample)
      assign_stmt_760_sample_completed_ &-> ($null)
      assign_stmt_760_update_start_ &-> (assign_stmt_760_Update)
      assign_stmt_760_update_completed_ <-& (assign_stmt_760_Update)
      // start: Forward dependencies from addr to transition assign_stmt_760_sample_start_
      assign_stmt_760_sample_start_ <-& ($entry)
      // done: Forward dependencies from addr to transition assign_stmt_760_sample_start_
      // RAW reenables for addr
      addr_update_enable o<-& (assign_stmt_760_sample_completed_ 0)
      // self-release: 
      assign_stmt_760_sample_start_ o<-& (assign_stmt_760_sample_completed_ 1)
      $null &-> (assign_stmt_760_update_start_)
      assign_stmt_760_update_start_ o<-& (assign_stmt_760_update_completed_ 0)
      // start: WAR dependencies for addr_756_delayed_7_0
      // done: WAR dependencies for addr_756_delayed_7_0
      // end:  	addr_756_delayed_7_0 := addr $buffering 7 $cut_through // bits of buffering = 224. 
      // start: 	$call writeModule_maxPool (index2_755_delayed_7_0 addr_756_delayed_7_0 (((($bitcast ($uint<8>) out1 ) && ($bitcast ($uint<8>) out2 )) && (($bitcast ($uint<8>) out3 ) && ($bitcast ($uint<8>) out4 ))) && ((($bitcast ($uint<8>) out5 ) && ($bitcast ($uint<8>) out6 )) && (($bitcast ($uint<8>) out7 ) && ($bitcast ($uint<8>) out8 )))) ) (d1 ) 
      //  file prog.linked.opt.aa, line 230
      $T[call_stmt_788_sample_start_] 
      $T[call_stmt_788_sample_completed_] 
      $T[call_stmt_788_update_start_] 
      $T[call_stmt_788_update_completed_] 
      // Call input argument 0
      // index2_755_delayed_7_0
      // Call input argument 1
      // addr_756_delayed_7_0
      // Call input argument 2
      // (((($bitcast ($uint<8>) out1 ) && ($bitcast ($uint<8>) out2 )) && (($bitcast ($uint<8>) out3 ) && ($bitcast ($uint<8>) out4 ))) && ((($bitcast ($uint<8>) out5 ) && ($bitcast ($uint<8>) out6 )) && (($bitcast ($uint<8>) out7 ) && ($bitcast ($uint<8>) out8 ))))
      // ((($bitcast ($uint<8>) out1 ) && ($bitcast ($uint<8>) out2 )) && (($bitcast ($uint<8>) out3 ) && ($bitcast ($uint<8>) out4 )))
      // (($bitcast ($uint<8>) out1 ) && ($bitcast ($uint<8>) out2 ))
      // ($bitcast ($uint<8>) out1 )
      // out1
      // ($bitcast ($uint<8>) out2 )
      // out2
      // (($bitcast ($uint<8>) out3 ) && ($bitcast ($uint<8>) out4 ))
      // ($bitcast ($uint<8>) out3 )
      // out3
      // ($bitcast ($uint<8>) out4 )
      // out4
      // ((($bitcast ($uint<8>) out5 ) && ($bitcast ($uint<8>) out6 )) && (($bitcast ($uint<8>) out7 ) && ($bitcast ($uint<8>) out8 )))
      // (($bitcast ($uint<8>) out5 ) && ($bitcast ($uint<8>) out6 ))
      // ($bitcast ($uint<8>) out5 )
      // out5
      // ($bitcast ($uint<8>) out6 )
      // out6
      // (($bitcast ($uint<8>) out7 ) && ($bitcast ($uint<8>) out8 ))
      // ($bitcast ($uint<8>) out7 )
      // out7
      // ($bitcast ($uint<8>) out8 )
      // out8
      // start: Forward dependencies from index2_755_delayed_7_0 to transition call_stmt_788_sample_start_
      call_stmt_788_sample_start_ <-& (assign_stmt_757_update_completed_)
      // done: Forward dependencies from index2_755_delayed_7_0 to transition call_stmt_788_sample_start_
      // RAW reenables for index2_755_delayed_7_0
      assign_stmt_757_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      // start: Forward dependencies from addr_756_delayed_7_0 to transition call_stmt_788_sample_start_
      call_stmt_788_sample_start_ <-& (assign_stmt_760_update_completed_)
      // done: Forward dependencies from addr_756_delayed_7_0 to transition call_stmt_788_sample_start_
      // RAW reenables for addr_756_delayed_7_0
      assign_stmt_760_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      // start: Forward dependencies from (((($bitcast ($uint<8>) out1 ) && ($bitcast ($uint<8>) out2 )) && (($bitcast ($uint<8>) out3 ) && ($bitcast ($uint<8>) out4 ))) && ((($bitcast ($uint<8>) out5 ) && ($bitcast ($uint<8>) out6 )) && (($bitcast ($uint<8>) out7 ) && ($bitcast ($uint<8>) out8 )))) to transition call_stmt_788_sample_start_
      call_stmt_788_sample_start_ <-& (slice_308_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_312_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_316_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_320_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_324_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_328_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_332_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_336_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_340_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_344_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_348_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_352_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_356_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_360_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_364_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_368_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_372_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_376_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_380_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_384_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_388_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_392_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_396_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_400_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_404_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_408_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_412_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_416_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_420_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_424_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_428_update_completed_)
      call_stmt_788_sample_start_ <-& (slice_432_update_completed_)
      // done: Forward dependencies from (((($bitcast ($uint<8>) out1 ) && ($bitcast ($uint<8>) out2 )) && (($bitcast ($uint<8>) out3 ) && ($bitcast ($uint<8>) out4 ))) && ((($bitcast ($uint<8>) out5 ) && ($bitcast ($uint<8>) out6 )) && (($bitcast ($uint<8>) out7 ) && ($bitcast ($uint<8>) out8 )))) to transition call_stmt_788_sample_start_
      // RAW reenables for (((($bitcast ($uint<8>) out1 ) && ($bitcast ($uint<8>) out2 )) && (($bitcast ($uint<8>) out3 ) && ($bitcast ($uint<8>) out4 ))) && ((($bitcast ($uint<8>) out5 ) && ($bitcast ($uint<8>) out6 )) && (($bitcast ($uint<8>) out7 ) && ($bitcast ($uint<8>) out8 ))))
      slice_308_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_312_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_316_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_320_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_324_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_328_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_332_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_336_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_340_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_344_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_348_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_352_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_356_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_360_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_364_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_368_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_372_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_376_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_380_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_384_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_388_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_392_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_396_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_400_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_404_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_408_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_412_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_416_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_420_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_424_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_428_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      slice_432_update_start_ o<-& (call_stmt_788_sample_completed_ 0)
      ;;[call_stmt_788_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_788_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_788_sample_start_ &-> (call_stmt_788_Sample)
      call_stmt_788_sample_completed_ <-& (call_stmt_788_Sample)
      call_stmt_788_sample_completed_ &-> ($null)
      call_stmt_788_update_start_ &-> (call_stmt_788_Update)
      call_stmt_788_update_completed_ <-& (call_stmt_788_Update)
      // Call output argument 0
      // (as target) d1
      // self-release: 
      call_stmt_788_sample_start_ o<-& (call_stmt_788_sample_completed_ 1)
      $null &-> (call_stmt_788_update_start_)
      call_stmt_788_update_start_ o<-& (call_stmt_788_update_completed_ 0)
      // start: WAR dependencies for d1
      // done: WAR dependencies for d1
      // end: 	$call writeModule_maxPool (index2_755_delayed_7_0 addr_756_delayed_7_0 (((($bitcast ($uint<8>) out1 ) && ($bitcast ($uint<8>) out2 )) && (($bitcast ($uint<8>) out3 ) && ($bitcast ($uint<8>) out4 ))) && ((($bitcast ($uint<8>) out5 ) && ($bitcast ($uint<8>) out6 )) && (($bitcast ($uint<8>) out7 ) && ($bitcast ($uint<8>) out8 )))) ) (d1 ) 
      // start:  	output := ($bitcast ($uint<8>) out1 ) $buffering 1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 231
      // Source expression
      // ($bitcast ($uint<8>) out1 )
      $T[type_cast_791_sample_start_] 
      $T[type_cast_791_sample_completed_] 
      $T[type_cast_791_update_start_] 
      $T[type_cast_791_update_completed_] 
      // out1
      // start: Forward dependencies from out1 to transition type_cast_791_sample_start_
      type_cast_791_sample_start_ <-& (slice_308_update_completed_)
      type_cast_791_sample_start_ <-& (slice_340_update_completed_)
      type_cast_791_sample_start_ <-& (slice_372_update_completed_)
      type_cast_791_sample_start_ <-& (slice_404_update_completed_)
      // done: Forward dependencies from out1 to transition type_cast_791_sample_start_
      ;;[type_cast_791_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_791_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_791_sample_start_ &-> (type_cast_791_Sample)
      type_cast_791_sample_completed_ <-& (type_cast_791_Sample)
      type_cast_791_sample_completed_ &-> ($null)
      type_cast_791_update_start_ &-> (type_cast_791_Update)
      type_cast_791_update_completed_ <-& (type_cast_791_Update)
      // RAW reenables for out1
      slice_308_update_start_ o<-& (type_cast_791_sample_completed_ 0)
      slice_340_update_start_ o<-& (type_cast_791_sample_completed_ 0)
      slice_372_update_start_ o<-& (type_cast_791_sample_completed_ 0)
      slice_404_update_start_ o<-& (type_cast_791_sample_completed_ 0)
      // self-release: 
      type_cast_791_sample_start_ o<-& (type_cast_791_sample_completed_ 1)
      $null &-> (type_cast_791_update_start_)
      type_cast_791_update_start_ o<-& (type_cast_791_update_completed_ 0)
      // Target expression
      // (as target) output
      // output
      // write to interface object
      // start: WAR dependencies for output
      // done: WAR dependencies for output
      // output
      // write to interface object
      type_cast_791_update_start_ <-& (output_update_enable)
      // end:  	output := ($bitcast ($uint<8>) out1 ) $buffering 1// bits of buffering = 8. 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MAIN_MEM_REQUEST
      // read-dependencies for pipe MAIN_MEM_REQUEST
      // write-dependencies for pipe MAIN_MEM_REQUEST
      // signal write dependencies for MAIN_MEM_REQUEST
      // pipe read/write dependencies for pipe MAIN_MEM_RESPONSE
      // read-dependencies for pipe MAIN_MEM_RESPONSE
      // write-dependencies for pipe MAIN_MEM_RESPONSE
      // signal write dependencies for MAIN_MEM_RESPONSE
    }
    ( output_update_enable_in)
    ( addr_update_enable_out addr1_update_enable_out addr2_update_enable_out addr3_update_enable_out addr4_update_enable_out index1_update_enable_out index2_update_enable_out)
    $P [addr_update_enable] 
    $P [addr1_update_enable] 
    $P [addr2_update_enable] 
    $P [addr3_update_enable] 
    $P [addr4_update_enable] 
    $P [index1_update_enable] 
    $P [index2_update_enable] 
    $P [output_update_enable] 
    $bind addr_update_enable <= call_stmt_293_to_assign_stmt_792 : addr_update_enable_out
    $bind addr1_update_enable <= call_stmt_293_to_assign_stmt_792 : addr1_update_enable_out
    $bind addr2_update_enable <= call_stmt_293_to_assign_stmt_792 : addr2_update_enable_out
    $bind addr3_update_enable <= call_stmt_293_to_assign_stmt_792 : addr3_update_enable_out
    $bind addr4_update_enable <= call_stmt_293_to_assign_stmt_792 : addr4_update_enable_out
    $bind index1_update_enable <= call_stmt_293_to_assign_stmt_792 : index1_update_enable_out
    $bind index2_update_enable <= call_stmt_293_to_assign_stmt_792 : index2_update_enable_out
    $bind output_update_enable => call_stmt_293_to_assign_stmt_792 : output_update_enable_in
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %maxPool4
    //  file prog.linked.opt.aa, line 131
    // 	$call readModule_maxPool (index1 addr1 ) (c1 ) 
    //  file prog.linked.opt.aa, line 136
    // 	$call readModule_maxPool (index1 addr2 ) (c2 ) 
    //  file prog.linked.opt.aa, line 137
    // 	$call readModule_maxPool (index1 addr3 ) (c3 ) 
    //  file prog.linked.opt.aa, line 138
    // 	$call readModule_maxPool (index1 addr4 ) (c4 ) 
    //  file prog.linked.opt.aa, line 139
    // ( $mux (a11 > a21) a11  a21 ) 
    // ( $mux (a31 > a41) a31  a41 ) 
    // ( $mux (t11 > t12) t11  t12 ) 
    // ( $mux (a12 > a22) a12  a22 ) 
    // ( $mux (a32 > a42) a32  a42 ) 
    // ( $mux (t21 > t22) t21  t22 ) 
    // ( $mux (a13 > a23) a13  a23 ) 
    // ( $mux (a33 > a43) a33  a43 ) 
    // ( $mux (t31 > t32) t31  t32 ) 
    // ( $mux (a14 > a24) a14  a24 ) 
    // ( $mux (a34 > a44) a34  a44 ) 
    // ( $mux (t41 > t42) t41  t42 ) 
    // ( $mux (a15 > a25) a15  a25 ) 
    // ( $mux (a35 > a45) a35  a45 ) 
    // ( $mux (t51 > t52) t51  t52 ) 
    // ( $mux (a16 > a26) a16  a26 ) 
    // ( $mux (a36 > a46) a36  a46 ) 
    // ( $mux (t61 > t62) t61  t62 ) 
    // ( $mux (a17 > a27) a17  a27 ) 
    // ( $mux (a37 > a47) a37  a47 ) 
    // ( $mux (t71 > t72) t71  t72 ) 
    // ( $mux (a18 > a28) a18  a28 ) 
    // ( $mux (a38 > a48) a38  a48 ) 
    // ( $mux (t81 > t82) t81  t82 ) 
    // 	$call writeModule_maxPool (index2_755_delayed_7_0 addr_756_delayed_7_0 (((($bitcast ($uint<8>) out1 ) && ($bitcast ($uint<8>) out2 )) && (($bitcast ($uint<8>) out3 ) && ($bitcast ($uint<8>) out4 ))) && ((($bitcast ($uint<8>) out5 ) && ($bitcast ($uint<8>) out6 )) && (($bitcast ($uint<8>) out7 ) && ($bitcast ($uint<8>) out8 )))) ) (d1 ) 
    //  file prog.linked.opt.aa, line 230
    // 	$call readModule_maxPool (index1 addr1 ) (c1 ) 
    //  file prog.linked.opt.aa, line 136
    // c1
    $W[c1_293] : $int<64>
    // 	$call readModule_maxPool (index1 addr2 ) (c2 ) 
    //  file prog.linked.opt.aa, line 137
    // c2
    $W[c2_297] : $int<64>
    // 	$call readModule_maxPool (index1 addr3 ) (c3 ) 
    //  file prog.linked.opt.aa, line 138
    // c3
    $W[c3_301] : $int<64>
    // 	$call readModule_maxPool (index1 addr4 ) (c4 ) 
    //  file prog.linked.opt.aa, line 139
    // c4
    $W[c4_305] : $int<64>
    // 	sliced_v11 := ( $slice c1 63 56 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 140
    // sliced_v11
    $W[sliced_v11_309] : $int<8>
    // 	sliced_v12 := ( $slice c1 55 48 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 141
    // sliced_v12
    $W[sliced_v12_313] : $int<8>
    // 	sliced_v13 := ( $slice c1 47 40 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 142
    // sliced_v13
    $W[sliced_v13_317] : $int<8>
    // 	sliced_v14 := ( $slice c1 39 32 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 143
    // sliced_v14
    $W[sliced_v14_321] : $int<8>
    // 	sliced_v15 := ( $slice c1 31 24 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 144
    // sliced_v15
    $W[sliced_v15_325] : $int<8>
    // 	sliced_v16 := ( $slice c1 23 16 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 145
    // sliced_v16
    $W[sliced_v16_329] : $int<8>
    // 	sliced_v17 := ( $slice c1 15 8 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 146
    // sliced_v17
    $W[sliced_v17_333] : $int<8>
    // 	sliced_v18 := ( $slice c1 7 0 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 147
    // sliced_v18
    $W[sliced_v18_337] : $int<8>
    // 	sliced_v21 := ( $slice c2 63 56 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 148
    // sliced_v21
    $W[sliced_v21_341] : $int<8>
    // 	sliced_v22 := ( $slice c2 55 48 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 149
    // sliced_v22
    $W[sliced_v22_345] : $int<8>
    // 	sliced_v23 := ( $slice c2 47 40 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 150
    // sliced_v23
    $W[sliced_v23_349] : $int<8>
    // 	sliced_v24 := ( $slice c2 39 32 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 151
    // sliced_v24
    $W[sliced_v24_353] : $int<8>
    // 	sliced_v25 := ( $slice c2 31 24 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 152
    // sliced_v25
    $W[sliced_v25_357] : $int<8>
    // 	sliced_v26 := ( $slice c2 23 16 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 153
    // sliced_v26
    $W[sliced_v26_361] : $int<8>
    // 	sliced_v27 := ( $slice c2 15 8 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 154
    // sliced_v27
    $W[sliced_v27_365] : $int<8>
    // 	sliced_v28 := ( $slice c2 7 0 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 155
    // sliced_v28
    $W[sliced_v28_369] : $int<8>
    // 	sliced_v31 := ( $slice c3 63 56 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 156
    // sliced_v31
    $W[sliced_v31_373] : $int<8>
    // 	sliced_v32 := ( $slice c3 55 48 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 157
    // sliced_v32
    $W[sliced_v32_377] : $int<8>
    // 	sliced_v33 := ( $slice c3 47 40 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 158
    // sliced_v33
    $W[sliced_v33_381] : $int<8>
    // 	sliced_v34 := ( $slice c3 39 32 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 159
    // sliced_v34
    $W[sliced_v34_385] : $int<8>
    // 	sliced_v35 := ( $slice c3 31 24 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 160
    // sliced_v35
    $W[sliced_v35_389] : $int<8>
    // 	sliced_v36 := ( $slice c3 23 16 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 161
    // sliced_v36
    $W[sliced_v36_393] : $int<8>
    // 	sliced_v37 := ( $slice c3 15 8 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 162
    // sliced_v37
    $W[sliced_v37_397] : $int<8>
    // 	sliced_v38 := ( $slice c3 7 0 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 163
    // sliced_v38
    $W[sliced_v38_401] : $int<8>
    // 	sliced_v41 := ( $slice c4 63 56 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 164
    // sliced_v41
    $W[sliced_v41_405] : $int<8>
    // 	sliced_v42 := ( $slice c4 55 48 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 165
    // sliced_v42
    $W[sliced_v42_409] : $int<8>
    // 	sliced_v43 := ( $slice c4 47 40 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 166
    // sliced_v43
    $W[sliced_v43_413] : $int<8>
    // 	sliced_v44 := ( $slice c4 39 32 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 167
    // sliced_v44
    $W[sliced_v44_417] : $int<8>
    // 	sliced_v45 := ( $slice c4 31 24 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 168
    // sliced_v45
    $W[sliced_v45_421] : $int<8>
    // 	sliced_v46 := ( $slice c4 23 16 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 169
    // sliced_v46
    $W[sliced_v46_425] : $int<8>
    // 	sliced_v47 := ( $slice c4 15 8 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 170
    // sliced_v47
    $W[sliced_v47_429] : $int<8>
    // 	sliced_v48 := ( $slice c4 7 0 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 171
    // sliced_v48
    $W[sliced_v48_433] : $int<8>
    // 	$volatile a11 := ($bitcast ($int<8>) sliced_v11 ) $buffering 1
    //  file prog.linked.opt.aa, line 172
    // a11
    $W[a11_438] : $int<8>
    // 	$volatile a12 := ($bitcast ($int<8>) sliced_v12 ) $buffering 1
    //  file prog.linked.opt.aa, line 173
    // a12
    $W[a12_442] : $int<8>
    // 	$volatile a13 := ($bitcast ($int<8>) sliced_v13 ) $buffering 1
    //  file prog.linked.opt.aa, line 174
    // a13
    $W[a13_446] : $int<8>
    // 	$volatile a14 := ($bitcast ($int<8>) sliced_v14 ) $buffering 1
    //  file prog.linked.opt.aa, line 175
    // a14
    $W[a14_450] : $int<8>
    // 	$volatile a15 := ($bitcast ($int<8>) sliced_v15 ) $buffering 1
    //  file prog.linked.opt.aa, line 176
    // a15
    $W[a15_454] : $int<8>
    // 	$volatile a16 := ($bitcast ($int<8>) sliced_v16 ) $buffering 1
    //  file prog.linked.opt.aa, line 177
    // a16
    $W[a16_458] : $int<8>
    // 	$volatile a17 := ($bitcast ($int<8>) sliced_v17 ) $buffering 1
    //  file prog.linked.opt.aa, line 178
    // a17
    $W[a17_462] : $int<8>
    // 	$volatile a18 := ($bitcast ($int<8>) sliced_v18 ) $buffering 1
    //  file prog.linked.opt.aa, line 179
    // a18
    $W[a18_466] : $int<8>
    // 	$volatile a21 := ($bitcast ($int<8>) sliced_v21 ) $buffering 1
    //  file prog.linked.opt.aa, line 180
    // a21
    $W[a21_470] : $int<8>
    // 	$volatile a22 := ($bitcast ($int<8>) sliced_v22 ) $buffering 1
    //  file prog.linked.opt.aa, line 181
    // a22
    $W[a22_474] : $int<8>
    // 	$volatile a23 := ($bitcast ($int<8>) sliced_v23 ) $buffering 1
    //  file prog.linked.opt.aa, line 182
    // a23
    $W[a23_478] : $int<8>
    // 	$volatile a24 := ($bitcast ($int<8>) sliced_v24 ) $buffering 1
    //  file prog.linked.opt.aa, line 183
    // a24
    $W[a24_482] : $int<8>
    // 	$volatile a25 := ($bitcast ($int<8>) sliced_v25 ) $buffering 1
    //  file prog.linked.opt.aa, line 184
    // a25
    $W[a25_486] : $int<8>
    // 	$volatile a26 := ($bitcast ($int<8>) sliced_v26 ) $buffering 1
    //  file prog.linked.opt.aa, line 185
    // a26
    $W[a26_490] : $int<8>
    // 	$volatile a27 := ($bitcast ($int<8>) sliced_v27 ) $buffering 1
    //  file prog.linked.opt.aa, line 186
    // a27
    $W[a27_494] : $int<8>
    // 	$volatile a28 := ($bitcast ($int<8>) sliced_v28 ) $buffering 1
    //  file prog.linked.opt.aa, line 187
    // a28
    $W[a28_498] : $int<8>
    // 	$volatile a31 := ($bitcast ($int<8>) sliced_v31 ) $buffering 1
    //  file prog.linked.opt.aa, line 188
    // a31
    $W[a31_502] : $int<8>
    // 	$volatile a32 := ($bitcast ($int<8>) sliced_v32 ) $buffering 1
    //  file prog.linked.opt.aa, line 189
    // a32
    $W[a32_506] : $int<8>
    // 	$volatile a33 := ($bitcast ($int<8>) sliced_v33 ) $buffering 1
    //  file prog.linked.opt.aa, line 190
    // a33
    $W[a33_510] : $int<8>
    // 	$volatile a34 := ($bitcast ($int<8>) sliced_v34 ) $buffering 1
    //  file prog.linked.opt.aa, line 191
    // a34
    $W[a34_514] : $int<8>
    // 	$volatile a35 := ($bitcast ($int<8>) sliced_v35 ) $buffering 1
    //  file prog.linked.opt.aa, line 192
    // a35
    $W[a35_518] : $int<8>
    // 	$volatile a36 := ($bitcast ($int<8>) sliced_v36 ) $buffering 1
    //  file prog.linked.opt.aa, line 193
    // a36
    $W[a36_522] : $int<8>
    // 	$volatile a37 := ($bitcast ($int<8>) sliced_v37 ) $buffering 1
    //  file prog.linked.opt.aa, line 194
    // a37
    $W[a37_526] : $int<8>
    // 	$volatile a38 := ($bitcast ($int<8>) sliced_v38 ) $buffering 1
    //  file prog.linked.opt.aa, line 195
    // a38
    $W[a38_530] : $int<8>
    // 	$volatile a41 := ($bitcast ($int<8>) sliced_v41 ) $buffering 1
    //  file prog.linked.opt.aa, line 196
    // a41
    $W[a41_534] : $int<8>
    // 	$volatile a42 := ($bitcast ($int<8>) sliced_v42 ) $buffering 1
    //  file prog.linked.opt.aa, line 197
    // a42
    $W[a42_538] : $int<8>
    // 	$volatile a43 := ($bitcast ($int<8>) sliced_v43 ) $buffering 1
    //  file prog.linked.opt.aa, line 198
    // a43
    $W[a43_542] : $int<8>
    // 	$volatile a44 := ($bitcast ($int<8>) sliced_v44 ) $buffering 1
    //  file prog.linked.opt.aa, line 199
    // a44
    $W[a44_546] : $int<8>
    // 	$volatile a45 := ($bitcast ($int<8>) sliced_v45 ) $buffering 1
    //  file prog.linked.opt.aa, line 200
    // a45
    $W[a45_550] : $int<8>
    // 	$volatile a46 := ($bitcast ($int<8>) sliced_v46 ) $buffering 1
    //  file prog.linked.opt.aa, line 201
    // a46
    $W[a46_554] : $int<8>
    // 	$volatile a47 := ($bitcast ($int<8>) sliced_v47 ) $buffering 1
    //  file prog.linked.opt.aa, line 202
    // a47
    $W[a47_558] : $int<8>
    // 	$volatile a48 := ($bitcast ($int<8>) sliced_v48 ) $buffering 1
    //  file prog.linked.opt.aa, line 203
    // a48
    $W[a48_562] : $int<8>
    // 	$volatile t11 := ( $mux (a11 > a21) a11  a21 )  $buffering 1
    //  file prog.linked.opt.aa, line 204
    // (a11 > a21)
    $intermediate $W[SGT_i8_u1_566_wire] : $int<1>
    // t11
    $W[t11_570] : $int<8>
    // 	$volatile t12 := ( $mux (a31 > a41) a31  a41 )  $buffering 1
    //  file prog.linked.opt.aa, line 205
    // (a31 > a41)
    $intermediate $W[SGT_i8_u1_574_wire] : $int<1>
    // t12
    $W[t12_578] : $int<8>
    // 	$volatile out1 := ( $mux (t11 > t12) t11  t12 )  $buffering 1
    //  file prog.linked.opt.aa, line 206
    // (t11 > t12)
    $intermediate $W[SGT_i8_u1_582_wire] : $int<1>
    // out1
    $W[out1_586] : $int<8>
    // 	$volatile t21 := ( $mux (a12 > a22) a12  a22 )  $buffering 1
    //  file prog.linked.opt.aa, line 207
    // (a12 > a22)
    $intermediate $W[SGT_i8_u1_590_wire] : $int<1>
    // t21
    $W[t21_594] : $int<8>
    // 	$volatile t22 := ( $mux (a32 > a42) a32  a42 )  $buffering 1
    //  file prog.linked.opt.aa, line 208
    // (a32 > a42)
    $intermediate $W[SGT_i8_u1_598_wire] : $int<1>
    // t22
    $W[t22_602] : $int<8>
    // 	$volatile out2 := ( $mux (t21 > t22) t21  t22 )  $buffering 1
    //  file prog.linked.opt.aa, line 209
    // (t21 > t22)
    $intermediate $W[SGT_i8_u1_606_wire] : $int<1>
    // out2
    $W[out2_610] : $int<8>
    // 	$volatile t31 := ( $mux (a13 > a23) a13  a23 )  $buffering 1
    //  file prog.linked.opt.aa, line 210
    // (a13 > a23)
    $intermediate $W[SGT_i8_u1_614_wire] : $int<1>
    // t31
    $W[t31_618] : $int<8>
    // 	$volatile t32 := ( $mux (a33 > a43) a33  a43 )  $buffering 1
    //  file prog.linked.opt.aa, line 211
    // (a33 > a43)
    $intermediate $W[SGT_i8_u1_622_wire] : $int<1>
    // t32
    $W[t32_626] : $int<8>
    // 	$volatile out3 := ( $mux (t31 > t32) t31  t32 )  $buffering 1
    //  file prog.linked.opt.aa, line 212
    // (t31 > t32)
    $intermediate $W[SGT_i8_u1_630_wire] : $int<1>
    // out3
    $W[out3_634] : $int<8>
    // 	$volatile t41 := ( $mux (a14 > a24) a14  a24 )  $buffering 1
    //  file prog.linked.opt.aa, line 213
    // (a14 > a24)
    $intermediate $W[SGT_i8_u1_638_wire] : $int<1>
    // t41
    $W[t41_642] : $int<8>
    // 	$volatile t42 := ( $mux (a34 > a44) a34  a44 )  $buffering 1
    //  file prog.linked.opt.aa, line 214
    // (a34 > a44)
    $intermediate $W[SGT_i8_u1_646_wire] : $int<1>
    // t42
    $W[t42_650] : $int<8>
    // 	$volatile out4 := ( $mux (t41 > t42) t41  t42 )  $buffering 1
    //  file prog.linked.opt.aa, line 215
    // (t41 > t42)
    $intermediate $W[SGT_i8_u1_654_wire] : $int<1>
    // out4
    $W[out4_658] : $int<8>
    // 	$volatile t51 := ( $mux (a15 > a25) a15  a25 )  $buffering 1
    //  file prog.linked.opt.aa, line 216
    // (a15 > a25)
    $intermediate $W[SGT_i8_u1_662_wire] : $int<1>
    // t51
    $W[t51_666] : $int<8>
    // 	$volatile t52 := ( $mux (a35 > a45) a35  a45 )  $buffering 1
    //  file prog.linked.opt.aa, line 217
    // (a35 > a45)
    $intermediate $W[SGT_i8_u1_670_wire] : $int<1>
    // t52
    $W[t52_674] : $int<8>
    // 	$volatile out5 := ( $mux (t51 > t52) t51  t52 )  $buffering 1
    //  file prog.linked.opt.aa, line 218
    // (t51 > t52)
    $intermediate $W[SGT_i8_u1_678_wire] : $int<1>
    // out5
    $W[out5_682] : $int<8>
    // 	$volatile t61 := ( $mux (a16 > a26) a16  a26 )  $buffering 1
    //  file prog.linked.opt.aa, line 219
    // (a16 > a26)
    $intermediate $W[SGT_i8_u1_686_wire] : $int<1>
    // t61
    $W[t61_690] : $int<8>
    // 	$volatile t62 := ( $mux (a36 > a46) a36  a46 )  $buffering 1
    //  file prog.linked.opt.aa, line 220
    // (a36 > a46)
    $intermediate $W[SGT_i8_u1_694_wire] : $int<1>
    // t62
    $W[t62_698] : $int<8>
    // 	$volatile out6 := ( $mux (t61 > t62) t61  t62 )  $buffering 1
    //  file prog.linked.opt.aa, line 221
    // (t61 > t62)
    $intermediate $W[SGT_i8_u1_702_wire] : $int<1>
    // out6
    $W[out6_706] : $int<8>
    // 	$volatile t71 := ( $mux (a17 > a27) a17  a27 )  $buffering 1
    //  file prog.linked.opt.aa, line 222
    // (a17 > a27)
    $intermediate $W[SGT_i8_u1_710_wire] : $int<1>
    // t71
    $W[t71_714] : $int<8>
    // 	$volatile t72 := ( $mux (a37 > a47) a37  a47 )  $buffering 1
    //  file prog.linked.opt.aa, line 223
    // (a37 > a47)
    $intermediate $W[SGT_i8_u1_718_wire] : $int<1>
    // t72
    $W[t72_722] : $int<8>
    // 	$volatile out7 := ( $mux (t71 > t72) t71  t72 )  $buffering 1
    //  file prog.linked.opt.aa, line 224
    // (t71 > t72)
    $intermediate $W[SGT_i8_u1_726_wire] : $int<1>
    // out7
    $W[out7_730] : $int<8>
    // 	$volatile t81 := ( $mux (a18 > a28) a18  a28 )  $buffering 1
    //  file prog.linked.opt.aa, line 225
    // (a18 > a28)
    $intermediate $W[SGT_i8_u1_734_wire] : $int<1>
    // t81
    $W[t81_738] : $int<8>
    // 	$volatile t82 := ( $mux (a38 > a48) a38  a48 )  $buffering 1
    //  file prog.linked.opt.aa, line 226
    // (a38 > a48)
    $intermediate $W[SGT_i8_u1_742_wire] : $int<1>
    // t82
    $W[t82_746] : $int<8>
    // 	$volatile out8 := ( $mux (t81 > t82) t81  t82 )  $buffering 1
    //  file prog.linked.opt.aa, line 227
    // (t81 > t82)
    $intermediate $W[SGT_i8_u1_750_wire] : $int<1>
    // out8
    $W[out8_754] : $int<8>
    // 	index2_755_delayed_7_0 := index2 $buffering 7 $cut_through // bits of buffering = 56. 
    //  file prog.linked.opt.aa, line 228
    // index2_755_delayed_7_0
    $W[index2_755_delayed_7_0_757] : $int<8>
    // 	addr_756_delayed_7_0 := addr $buffering 7 $cut_through // bits of buffering = 224. 
    //  file prog.linked.opt.aa, line 229
    // addr_756_delayed_7_0
    $W[addr_756_delayed_7_0_760] : $int<32>
    // 	$call writeModule_maxPool (index2_755_delayed_7_0 addr_756_delayed_7_0 (((($bitcast ($uint<8>) out1 ) && ($bitcast ($uint<8>) out2 )) && (($bitcast ($uint<8>) out3 ) && ($bitcast ($uint<8>) out4 ))) && ((($bitcast ($uint<8>) out5 ) && ($bitcast ($uint<8>) out6 )) && (($bitcast ($uint<8>) out7 ) && ($bitcast ($uint<8>) out8 )))) ) (d1 ) 
    //  file prog.linked.opt.aa, line 230
    // ($bitcast ($uint<8>) out1 )
    $intermediate $W[type_cast_764_wire] : $int<8>
    // ($bitcast ($uint<8>) out2 )
    $intermediate $W[type_cast_766_wire] : $int<8>
    // (($bitcast ($uint<8>) out1 ) && ($bitcast ($uint<8>) out2 ))
    $intermediate $W[CONCAT_u8_u16_767_wire] : $int<16>
    // ($bitcast ($uint<8>) out3 )
    $intermediate $W[type_cast_770_wire] : $int<8>
    // ($bitcast ($uint<8>) out4 )
    $intermediate $W[type_cast_772_wire] : $int<8>
    // (($bitcast ($uint<8>) out3 ) && ($bitcast ($uint<8>) out4 ))
    $intermediate $W[CONCAT_u8_u16_773_wire] : $int<16>
    // ((($bitcast ($uint<8>) out1 ) && ($bitcast ($uint<8>) out2 )) && (($bitcast ($uint<8>) out3 ) && ($bitcast ($uint<8>) out4 )))
    $intermediate $W[CONCAT_u16_u32_774_wire] : $int<32>
    // ($bitcast ($uint<8>) out5 )
    $intermediate $W[type_cast_776_wire] : $int<8>
    // ($bitcast ($uint<8>) out6 )
    $intermediate $W[type_cast_778_wire] : $int<8>
    // (($bitcast ($uint<8>) out5 ) && ($bitcast ($uint<8>) out6 ))
    $intermediate $W[CONCAT_u8_u16_779_wire] : $int<16>
    // ($bitcast ($uint<8>) out7 )
    $intermediate $W[type_cast_781_wire] : $int<8>
    // ($bitcast ($uint<8>) out8 )
    $intermediate $W[type_cast_783_wire] : $int<8>
    // (($bitcast ($uint<8>) out7 ) && ($bitcast ($uint<8>) out8 ))
    $intermediate $W[CONCAT_u8_u16_784_wire] : $int<16>
    // ((($bitcast ($uint<8>) out5 ) && ($bitcast ($uint<8>) out6 )) && (($bitcast ($uint<8>) out7 ) && ($bitcast ($uint<8>) out8 )))
    $intermediate $W[CONCAT_u16_u32_785_wire] : $int<32>
    // (((($bitcast ($uint<8>) out1 ) && ($bitcast ($uint<8>) out2 )) && (($bitcast ($uint<8>) out3 ) && ($bitcast ($uint<8>) out4 ))) && ((($bitcast ($uint<8>) out5 ) && ($bitcast ($uint<8>) out6 )) && (($bitcast ($uint<8>) out7 ) && ($bitcast ($uint<8>) out8 ))))
    $intermediate $W[CONCAT_u32_u64_786_wire] : $int<64>
    // d1
    $W[d1_788] : $int<1>
    // 	output := ($bitcast ($uint<8>) out1 ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 231
    // output
    // 	$call readModule_maxPool (index1 addr1 ) (c1 ) 
    //  file prog.linked.opt.aa, line 136
    $call [call_stmt_293_call] $module readModule_maxPool(index1 addr1) (c1_293)   $fullrate
    $delay call_stmt_293_call 6
    $buffering  $in call_stmt_293_call index1 1
    $buffering  $in call_stmt_293_call addr1 1
    $buffering  $out call_stmt_293_call c1_293 1
    // 	$call readModule_maxPool (index1 addr2 ) (c2 ) 
    //  file prog.linked.opt.aa, line 137
    $call [call_stmt_297_call] $module readModule_maxPool(index1 addr2) (c2_297)   $fullrate
    $delay call_stmt_297_call 6
    $buffering  $in call_stmt_297_call index1 1
    $buffering  $in call_stmt_297_call addr2 1
    $buffering  $out call_stmt_297_call c2_297 1
    // 	$call readModule_maxPool (index1 addr3 ) (c3 ) 
    //  file prog.linked.opt.aa, line 138
    $call [call_stmt_301_call] $module readModule_maxPool(index1 addr3) (c3_301)   $fullrate
    $delay call_stmt_301_call 6
    $buffering  $in call_stmt_301_call index1 1
    $buffering  $in call_stmt_301_call addr3 1
    $buffering  $out call_stmt_301_call c3_301 1
    // 	$call readModule_maxPool (index1 addr4 ) (c4 ) 
    //  file prog.linked.opt.aa, line 139
    $call [call_stmt_305_call] $module readModule_maxPool(index1 addr4) (c4_305)   $fullrate
    $delay call_stmt_305_call 6
    $buffering  $in call_stmt_305_call index1 1
    $buffering  $in call_stmt_305_call addr4 1
    $buffering  $out call_stmt_305_call c4_305 1
    // 	sliced_v11 := ( $slice c1 63 56 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 140
    // ( $slice c1 63 56 ) 
    [:] [slice_308_inst] (c1_293 63 56) (sliced_v11_309)  $fullrate
    $buffering  $out slice_308_inst sliced_v11_309 1
    $delay slice_308_inst 1
    // 	sliced_v12 := ( $slice c1 55 48 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 141
    // ( $slice c1 55 48 ) 
    [:] [slice_312_inst] (c1_293 55 48) (sliced_v12_313)  $fullrate
    $buffering  $out slice_312_inst sliced_v12_313 1
    $delay slice_312_inst 1
    // 	sliced_v13 := ( $slice c1 47 40 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 142
    // ( $slice c1 47 40 ) 
    [:] [slice_316_inst] (c1_293 47 40) (sliced_v13_317)  $fullrate
    $buffering  $out slice_316_inst sliced_v13_317 1
    $delay slice_316_inst 1
    // 	sliced_v14 := ( $slice c1 39 32 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 143
    // ( $slice c1 39 32 ) 
    [:] [slice_320_inst] (c1_293 39 32) (sliced_v14_321)  $fullrate
    $buffering  $out slice_320_inst sliced_v14_321 1
    $delay slice_320_inst 1
    // 	sliced_v15 := ( $slice c1 31 24 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 144
    // ( $slice c1 31 24 ) 
    [:] [slice_324_inst] (c1_293 31 24) (sliced_v15_325)  $fullrate
    $buffering  $out slice_324_inst sliced_v15_325 1
    $delay slice_324_inst 1
    // 	sliced_v16 := ( $slice c1 23 16 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 145
    // ( $slice c1 23 16 ) 
    [:] [slice_328_inst] (c1_293 23 16) (sliced_v16_329)  $fullrate
    $buffering  $out slice_328_inst sliced_v16_329 1
    $delay slice_328_inst 1
    // 	sliced_v17 := ( $slice c1 15 8 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 146
    // ( $slice c1 15 8 ) 
    [:] [slice_332_inst] (c1_293 15 8) (sliced_v17_333)  $fullrate
    $buffering  $out slice_332_inst sliced_v17_333 1
    $delay slice_332_inst 1
    // 	sliced_v18 := ( $slice c1 7 0 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 147
    // ( $slice c1 7 0 ) 
    [:] [slice_336_inst] (c1_293 7 0) (sliced_v18_337)  $fullrate
    $buffering  $out slice_336_inst sliced_v18_337 1
    $delay slice_336_inst 1
    // 	sliced_v21 := ( $slice c2 63 56 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 148
    // ( $slice c2 63 56 ) 
    [:] [slice_340_inst] (c2_297 63 56) (sliced_v21_341)  $fullrate
    $buffering  $out slice_340_inst sliced_v21_341 1
    $delay slice_340_inst 1
    // 	sliced_v22 := ( $slice c2 55 48 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 149
    // ( $slice c2 55 48 ) 
    [:] [slice_344_inst] (c2_297 55 48) (sliced_v22_345)  $fullrate
    $buffering  $out slice_344_inst sliced_v22_345 1
    $delay slice_344_inst 1
    // 	sliced_v23 := ( $slice c2 47 40 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 150
    // ( $slice c2 47 40 ) 
    [:] [slice_348_inst] (c2_297 47 40) (sliced_v23_349)  $fullrate
    $buffering  $out slice_348_inst sliced_v23_349 1
    $delay slice_348_inst 1
    // 	sliced_v24 := ( $slice c2 39 32 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 151
    // ( $slice c2 39 32 ) 
    [:] [slice_352_inst] (c2_297 39 32) (sliced_v24_353)  $fullrate
    $buffering  $out slice_352_inst sliced_v24_353 1
    $delay slice_352_inst 1
    // 	sliced_v25 := ( $slice c2 31 24 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 152
    // ( $slice c2 31 24 ) 
    [:] [slice_356_inst] (c2_297 31 24) (sliced_v25_357)  $fullrate
    $buffering  $out slice_356_inst sliced_v25_357 1
    $delay slice_356_inst 1
    // 	sliced_v26 := ( $slice c2 23 16 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 153
    // ( $slice c2 23 16 ) 
    [:] [slice_360_inst] (c2_297 23 16) (sliced_v26_361)  $fullrate
    $buffering  $out slice_360_inst sliced_v26_361 1
    $delay slice_360_inst 1
    // 	sliced_v27 := ( $slice c2 15 8 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 154
    // ( $slice c2 15 8 ) 
    [:] [slice_364_inst] (c2_297 15 8) (sliced_v27_365)  $fullrate
    $buffering  $out slice_364_inst sliced_v27_365 1
    $delay slice_364_inst 1
    // 	sliced_v28 := ( $slice c2 7 0 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 155
    // ( $slice c2 7 0 ) 
    [:] [slice_368_inst] (c2_297 7 0) (sliced_v28_369)  $fullrate
    $buffering  $out slice_368_inst sliced_v28_369 1
    $delay slice_368_inst 1
    // 	sliced_v31 := ( $slice c3 63 56 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 156
    // ( $slice c3 63 56 ) 
    [:] [slice_372_inst] (c3_301 63 56) (sliced_v31_373)  $fullrate
    $buffering  $out slice_372_inst sliced_v31_373 1
    $delay slice_372_inst 1
    // 	sliced_v32 := ( $slice c3 55 48 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 157
    // ( $slice c3 55 48 ) 
    [:] [slice_376_inst] (c3_301 55 48) (sliced_v32_377)  $fullrate
    $buffering  $out slice_376_inst sliced_v32_377 1
    $delay slice_376_inst 1
    // 	sliced_v33 := ( $slice c3 47 40 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 158
    // ( $slice c3 47 40 ) 
    [:] [slice_380_inst] (c3_301 47 40) (sliced_v33_381)  $fullrate
    $buffering  $out slice_380_inst sliced_v33_381 1
    $delay slice_380_inst 1
    // 	sliced_v34 := ( $slice c3 39 32 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 159
    // ( $slice c3 39 32 ) 
    [:] [slice_384_inst] (c3_301 39 32) (sliced_v34_385)  $fullrate
    $buffering  $out slice_384_inst sliced_v34_385 1
    $delay slice_384_inst 1
    // 	sliced_v35 := ( $slice c3 31 24 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 160
    // ( $slice c3 31 24 ) 
    [:] [slice_388_inst] (c3_301 31 24) (sliced_v35_389)  $fullrate
    $buffering  $out slice_388_inst sliced_v35_389 1
    $delay slice_388_inst 1
    // 	sliced_v36 := ( $slice c3 23 16 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 161
    // ( $slice c3 23 16 ) 
    [:] [slice_392_inst] (c3_301 23 16) (sliced_v36_393)  $fullrate
    $buffering  $out slice_392_inst sliced_v36_393 1
    $delay slice_392_inst 1
    // 	sliced_v37 := ( $slice c3 15 8 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 162
    // ( $slice c3 15 8 ) 
    [:] [slice_396_inst] (c3_301 15 8) (sliced_v37_397)  $fullrate
    $buffering  $out slice_396_inst sliced_v37_397 1
    $delay slice_396_inst 1
    // 	sliced_v38 := ( $slice c3 7 0 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 163
    // ( $slice c3 7 0 ) 
    [:] [slice_400_inst] (c3_301 7 0) (sliced_v38_401)  $fullrate
    $buffering  $out slice_400_inst sliced_v38_401 1
    $delay slice_400_inst 1
    // 	sliced_v41 := ( $slice c4 63 56 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 164
    // ( $slice c4 63 56 ) 
    [:] [slice_404_inst] (c4_305 63 56) (sliced_v41_405)  $fullrate
    $buffering  $out slice_404_inst sliced_v41_405 1
    $delay slice_404_inst 1
    // 	sliced_v42 := ( $slice c4 55 48 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 165
    // ( $slice c4 55 48 ) 
    [:] [slice_408_inst] (c4_305 55 48) (sliced_v42_409)  $fullrate
    $buffering  $out slice_408_inst sliced_v42_409 1
    $delay slice_408_inst 1
    // 	sliced_v43 := ( $slice c4 47 40 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 166
    // ( $slice c4 47 40 ) 
    [:] [slice_412_inst] (c4_305 47 40) (sliced_v43_413)  $fullrate
    $buffering  $out slice_412_inst sliced_v43_413 1
    $delay slice_412_inst 1
    // 	sliced_v44 := ( $slice c4 39 32 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 167
    // ( $slice c4 39 32 ) 
    [:] [slice_416_inst] (c4_305 39 32) (sliced_v44_417)  $fullrate
    $buffering  $out slice_416_inst sliced_v44_417 1
    $delay slice_416_inst 1
    // 	sliced_v45 := ( $slice c4 31 24 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 168
    // ( $slice c4 31 24 ) 
    [:] [slice_420_inst] (c4_305 31 24) (sliced_v45_421)  $fullrate
    $buffering  $out slice_420_inst sliced_v45_421 1
    $delay slice_420_inst 1
    // 	sliced_v46 := ( $slice c4 23 16 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 169
    // ( $slice c4 23 16 ) 
    [:] [slice_424_inst] (c4_305 23 16) (sliced_v46_425)  $fullrate
    $buffering  $out slice_424_inst sliced_v46_425 1
    $delay slice_424_inst 1
    // 	sliced_v47 := ( $slice c4 15 8 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 170
    // ( $slice c4 15 8 ) 
    [:] [slice_428_inst] (c4_305 15 8) (sliced_v47_429)  $fullrate
    $buffering  $out slice_428_inst sliced_v47_429 1
    $delay slice_428_inst 1
    // 	sliced_v48 := ( $slice c4 7 0 )  $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 171
    // ( $slice c4 7 0 ) 
    [:] [slice_432_inst] (c4_305 7 0) (sliced_v48_433)  $fullrate
    $buffering  $out slice_432_inst sliced_v48_433 1
    $delay slice_432_inst 1
    // 	$volatile a11 := ($bitcast ($int<8>) sliced_v11 ) $buffering 1
    //  file prog.linked.opt.aa, line 172
    // ($bitcast ($int<8>) sliced_v11 )
    # := [type_cast_437_inst] (sliced_v11_309) (a11_438)   $flowthrough
    $delay type_cast_437_inst 0
    // 	$volatile a12 := ($bitcast ($int<8>) sliced_v12 ) $buffering 1
    //  file prog.linked.opt.aa, line 173
    // ($bitcast ($int<8>) sliced_v12 )
    # := [type_cast_441_inst] (sliced_v12_313) (a12_442)   $flowthrough
    $delay type_cast_441_inst 0
    // 	$volatile a13 := ($bitcast ($int<8>) sliced_v13 ) $buffering 1
    //  file prog.linked.opt.aa, line 174
    // ($bitcast ($int<8>) sliced_v13 )
    # := [type_cast_445_inst] (sliced_v13_317) (a13_446)   $flowthrough
    $delay type_cast_445_inst 0
    // 	$volatile a14 := ($bitcast ($int<8>) sliced_v14 ) $buffering 1
    //  file prog.linked.opt.aa, line 175
    // ($bitcast ($int<8>) sliced_v14 )
    # := [type_cast_449_inst] (sliced_v14_321) (a14_450)   $flowthrough
    $delay type_cast_449_inst 0
    // 	$volatile a15 := ($bitcast ($int<8>) sliced_v15 ) $buffering 1
    //  file prog.linked.opt.aa, line 176
    // ($bitcast ($int<8>) sliced_v15 )
    # := [type_cast_453_inst] (sliced_v15_325) (a15_454)   $flowthrough
    $delay type_cast_453_inst 0
    // 	$volatile a16 := ($bitcast ($int<8>) sliced_v16 ) $buffering 1
    //  file prog.linked.opt.aa, line 177
    // ($bitcast ($int<8>) sliced_v16 )
    # := [type_cast_457_inst] (sliced_v16_329) (a16_458)   $flowthrough
    $delay type_cast_457_inst 0
    // 	$volatile a17 := ($bitcast ($int<8>) sliced_v17 ) $buffering 1
    //  file prog.linked.opt.aa, line 178
    // ($bitcast ($int<8>) sliced_v17 )
    # := [type_cast_461_inst] (sliced_v17_333) (a17_462)   $flowthrough
    $delay type_cast_461_inst 0
    // 	$volatile a18 := ($bitcast ($int<8>) sliced_v18 ) $buffering 1
    //  file prog.linked.opt.aa, line 179
    // ($bitcast ($int<8>) sliced_v18 )
    # := [type_cast_465_inst] (sliced_v18_337) (a18_466)   $flowthrough
    $delay type_cast_465_inst 0
    // 	$volatile a21 := ($bitcast ($int<8>) sliced_v21 ) $buffering 1
    //  file prog.linked.opt.aa, line 180
    // ($bitcast ($int<8>) sliced_v21 )
    # := [type_cast_469_inst] (sliced_v21_341) (a21_470)   $flowthrough
    $delay type_cast_469_inst 0
    // 	$volatile a22 := ($bitcast ($int<8>) sliced_v22 ) $buffering 1
    //  file prog.linked.opt.aa, line 181
    // ($bitcast ($int<8>) sliced_v22 )
    # := [type_cast_473_inst] (sliced_v22_345) (a22_474)   $flowthrough
    $delay type_cast_473_inst 0
    // 	$volatile a23 := ($bitcast ($int<8>) sliced_v23 ) $buffering 1
    //  file prog.linked.opt.aa, line 182
    // ($bitcast ($int<8>) sliced_v23 )
    # := [type_cast_477_inst] (sliced_v23_349) (a23_478)   $flowthrough
    $delay type_cast_477_inst 0
    // 	$volatile a24 := ($bitcast ($int<8>) sliced_v24 ) $buffering 1
    //  file prog.linked.opt.aa, line 183
    // ($bitcast ($int<8>) sliced_v24 )
    # := [type_cast_481_inst] (sliced_v24_353) (a24_482)   $flowthrough
    $delay type_cast_481_inst 0
    // 	$volatile a25 := ($bitcast ($int<8>) sliced_v25 ) $buffering 1
    //  file prog.linked.opt.aa, line 184
    // ($bitcast ($int<8>) sliced_v25 )
    # := [type_cast_485_inst] (sliced_v25_357) (a25_486)   $flowthrough
    $delay type_cast_485_inst 0
    // 	$volatile a26 := ($bitcast ($int<8>) sliced_v26 ) $buffering 1
    //  file prog.linked.opt.aa, line 185
    // ($bitcast ($int<8>) sliced_v26 )
    # := [type_cast_489_inst] (sliced_v26_361) (a26_490)   $flowthrough
    $delay type_cast_489_inst 0
    // 	$volatile a27 := ($bitcast ($int<8>) sliced_v27 ) $buffering 1
    //  file prog.linked.opt.aa, line 186
    // ($bitcast ($int<8>) sliced_v27 )
    # := [type_cast_493_inst] (sliced_v27_365) (a27_494)   $flowthrough
    $delay type_cast_493_inst 0
    // 	$volatile a28 := ($bitcast ($int<8>) sliced_v28 ) $buffering 1
    //  file prog.linked.opt.aa, line 187
    // ($bitcast ($int<8>) sliced_v28 )
    # := [type_cast_497_inst] (sliced_v28_369) (a28_498)   $flowthrough
    $delay type_cast_497_inst 0
    // 	$volatile a31 := ($bitcast ($int<8>) sliced_v31 ) $buffering 1
    //  file prog.linked.opt.aa, line 188
    // ($bitcast ($int<8>) sliced_v31 )
    # := [type_cast_501_inst] (sliced_v31_373) (a31_502)   $flowthrough
    $delay type_cast_501_inst 0
    // 	$volatile a32 := ($bitcast ($int<8>) sliced_v32 ) $buffering 1
    //  file prog.linked.opt.aa, line 189
    // ($bitcast ($int<8>) sliced_v32 )
    # := [type_cast_505_inst] (sliced_v32_377) (a32_506)   $flowthrough
    $delay type_cast_505_inst 0
    // 	$volatile a33 := ($bitcast ($int<8>) sliced_v33 ) $buffering 1
    //  file prog.linked.opt.aa, line 190
    // ($bitcast ($int<8>) sliced_v33 )
    # := [type_cast_509_inst] (sliced_v33_381) (a33_510)   $flowthrough
    $delay type_cast_509_inst 0
    // 	$volatile a34 := ($bitcast ($int<8>) sliced_v34 ) $buffering 1
    //  file prog.linked.opt.aa, line 191
    // ($bitcast ($int<8>) sliced_v34 )
    # := [type_cast_513_inst] (sliced_v34_385) (a34_514)   $flowthrough
    $delay type_cast_513_inst 0
    // 	$volatile a35 := ($bitcast ($int<8>) sliced_v35 ) $buffering 1
    //  file prog.linked.opt.aa, line 192
    // ($bitcast ($int<8>) sliced_v35 )
    # := [type_cast_517_inst] (sliced_v35_389) (a35_518)   $flowthrough
    $delay type_cast_517_inst 0
    // 	$volatile a36 := ($bitcast ($int<8>) sliced_v36 ) $buffering 1
    //  file prog.linked.opt.aa, line 193
    // ($bitcast ($int<8>) sliced_v36 )
    # := [type_cast_521_inst] (sliced_v36_393) (a36_522)   $flowthrough
    $delay type_cast_521_inst 0
    // 	$volatile a37 := ($bitcast ($int<8>) sliced_v37 ) $buffering 1
    //  file prog.linked.opt.aa, line 194
    // ($bitcast ($int<8>) sliced_v37 )
    # := [type_cast_525_inst] (sliced_v37_397) (a37_526)   $flowthrough
    $delay type_cast_525_inst 0
    // 	$volatile a38 := ($bitcast ($int<8>) sliced_v38 ) $buffering 1
    //  file prog.linked.opt.aa, line 195
    // ($bitcast ($int<8>) sliced_v38 )
    # := [type_cast_529_inst] (sliced_v38_401) (a38_530)   $flowthrough
    $delay type_cast_529_inst 0
    // 	$volatile a41 := ($bitcast ($int<8>) sliced_v41 ) $buffering 1
    //  file prog.linked.opt.aa, line 196
    // ($bitcast ($int<8>) sliced_v41 )
    # := [type_cast_533_inst] (sliced_v41_405) (a41_534)   $flowthrough
    $delay type_cast_533_inst 0
    // 	$volatile a42 := ($bitcast ($int<8>) sliced_v42 ) $buffering 1
    //  file prog.linked.opt.aa, line 197
    // ($bitcast ($int<8>) sliced_v42 )
    # := [type_cast_537_inst] (sliced_v42_409) (a42_538)   $flowthrough
    $delay type_cast_537_inst 0
    // 	$volatile a43 := ($bitcast ($int<8>) sliced_v43 ) $buffering 1
    //  file prog.linked.opt.aa, line 198
    // ($bitcast ($int<8>) sliced_v43 )
    # := [type_cast_541_inst] (sliced_v43_413) (a43_542)   $flowthrough
    $delay type_cast_541_inst 0
    // 	$volatile a44 := ($bitcast ($int<8>) sliced_v44 ) $buffering 1
    //  file prog.linked.opt.aa, line 199
    // ($bitcast ($int<8>) sliced_v44 )
    # := [type_cast_545_inst] (sliced_v44_417) (a44_546)   $flowthrough
    $delay type_cast_545_inst 0
    // 	$volatile a45 := ($bitcast ($int<8>) sliced_v45 ) $buffering 1
    //  file prog.linked.opt.aa, line 200
    // ($bitcast ($int<8>) sliced_v45 )
    # := [type_cast_549_inst] (sliced_v45_421) (a45_550)   $flowthrough
    $delay type_cast_549_inst 0
    // 	$volatile a46 := ($bitcast ($int<8>) sliced_v46 ) $buffering 1
    //  file prog.linked.opt.aa, line 201
    // ($bitcast ($int<8>) sliced_v46 )
    # := [type_cast_553_inst] (sliced_v46_425) (a46_554)   $flowthrough
    $delay type_cast_553_inst 0
    // 	$volatile a47 := ($bitcast ($int<8>) sliced_v47 ) $buffering 1
    //  file prog.linked.opt.aa, line 202
    // ($bitcast ($int<8>) sliced_v47 )
    # := [type_cast_557_inst] (sliced_v47_429) (a47_558)   $flowthrough
    $delay type_cast_557_inst 0
    // 	$volatile a48 := ($bitcast ($int<8>) sliced_v48 ) $buffering 1
    //  file prog.linked.opt.aa, line 203
    // ($bitcast ($int<8>) sliced_v48 )
    # := [type_cast_561_inst] (sliced_v48_433) (a48_562)   $flowthrough
    $delay type_cast_561_inst 0
    // 	$volatile t11 := ( $mux (a11 > a21) a11  a21 )  $buffering 1
    //  file prog.linked.opt.aa, line 204
    // (a11 > a21)
    $S>$S[SGT_i8_u1_566_inst] (a11_438 a21_470) (SGT_i8_u1_566_wire)   $flowthrough 
    $delay SGT_i8_u1_566_inst 0
    // ( $mux (a11 > a21) a11  a21 ) 
    ? [MUX_569_inst] (SGT_i8_u1_566_wire a11_438 a21_470) (t11_570)  $flowthrough
    // 	$volatile t12 := ( $mux (a31 > a41) a31  a41 )  $buffering 1
    //  file prog.linked.opt.aa, line 205
    // (a31 > a41)
    $S>$S[SGT_i8_u1_574_inst] (a31_502 a41_534) (SGT_i8_u1_574_wire)   $flowthrough 
    $delay SGT_i8_u1_574_inst 0
    // ( $mux (a31 > a41) a31  a41 ) 
    ? [MUX_577_inst] (SGT_i8_u1_574_wire a31_502 a41_534) (t12_578)  $flowthrough
    // 	$volatile out1 := ( $mux (t11 > t12) t11  t12 )  $buffering 1
    //  file prog.linked.opt.aa, line 206
    // (t11 > t12)
    $S>$S[SGT_i8_u1_582_inst] (t11_570 t12_578) (SGT_i8_u1_582_wire)   $flowthrough 
    $delay SGT_i8_u1_582_inst 0
    // ( $mux (t11 > t12) t11  t12 ) 
    ? [MUX_585_inst] (SGT_i8_u1_582_wire t11_570 t12_578) (out1_586)  $flowthrough
    // 	$volatile t21 := ( $mux (a12 > a22) a12  a22 )  $buffering 1
    //  file prog.linked.opt.aa, line 207
    // (a12 > a22)
    $S>$S[SGT_i8_u1_590_inst] (a12_442 a22_474) (SGT_i8_u1_590_wire)   $flowthrough 
    $delay SGT_i8_u1_590_inst 0
    // ( $mux (a12 > a22) a12  a22 ) 
    ? [MUX_593_inst] (SGT_i8_u1_590_wire a12_442 a22_474) (t21_594)  $flowthrough
    // 	$volatile t22 := ( $mux (a32 > a42) a32  a42 )  $buffering 1
    //  file prog.linked.opt.aa, line 208
    // (a32 > a42)
    $S>$S[SGT_i8_u1_598_inst] (a32_506 a42_538) (SGT_i8_u1_598_wire)   $flowthrough 
    $delay SGT_i8_u1_598_inst 0
    // ( $mux (a32 > a42) a32  a42 ) 
    ? [MUX_601_inst] (SGT_i8_u1_598_wire a32_506 a42_538) (t22_602)  $flowthrough
    // 	$volatile out2 := ( $mux (t21 > t22) t21  t22 )  $buffering 1
    //  file prog.linked.opt.aa, line 209
    // (t21 > t22)
    $S>$S[SGT_i8_u1_606_inst] (t21_594 t22_602) (SGT_i8_u1_606_wire)   $flowthrough 
    $delay SGT_i8_u1_606_inst 0
    // ( $mux (t21 > t22) t21  t22 ) 
    ? [MUX_609_inst] (SGT_i8_u1_606_wire t21_594 t22_602) (out2_610)  $flowthrough
    // 	$volatile t31 := ( $mux (a13 > a23) a13  a23 )  $buffering 1
    //  file prog.linked.opt.aa, line 210
    // (a13 > a23)
    $S>$S[SGT_i8_u1_614_inst] (a13_446 a23_478) (SGT_i8_u1_614_wire)   $flowthrough 
    $delay SGT_i8_u1_614_inst 0
    // ( $mux (a13 > a23) a13  a23 ) 
    ? [MUX_617_inst] (SGT_i8_u1_614_wire a13_446 a23_478) (t31_618)  $flowthrough
    // 	$volatile t32 := ( $mux (a33 > a43) a33  a43 )  $buffering 1
    //  file prog.linked.opt.aa, line 211
    // (a33 > a43)
    $S>$S[SGT_i8_u1_622_inst] (a33_510 a43_542) (SGT_i8_u1_622_wire)   $flowthrough 
    $delay SGT_i8_u1_622_inst 0
    // ( $mux (a33 > a43) a33  a43 ) 
    ? [MUX_625_inst] (SGT_i8_u1_622_wire a33_510 a43_542) (t32_626)  $flowthrough
    // 	$volatile out3 := ( $mux (t31 > t32) t31  t32 )  $buffering 1
    //  file prog.linked.opt.aa, line 212
    // (t31 > t32)
    $S>$S[SGT_i8_u1_630_inst] (t31_618 t32_626) (SGT_i8_u1_630_wire)   $flowthrough 
    $delay SGT_i8_u1_630_inst 0
    // ( $mux (t31 > t32) t31  t32 ) 
    ? [MUX_633_inst] (SGT_i8_u1_630_wire t31_618 t32_626) (out3_634)  $flowthrough
    // 	$volatile t41 := ( $mux (a14 > a24) a14  a24 )  $buffering 1
    //  file prog.linked.opt.aa, line 213
    // (a14 > a24)
    $S>$S[SGT_i8_u1_638_inst] (a14_450 a24_482) (SGT_i8_u1_638_wire)   $flowthrough 
    $delay SGT_i8_u1_638_inst 0
    // ( $mux (a14 > a24) a14  a24 ) 
    ? [MUX_641_inst] (SGT_i8_u1_638_wire a14_450 a24_482) (t41_642)  $flowthrough
    // 	$volatile t42 := ( $mux (a34 > a44) a34  a44 )  $buffering 1
    //  file prog.linked.opt.aa, line 214
    // (a34 > a44)
    $S>$S[SGT_i8_u1_646_inst] (a34_514 a44_546) (SGT_i8_u1_646_wire)   $flowthrough 
    $delay SGT_i8_u1_646_inst 0
    // ( $mux (a34 > a44) a34  a44 ) 
    ? [MUX_649_inst] (SGT_i8_u1_646_wire a34_514 a44_546) (t42_650)  $flowthrough
    // 	$volatile out4 := ( $mux (t41 > t42) t41  t42 )  $buffering 1
    //  file prog.linked.opt.aa, line 215
    // (t41 > t42)
    $S>$S[SGT_i8_u1_654_inst] (t41_642 t42_650) (SGT_i8_u1_654_wire)   $flowthrough 
    $delay SGT_i8_u1_654_inst 0
    // ( $mux (t41 > t42) t41  t42 ) 
    ? [MUX_657_inst] (SGT_i8_u1_654_wire t41_642 t42_650) (out4_658)  $flowthrough
    // 	$volatile t51 := ( $mux (a15 > a25) a15  a25 )  $buffering 1
    //  file prog.linked.opt.aa, line 216
    // (a15 > a25)
    $S>$S[SGT_i8_u1_662_inst] (a15_454 a25_486) (SGT_i8_u1_662_wire)   $flowthrough 
    $delay SGT_i8_u1_662_inst 0
    // ( $mux (a15 > a25) a15  a25 ) 
    ? [MUX_665_inst] (SGT_i8_u1_662_wire a15_454 a25_486) (t51_666)  $flowthrough
    // 	$volatile t52 := ( $mux (a35 > a45) a35  a45 )  $buffering 1
    //  file prog.linked.opt.aa, line 217
    // (a35 > a45)
    $S>$S[SGT_i8_u1_670_inst] (a35_518 a45_550) (SGT_i8_u1_670_wire)   $flowthrough 
    $delay SGT_i8_u1_670_inst 0
    // ( $mux (a35 > a45) a35  a45 ) 
    ? [MUX_673_inst] (SGT_i8_u1_670_wire a35_518 a45_550) (t52_674)  $flowthrough
    // 	$volatile out5 := ( $mux (t51 > t52) t51  t52 )  $buffering 1
    //  file prog.linked.opt.aa, line 218
    // (t51 > t52)
    $S>$S[SGT_i8_u1_678_inst] (t51_666 t52_674) (SGT_i8_u1_678_wire)   $flowthrough 
    $delay SGT_i8_u1_678_inst 0
    // ( $mux (t51 > t52) t51  t52 ) 
    ? [MUX_681_inst] (SGT_i8_u1_678_wire t51_666 t52_674) (out5_682)  $flowthrough
    // 	$volatile t61 := ( $mux (a16 > a26) a16  a26 )  $buffering 1
    //  file prog.linked.opt.aa, line 219
    // (a16 > a26)
    $S>$S[SGT_i8_u1_686_inst] (a16_458 a26_490) (SGT_i8_u1_686_wire)   $flowthrough 
    $delay SGT_i8_u1_686_inst 0
    // ( $mux (a16 > a26) a16  a26 ) 
    ? [MUX_689_inst] (SGT_i8_u1_686_wire a16_458 a26_490) (t61_690)  $flowthrough
    // 	$volatile t62 := ( $mux (a36 > a46) a36  a46 )  $buffering 1
    //  file prog.linked.opt.aa, line 220
    // (a36 > a46)
    $S>$S[SGT_i8_u1_694_inst] (a36_522 a46_554) (SGT_i8_u1_694_wire)   $flowthrough 
    $delay SGT_i8_u1_694_inst 0
    // ( $mux (a36 > a46) a36  a46 ) 
    ? [MUX_697_inst] (SGT_i8_u1_694_wire a36_522 a46_554) (t62_698)  $flowthrough
    // 	$volatile out6 := ( $mux (t61 > t62) t61  t62 )  $buffering 1
    //  file prog.linked.opt.aa, line 221
    // (t61 > t62)
    $S>$S[SGT_i8_u1_702_inst] (t61_690 t62_698) (SGT_i8_u1_702_wire)   $flowthrough 
    $delay SGT_i8_u1_702_inst 0
    // ( $mux (t61 > t62) t61  t62 ) 
    ? [MUX_705_inst] (SGT_i8_u1_702_wire t61_690 t62_698) (out6_706)  $flowthrough
    // 	$volatile t71 := ( $mux (a17 > a27) a17  a27 )  $buffering 1
    //  file prog.linked.opt.aa, line 222
    // (a17 > a27)
    $S>$S[SGT_i8_u1_710_inst] (a17_462 a27_494) (SGT_i8_u1_710_wire)   $flowthrough 
    $delay SGT_i8_u1_710_inst 0
    // ( $mux (a17 > a27) a17  a27 ) 
    ? [MUX_713_inst] (SGT_i8_u1_710_wire a17_462 a27_494) (t71_714)  $flowthrough
    // 	$volatile t72 := ( $mux (a37 > a47) a37  a47 )  $buffering 1
    //  file prog.linked.opt.aa, line 223
    // (a37 > a47)
    $S>$S[SGT_i8_u1_718_inst] (a37_526 a47_558) (SGT_i8_u1_718_wire)   $flowthrough 
    $delay SGT_i8_u1_718_inst 0
    // ( $mux (a37 > a47) a37  a47 ) 
    ? [MUX_721_inst] (SGT_i8_u1_718_wire a37_526 a47_558) (t72_722)  $flowthrough
    // 	$volatile out7 := ( $mux (t71 > t72) t71  t72 )  $buffering 1
    //  file prog.linked.opt.aa, line 224
    // (t71 > t72)
    $S>$S[SGT_i8_u1_726_inst] (t71_714 t72_722) (SGT_i8_u1_726_wire)   $flowthrough 
    $delay SGT_i8_u1_726_inst 0
    // ( $mux (t71 > t72) t71  t72 ) 
    ? [MUX_729_inst] (SGT_i8_u1_726_wire t71_714 t72_722) (out7_730)  $flowthrough
    // 	$volatile t81 := ( $mux (a18 > a28) a18  a28 )  $buffering 1
    //  file prog.linked.opt.aa, line 225
    // (a18 > a28)
    $S>$S[SGT_i8_u1_734_inst] (a18_466 a28_498) (SGT_i8_u1_734_wire)   $flowthrough 
    $delay SGT_i8_u1_734_inst 0
    // ( $mux (a18 > a28) a18  a28 ) 
    ? [MUX_737_inst] (SGT_i8_u1_734_wire a18_466 a28_498) (t81_738)  $flowthrough
    // 	$volatile t82 := ( $mux (a38 > a48) a38  a48 )  $buffering 1
    //  file prog.linked.opt.aa, line 226
    // (a38 > a48)
    $S>$S[SGT_i8_u1_742_inst] (a38_530 a48_562) (SGT_i8_u1_742_wire)   $flowthrough 
    $delay SGT_i8_u1_742_inst 0
    // ( $mux (a38 > a48) a38  a48 ) 
    ? [MUX_745_inst] (SGT_i8_u1_742_wire a38_530 a48_562) (t82_746)  $flowthrough
    // 	$volatile out8 := ( $mux (t81 > t82) t81  t82 )  $buffering 1
    //  file prog.linked.opt.aa, line 227
    // (t81 > t82)
    $S>$S[SGT_i8_u1_750_inst] (t81_738 t82_746) (SGT_i8_u1_750_wire)   $flowthrough 
    $delay SGT_i8_u1_750_inst 0
    // ( $mux (t81 > t82) t81  t82 ) 
    ? [MUX_753_inst] (SGT_i8_u1_750_wire t81_738 t82_746) (out8_754)  $flowthrough
    // 	index2_755_delayed_7_0 := index2 $buffering 7 $cut_through // bits of buffering = 56. 
    //  file prog.linked.opt.aa, line 228
    # := [W_index2_755_delayed_7_0_755_inst] (index2) (index2_755_delayed_7_0_757)  $cut_through    $fullrate
    $buffering  $out W_index2_755_delayed_7_0_755_inst index2_755_delayed_7_0_757 7
    // 	addr_756_delayed_7_0 := addr $buffering 7 $cut_through // bits of buffering = 224. 
    //  file prog.linked.opt.aa, line 229
    # := [W_addr_756_delayed_7_0_758_inst] (addr) (addr_756_delayed_7_0_760)  $cut_through    $fullrate
    $buffering  $out W_addr_756_delayed_7_0_758_inst addr_756_delayed_7_0_760 7
    // 	$call writeModule_maxPool (index2_755_delayed_7_0 addr_756_delayed_7_0 (((($bitcast ($uint<8>) out1 ) && ($bitcast ($uint<8>) out2 )) && (($bitcast ($uint<8>) out3 ) && ($bitcast ($uint<8>) out4 ))) && ((($bitcast ($uint<8>) out5 ) && ($bitcast ($uint<8>) out6 )) && (($bitcast ($uint<8>) out7 ) && ($bitcast ($uint<8>) out8 )))) ) (d1 ) 
    //  file prog.linked.opt.aa, line 230
    // ($bitcast ($uint<8>) out1 )
    # := [type_cast_764_inst] (out1_586) (type_cast_764_wire)   $flowthrough
    $delay type_cast_764_inst 0
    // ($bitcast ($uint<8>) out2 )
    # := [type_cast_766_inst] (out2_610) (type_cast_766_wire)   $flowthrough
    $delay type_cast_766_inst 0
    // (($bitcast ($uint<8>) out1 ) && ($bitcast ($uint<8>) out2 ))
    &&[CONCAT_u8_u16_767_inst] (type_cast_764_wire type_cast_766_wire) (CONCAT_u8_u16_767_wire)   $flowthrough 
    $delay CONCAT_u8_u16_767_inst 0
    // ($bitcast ($uint<8>) out3 )
    # := [type_cast_770_inst] (out3_634) (type_cast_770_wire)   $flowthrough
    $delay type_cast_770_inst 0
    // ($bitcast ($uint<8>) out4 )
    # := [type_cast_772_inst] (out4_658) (type_cast_772_wire)   $flowthrough
    $delay type_cast_772_inst 0
    // (($bitcast ($uint<8>) out3 ) && ($bitcast ($uint<8>) out4 ))
    &&[CONCAT_u8_u16_773_inst] (type_cast_770_wire type_cast_772_wire) (CONCAT_u8_u16_773_wire)   $flowthrough 
    $delay CONCAT_u8_u16_773_inst 0
    // ((($bitcast ($uint<8>) out1 ) && ($bitcast ($uint<8>) out2 )) && (($bitcast ($uint<8>) out3 ) && ($bitcast ($uint<8>) out4 )))
    &&[CONCAT_u16_u32_774_inst] (CONCAT_u8_u16_767_wire CONCAT_u8_u16_773_wire) (CONCAT_u16_u32_774_wire)   $flowthrough 
    $delay CONCAT_u16_u32_774_inst 0
    // ($bitcast ($uint<8>) out5 )
    # := [type_cast_776_inst] (out5_682) (type_cast_776_wire)   $flowthrough
    $delay type_cast_776_inst 0
    // ($bitcast ($uint<8>) out6 )
    # := [type_cast_778_inst] (out6_706) (type_cast_778_wire)   $flowthrough
    $delay type_cast_778_inst 0
    // (($bitcast ($uint<8>) out5 ) && ($bitcast ($uint<8>) out6 ))
    &&[CONCAT_u8_u16_779_inst] (type_cast_776_wire type_cast_778_wire) (CONCAT_u8_u16_779_wire)   $flowthrough 
    $delay CONCAT_u8_u16_779_inst 0
    // ($bitcast ($uint<8>) out7 )
    # := [type_cast_781_inst] (out7_730) (type_cast_781_wire)   $flowthrough
    $delay type_cast_781_inst 0
    // ($bitcast ($uint<8>) out8 )
    # := [type_cast_783_inst] (out8_754) (type_cast_783_wire)   $flowthrough
    $delay type_cast_783_inst 0
    // (($bitcast ($uint<8>) out7 ) && ($bitcast ($uint<8>) out8 ))
    &&[CONCAT_u8_u16_784_inst] (type_cast_781_wire type_cast_783_wire) (CONCAT_u8_u16_784_wire)   $flowthrough 
    $delay CONCAT_u8_u16_784_inst 0
    // ((($bitcast ($uint<8>) out5 ) && ($bitcast ($uint<8>) out6 )) && (($bitcast ($uint<8>) out7 ) && ($bitcast ($uint<8>) out8 )))
    &&[CONCAT_u16_u32_785_inst] (CONCAT_u8_u16_779_wire CONCAT_u8_u16_784_wire) (CONCAT_u16_u32_785_wire)   $flowthrough 
    $delay CONCAT_u16_u32_785_inst 0
    // (((($bitcast ($uint<8>) out1 ) && ($bitcast ($uint<8>) out2 )) && (($bitcast ($uint<8>) out3 ) && ($bitcast ($uint<8>) out4 ))) && ((($bitcast ($uint<8>) out5 ) && ($bitcast ($uint<8>) out6 )) && (($bitcast ($uint<8>) out7 ) && ($bitcast ($uint<8>) out8 ))))
    &&[CONCAT_u32_u64_786_inst] (CONCAT_u16_u32_774_wire CONCAT_u16_u32_785_wire) (CONCAT_u32_u64_786_wire)   $flowthrough 
    $delay CONCAT_u32_u64_786_inst 0
    $call [call_stmt_788_call] $module writeModule_maxPool(index2_755_delayed_7_0_757 addr_756_delayed_7_0_760 CONCAT_u32_u64_786_wire) (d1_788)   $fullrate
    $delay call_stmt_788_call 6
    $buffering  $in call_stmt_788_call index2_755_delayed_7_0_757 1
    $buffering  $in call_stmt_788_call addr_756_delayed_7_0_760 1
    $buffering  $in call_stmt_788_call CONCAT_u32_u64_786_wire 1
    $buffering  $out call_stmt_788_call d1_788 1
    // 	output := ($bitcast ($uint<8>) out1 ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 231
    // ($bitcast ($uint<8>) out1 )
    # := [type_cast_791_inst] (out1_586) (output)     $fullrate
    $buffering  $out type_cast_791_inst output 1
    $delay type_cast_791_inst 1
  }
  // end data-path
  // 	$call readModule_maxPool (index1 addr1 ) (c1 ) 
  //  file prog.linked.opt.aa, line 136
  // index1
  // addr1
  call_stmt_293_call <=> (call_stmt_293_to_assign_stmt_792/call_stmt_293_Sample/crr call_stmt_293_to_assign_stmt_792/call_stmt_293_Update/ccr) (call_stmt_293_to_assign_stmt_792/call_stmt_293_Sample/cra call_stmt_293_to_assign_stmt_792/call_stmt_293_Update/cca)
  // 	$call readModule_maxPool (index1 addr2 ) (c2 ) 
  //  file prog.linked.opt.aa, line 137
  // index1
  // addr2
  call_stmt_297_call <=> (call_stmt_293_to_assign_stmt_792/call_stmt_297_Sample/crr call_stmt_293_to_assign_stmt_792/call_stmt_297_Update/ccr) (call_stmt_293_to_assign_stmt_792/call_stmt_297_Sample/cra call_stmt_293_to_assign_stmt_792/call_stmt_297_Update/cca)
  // 	$call readModule_maxPool (index1 addr3 ) (c3 ) 
  //  file prog.linked.opt.aa, line 138
  // index1
  // addr3
  call_stmt_301_call <=> (call_stmt_293_to_assign_stmt_792/call_stmt_301_Sample/crr call_stmt_293_to_assign_stmt_792/call_stmt_301_Update/ccr) (call_stmt_293_to_assign_stmt_792/call_stmt_301_Sample/cra call_stmt_293_to_assign_stmt_792/call_stmt_301_Update/cca)
  // 	$call readModule_maxPool (index1 addr4 ) (c4 ) 
  //  file prog.linked.opt.aa, line 139
  // index1
  // addr4
  call_stmt_305_call <=> (call_stmt_293_to_assign_stmt_792/call_stmt_305_Sample/crr call_stmt_293_to_assign_stmt_792/call_stmt_305_Update/ccr) (call_stmt_293_to_assign_stmt_792/call_stmt_305_Sample/cra call_stmt_293_to_assign_stmt_792/call_stmt_305_Update/cca)
  // 	sliced_v11 := ( $slice c1 63 56 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 140
  // c1
  // ( $slice c1 63 56 ) 
  slice_308_inst <=> (call_stmt_293_to_assign_stmt_792/slice_308_Sample/rr call_stmt_293_to_assign_stmt_792/slice_308_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_308_Sample/ra call_stmt_293_to_assign_stmt_792/slice_308_Update/ca)
  // 	sliced_v12 := ( $slice c1 55 48 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 141
  // c1
  // ( $slice c1 55 48 ) 
  slice_312_inst <=> (call_stmt_293_to_assign_stmt_792/slice_312_Sample/rr call_stmt_293_to_assign_stmt_792/slice_312_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_312_Sample/ra call_stmt_293_to_assign_stmt_792/slice_312_Update/ca)
  // 	sliced_v13 := ( $slice c1 47 40 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 142
  // c1
  // ( $slice c1 47 40 ) 
  slice_316_inst <=> (call_stmt_293_to_assign_stmt_792/slice_316_Sample/rr call_stmt_293_to_assign_stmt_792/slice_316_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_316_Sample/ra call_stmt_293_to_assign_stmt_792/slice_316_Update/ca)
  // 	sliced_v14 := ( $slice c1 39 32 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 143
  // c1
  // ( $slice c1 39 32 ) 
  slice_320_inst <=> (call_stmt_293_to_assign_stmt_792/slice_320_Sample/rr call_stmt_293_to_assign_stmt_792/slice_320_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_320_Sample/ra call_stmt_293_to_assign_stmt_792/slice_320_Update/ca)
  // 	sliced_v15 := ( $slice c1 31 24 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 144
  // c1
  // ( $slice c1 31 24 ) 
  slice_324_inst <=> (call_stmt_293_to_assign_stmt_792/slice_324_Sample/rr call_stmt_293_to_assign_stmt_792/slice_324_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_324_Sample/ra call_stmt_293_to_assign_stmt_792/slice_324_Update/ca)
  // 	sliced_v16 := ( $slice c1 23 16 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 145
  // c1
  // ( $slice c1 23 16 ) 
  slice_328_inst <=> (call_stmt_293_to_assign_stmt_792/slice_328_Sample/rr call_stmt_293_to_assign_stmt_792/slice_328_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_328_Sample/ra call_stmt_293_to_assign_stmt_792/slice_328_Update/ca)
  // 	sliced_v17 := ( $slice c1 15 8 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 146
  // c1
  // ( $slice c1 15 8 ) 
  slice_332_inst <=> (call_stmt_293_to_assign_stmt_792/slice_332_Sample/rr call_stmt_293_to_assign_stmt_792/slice_332_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_332_Sample/ra call_stmt_293_to_assign_stmt_792/slice_332_Update/ca)
  // 	sliced_v18 := ( $slice c1 7 0 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 147
  // c1
  // ( $slice c1 7 0 ) 
  slice_336_inst <=> (call_stmt_293_to_assign_stmt_792/slice_336_Sample/rr call_stmt_293_to_assign_stmt_792/slice_336_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_336_Sample/ra call_stmt_293_to_assign_stmt_792/slice_336_Update/ca)
  // 	sliced_v21 := ( $slice c2 63 56 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 148
  // c2
  // ( $slice c2 63 56 ) 
  slice_340_inst <=> (call_stmt_293_to_assign_stmt_792/slice_340_Sample/rr call_stmt_293_to_assign_stmt_792/slice_340_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_340_Sample/ra call_stmt_293_to_assign_stmt_792/slice_340_Update/ca)
  // 	sliced_v22 := ( $slice c2 55 48 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 149
  // c2
  // ( $slice c2 55 48 ) 
  slice_344_inst <=> (call_stmt_293_to_assign_stmt_792/slice_344_Sample/rr call_stmt_293_to_assign_stmt_792/slice_344_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_344_Sample/ra call_stmt_293_to_assign_stmt_792/slice_344_Update/ca)
  // 	sliced_v23 := ( $slice c2 47 40 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 150
  // c2
  // ( $slice c2 47 40 ) 
  slice_348_inst <=> (call_stmt_293_to_assign_stmt_792/slice_348_Sample/rr call_stmt_293_to_assign_stmt_792/slice_348_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_348_Sample/ra call_stmt_293_to_assign_stmt_792/slice_348_Update/ca)
  // 	sliced_v24 := ( $slice c2 39 32 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 151
  // c2
  // ( $slice c2 39 32 ) 
  slice_352_inst <=> (call_stmt_293_to_assign_stmt_792/slice_352_Sample/rr call_stmt_293_to_assign_stmt_792/slice_352_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_352_Sample/ra call_stmt_293_to_assign_stmt_792/slice_352_Update/ca)
  // 	sliced_v25 := ( $slice c2 31 24 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 152
  // c2
  // ( $slice c2 31 24 ) 
  slice_356_inst <=> (call_stmt_293_to_assign_stmt_792/slice_356_Sample/rr call_stmt_293_to_assign_stmt_792/slice_356_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_356_Sample/ra call_stmt_293_to_assign_stmt_792/slice_356_Update/ca)
  // 	sliced_v26 := ( $slice c2 23 16 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 153
  // c2
  // ( $slice c2 23 16 ) 
  slice_360_inst <=> (call_stmt_293_to_assign_stmt_792/slice_360_Sample/rr call_stmt_293_to_assign_stmt_792/slice_360_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_360_Sample/ra call_stmt_293_to_assign_stmt_792/slice_360_Update/ca)
  // 	sliced_v27 := ( $slice c2 15 8 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 154
  // c2
  // ( $slice c2 15 8 ) 
  slice_364_inst <=> (call_stmt_293_to_assign_stmt_792/slice_364_Sample/rr call_stmt_293_to_assign_stmt_792/slice_364_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_364_Sample/ra call_stmt_293_to_assign_stmt_792/slice_364_Update/ca)
  // 	sliced_v28 := ( $slice c2 7 0 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 155
  // c2
  // ( $slice c2 7 0 ) 
  slice_368_inst <=> (call_stmt_293_to_assign_stmt_792/slice_368_Sample/rr call_stmt_293_to_assign_stmt_792/slice_368_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_368_Sample/ra call_stmt_293_to_assign_stmt_792/slice_368_Update/ca)
  // 	sliced_v31 := ( $slice c3 63 56 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 156
  // c3
  // ( $slice c3 63 56 ) 
  slice_372_inst <=> (call_stmt_293_to_assign_stmt_792/slice_372_Sample/rr call_stmt_293_to_assign_stmt_792/slice_372_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_372_Sample/ra call_stmt_293_to_assign_stmt_792/slice_372_Update/ca)
  // 	sliced_v32 := ( $slice c3 55 48 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 157
  // c3
  // ( $slice c3 55 48 ) 
  slice_376_inst <=> (call_stmt_293_to_assign_stmt_792/slice_376_Sample/rr call_stmt_293_to_assign_stmt_792/slice_376_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_376_Sample/ra call_stmt_293_to_assign_stmt_792/slice_376_Update/ca)
  // 	sliced_v33 := ( $slice c3 47 40 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 158
  // c3
  // ( $slice c3 47 40 ) 
  slice_380_inst <=> (call_stmt_293_to_assign_stmt_792/slice_380_Sample/rr call_stmt_293_to_assign_stmt_792/slice_380_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_380_Sample/ra call_stmt_293_to_assign_stmt_792/slice_380_Update/ca)
  // 	sliced_v34 := ( $slice c3 39 32 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 159
  // c3
  // ( $slice c3 39 32 ) 
  slice_384_inst <=> (call_stmt_293_to_assign_stmt_792/slice_384_Sample/rr call_stmt_293_to_assign_stmt_792/slice_384_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_384_Sample/ra call_stmt_293_to_assign_stmt_792/slice_384_Update/ca)
  // 	sliced_v35 := ( $slice c3 31 24 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 160
  // c3
  // ( $slice c3 31 24 ) 
  slice_388_inst <=> (call_stmt_293_to_assign_stmt_792/slice_388_Sample/rr call_stmt_293_to_assign_stmt_792/slice_388_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_388_Sample/ra call_stmt_293_to_assign_stmt_792/slice_388_Update/ca)
  // 	sliced_v36 := ( $slice c3 23 16 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 161
  // c3
  // ( $slice c3 23 16 ) 
  slice_392_inst <=> (call_stmt_293_to_assign_stmt_792/slice_392_Sample/rr call_stmt_293_to_assign_stmt_792/slice_392_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_392_Sample/ra call_stmt_293_to_assign_stmt_792/slice_392_Update/ca)
  // 	sliced_v37 := ( $slice c3 15 8 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 162
  // c3
  // ( $slice c3 15 8 ) 
  slice_396_inst <=> (call_stmt_293_to_assign_stmt_792/slice_396_Sample/rr call_stmt_293_to_assign_stmt_792/slice_396_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_396_Sample/ra call_stmt_293_to_assign_stmt_792/slice_396_Update/ca)
  // 	sliced_v38 := ( $slice c3 7 0 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 163
  // c3
  // ( $slice c3 7 0 ) 
  slice_400_inst <=> (call_stmt_293_to_assign_stmt_792/slice_400_Sample/rr call_stmt_293_to_assign_stmt_792/slice_400_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_400_Sample/ra call_stmt_293_to_assign_stmt_792/slice_400_Update/ca)
  // 	sliced_v41 := ( $slice c4 63 56 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 164
  // c4
  // ( $slice c4 63 56 ) 
  slice_404_inst <=> (call_stmt_293_to_assign_stmt_792/slice_404_Sample/rr call_stmt_293_to_assign_stmt_792/slice_404_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_404_Sample/ra call_stmt_293_to_assign_stmt_792/slice_404_Update/ca)
  // 	sliced_v42 := ( $slice c4 55 48 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 165
  // c4
  // ( $slice c4 55 48 ) 
  slice_408_inst <=> (call_stmt_293_to_assign_stmt_792/slice_408_Sample/rr call_stmt_293_to_assign_stmt_792/slice_408_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_408_Sample/ra call_stmt_293_to_assign_stmt_792/slice_408_Update/ca)
  // 	sliced_v43 := ( $slice c4 47 40 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 166
  // c4
  // ( $slice c4 47 40 ) 
  slice_412_inst <=> (call_stmt_293_to_assign_stmt_792/slice_412_Sample/rr call_stmt_293_to_assign_stmt_792/slice_412_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_412_Sample/ra call_stmt_293_to_assign_stmt_792/slice_412_Update/ca)
  // 	sliced_v44 := ( $slice c4 39 32 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 167
  // c4
  // ( $slice c4 39 32 ) 
  slice_416_inst <=> (call_stmt_293_to_assign_stmt_792/slice_416_Sample/rr call_stmt_293_to_assign_stmt_792/slice_416_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_416_Sample/ra call_stmt_293_to_assign_stmt_792/slice_416_Update/ca)
  // 	sliced_v45 := ( $slice c4 31 24 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 168
  // c4
  // ( $slice c4 31 24 ) 
  slice_420_inst <=> (call_stmt_293_to_assign_stmt_792/slice_420_Sample/rr call_stmt_293_to_assign_stmt_792/slice_420_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_420_Sample/ra call_stmt_293_to_assign_stmt_792/slice_420_Update/ca)
  // 	sliced_v46 := ( $slice c4 23 16 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 169
  // c4
  // ( $slice c4 23 16 ) 
  slice_424_inst <=> (call_stmt_293_to_assign_stmt_792/slice_424_Sample/rr call_stmt_293_to_assign_stmt_792/slice_424_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_424_Sample/ra call_stmt_293_to_assign_stmt_792/slice_424_Update/ca)
  // 	sliced_v47 := ( $slice c4 15 8 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 170
  // c4
  // ( $slice c4 15 8 ) 
  slice_428_inst <=> (call_stmt_293_to_assign_stmt_792/slice_428_Sample/rr call_stmt_293_to_assign_stmt_792/slice_428_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_428_Sample/ra call_stmt_293_to_assign_stmt_792/slice_428_Update/ca)
  // 	sliced_v48 := ( $slice c4 7 0 )  $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 171
  // c4
  // ( $slice c4 7 0 ) 
  slice_432_inst <=> (call_stmt_293_to_assign_stmt_792/slice_432_Sample/rr call_stmt_293_to_assign_stmt_792/slice_432_Update/cr) (call_stmt_293_to_assign_stmt_792/slice_432_Sample/ra call_stmt_293_to_assign_stmt_792/slice_432_Update/ca)
  // 	$volatile a11 := ($bitcast ($int<8>) sliced_v11 ) $buffering 1
  //  file prog.linked.opt.aa, line 172
  // sliced_v11
  // 	$volatile a12 := ($bitcast ($int<8>) sliced_v12 ) $buffering 1
  //  file prog.linked.opt.aa, line 173
  // sliced_v12
  // 	$volatile a13 := ($bitcast ($int<8>) sliced_v13 ) $buffering 1
  //  file prog.linked.opt.aa, line 174
  // sliced_v13
  // 	$volatile a14 := ($bitcast ($int<8>) sliced_v14 ) $buffering 1
  //  file prog.linked.opt.aa, line 175
  // sliced_v14
  // 	$volatile a15 := ($bitcast ($int<8>) sliced_v15 ) $buffering 1
  //  file prog.linked.opt.aa, line 176
  // sliced_v15
  // 	$volatile a16 := ($bitcast ($int<8>) sliced_v16 ) $buffering 1
  //  file prog.linked.opt.aa, line 177
  // sliced_v16
  // 	$volatile a17 := ($bitcast ($int<8>) sliced_v17 ) $buffering 1
  //  file prog.linked.opt.aa, line 178
  // sliced_v17
  // 	$volatile a18 := ($bitcast ($int<8>) sliced_v18 ) $buffering 1
  //  file prog.linked.opt.aa, line 179
  // sliced_v18
  // 	$volatile a21 := ($bitcast ($int<8>) sliced_v21 ) $buffering 1
  //  file prog.linked.opt.aa, line 180
  // sliced_v21
  // 	$volatile a22 := ($bitcast ($int<8>) sliced_v22 ) $buffering 1
  //  file prog.linked.opt.aa, line 181
  // sliced_v22
  // 	$volatile a23 := ($bitcast ($int<8>) sliced_v23 ) $buffering 1
  //  file prog.linked.opt.aa, line 182
  // sliced_v23
  // 	$volatile a24 := ($bitcast ($int<8>) sliced_v24 ) $buffering 1
  //  file prog.linked.opt.aa, line 183
  // sliced_v24
  // 	$volatile a25 := ($bitcast ($int<8>) sliced_v25 ) $buffering 1
  //  file prog.linked.opt.aa, line 184
  // sliced_v25
  // 	$volatile a26 := ($bitcast ($int<8>) sliced_v26 ) $buffering 1
  //  file prog.linked.opt.aa, line 185
  // sliced_v26
  // 	$volatile a27 := ($bitcast ($int<8>) sliced_v27 ) $buffering 1
  //  file prog.linked.opt.aa, line 186
  // sliced_v27
  // 	$volatile a28 := ($bitcast ($int<8>) sliced_v28 ) $buffering 1
  //  file prog.linked.opt.aa, line 187
  // sliced_v28
  // 	$volatile a31 := ($bitcast ($int<8>) sliced_v31 ) $buffering 1
  //  file prog.linked.opt.aa, line 188
  // sliced_v31
  // 	$volatile a32 := ($bitcast ($int<8>) sliced_v32 ) $buffering 1
  //  file prog.linked.opt.aa, line 189
  // sliced_v32
  // 	$volatile a33 := ($bitcast ($int<8>) sliced_v33 ) $buffering 1
  //  file prog.linked.opt.aa, line 190
  // sliced_v33
  // 	$volatile a34 := ($bitcast ($int<8>) sliced_v34 ) $buffering 1
  //  file prog.linked.opt.aa, line 191
  // sliced_v34
  // 	$volatile a35 := ($bitcast ($int<8>) sliced_v35 ) $buffering 1
  //  file prog.linked.opt.aa, line 192
  // sliced_v35
  // 	$volatile a36 := ($bitcast ($int<8>) sliced_v36 ) $buffering 1
  //  file prog.linked.opt.aa, line 193
  // sliced_v36
  // 	$volatile a37 := ($bitcast ($int<8>) sliced_v37 ) $buffering 1
  //  file prog.linked.opt.aa, line 194
  // sliced_v37
  // 	$volatile a38 := ($bitcast ($int<8>) sliced_v38 ) $buffering 1
  //  file prog.linked.opt.aa, line 195
  // sliced_v38
  // 	$volatile a41 := ($bitcast ($int<8>) sliced_v41 ) $buffering 1
  //  file prog.linked.opt.aa, line 196
  // sliced_v41
  // 	$volatile a42 := ($bitcast ($int<8>) sliced_v42 ) $buffering 1
  //  file prog.linked.opt.aa, line 197
  // sliced_v42
  // 	$volatile a43 := ($bitcast ($int<8>) sliced_v43 ) $buffering 1
  //  file prog.linked.opt.aa, line 198
  // sliced_v43
  // 	$volatile a44 := ($bitcast ($int<8>) sliced_v44 ) $buffering 1
  //  file prog.linked.opt.aa, line 199
  // sliced_v44
  // 	$volatile a45 := ($bitcast ($int<8>) sliced_v45 ) $buffering 1
  //  file prog.linked.opt.aa, line 200
  // sliced_v45
  // 	$volatile a46 := ($bitcast ($int<8>) sliced_v46 ) $buffering 1
  //  file prog.linked.opt.aa, line 201
  // sliced_v46
  // 	$volatile a47 := ($bitcast ($int<8>) sliced_v47 ) $buffering 1
  //  file prog.linked.opt.aa, line 202
  // sliced_v47
  // 	$volatile a48 := ($bitcast ($int<8>) sliced_v48 ) $buffering 1
  //  file prog.linked.opt.aa, line 203
  // sliced_v48
  // 	$volatile t11 := ( $mux (a11 > a21) a11  a21 )  $buffering 1
  //  file prog.linked.opt.aa, line 204
  // (a11 > a21)
  // a11
  // a21
  // a11
  // a21
  // ( $mux (a11 > a21) a11  a21 ) 
  // 	$volatile t12 := ( $mux (a31 > a41) a31  a41 )  $buffering 1
  //  file prog.linked.opt.aa, line 205
  // (a31 > a41)
  // a31
  // a41
  // a31
  // a41
  // ( $mux (a31 > a41) a31  a41 ) 
  // 	$volatile out1 := ( $mux (t11 > t12) t11  t12 )  $buffering 1
  //  file prog.linked.opt.aa, line 206
  // (t11 > t12)
  // t11
  // t12
  // t11
  // t12
  // ( $mux (t11 > t12) t11  t12 ) 
  // 	$volatile t21 := ( $mux (a12 > a22) a12  a22 )  $buffering 1
  //  file prog.linked.opt.aa, line 207
  // (a12 > a22)
  // a12
  // a22
  // a12
  // a22
  // ( $mux (a12 > a22) a12  a22 ) 
  // 	$volatile t22 := ( $mux (a32 > a42) a32  a42 )  $buffering 1
  //  file prog.linked.opt.aa, line 208
  // (a32 > a42)
  // a32
  // a42
  // a32
  // a42
  // ( $mux (a32 > a42) a32  a42 ) 
  // 	$volatile out2 := ( $mux (t21 > t22) t21  t22 )  $buffering 1
  //  file prog.linked.opt.aa, line 209
  // (t21 > t22)
  // t21
  // t22
  // t21
  // t22
  // ( $mux (t21 > t22) t21  t22 ) 
  // 	$volatile t31 := ( $mux (a13 > a23) a13  a23 )  $buffering 1
  //  file prog.linked.opt.aa, line 210
  // (a13 > a23)
  // a13
  // a23
  // a13
  // a23
  // ( $mux (a13 > a23) a13  a23 ) 
  // 	$volatile t32 := ( $mux (a33 > a43) a33  a43 )  $buffering 1
  //  file prog.linked.opt.aa, line 211
  // (a33 > a43)
  // a33
  // a43
  // a33
  // a43
  // ( $mux (a33 > a43) a33  a43 ) 
  // 	$volatile out3 := ( $mux (t31 > t32) t31  t32 )  $buffering 1
  //  file prog.linked.opt.aa, line 212
  // (t31 > t32)
  // t31
  // t32
  // t31
  // t32
  // ( $mux (t31 > t32) t31  t32 ) 
  // 	$volatile t41 := ( $mux (a14 > a24) a14  a24 )  $buffering 1
  //  file prog.linked.opt.aa, line 213
  // (a14 > a24)
  // a14
  // a24
  // a14
  // a24
  // ( $mux (a14 > a24) a14  a24 ) 
  // 	$volatile t42 := ( $mux (a34 > a44) a34  a44 )  $buffering 1
  //  file prog.linked.opt.aa, line 214
  // (a34 > a44)
  // a34
  // a44
  // a34
  // a44
  // ( $mux (a34 > a44) a34  a44 ) 
  // 	$volatile out4 := ( $mux (t41 > t42) t41  t42 )  $buffering 1
  //  file prog.linked.opt.aa, line 215
  // (t41 > t42)
  // t41
  // t42
  // t41
  // t42
  // ( $mux (t41 > t42) t41  t42 ) 
  // 	$volatile t51 := ( $mux (a15 > a25) a15  a25 )  $buffering 1
  //  file prog.linked.opt.aa, line 216
  // (a15 > a25)
  // a15
  // a25
  // a15
  // a25
  // ( $mux (a15 > a25) a15  a25 ) 
  // 	$volatile t52 := ( $mux (a35 > a45) a35  a45 )  $buffering 1
  //  file prog.linked.opt.aa, line 217
  // (a35 > a45)
  // a35
  // a45
  // a35
  // a45
  // ( $mux (a35 > a45) a35  a45 ) 
  // 	$volatile out5 := ( $mux (t51 > t52) t51  t52 )  $buffering 1
  //  file prog.linked.opt.aa, line 218
  // (t51 > t52)
  // t51
  // t52
  // t51
  // t52
  // ( $mux (t51 > t52) t51  t52 ) 
  // 	$volatile t61 := ( $mux (a16 > a26) a16  a26 )  $buffering 1
  //  file prog.linked.opt.aa, line 219
  // (a16 > a26)
  // a16
  // a26
  // a16
  // a26
  // ( $mux (a16 > a26) a16  a26 ) 
  // 	$volatile t62 := ( $mux (a36 > a46) a36  a46 )  $buffering 1
  //  file prog.linked.opt.aa, line 220
  // (a36 > a46)
  // a36
  // a46
  // a36
  // a46
  // ( $mux (a36 > a46) a36  a46 ) 
  // 	$volatile out6 := ( $mux (t61 > t62) t61  t62 )  $buffering 1
  //  file prog.linked.opt.aa, line 221
  // (t61 > t62)
  // t61
  // t62
  // t61
  // t62
  // ( $mux (t61 > t62) t61  t62 ) 
  // 	$volatile t71 := ( $mux (a17 > a27) a17  a27 )  $buffering 1
  //  file prog.linked.opt.aa, line 222
  // (a17 > a27)
  // a17
  // a27
  // a17
  // a27
  // ( $mux (a17 > a27) a17  a27 ) 
  // 	$volatile t72 := ( $mux (a37 > a47) a37  a47 )  $buffering 1
  //  file prog.linked.opt.aa, line 223
  // (a37 > a47)
  // a37
  // a47
  // a37
  // a47
  // ( $mux (a37 > a47) a37  a47 ) 
  // 	$volatile out7 := ( $mux (t71 > t72) t71  t72 )  $buffering 1
  //  file prog.linked.opt.aa, line 224
  // (t71 > t72)
  // t71
  // t72
  // t71
  // t72
  // ( $mux (t71 > t72) t71  t72 ) 
  // 	$volatile t81 := ( $mux (a18 > a28) a18  a28 )  $buffering 1
  //  file prog.linked.opt.aa, line 225
  // (a18 > a28)
  // a18
  // a28
  // a18
  // a28
  // ( $mux (a18 > a28) a18  a28 ) 
  // 	$volatile t82 := ( $mux (a38 > a48) a38  a48 )  $buffering 1
  //  file prog.linked.opt.aa, line 226
  // (a38 > a48)
  // a38
  // a48
  // a38
  // a48
  // ( $mux (a38 > a48) a38  a48 ) 
  // 	$volatile out8 := ( $mux (t81 > t82) t81  t82 )  $buffering 1
  //  file prog.linked.opt.aa, line 227
  // (t81 > t82)
  // t81
  // t82
  // t81
  // t82
  // ( $mux (t81 > t82) t81  t82 ) 
  // 	index2_755_delayed_7_0 := index2 $buffering 7 $cut_through // bits of buffering = 56. 
  //  file prog.linked.opt.aa, line 228
  // index2
  W_index2_755_delayed_7_0_755_inst <=> (call_stmt_293_to_assign_stmt_792/assign_stmt_757_Sample/req call_stmt_293_to_assign_stmt_792/assign_stmt_757_Update/req) (call_stmt_293_to_assign_stmt_792/assign_stmt_757_Sample/ack call_stmt_293_to_assign_stmt_792/assign_stmt_757_Update/ack)
  // 	addr_756_delayed_7_0 := addr $buffering 7 $cut_through // bits of buffering = 224. 
  //  file prog.linked.opt.aa, line 229
  // addr
  W_addr_756_delayed_7_0_758_inst <=> (call_stmt_293_to_assign_stmt_792/assign_stmt_760_Sample/req call_stmt_293_to_assign_stmt_792/assign_stmt_760_Update/req) (call_stmt_293_to_assign_stmt_792/assign_stmt_760_Sample/ack call_stmt_293_to_assign_stmt_792/assign_stmt_760_Update/ack)
  // 	$call writeModule_maxPool (index2_755_delayed_7_0 addr_756_delayed_7_0 (((($bitcast ($uint<8>) out1 ) && ($bitcast ($uint<8>) out2 )) && (($bitcast ($uint<8>) out3 ) && ($bitcast ($uint<8>) out4 ))) && ((($bitcast ($uint<8>) out5 ) && ($bitcast ($uint<8>) out6 )) && (($bitcast ($uint<8>) out7 ) && ($bitcast ($uint<8>) out8 )))) ) (d1 ) 
  //  file prog.linked.opt.aa, line 230
  // index2_755_delayed_7_0
  // addr_756_delayed_7_0
  // (((($bitcast ($uint<8>) out1 ) && ($bitcast ($uint<8>) out2 )) && (($bitcast ($uint<8>) out3 ) && ($bitcast ($uint<8>) out4 ))) && ((($bitcast ($uint<8>) out5 ) && ($bitcast ($uint<8>) out6 )) && (($bitcast ($uint<8>) out7 ) && ($bitcast ($uint<8>) out8 ))))
  // ((($bitcast ($uint<8>) out1 ) && ($bitcast ($uint<8>) out2 )) && (($bitcast ($uint<8>) out3 ) && ($bitcast ($uint<8>) out4 )))
  // (($bitcast ($uint<8>) out1 ) && ($bitcast ($uint<8>) out2 ))
  // out1
  // out2
  // (($bitcast ($uint<8>) out3 ) && ($bitcast ($uint<8>) out4 ))
  // out3
  // out4
  // ((($bitcast ($uint<8>) out5 ) && ($bitcast ($uint<8>) out6 )) && (($bitcast ($uint<8>) out7 ) && ($bitcast ($uint<8>) out8 )))
  // (($bitcast ($uint<8>) out5 ) && ($bitcast ($uint<8>) out6 ))
  // out5
  // out6
  // (($bitcast ($uint<8>) out7 ) && ($bitcast ($uint<8>) out8 ))
  // out7
  // out8
  call_stmt_788_call <=> (call_stmt_293_to_assign_stmt_792/call_stmt_788_Sample/crr call_stmt_293_to_assign_stmt_792/call_stmt_788_Update/ccr) (call_stmt_293_to_assign_stmt_792/call_stmt_788_Sample/cra call_stmt_293_to_assign_stmt_792/call_stmt_788_Update/cca)
  // 	output := ($bitcast ($uint<8>) out1 ) $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 231
  // out1
  // ($bitcast ($uint<8>) out1 )
  type_cast_791_inst <=> (call_stmt_293_to_assign_stmt_792/type_cast_791_Sample/rr call_stmt_293_to_assign_stmt_792/type_cast_791_Update/cr) (call_stmt_293_to_assign_stmt_792/type_cast_791_Sample/ra call_stmt_293_to_assign_stmt_792/type_cast_791_Update/ca)
  $attribute delay => "15"
}
$module [maxPool3D] 
{
  $in cb:$int<16>
  // can point into  foreign( $void )
  rb:$int<16>
  // can point into  foreign( $void )
  ct:$int<16>
  // can point into  foreign( $void )
  chl_out:$int<16>
  // can point into  foreign( $void )
  index_in:$int<8>
  // can point into  foreign( $void )
  index_out:$int<8>
  // can point into  foreign( $void )
  // pipe-declarations for block %maxPool3D
  //  file prog.linked.opt.aa, line 234
  // pipe-declarations for block %maxPool3D%body
  //  file prog.linked.opt.aa, line 239
  // pipe-declarations for block %maxPool3D%body%
  //  file prog.linked.opt.aa, line 249
  // pipe-declarations for block %maxPool3D%body%
  //  file prog.linked.opt.aa, line 301
  // pipe-declarations for block %maxPool3D%body%
  //  file prog.linked.opt.aa, line 308
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_801] // Branch Block  file prog.linked.opt.aa, line 239
    {
      $P [branch_block_stmt_801__entry__]
      branch_block_stmt_801__entry__ <-| ($entry)
      $P [branch_block_stmt_801__exit__]
      branch_block_stmt_801__exit__ |-> ($exit)
      $P [assign_stmt_807_to_assign_stmt_835__entry__] 
      $P [assign_stmt_807_to_assign_stmt_835__exit__] 
      $P [entry_whilex_xbody]
      $P [merge_stmt_837__exit__] 
      $P [do_while_stmt_859__entry__] 
      $P [do_while_stmt_859__exit__] 
      $P [if_stmt_1012__entry__] 
      $P [if_stmt_1012__exit__] 
      $P [merge_stmt_1016__entry__] 
      $P [merge_stmt_1016__exit__] 
      $P [assign_stmt_1025_to_assign_stmt_1028__entry__] 
      $P [assign_stmt_1025_to_assign_stmt_1028__exit__] 
      $P [return__]
      $P [merge_stmt_1030__exit__] 
      ::[assign_stmt_807_to_assign_stmt_835] 
      {
        // start: WAR dependencies for shr91
        // ignored out-of-scope w_root  chl_out : $uint<16> 
        // done: WAR dependencies for shr91
        // start:  		$volatile shr91 := (chl_out >> ($bitcast ($uint<16>) _b0000000000000011  )) $buffering 1
        //  file prog.linked.opt.aa, line 241
        // volatile! 
        // Source expression
        // (chl_out >> ($bitcast ($uint<16>) _b0000000000000011  ))
        // chl_out
        // Target expression
        // (as target) shr91
        // start: WAR dependencies for shr91
        // ignored out-of-scope w_root  chl_out : $uint<16> 
        // done: WAR dependencies for shr91
        // end:  		$volatile shr91 := (chl_out >> ($bitcast ($uint<16>) _b0000000000000011  )) $buffering 1
        // start: WAR dependencies for mul
        // ignored out-of-scope w_root  ct : $uint<16> 
        // ignored out-of-scope w_root  chl_out : $uint<16> 
        // done: WAR dependencies for mul
        // start:  		$volatile mul := (shr91 * ct) $buffering 1
        //  file prog.linked.opt.aa, line 242
        // volatile! 
        // Source expression
        // (shr91 * ct)
        // shr91
        // ct
        // Target expression
        // (as target) mul
        // start: WAR dependencies for mul
        // ignored out-of-scope w_root  ct : $uint<16> 
        // ignored out-of-scope w_root  chl_out : $uint<16> 
        // done: WAR dependencies for mul
        // end:  		$volatile mul := (shr91 * ct) $buffering 1
        // start:  		conv23 := ($cast ($uint<32>) shr91 ) $buffering 1// bits of buffering = 32. 
        //  file prog.linked.opt.aa, line 243
        // Source expression
        // ($cast ($uint<32>) shr91 )
        $T[type_cast_815_sample_start_] 
        $T[type_cast_815_sample_completed_] 
        $T[type_cast_815_update_start_] 
        $T[type_cast_815_update_completed_] 
        // shr91
        // start: Forward dependencies from shr91 to transition type_cast_815_sample_start_
        // done: Forward dependencies from shr91 to transition type_cast_815_sample_start_
        ;;[type_cast_815_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_815_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_815_sample_start_ &-> (type_cast_815_Sample)
        type_cast_815_sample_completed_ <-& (type_cast_815_Sample)
        type_cast_815_sample_completed_ &-> ($null)
        type_cast_815_update_start_ &-> (type_cast_815_Update)
        type_cast_815_update_completed_ <-& (type_cast_815_Update)
        // Target expression
        // (as target) conv23
        // start: WAR dependencies for conv23
        // done: WAR dependencies for conv23
        // end:  		conv23 := ($cast ($uint<32>) shr91 ) $buffering 1// bits of buffering = 32. 
        // start:  		conv25 := ($cast ($uint<32>) mul ) $buffering 1// bits of buffering = 32. 
        //  file prog.linked.opt.aa, line 244
        // Source expression
        // ($cast ($uint<32>) mul )
        $T[type_cast_819_sample_start_] 
        $T[type_cast_819_sample_completed_] 
        $T[type_cast_819_update_start_] 
        $T[type_cast_819_update_completed_] 
        // mul
        // start: Forward dependencies from mul to transition type_cast_819_sample_start_
        // done: Forward dependencies from mul to transition type_cast_819_sample_start_
        ;;[type_cast_819_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_819_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_819_sample_start_ &-> (type_cast_819_Sample)
        type_cast_819_sample_completed_ <-& (type_cast_819_Sample)
        type_cast_819_sample_completed_ &-> ($null)
        type_cast_819_update_start_ &-> (type_cast_819_Update)
        type_cast_819_update_completed_ <-& (type_cast_819_Update)
        // Target expression
        // (as target) conv25
        // start: WAR dependencies for conv25
        // done: WAR dependencies for conv25
        // end:  		conv25 := ($cast ($uint<32>) mul ) $buffering 1// bits of buffering = 32. 
        // start:  		conv37 := ($cast ($uint<32>) ct ) $buffering 1// bits of buffering = 32. 
        //  file prog.linked.opt.aa, line 245
        // Source expression
        // ($cast ($uint<32>) ct )
        $T[type_cast_823_sample_start_] 
        $T[type_cast_823_sample_completed_] 
        $T[type_cast_823_update_start_] 
        $T[type_cast_823_update_completed_] 
        // ct
        // start: Forward dependencies from ct to transition type_cast_823_sample_start_
        // done: Forward dependencies from ct to transition type_cast_823_sample_start_
        ;;[type_cast_823_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_823_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_823_sample_start_ &-> (type_cast_823_Sample)
        type_cast_823_sample_completed_ <-& (type_cast_823_Sample)
        type_cast_823_sample_completed_ &-> ($null)
        type_cast_823_update_start_ &-> (type_cast_823_Update)
        type_cast_823_update_completed_ <-& (type_cast_823_Update)
        // Target expression
        // (as target) conv37
        // start: WAR dependencies for conv37
        // done: WAR dependencies for conv37
        // end:  		conv37 := ($cast ($uint<32>) ct ) $buffering 1// bits of buffering = 32. 
        // start: WAR dependencies for mul42
        // done: WAR dependencies for mul42
        // start:  		$volatile mul42 := (conv23 << ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
        //  file prog.linked.opt.aa, line 246
        // volatile! 
        // Source expression
        // (conv23 << ($bitcast ($uint<32>) _b00000000000000000000000000000001  ))
        // conv23
        // Target expression
        // (as target) mul42
        // start: WAR dependencies for mul42
        // done: WAR dependencies for mul42
        // end:  		$volatile mul42 := (conv23 << ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
        // start: WAR dependencies for add
        // done: WAR dependencies for add
        // start:  		$volatile add := (conv25 + conv23) $buffering 1
        //  file prog.linked.opt.aa, line 247
        // volatile! 
        // Source expression
        // (conv25 + conv23)
        // conv25
        // conv23
        // Target expression
        // (as target) add
        // start: WAR dependencies for add
        // done: WAR dependencies for add
        // end:  		$volatile add := (conv25 + conv23) $buffering 1
        // load-store dependencies..
      }
      assign_stmt_807_to_assign_stmt_835__entry__ |-> (assign_stmt_807_to_assign_stmt_835)
      assign_stmt_807_to_assign_stmt_835__exit__ <-| (assign_stmt_807_to_assign_stmt_835)
      // do-while-statement  
      //  file prog.linked.opt.aa, line 259
      <o> [do_while_stmt_859]  $depth 15 $buffering 1 
      {
        $P[do_while_stmt_859__entry__] 
        $P[do_while_stmt_859__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_859_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_861
          // 			$phi iNsTr_1 := 			  iNsTr_1_at_entry $on   $entry 			  ($cast ($uint<32>) add79 ) $on   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_861_sample_start_] 
          $T[phi_stmt_861_sample_completed_] 
          $T[phi_stmt_861_update_start_] 
          $T[phi_stmt_861_update_completed_] 
          $T[phi_stmt_861_sample_start__ps] 
          phi_stmt_861_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_861_sample_completed__ps] 
          phi_stmt_861_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_861_update_start__ps] 
          phi_stmt_861_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_861_update_completed__ps] 
          phi_stmt_861_update_completed_ <-& (phi_stmt_861_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_861_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_861_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_861_update_start_)
          $T[phi_stmt_861_loopback_trigger] 
          phi_stmt_861_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_861_loopback_sample_req] 
          $T[phi_stmt_861_loopback_sample_req_ps] 
          phi_stmt_861_loopback_sample_req <-& (phi_stmt_861_loopback_sample_req_ps)
          phi_stmt_861_loopback_sample_req &-> ($null)
          $T[phi_stmt_861_entry_trigger] 
          phi_stmt_861_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_861_entry_sample_req] 
          $T[phi_stmt_861_entry_sample_req_ps] 
          phi_stmt_861_entry_sample_req <-& (phi_stmt_861_entry_sample_req_ps)
          phi_stmt_861_entry_sample_req &-> ($null)
          phi_stmt_861_update_start_ o<-& (phi_stmt_861_update_completed_ 0)
          phi_stmt_861_sample_start_ o<-& (phi_stmt_861_sample_completed_ 1)
          $T[phi_stmt_861_merged_reqs] 
          $T[phi_stmt_861_phi_mux_ack] 
          $T[phi_stmt_861_phi_mux_ack_ps] 
          phi_stmt_861_phi_mux_ack_ps <-& (phi_stmt_861_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_861_update_completed_)
          $T[R_iNsTr_1_at_entry_863_sample_start__ps] 
          $T[R_iNsTr_1_at_entry_863_sample_completed__ps] 
          $T[R_iNsTr_1_at_entry_863_update_start__ps] 
          $T[R_iNsTr_1_at_entry_863_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_iNsTr_1_at_entry_863_sample_start_] 
          $T[R_iNsTr_1_at_entry_863_sample_completed_] 
          R_iNsTr_1_at_entry_863_sample_completed_ <-& (R_iNsTr_1_at_entry_863_sample_start_)
          $T[R_iNsTr_1_at_entry_863_update_start_] 
          $T [R_iNsTr_1_at_entry_863_update_completed_] $delay 
          R_iNsTr_1_at_entry_863_update_completed_ <-& (R_iNsTr_1_at_entry_863_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_iNsTr_1_at_entry_863_sample_start_ <-& (R_iNsTr_1_at_entry_863_sample_start__ps)
          R_iNsTr_1_at_entry_863_update_start_ <-& (R_iNsTr_1_at_entry_863_update_start__ps)
          // Phi complete dependency.
          R_iNsTr_1_at_entry_863_sample_completed__ps <-& (R_iNsTr_1_at_entry_863_sample_completed_)
          R_iNsTr_1_at_entry_863_update_completed__ps <-& (R_iNsTr_1_at_entry_863_update_completed_)
          $T[type_cast_865_sample_start__ps] 
          $T[type_cast_865_sample_completed__ps] 
          $T[type_cast_865_update_start__ps] 
          $T[type_cast_865_update_completed__ps] 
          // source expression in Phi alternative 1
          // ($cast ($uint<32>) add79 )
          $T[type_cast_865_sample_start_] 
          $T[type_cast_865_sample_completed_] 
          $T[type_cast_865_update_start_] 
          $T[type_cast_865_update_completed_] 
          // add79
          // start: Forward dependencies from add79 to transition type_cast_865_sample_start_
          // done: Forward dependencies from add79 to transition type_cast_865_sample_start_
          ;;[type_cast_865_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_865_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_865_sample_start_ &-> (type_cast_865_Sample)
          type_cast_865_sample_completed_ <-& (type_cast_865_Sample)
          type_cast_865_sample_completed_ &-> ($null)
          type_cast_865_update_start_ &-> (type_cast_865_Update)
          type_cast_865_update_completed_ <-& (type_cast_865_Update)
          // RAW reenables for add79
          // self-release: 
          type_cast_865_sample_start_ o<-& (type_cast_865_sample_completed_ 1)
          $null &-> (type_cast_865_update_start_)
          type_cast_865_update_start_ o<-& (type_cast_865_update_completed_ 0)
          // Phi start dependency
          type_cast_865_sample_start_ <-& (type_cast_865_sample_start__ps)
          type_cast_865_update_start_ <-& (type_cast_865_update_start__ps)
          // RAW reenables for ($cast ($uint<32>) add79 )
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          type_cast_865_sample_completed__ps <-& (type_cast_865_sample_completed_)
          type_cast_865_update_completed__ps <-& (type_cast_865_update_completed_)
          $phisequencer [ phi_stmt_861_phi_seq] : 
          phi_stmt_861_entry_trigger R_iNsTr_1_at_entry_863_sample_start__ps R_iNsTr_1_at_entry_863_sample_completed__ps R_iNsTr_1_at_entry_863_update_start__ps R_iNsTr_1_at_entry_863_update_completed__ps phi_stmt_861_loopback_trigger type_cast_865_sample_start__ps type_cast_865_sample_completed__ps type_cast_865_update_start__ps type_cast_865_update_completed__ps :
          phi_stmt_861_sample_start__ps phi_stmt_861_sample_completed__ps phi_stmt_861_update_start__ps phi_stmt_861_update_completed__ps :
          phi_stmt_861_entry_sample_req_ps phi_stmt_861_loopback_sample_req_ps : 
          phi_stmt_861_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_861
          // start:  PHI statement phi_stmt_866
          // 			$phi row18x_x1 := 			  ($cast ($uint<16>) inc76x_xrow18x_x1 ) $on   $loopback 			  row18x_x1_at_entry $on   $entry 
          // type of target is $uint<16>
          $T[phi_stmt_866_sample_start_] 
          $T[phi_stmt_866_sample_completed_] 
          $T[phi_stmt_866_update_start_] 
          $T[phi_stmt_866_update_completed_] 
          $T[phi_stmt_866_sample_start__ps] 
          phi_stmt_866_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_866_sample_completed__ps] 
          phi_stmt_866_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_866_update_start__ps] 
          phi_stmt_866_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_866_update_completed__ps] 
          phi_stmt_866_update_completed_ <-& (phi_stmt_866_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_866_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_866_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_866_update_start_)
          $T[phi_stmt_866_loopback_trigger] 
          phi_stmt_866_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_866_loopback_sample_req] 
          $T[phi_stmt_866_loopback_sample_req_ps] 
          phi_stmt_866_loopback_sample_req <-& (phi_stmt_866_loopback_sample_req_ps)
          phi_stmt_866_loopback_sample_req &-> ($null)
          $T[phi_stmt_866_entry_trigger] 
          phi_stmt_866_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_866_entry_sample_req] 
          $T[phi_stmt_866_entry_sample_req_ps] 
          phi_stmt_866_entry_sample_req <-& (phi_stmt_866_entry_sample_req_ps)
          phi_stmt_866_entry_sample_req &-> ($null)
          phi_stmt_866_update_start_ o<-& (phi_stmt_866_update_completed_ 0)
          phi_stmt_866_sample_start_ o<-& (phi_stmt_866_sample_completed_ 1)
          $T[phi_stmt_866_merged_reqs] 
          $T[phi_stmt_866_phi_mux_ack] 
          $T[phi_stmt_866_phi_mux_ack_ps] 
          phi_stmt_866_phi_mux_ack_ps <-& (phi_stmt_866_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_866_update_completed_)
          $T[type_cast_869_sample_start__ps] 
          $T[type_cast_869_sample_completed__ps] 
          $T[type_cast_869_update_start__ps] 
          $T[type_cast_869_update_completed__ps] 
          // source expression in Phi alternative 0
          // ($cast ($uint<16>) inc76x_xrow18x_x1 )
          $T[type_cast_869_sample_start_] 
          $T[type_cast_869_sample_completed_] 
          $T[type_cast_869_update_start_] 
          $T[type_cast_869_update_completed_] 
          // inc76x_xrow18x_x1
          // start: Forward dependencies from inc76x_xrow18x_x1 to transition type_cast_869_sample_start_
          // done: Forward dependencies from inc76x_xrow18x_x1 to transition type_cast_869_sample_start_
          ;;[type_cast_869_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_869_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_869_sample_start_ &-> (type_cast_869_Sample)
          type_cast_869_sample_completed_ <-& (type_cast_869_Sample)
          type_cast_869_sample_completed_ &-> ($null)
          type_cast_869_update_start_ &-> (type_cast_869_Update)
          type_cast_869_update_completed_ <-& (type_cast_869_Update)
          // RAW reenables for inc76x_xrow18x_x1
          // self-release: 
          type_cast_869_sample_start_ o<-& (type_cast_869_sample_completed_ 1)
          $null &-> (type_cast_869_update_start_)
          type_cast_869_update_start_ o<-& (type_cast_869_update_completed_ 0)
          // Phi start dependency
          type_cast_869_sample_start_ <-& (type_cast_869_sample_start__ps)
          type_cast_869_update_start_ <-& (type_cast_869_update_start__ps)
          // RAW reenables for ($cast ($uint<16>) inc76x_xrow18x_x1 )
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          type_cast_869_sample_completed__ps <-& (type_cast_869_sample_completed_)
          type_cast_869_update_completed__ps <-& (type_cast_869_update_completed_)
          $T[R_row18x_x1_at_entry_870_sample_start__ps] 
          $T[R_row18x_x1_at_entry_870_sample_completed__ps] 
          $T[R_row18x_x1_at_entry_870_update_start__ps] 
          $T[R_row18x_x1_at_entry_870_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_row18x_x1_at_entry_870_sample_start_] 
          $T[R_row18x_x1_at_entry_870_sample_completed_] 
          R_row18x_x1_at_entry_870_sample_completed_ <-& (R_row18x_x1_at_entry_870_sample_start_)
          $T[R_row18x_x1_at_entry_870_update_start_] 
          $T [R_row18x_x1_at_entry_870_update_completed_] $delay 
          R_row18x_x1_at_entry_870_update_completed_ <-& (R_row18x_x1_at_entry_870_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_row18x_x1_at_entry_870_sample_start_ <-& (R_row18x_x1_at_entry_870_sample_start__ps)
          R_row18x_x1_at_entry_870_update_start_ <-& (R_row18x_x1_at_entry_870_update_start__ps)
          // Phi complete dependency.
          R_row18x_x1_at_entry_870_sample_completed__ps <-& (R_row18x_x1_at_entry_870_sample_completed_)
          R_row18x_x1_at_entry_870_update_completed__ps <-& (R_row18x_x1_at_entry_870_update_completed_)
          $phisequencer [ phi_stmt_866_phi_seq] : 
          phi_stmt_866_loopback_trigger type_cast_869_sample_start__ps type_cast_869_sample_completed__ps type_cast_869_update_start__ps type_cast_869_update_completed__ps phi_stmt_866_entry_trigger R_row18x_x1_at_entry_870_sample_start__ps R_row18x_x1_at_entry_870_sample_completed__ps R_row18x_x1_at_entry_870_update_start__ps R_row18x_x1_at_entry_870_update_completed__ps :
          phi_stmt_866_sample_start__ps phi_stmt_866_sample_completed__ps phi_stmt_866_update_start__ps phi_stmt_866_update_completed__ps :
          phi_stmt_866_loopback_sample_req_ps phi_stmt_866_entry_sample_req_ps : 
          phi_stmt_866_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_866
          // start:  PHI statement phi_stmt_871
          // 			$phi colx_x1 := 			  ($cast ($uint<16>) colx_x2 ) $on   $loopback 			  colx_x1_at_entry $on   $entry 
          // type of target is $uint<16>
          $T[phi_stmt_871_sample_start_] 
          $T[phi_stmt_871_sample_completed_] 
          $T[phi_stmt_871_update_start_] 
          $T[phi_stmt_871_update_completed_] 
          $T[phi_stmt_871_sample_start__ps] 
          phi_stmt_871_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_871_sample_completed__ps] 
          phi_stmt_871_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_871_update_start__ps] 
          phi_stmt_871_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_871_update_completed__ps] 
          phi_stmt_871_update_completed_ <-& (phi_stmt_871_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_871_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_871_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_871_update_start_)
          $T[phi_stmt_871_loopback_trigger] 
          phi_stmt_871_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_871_loopback_sample_req] 
          $T[phi_stmt_871_loopback_sample_req_ps] 
          phi_stmt_871_loopback_sample_req <-& (phi_stmt_871_loopback_sample_req_ps)
          phi_stmt_871_loopback_sample_req &-> ($null)
          $T[phi_stmt_871_entry_trigger] 
          phi_stmt_871_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_871_entry_sample_req] 
          $T[phi_stmt_871_entry_sample_req_ps] 
          phi_stmt_871_entry_sample_req <-& (phi_stmt_871_entry_sample_req_ps)
          phi_stmt_871_entry_sample_req &-> ($null)
          phi_stmt_871_update_start_ o<-& (phi_stmt_871_update_completed_ 0)
          phi_stmt_871_sample_start_ o<-& (phi_stmt_871_sample_completed_ 1)
          $T[phi_stmt_871_merged_reqs] 
          $T[phi_stmt_871_phi_mux_ack] 
          $T[phi_stmt_871_phi_mux_ack_ps] 
          phi_stmt_871_phi_mux_ack_ps <-& (phi_stmt_871_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_871_update_completed_)
          $T[type_cast_874_sample_start__ps] 
          $T[type_cast_874_sample_completed__ps] 
          $T[type_cast_874_update_start__ps] 
          $T[type_cast_874_update_completed__ps] 
          // source expression in Phi alternative 0
          // ($cast ($uint<16>) colx_x2 )
          $T[type_cast_874_sample_start_] 
          $T[type_cast_874_sample_completed_] 
          $T[type_cast_874_update_start_] 
          $T[type_cast_874_update_completed_] 
          // colx_x2
          // start: Forward dependencies from colx_x2 to transition type_cast_874_sample_start_
          // done: Forward dependencies from colx_x2 to transition type_cast_874_sample_start_
          ;;[type_cast_874_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_874_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_874_sample_start_ &-> (type_cast_874_Sample)
          type_cast_874_sample_completed_ <-& (type_cast_874_Sample)
          type_cast_874_sample_completed_ &-> ($null)
          type_cast_874_update_start_ &-> (type_cast_874_Update)
          type_cast_874_update_completed_ <-& (type_cast_874_Update)
          // RAW reenables for colx_x2
          // self-release: 
          type_cast_874_sample_start_ o<-& (type_cast_874_sample_completed_ 1)
          $null &-> (type_cast_874_update_start_)
          type_cast_874_update_start_ o<-& (type_cast_874_update_completed_ 0)
          // Phi start dependency
          type_cast_874_sample_start_ <-& (type_cast_874_sample_start__ps)
          type_cast_874_update_start_ <-& (type_cast_874_update_start__ps)
          // RAW reenables for ($cast ($uint<16>) colx_x2 )
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          type_cast_874_sample_completed__ps <-& (type_cast_874_sample_completed_)
          type_cast_874_update_completed__ps <-& (type_cast_874_update_completed_)
          $T[R_colx_x1_at_entry_875_sample_start__ps] 
          $T[R_colx_x1_at_entry_875_sample_completed__ps] 
          $T[R_colx_x1_at_entry_875_update_start__ps] 
          $T[R_colx_x1_at_entry_875_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_colx_x1_at_entry_875_sample_start_] 
          $T[R_colx_x1_at_entry_875_sample_completed_] 
          R_colx_x1_at_entry_875_sample_completed_ <-& (R_colx_x1_at_entry_875_sample_start_)
          $T[R_colx_x1_at_entry_875_update_start_] 
          $T [R_colx_x1_at_entry_875_update_completed_] $delay 
          R_colx_x1_at_entry_875_update_completed_ <-& (R_colx_x1_at_entry_875_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_colx_x1_at_entry_875_sample_start_ <-& (R_colx_x1_at_entry_875_sample_start__ps)
          R_colx_x1_at_entry_875_update_start_ <-& (R_colx_x1_at_entry_875_update_start__ps)
          // Phi complete dependency.
          R_colx_x1_at_entry_875_sample_completed__ps <-& (R_colx_x1_at_entry_875_sample_completed_)
          R_colx_x1_at_entry_875_update_completed__ps <-& (R_colx_x1_at_entry_875_update_completed_)
          $phisequencer [ phi_stmt_871_phi_seq] : 
          phi_stmt_871_loopback_trigger type_cast_874_sample_start__ps type_cast_874_sample_completed__ps type_cast_874_update_start__ps type_cast_874_update_completed__ps phi_stmt_871_entry_trigger R_colx_x1_at_entry_875_sample_start__ps R_colx_x1_at_entry_875_sample_completed__ps R_colx_x1_at_entry_875_update_start__ps R_colx_x1_at_entry_875_update_completed__ps :
          phi_stmt_871_sample_start__ps phi_stmt_871_sample_completed__ps phi_stmt_871_update_start__ps phi_stmt_871_update_completed__ps :
          phi_stmt_871_loopback_sample_req_ps phi_stmt_871_entry_sample_req_ps : 
          phi_stmt_871_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_871
          // start:  PHI statement phi_stmt_876
          // 			$phi chlx_x0 := 			  ($cast ($uint<16>) chlx_x1 ) $on   $loopback 			  chlx_x0_at_entry $on   $entry 
          // type of target is $uint<16>
          $T[phi_stmt_876_sample_start_] 
          $T[phi_stmt_876_sample_completed_] 
          $T[phi_stmt_876_update_start_] 
          $T[phi_stmt_876_update_completed_] 
          $T[phi_stmt_876_sample_start__ps] 
          phi_stmt_876_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_876_sample_completed__ps] 
          phi_stmt_876_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_876_update_start__ps] 
          phi_stmt_876_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_876_update_completed__ps] 
          phi_stmt_876_update_completed_ <-& (phi_stmt_876_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_876_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_876_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_876_update_start_)
          $T[phi_stmt_876_loopback_trigger] 
          phi_stmt_876_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_876_loopback_sample_req] 
          $T[phi_stmt_876_loopback_sample_req_ps] 
          phi_stmt_876_loopback_sample_req <-& (phi_stmt_876_loopback_sample_req_ps)
          phi_stmt_876_loopback_sample_req &-> ($null)
          $T[phi_stmt_876_entry_trigger] 
          phi_stmt_876_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_876_entry_sample_req] 
          $T[phi_stmt_876_entry_sample_req_ps] 
          phi_stmt_876_entry_sample_req <-& (phi_stmt_876_entry_sample_req_ps)
          phi_stmt_876_entry_sample_req &-> ($null)
          phi_stmt_876_update_start_ o<-& (phi_stmt_876_update_completed_ 0)
          phi_stmt_876_sample_start_ o<-& (phi_stmt_876_sample_completed_ 1)
          $T[phi_stmt_876_merged_reqs] 
          $T[phi_stmt_876_phi_mux_ack] 
          $T[phi_stmt_876_phi_mux_ack_ps] 
          phi_stmt_876_phi_mux_ack_ps <-& (phi_stmt_876_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_876_update_completed_)
          $T[type_cast_879_sample_start__ps] 
          $T[type_cast_879_sample_completed__ps] 
          $T[type_cast_879_update_start__ps] 
          $T[type_cast_879_update_completed__ps] 
          // source expression in Phi alternative 0
          // ($cast ($uint<16>) chlx_x1 )
          $T[type_cast_879_sample_start_] 
          $T[type_cast_879_sample_completed_] 
          $T[type_cast_879_update_start_] 
          $T[type_cast_879_update_completed_] 
          // chlx_x1
          // start: Forward dependencies from chlx_x1 to transition type_cast_879_sample_start_
          // done: Forward dependencies from chlx_x1 to transition type_cast_879_sample_start_
          ;;[type_cast_879_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_879_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_879_sample_start_ &-> (type_cast_879_Sample)
          type_cast_879_sample_completed_ <-& (type_cast_879_Sample)
          type_cast_879_sample_completed_ &-> ($null)
          type_cast_879_update_start_ &-> (type_cast_879_Update)
          type_cast_879_update_completed_ <-& (type_cast_879_Update)
          // RAW reenables for chlx_x1
          // self-release: 
          type_cast_879_sample_start_ o<-& (type_cast_879_sample_completed_ 1)
          $null &-> (type_cast_879_update_start_)
          type_cast_879_update_start_ o<-& (type_cast_879_update_completed_ 0)
          // Phi start dependency
          type_cast_879_sample_start_ <-& (type_cast_879_sample_start__ps)
          type_cast_879_update_start_ <-& (type_cast_879_update_start__ps)
          // RAW reenables for ($cast ($uint<16>) chlx_x1 )
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          type_cast_879_sample_completed__ps <-& (type_cast_879_sample_completed_)
          type_cast_879_update_completed__ps <-& (type_cast_879_update_completed_)
          $T[R_chlx_x0_at_entry_880_sample_start__ps] 
          $T[R_chlx_x0_at_entry_880_sample_completed__ps] 
          $T[R_chlx_x0_at_entry_880_update_start__ps] 
          $T[R_chlx_x0_at_entry_880_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_chlx_x0_at_entry_880_sample_start_] 
          $T[R_chlx_x0_at_entry_880_sample_completed_] 
          R_chlx_x0_at_entry_880_sample_completed_ <-& (R_chlx_x0_at_entry_880_sample_start_)
          $T[R_chlx_x0_at_entry_880_update_start_] 
          $T [R_chlx_x0_at_entry_880_update_completed_] $delay 
          R_chlx_x0_at_entry_880_update_completed_ <-& (R_chlx_x0_at_entry_880_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_chlx_x0_at_entry_880_sample_start_ <-& (R_chlx_x0_at_entry_880_sample_start__ps)
          R_chlx_x0_at_entry_880_update_start_ <-& (R_chlx_x0_at_entry_880_update_start__ps)
          // Phi complete dependency.
          R_chlx_x0_at_entry_880_sample_completed__ps <-& (R_chlx_x0_at_entry_880_sample_completed_)
          R_chlx_x0_at_entry_880_update_completed__ps <-& (R_chlx_x0_at_entry_880_update_completed_)
          $phisequencer [ phi_stmt_876_phi_seq] : 
          phi_stmt_876_loopback_trigger type_cast_879_sample_start__ps type_cast_879_sample_completed__ps type_cast_879_update_start__ps type_cast_879_update_completed__ps phi_stmt_876_entry_trigger R_chlx_x0_at_entry_880_sample_start__ps R_chlx_x0_at_entry_880_sample_completed__ps R_chlx_x0_at_entry_880_update_start__ps R_chlx_x0_at_entry_880_update_completed__ps :
          phi_stmt_876_sample_start__ps phi_stmt_876_sample_completed__ps phi_stmt_876_update_start__ps phi_stmt_876_update_completed__ps :
          phi_stmt_876_loopback_sample_req_ps phi_stmt_876_entry_sample_req_ps : 
          phi_stmt_876_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_876
          // start:  			conv31 := ($cast ($uint<32>) chlx_x0 ) $buffering 1// bits of buffering = 32. 
          //  file prog.linked.opt.aa, line 271
          // Source expression
          // ($cast ($uint<32>) chlx_x0 )
          $T[type_cast_884_sample_start_] 
          $T[type_cast_884_sample_completed_] 
          $T[type_cast_884_update_start_] 
          $T[type_cast_884_update_completed_] 
          // chlx_x0
          // start: Forward dependencies from chlx_x0 to transition type_cast_884_sample_start_
          type_cast_884_sample_start_ <-& (phi_stmt_876_update_completed_)
          // done: Forward dependencies from chlx_x0 to transition type_cast_884_sample_start_
          ;;[type_cast_884_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_884_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_884_sample_start_ &-> (type_cast_884_Sample)
          type_cast_884_sample_completed_ <-& (type_cast_884_Sample)
          type_cast_884_sample_completed_ &-> ($null)
          type_cast_884_update_start_ &-> (type_cast_884_Update)
          type_cast_884_update_completed_ <-& (type_cast_884_Update)
          // RAW reenables for chlx_x0
          phi_stmt_876_update_start_ o<-& (type_cast_884_sample_completed_ 0)
          // self-release: 
          type_cast_884_sample_start_ o<-& (type_cast_884_sample_completed_ 1)
          $null &-> (type_cast_884_update_start_)
          type_cast_884_update_start_ o<-& (type_cast_884_update_completed_ 0)
          // Target expression
          // (as target) conv31
          // start: WAR dependencies for conv31
          // done: WAR dependencies for conv31
          // end:  			conv31 := ($cast ($uint<32>) chlx_x0 ) $buffering 1// bits of buffering = 32. 
          // start:  			conv35 := ($cast ($uint<32>) colx_x1 ) $buffering 1// bits of buffering = 32. 
          //  file prog.linked.opt.aa, line 272
          // Source expression
          // ($cast ($uint<32>) colx_x1 )
          $T[type_cast_888_sample_start_] 
          $T[type_cast_888_sample_completed_] 
          $T[type_cast_888_update_start_] 
          $T[type_cast_888_update_completed_] 
          // colx_x1
          // start: Forward dependencies from colx_x1 to transition type_cast_888_sample_start_
          type_cast_888_sample_start_ <-& (phi_stmt_871_update_completed_)
          // done: Forward dependencies from colx_x1 to transition type_cast_888_sample_start_
          ;;[type_cast_888_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_888_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_888_sample_start_ &-> (type_cast_888_Sample)
          type_cast_888_sample_completed_ <-& (type_cast_888_Sample)
          type_cast_888_sample_completed_ &-> ($null)
          type_cast_888_update_start_ &-> (type_cast_888_Update)
          type_cast_888_update_completed_ <-& (type_cast_888_Update)
          // RAW reenables for colx_x1
          phi_stmt_871_update_start_ o<-& (type_cast_888_sample_completed_ 0)
          // self-release: 
          type_cast_888_sample_start_ o<-& (type_cast_888_sample_completed_ 1)
          $null &-> (type_cast_888_update_start_)
          type_cast_888_update_start_ o<-& (type_cast_888_update_completed_ 0)
          // Target expression
          // (as target) conv35
          // start: WAR dependencies for conv35
          // done: WAR dependencies for conv35
          // end:  			conv35 := ($cast ($uint<32>) colx_x1 ) $buffering 1// bits of buffering = 32. 
          // start:  			conv39 := ($cast ($uint<32>) row18x_x1 ) $buffering 1// bits of buffering = 32. 
          //  file prog.linked.opt.aa, line 273
          // Source expression
          // ($cast ($uint<32>) row18x_x1 )
          $T[type_cast_892_sample_start_] 
          $T[type_cast_892_sample_completed_] 
          $T[type_cast_892_update_start_] 
          $T[type_cast_892_update_completed_] 
          // row18x_x1
          // start: Forward dependencies from row18x_x1 to transition type_cast_892_sample_start_
          type_cast_892_sample_start_ <-& (phi_stmt_866_update_completed_)
          // done: Forward dependencies from row18x_x1 to transition type_cast_892_sample_start_
          ;;[type_cast_892_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_892_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_892_sample_start_ &-> (type_cast_892_Sample)
          type_cast_892_sample_completed_ <-& (type_cast_892_Sample)
          type_cast_892_sample_completed_ &-> ($null)
          type_cast_892_update_start_ &-> (type_cast_892_Update)
          type_cast_892_update_completed_ <-& (type_cast_892_Update)
          // RAW reenables for row18x_x1
          phi_stmt_866_update_start_ o<-& (type_cast_892_sample_completed_ 0)
          // self-release: 
          type_cast_892_sample_start_ o<-& (type_cast_892_sample_completed_ 1)
          $null &-> (type_cast_892_update_start_)
          type_cast_892_update_start_ o<-& (type_cast_892_update_completed_ 0)
          // Target expression
          // (as target) conv39
          // start: WAR dependencies for conv39
          // done: WAR dependencies for conv39
          // end:  			conv39 := ($cast ($uint<32>) row18x_x1 ) $buffering 1// bits of buffering = 32. 
          // start: WAR dependencies for mul40
          // ignored out-of-scope w_root 		conv37 := ($cast ($uint<32>) ct ) $buffering 1// bits of buffering = 32. 
          // done: WAR dependencies for mul40
          // start:  			$volatile mul40 := (conv39 * conv37) $buffering 1
          //  file prog.linked.opt.aa, line 274
          // volatile! 
          // Source expression
          // (conv39 * conv37)
          // conv39
          // conv37
          // Target expression
          // (as target) mul40
          // start: WAR dependencies for mul40
          // ignored out-of-scope w_root 		conv37 := ($cast ($uint<32>) ct ) $buffering 1// bits of buffering = 32. 
          // done: WAR dependencies for mul40
          // end:  			$volatile mul40 := (conv39 * conv37) $buffering 1
          // start: WAR dependencies for add41
          // ignored out-of-scope w_root 		conv37 := ($cast ($uint<32>) ct ) $buffering 1// bits of buffering = 32. 
          // done: WAR dependencies for add41
          // start:  			$volatile add41 := (conv35 + mul40) $buffering 1
          //  file prog.linked.opt.aa, line 275
          // volatile! 
          // Source expression
          // (conv35 + mul40)
          // conv35
          // mul40
          // Target expression
          // (as target) add41
          // start: WAR dependencies for add41
          // ignored out-of-scope w_root 		conv37 := ($cast ($uint<32>) ct ) $buffering 1// bits of buffering = 32. 
          // done: WAR dependencies for add41
          // end:  			$volatile add41 := (conv35 + mul40) $buffering 1
          // start: WAR dependencies for shl
          // ignored out-of-scope w_root 		conv23 := ($cast ($uint<32>) shr91 ) $buffering 1// bits of buffering = 32. 
          // ignored out-of-scope w_root 		conv37 := ($cast ($uint<32>) ct ) $buffering 1// bits of buffering = 32. 
          // done: WAR dependencies for shl
          // start:  			$volatile shl := (mul42 * add41) $buffering 1
          //  file prog.linked.opt.aa, line 276
          // volatile! 
          // Source expression
          // (mul42 * add41)
          // mul42
          // add41
          // Target expression
          // (as target) shl
          // start: WAR dependencies for shl
          // ignored out-of-scope w_root 		conv23 := ($cast ($uint<32>) shr91 ) $buffering 1// bits of buffering = 32. 
          // ignored out-of-scope w_root 		conv37 := ($cast ($uint<32>) ct ) $buffering 1// bits of buffering = 32. 
          // done: WAR dependencies for shl
          // end:  			$volatile shl := (mul42 * add41) $buffering 1
          // start: WAR dependencies for add43
          // ignored out-of-scope w_root 		conv23 := ($cast ($uint<32>) shr91 ) $buffering 1// bits of buffering = 32. 
          // ignored out-of-scope w_root 		conv37 := ($cast ($uint<32>) ct ) $buffering 1// bits of buffering = 32. 
          // done: WAR dependencies for add43
          // start:  			$volatile add43 := (shl + conv31) $buffering 1
          //  file prog.linked.opt.aa, line 277
          // volatile! 
          // Source expression
          // (shl + conv31)
          // shl
          // conv31
          // Target expression
          // (as target) add43
          // start: WAR dependencies for add43
          // ignored out-of-scope w_root 		conv23 := ($cast ($uint<32>) shr91 ) $buffering 1// bits of buffering = 32. 
          // ignored out-of-scope w_root 		conv37 := ($cast ($uint<32>) ct ) $buffering 1// bits of buffering = 32. 
          // done: WAR dependencies for add43
          // end:  			$volatile add43 := (shl + conv31) $buffering 1
          // start: WAR dependencies for add50
          // ignored out-of-scope w_root 		conv23 := ($cast ($uint<32>) shr91 ) $buffering 1// bits of buffering = 32. 
          // ignored out-of-scope w_root 		conv37 := ($cast ($uint<32>) ct ) $buffering 1// bits of buffering = 32. 
          // done: WAR dependencies for add50
          // start:  			$volatile add50 := (add43 + conv23) $buffering 1
          //  file prog.linked.opt.aa, line 278
          // volatile! 
          // Source expression
          // (add43 + conv23)
          // add43
          // conv23
          // Target expression
          // (as target) add50
          // start: WAR dependencies for add50
          // ignored out-of-scope w_root 		conv23 := ($cast ($uint<32>) shr91 ) $buffering 1// bits of buffering = 32. 
          // ignored out-of-scope w_root 		conv37 := ($cast ($uint<32>) ct ) $buffering 1// bits of buffering = 32. 
          // done: WAR dependencies for add50
          // end:  			$volatile add50 := (add43 + conv23) $buffering 1
          // start: WAR dependencies for add54
          // ignored out-of-scope w_root 		conv23 := ($cast ($uint<32>) shr91 ) $buffering 1// bits of buffering = 32. 
          // ignored out-of-scope w_root 		conv25 := ($cast ($uint<32>) mul ) $buffering 1// bits of buffering = 32. 
          // ignored out-of-scope w_root 		conv37 := ($cast ($uint<32>) ct ) $buffering 1// bits of buffering = 32. 
          // done: WAR dependencies for add54
          // start:  			$volatile add54 := (add43 + conv25) $buffering 1
          //  file prog.linked.opt.aa, line 279
          // volatile! 
          // Source expression
          // (add43 + conv25)
          // add43
          // conv25
          // Target expression
          // (as target) add54
          // start: WAR dependencies for add54
          // ignored out-of-scope w_root 		conv23 := ($cast ($uint<32>) shr91 ) $buffering 1// bits of buffering = 32. 
          // ignored out-of-scope w_root 		conv25 := ($cast ($uint<32>) mul ) $buffering 1// bits of buffering = 32. 
          // ignored out-of-scope w_root 		conv37 := ($cast ($uint<32>) ct ) $buffering 1// bits of buffering = 32. 
          // done: WAR dependencies for add54
          // end:  			$volatile add54 := (add43 + conv25) $buffering 1
          // start: WAR dependencies for add57
          // ignored out-of-scope w_root 		conv23 := ($cast ($uint<32>) shr91 ) $buffering 1// bits of buffering = 32. 
          // ignored out-of-scope w_root 		conv25 := ($cast ($uint<32>) mul ) $buffering 1// bits of buffering = 32. 
          // ignored out-of-scope w_root 		conv37 := ($cast ($uint<32>) ct ) $buffering 1// bits of buffering = 32. 
          // done: WAR dependencies for add57
          // start:  			$volatile add57 := (add + add43) $buffering 1
          //  file prog.linked.opt.aa, line 280
          // volatile! 
          // Source expression
          // (add + add43)
          // add
          // add43
          // Target expression
          // (as target) add57
          // start: WAR dependencies for add57
          // ignored out-of-scope w_root 		conv23 := ($cast ($uint<32>) shr91 ) $buffering 1// bits of buffering = 32. 
          // ignored out-of-scope w_root 		conv25 := ($cast ($uint<32>) mul ) $buffering 1// bits of buffering = 32. 
          // ignored out-of-scope w_root 		conv37 := ($cast ($uint<32>) ct ) $buffering 1// bits of buffering = 32. 
          // done: WAR dependencies for add57
          // end:  			$volatile add57 := (add + add43) $buffering 1
          // start:  			iNsTr_1_923_delayed_1_0 := iNsTr_1 $buffering 1 $cut_through // bits of buffering = 32. 
          //  file prog.linked.opt.aa, line 281
          $T[assign_stmt_931_sample_start_] 
          $T[assign_stmt_931_sample_completed_] 
          $T[assign_stmt_931_update_start_] 
          $T[assign_stmt_931_update_completed_] 
          // Source expression
          // iNsTr_1
          // Target expression
          // (as target) iNsTr_1_923_delayed_1_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_931_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_931_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_931_sample_start_ &-> (assign_stmt_931_Sample)
          assign_stmt_931_sample_completed_ <-& (assign_stmt_931_Sample)
          assign_stmt_931_sample_completed_ &-> ($null)
          assign_stmt_931_update_start_ &-> (assign_stmt_931_Update)
          assign_stmt_931_update_completed_ <-& (assign_stmt_931_Update)
          // start: Forward dependencies from iNsTr_1 to transition assign_stmt_931_sample_start_
          assign_stmt_931_sample_start_ <-& (phi_stmt_861_update_completed_)
          // done: Forward dependencies from iNsTr_1 to transition assign_stmt_931_sample_start_
          // RAW reenables for iNsTr_1
          phi_stmt_861_update_start_ o<-& (assign_stmt_931_sample_completed_ 0)
          // self-release: 
          assign_stmt_931_sample_start_ o<-& (assign_stmt_931_sample_completed_ 1)
          $null &-> (assign_stmt_931_update_start_)
          assign_stmt_931_update_start_ o<-& (assign_stmt_931_update_completed_ 0)
          // start: WAR dependencies for iNsTr_1_923_delayed_1_0
          // done: WAR dependencies for iNsTr_1_923_delayed_1_0
          // end:  			iNsTr_1_923_delayed_1_0 := iNsTr_1 $buffering 1 $cut_through // bits of buffering = 32. 
          // start: 			$call maxPool4 (iNsTr_1_923_delayed_1_0 add43 add50 add54 add57 index_in index_out ) (call ) 
          //  file prog.linked.opt.aa, line 282
          $T[call_stmt_940_sample_start_] 
          $T[call_stmt_940_sample_completed_] 
          $T[call_stmt_940_update_start_] 
          $T[call_stmt_940_update_completed_] 
          // Call input argument 0
          // iNsTr_1_923_delayed_1_0
          // Call input argument 1
          // add43
          // Call input argument 2
          // add50
          // Call input argument 3
          // add54
          // Call input argument 4
          // add57
          // Call input argument 5
          // index_in
          // Call input argument 6
          // index_out
          // start: Forward dependencies from iNsTr_1_923_delayed_1_0 to transition call_stmt_940_sample_start_
          call_stmt_940_sample_start_ <-& (assign_stmt_931_update_completed_)
          // done: Forward dependencies from iNsTr_1_923_delayed_1_0 to transition call_stmt_940_sample_start_
          // RAW reenables for iNsTr_1_923_delayed_1_0
          assign_stmt_931_update_start_ o<-& (call_stmt_940_sample_completed_ 0)
          // start: Forward dependencies from add43 to transition call_stmt_940_sample_start_
          call_stmt_940_sample_start_ <-& (type_cast_884_update_completed_)
          call_stmt_940_sample_start_ <-& (type_cast_888_update_completed_)
          call_stmt_940_sample_start_ <-& (type_cast_892_update_completed_)
          // done: Forward dependencies from add43 to transition call_stmt_940_sample_start_
          // RAW reenables for add43
          type_cast_884_update_start_ o<-& (call_stmt_940_sample_completed_ 0)
          type_cast_888_update_start_ o<-& (call_stmt_940_sample_completed_ 0)
          type_cast_892_update_start_ o<-& (call_stmt_940_sample_completed_ 0)
          // start: Forward dependencies from add50 to transition call_stmt_940_sample_start_
          call_stmt_940_sample_start_ <-& (type_cast_884_update_completed_)
          call_stmt_940_sample_start_ <-& (type_cast_888_update_completed_)
          call_stmt_940_sample_start_ <-& (type_cast_892_update_completed_)
          // done: Forward dependencies from add50 to transition call_stmt_940_sample_start_
          // RAW reenables for add50
          type_cast_884_update_start_ o<-& (call_stmt_940_sample_completed_ 0)
          type_cast_888_update_start_ o<-& (call_stmt_940_sample_completed_ 0)
          type_cast_892_update_start_ o<-& (call_stmt_940_sample_completed_ 0)
          // start: Forward dependencies from add54 to transition call_stmt_940_sample_start_
          call_stmt_940_sample_start_ <-& (type_cast_884_update_completed_)
          call_stmt_940_sample_start_ <-& (type_cast_888_update_completed_)
          call_stmt_940_sample_start_ <-& (type_cast_892_update_completed_)
          // done: Forward dependencies from add54 to transition call_stmt_940_sample_start_
          // RAW reenables for add54
          type_cast_884_update_start_ o<-& (call_stmt_940_sample_completed_ 0)
          type_cast_888_update_start_ o<-& (call_stmt_940_sample_completed_ 0)
          type_cast_892_update_start_ o<-& (call_stmt_940_sample_completed_ 0)
          // start: Forward dependencies from add57 to transition call_stmt_940_sample_start_
          call_stmt_940_sample_start_ <-& (type_cast_884_update_completed_)
          call_stmt_940_sample_start_ <-& (type_cast_888_update_completed_)
          call_stmt_940_sample_start_ <-& (type_cast_892_update_completed_)
          // done: Forward dependencies from add57 to transition call_stmt_940_sample_start_
          // RAW reenables for add57
          type_cast_884_update_start_ o<-& (call_stmt_940_sample_completed_ 0)
          type_cast_888_update_start_ o<-& (call_stmt_940_sample_completed_ 0)
          type_cast_892_update_start_ o<-& (call_stmt_940_sample_completed_ 0)
          // start: Forward dependencies from index_in to transition call_stmt_940_sample_start_
          // done: Forward dependencies from index_in to transition call_stmt_940_sample_start_
          // RAW reenables for index_in
          // start: Forward dependencies from index_out to transition call_stmt_940_sample_start_
          // done: Forward dependencies from index_out to transition call_stmt_940_sample_start_
          // RAW reenables for index_out
          ;;[call_stmt_940_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_940_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_940_sample_start_ &-> (call_stmt_940_Sample)
          call_stmt_940_sample_completed_ <-& (call_stmt_940_Sample)
          call_stmt_940_sample_completed_ &-> ($null)
          call_stmt_940_update_start_ &-> (call_stmt_940_Update)
          call_stmt_940_update_completed_ <-& (call_stmt_940_Update)
          // Call output argument 0
          // (as target) call
          // self-release: 
          call_stmt_940_sample_start_ o<-& (call_stmt_940_sample_completed_ 1)
          $null &-> (call_stmt_940_update_start_)
          call_stmt_940_update_start_ o<-& (call_stmt_940_update_completed_ 0)
          // start: WAR dependencies for call
          // done: WAR dependencies for call
          // end: 			$call maxPool4 (iNsTr_1_923_delayed_1_0 add43 add50 add54 add57 index_in index_out ) (call ) 
          // start: WAR dependencies for inc
          // done: WAR dependencies for inc
          // start:  			$volatile inc := (chlx_x0 + ($bitcast ($uint<16>) _b0000000000000001  )) $buffering 1
          //  file prog.linked.opt.aa, line 283
          // volatile! 
          // Source expression
          // (chlx_x0 + ($bitcast ($uint<16>) _b0000000000000001  ))
          // chlx_x0
          // Target expression
          // (as target) inc
          // start: WAR dependencies for inc
          // done: WAR dependencies for inc
          // end:  			$volatile inc := (chlx_x0 + ($bitcast ($uint<16>) _b0000000000000001  )) $buffering 1
          // start: WAR dependencies for cmp
          // ignored out-of-scope w_root  chl_out : $uint<16> 
          // done: WAR dependencies for cmp
          // start:  			$volatile cmp := (inc == shr91) $buffering 1
          //  file prog.linked.opt.aa, line 284
          // volatile! 
          // Source expression
          // (inc == shr91)
          // inc
          // shr91
          // Target expression
          // (as target) cmp
          // start: WAR dependencies for cmp
          // ignored out-of-scope w_root  chl_out : $uint<16> 
          // done: WAR dependencies for cmp
          // end:  			$volatile cmp := (inc == shr91) $buffering 1
          // start:  			inc67 := ($cast ($uint<16>) cmp ) $buffering 1// bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 285
          // Source expression
          // ($cast ($uint<16>) cmp )
          $T[type_cast_954_sample_start_] 
          $T[type_cast_954_sample_completed_] 
          $T[type_cast_954_update_start_] 
          $T[type_cast_954_update_completed_] 
          // cmp
          // start: Forward dependencies from cmp to transition type_cast_954_sample_start_
          type_cast_954_sample_start_ <-& (phi_stmt_876_update_completed_)
          // done: Forward dependencies from cmp to transition type_cast_954_sample_start_
          ;;[type_cast_954_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_954_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_954_sample_start_ &-> (type_cast_954_Sample)
          type_cast_954_sample_completed_ <-& (type_cast_954_Sample)
          type_cast_954_sample_completed_ &-> ($null)
          type_cast_954_update_start_ &-> (type_cast_954_Update)
          type_cast_954_update_completed_ <-& (type_cast_954_Update)
          // RAW reenables for cmp
          phi_stmt_876_update_start_ o<-& (type_cast_954_sample_completed_ 0)
          // self-release: 
          type_cast_954_sample_start_ o<-& (type_cast_954_sample_completed_ 1)
          $null &-> (type_cast_954_update_start_)
          type_cast_954_update_start_ o<-& (type_cast_954_update_completed_ 0)
          // Target expression
          // (as target) inc67
          // start: WAR dependencies for inc67
          // done: WAR dependencies for inc67
          // end:  			inc67 := ($cast ($uint<16>) cmp ) $buffering 1// bits of buffering = 16. 
          // start:  			colx_x1_949_delayed_1_0 := colx_x1 $buffering 1 $cut_through // bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 286
          $T[assign_stmt_958_sample_start_] 
          $T[assign_stmt_958_sample_completed_] 
          $T[assign_stmt_958_update_start_] 
          $T[assign_stmt_958_update_completed_] 
          // Source expression
          // colx_x1
          // Target expression
          // (as target) colx_x1_949_delayed_1_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_958_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_958_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_958_sample_start_ &-> (assign_stmt_958_Sample)
          assign_stmt_958_sample_completed_ <-& (assign_stmt_958_Sample)
          assign_stmt_958_sample_completed_ &-> ($null)
          assign_stmt_958_update_start_ &-> (assign_stmt_958_Update)
          assign_stmt_958_update_completed_ <-& (assign_stmt_958_Update)
          // start: Forward dependencies from colx_x1 to transition assign_stmt_958_sample_start_
          assign_stmt_958_sample_start_ <-& (phi_stmt_871_update_completed_)
          // done: Forward dependencies from colx_x1 to transition assign_stmt_958_sample_start_
          // RAW reenables for colx_x1
          phi_stmt_871_update_start_ o<-& (assign_stmt_958_sample_completed_ 0)
          // self-release: 
          assign_stmt_958_sample_start_ o<-& (assign_stmt_958_sample_completed_ 1)
          $null &-> (assign_stmt_958_update_start_)
          assign_stmt_958_update_start_ o<-& (assign_stmt_958_update_completed_ 0)
          // start: WAR dependencies for colx_x1_949_delayed_1_0
          // done: WAR dependencies for colx_x1_949_delayed_1_0
          // end:  			colx_x1_949_delayed_1_0 := colx_x1 $buffering 1 $cut_through // bits of buffering = 16. 
          // start: WAR dependencies for inc67x_xcolx_x1
          // done: WAR dependencies for inc67x_xcolx_x1
          // start:  			$volatile inc67x_xcolx_x1 := (inc67 + colx_x1_949_delayed_1_0) $buffering 1
          //  file prog.linked.opt.aa, line 287
          // volatile! 
          // Source expression
          // (inc67 + colx_x1_949_delayed_1_0)
          // inc67
          // colx_x1_949_delayed_1_0
          // Target expression
          // (as target) inc67x_xcolx_x1
          // start: WAR dependencies for inc67x_xcolx_x1
          // done: WAR dependencies for inc67x_xcolx_x1
          // end:  			$volatile inc67x_xcolx_x1 := (inc67 + colx_x1_949_delayed_1_0) $buffering 1
          // start: WAR dependencies for chlx_x1
          // WAR dependency: Read: chlx_x1 before Write: 			$volatile chlx_x1 := ( $mux cmp ($bitcast ($uint<16>) _b0000000000000000  )  inc )  $buffering 1
          // ignored out-of-scope w_root  chl_out : $uint<16> 
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for chlx_x1
          // start:  			$volatile chlx_x1 := ( $mux cmp ($bitcast ($uint<16>) _b0000000000000000  )  inc )  $buffering 1
          //  file prog.linked.opt.aa, line 288
          // volatile! 
          // Source expression
          // ( $mux cmp ($bitcast ($uint<16>) _b0000000000000000  )  inc ) 
          // cmp
          // inc
          // Target expression
          // (as target) chlx_x1
          // start: WAR dependencies for chlx_x1
          // WAR dependency: Read: chlx_x1 before Write: 			$volatile chlx_x1 := ( $mux cmp ($bitcast ($uint<16>) _b0000000000000000  )  inc )  $buffering 1
          // ignored out-of-scope w_root  chl_out : $uint<16> 
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for chlx_x1
          // end:  			$volatile chlx_x1 := ( $mux cmp ($bitcast ($uint<16>) _b0000000000000000  )  inc )  $buffering 1
          // start: WAR dependencies for cmp72
          // ignored out-of-scope w_root  cb : $uint<16> 
          // done: WAR dependencies for cmp72
          // start:  			$volatile cmp72 := (inc67x_xcolx_x1 == cb) $buffering 1
          //  file prog.linked.opt.aa, line 289
          // volatile! 
          // Source expression
          // (inc67x_xcolx_x1 == cb)
          // inc67x_xcolx_x1
          // cb
          // Target expression
          // (as target) cmp72
          // start: WAR dependencies for cmp72
          // ignored out-of-scope w_root  cb : $uint<16> 
          // done: WAR dependencies for cmp72
          // end:  			$volatile cmp72 := (inc67x_xcolx_x1 == cb) $buffering 1
          // start:  			inc76 := ($cast ($uint<16>) cmp72 ) $buffering 1// bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 290
          // Source expression
          // ($cast ($uint<16>) cmp72 )
          $T[type_cast_978_sample_start_] 
          $T[type_cast_978_sample_completed_] 
          $T[type_cast_978_update_start_] 
          $T[type_cast_978_update_completed_] 
          // cmp72
          // start: Forward dependencies from cmp72 to transition type_cast_978_sample_start_
          type_cast_978_sample_start_ <-& (type_cast_954_update_completed_)
          type_cast_978_sample_start_ <-& (assign_stmt_958_update_completed_)
          // done: Forward dependencies from cmp72 to transition type_cast_978_sample_start_
          ;;[type_cast_978_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_978_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_978_sample_start_ &-> (type_cast_978_Sample)
          type_cast_978_sample_completed_ <-& (type_cast_978_Sample)
          type_cast_978_sample_completed_ &-> ($null)
          type_cast_978_update_start_ &-> (type_cast_978_Update)
          type_cast_978_update_completed_ <-& (type_cast_978_Update)
          // RAW reenables for cmp72
          type_cast_954_update_start_ o<-& (type_cast_978_sample_completed_ 0)
          assign_stmt_958_update_start_ o<-& (type_cast_978_sample_completed_ 0)
          // self-release: 
          type_cast_978_sample_start_ o<-& (type_cast_978_sample_completed_ 1)
          $null &-> (type_cast_978_update_start_)
          type_cast_978_update_start_ o<-& (type_cast_978_update_completed_ 0)
          // Target expression
          // (as target) inc76
          // start: WAR dependencies for inc76
          // done: WAR dependencies for inc76
          // end:  			inc76 := ($cast ($uint<16>) cmp72 ) $buffering 1// bits of buffering = 16. 
          // start:  			row18x_x1_970_delayed_2_0 := row18x_x1 $buffering 2 $cut_through // bits of buffering = 32. 
          //  file prog.linked.opt.aa, line 291
          $T[assign_stmt_982_sample_start_] 
          $T[assign_stmt_982_sample_completed_] 
          $T[assign_stmt_982_update_start_] 
          $T[assign_stmt_982_update_completed_] 
          // Source expression
          // row18x_x1
          // Target expression
          // (as target) row18x_x1_970_delayed_2_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_982_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_982_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_982_sample_start_ &-> (assign_stmt_982_Sample)
          assign_stmt_982_sample_completed_ <-& (assign_stmt_982_Sample)
          assign_stmt_982_sample_completed_ &-> ($null)
          assign_stmt_982_update_start_ &-> (assign_stmt_982_Update)
          assign_stmt_982_update_completed_ <-& (assign_stmt_982_Update)
          // start: Forward dependencies from row18x_x1 to transition assign_stmt_982_sample_start_
          assign_stmt_982_sample_start_ <-& (phi_stmt_866_update_completed_)
          // done: Forward dependencies from row18x_x1 to transition assign_stmt_982_sample_start_
          // RAW reenables for row18x_x1
          phi_stmt_866_update_start_ o<-& (assign_stmt_982_sample_completed_ 0)
          // self-release: 
          assign_stmt_982_sample_start_ o<-& (assign_stmt_982_sample_completed_ 1)
          $null &-> (assign_stmt_982_update_start_)
          assign_stmt_982_update_start_ o<-& (assign_stmt_982_update_completed_ 0)
          // start: WAR dependencies for row18x_x1_970_delayed_2_0
          // done: WAR dependencies for row18x_x1_970_delayed_2_0
          // end:  			row18x_x1_970_delayed_2_0 := row18x_x1 $buffering 2 $cut_through // bits of buffering = 32. 
          // start: WAR dependencies for inc76x_xrow18x_x1
          // WAR dependency: Read: inc76x_xrow18x_x1 before Write: 			$volatile inc76x_xrow18x_x1 := (inc76 + row18x_x1_970_delayed_2_0) $buffering 1
          type_cast_978_update_start_ <-& (phi_stmt_866_sample_completed_)
          phi_stmt_866_sample_start_ o<-& (type_cast_978_update_completed_ 0)
          // WAR dependency: release  Read: inc76x_xrow18x_x1 with Write: 			inc76 := ($cast ($uint<16>) cmp72 ) $buffering 1// bits of buffering = 16. 
          assign_stmt_982_update_start_ <-& (phi_stmt_866_sample_completed_)
          phi_stmt_866_sample_start_ o<-& (assign_stmt_982_update_completed_ 0)
          // WAR dependency: release  Read: inc76x_xrow18x_x1 with Write: 			row18x_x1_970_delayed_2_0 := row18x_x1 $buffering 2 $cut_through // bits of buffering = 32. 
          // done: WAR dependencies for inc76x_xrow18x_x1
          // start:  			$volatile inc76x_xrow18x_x1 := (inc76 + row18x_x1_970_delayed_2_0) $buffering 1
          //  file prog.linked.opt.aa, line 292
          // volatile! 
          // Source expression
          // (inc76 + row18x_x1_970_delayed_2_0)
          // inc76
          // row18x_x1_970_delayed_2_0
          // Target expression
          // (as target) inc76x_xrow18x_x1
          // start: WAR dependencies for inc76x_xrow18x_x1
          // WAR dependency: Read: inc76x_xrow18x_x1 before Write: 			$volatile inc76x_xrow18x_x1 := (inc76 + row18x_x1_970_delayed_2_0) $buffering 1
          type_cast_978_update_start_ <-& (phi_stmt_866_sample_completed_)
          phi_stmt_866_sample_start_ o<-& (type_cast_978_update_completed_ 0)
          // WAR dependency: release  Read: inc76x_xrow18x_x1 with Write: 			inc76 := ($cast ($uint<16>) cmp72 ) $buffering 2// bits of buffering = 32. 
          assign_stmt_982_update_start_ <-& (phi_stmt_866_sample_completed_)
          phi_stmt_866_sample_start_ o<-& (assign_stmt_982_update_completed_ 0)
          // WAR dependency: release  Read: inc76x_xrow18x_x1 with Write: 			row18x_x1_970_delayed_2_0 := row18x_x1 $buffering 2 $cut_through // bits of buffering = 32. 
          // done: WAR dependencies for inc76x_xrow18x_x1
          // end:  			$volatile inc76x_xrow18x_x1 := (inc76 + row18x_x1_970_delayed_2_0) $buffering 1
          // start: WAR dependencies for colx_x2
          // WAR dependency: Read: colx_x2 before Write: 			$volatile colx_x2 := ( $mux cmp72 ($bitcast ($uint<16>) _b0000000000000000  )  inc67x_xcolx_x1 )  $buffering 1
          // ignored out-of-scope w_root  cb : $uint<16> 
          type_cast_954_update_start_ <-& (phi_stmt_871_sample_completed_)
          phi_stmt_871_sample_start_ o<-& (type_cast_954_update_completed_ 0)
          // WAR dependency: release  Read: colx_x2 with Write: 			inc67 := ($cast ($uint<16>) cmp ) $buffering 1// bits of buffering = 16. 
          assign_stmt_958_update_start_ <-& (phi_stmt_871_sample_completed_)
          phi_stmt_871_sample_start_ o<-& (assign_stmt_958_update_completed_ 0)
          // WAR dependency: release  Read: colx_x2 with Write: 			colx_x1_949_delayed_1_0 := colx_x1 $buffering 1 $cut_through // bits of buffering = 16. 
          // done: WAR dependencies for colx_x2
          // start:  			$volatile colx_x2 := ( $mux cmp72 ($bitcast ($uint<16>) _b0000000000000000  )  inc67x_xcolx_x1 )  $buffering 1
          //  file prog.linked.opt.aa, line 293
          // volatile! 
          // Source expression
          // ( $mux cmp72 ($bitcast ($uint<16>) _b0000000000000000  )  inc67x_xcolx_x1 ) 
          // cmp72
          // inc67x_xcolx_x1
          // Target expression
          // (as target) colx_x2
          // start: WAR dependencies for colx_x2
          // WAR dependency: Read: colx_x2 before Write: 			$volatile colx_x2 := ( $mux cmp72 ($bitcast ($uint<16>) _b0000000000000000  )  inc67x_xcolx_x1 )  $buffering 1
          // ignored out-of-scope w_root  cb : $uint<16> 
          type_cast_954_update_start_ <-& (phi_stmt_871_sample_completed_)
          phi_stmt_871_sample_start_ o<-& (type_cast_954_update_completed_ 0)
          // WAR dependency: release  Read: colx_x2 with Write: 			inc67 := ($cast ($uint<16>) cmp ) $buffering 2// bits of buffering = 32. 
          assign_stmt_958_update_start_ <-& (phi_stmt_871_sample_completed_)
          phi_stmt_871_sample_start_ o<-& (assign_stmt_958_update_completed_ 0)
          // WAR dependency: release  Read: colx_x2 with Write: 			colx_x1_949_delayed_1_0 := colx_x1 $buffering 2 $cut_through // bits of buffering = 32. 
          // done: WAR dependencies for colx_x2
          // end:  			$volatile colx_x2 := ( $mux cmp72 ($bitcast ($uint<16>) _b0000000000000000  )  inc67x_xcolx_x1 )  $buffering 1
          // start: WAR dependencies for add79
          // WAR dependency: Read: add79 before Write: 			$volatile add79 := (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for add79
          // start:  			$volatile add79 := (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
          //  file prog.linked.opt.aa, line 294
          // volatile! 
          // Source expression
          // (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  ))
          // iNsTr_1
          // Target expression
          // (as target) add79
          // start: WAR dependencies for add79
          // WAR dependency: Read: add79 before Write: 			$volatile add79 := (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for add79
          // end:  			$volatile add79 := (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
          // start: WAR dependencies for cmp84
          // ignored out-of-scope w_root  rb : $uint<16> 
          // done: WAR dependencies for cmp84
          // start:  			$volatile cmp84 := (inc76x_xrow18x_x1 == rb) $buffering 1
          //  file prog.linked.opt.aa, line 295
          // volatile! 
          // Source expression
          // (inc76x_xrow18x_x1 == rb)
          // inc76x_xrow18x_x1
          // rb
          // Target expression
          // (as target) cmp84
          // start: WAR dependencies for cmp84
          // ignored out-of-scope w_root  rb : $uint<16> 
          // done: WAR dependencies for cmp84
          // end:  			$volatile cmp84 := (inc76x_xrow18x_x1 == rb) $buffering 1
          // start: WAR dependencies for whilex_xbody_whilex_xend_taken
          // ignored out-of-scope w_root  rb : $uint<16> 
          // done: WAR dependencies for whilex_xbody_whilex_xend_taken
          // start:  			$volatile whilex_xbody_whilex_xend_taken := cmp84 $buffering 1
          //  file prog.linked.opt.aa, line 296
          // volatile! 
          // Source expression
          // cmp84
          // Target expression
          // (as target) whilex_xbody_whilex_xend_taken
          // start: WAR dependencies for whilex_xbody_whilex_xend_taken
          // ignored out-of-scope w_root  rb : $uint<16> 
          // done: WAR dependencies for whilex_xbody_whilex_xend_taken
          // end:  			$volatile whilex_xbody_whilex_xend_taken := cmp84 $buffering 1
          // ( ~ cmp84 )
          // cmp84
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from ( ~ cmp84 ) to transition condition_evaluated
          condition_evaluated <-& (type_cast_978_update_completed_)
          condition_evaluated <-& (assign_stmt_982_update_completed_)
          // done: Forward dependencies from ( ~ cmp84 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe MAIN_MEM_REQUEST
          // read-dependencies for pipe MAIN_MEM_REQUEST
          // write-dependencies for pipe MAIN_MEM_REQUEST
          // signal write dependencies for MAIN_MEM_REQUEST
          // pipe read/write dependencies for pipe MAIN_MEM_RESPONSE
          // read-dependencies for pipe MAIN_MEM_RESPONSE
          // write-dependencies for pipe MAIN_MEM_RESPONSE
          // signal write dependencies for MAIN_MEM_RESPONSE
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_859__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_859_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_859__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_859_loop_body : condition_evaluated
        $bind do_while_stmt_859__entry__  => do_while_stmt_859_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_859_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_859__exit__)
      }
      do_while_stmt_859__entry__ |-> (do_while_stmt_859)
      do_while_stmt_859__exit__ <-| (do_while_stmt_859)
      // if-statement  
      //  file prog.linked.opt.aa, line 0
      ;;[if_stmt_1012_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1012__entry__ |-> (if_stmt_1012_dead_link)
      if_stmt_1012__exit__ <-| (if_stmt_1012_dead_link)
      ;;[if_stmt_1012_eval_test] 
      {
        // test expression evaluate and trigger branch 
        $T [branch_req] 
      }
      if_stmt_1012__entry__ |-> (if_stmt_1012_eval_test)
      $P [R_whilex_xbody_whilex_xend_taken_1013_place]
      R_whilex_xbody_whilex_xend_taken_1013_place <-| (if_stmt_1012_eval_test)
      ;;[if_stmt_1012_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1012_else_link] 
      {
        $T [else_choice_transition] 
      }
      R_whilex_xbody_whilex_xend_taken_1013_place |-> (if_stmt_1012_if_link if_stmt_1012_else_link)
      $P [whilex_xbody_whilex_xend]
      whilex_xbody_whilex_xend <-| (if_stmt_1012_if_link)
      if_stmt_1012__exit__ <-| (if_stmt_1012_else_link)
      ::[assign_stmt_1025_to_assign_stmt_1028] 
      {
        // start:  		conv89 := ($cast ($uint<8>) inc76x_xrow18x_x1x_xlcssa ) $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 305
        // Source expression
        // ($cast ($uint<8>) inc76x_xrow18x_x1x_xlcssa )
        $T[type_cast_1024_sample_start_] 
        $T[type_cast_1024_sample_completed_] 
        $T[type_cast_1024_update_start_] 
        $T[type_cast_1024_update_completed_] 
        // inc76x_xrow18x_x1x_xlcssa
        // start: Forward dependencies from inc76x_xrow18x_x1x_xlcssa to transition type_cast_1024_sample_start_
        // done: Forward dependencies from inc76x_xrow18x_x1x_xlcssa to transition type_cast_1024_sample_start_
        ;;[type_cast_1024_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_1024_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_1024_sample_start_ &-> (type_cast_1024_Sample)
        type_cast_1024_sample_completed_ <-& (type_cast_1024_Sample)
        type_cast_1024_sample_completed_ &-> ($null)
        type_cast_1024_update_start_ &-> (type_cast_1024_Update)
        type_cast_1024_update_completed_ <-& (type_cast_1024_Update)
        // Target expression
        // (as target) conv89
        // start: WAR dependencies for conv89
        // done: WAR dependencies for conv89
        // end:  		conv89 := ($cast ($uint<8>) inc76x_xrow18x_x1x_xlcssa ) $buffering 1// bits of buffering = 8. 
        // start:  		system_output_pipe := conv89 $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 306
        // Source expression
        // conv89
        // Target expression
        // (as target) system_output_pipe
        $T[WPIPE_system_output_pipe_1026_sample_start_] 
        $T[WPIPE_system_output_pipe_1026_sample_completed_] 
        $T[WPIPE_system_output_pipe_1026_update_start_] 
        $T[WPIPE_system_output_pipe_1026_update_completed_] 
        ;;[WPIPE_system_output_pipe_1026_Sample] 
        {
          // pipe write sample-start system_output_pipe
          $T [req] $T [ack] 
        }
        ;;[WPIPE_system_output_pipe_1026_Update] 
        {
          // pipe write update (complete) system_output_pipe
          $T [req] $T [ack] 
        }
        WPIPE_system_output_pipe_1026_sample_start_ &-> (WPIPE_system_output_pipe_1026_Sample)
        WPIPE_system_output_pipe_1026_sample_completed_ <-& (WPIPE_system_output_pipe_1026_Sample)
        WPIPE_system_output_pipe_1026_update_start_ <-& (WPIPE_system_output_pipe_1026_sample_completed_)
        WPIPE_system_output_pipe_1026_update_start_ &-> (WPIPE_system_output_pipe_1026_Update)
        WPIPE_system_output_pipe_1026_update_completed_ <-& (WPIPE_system_output_pipe_1026_Update)
        // start: Forward dependencies from conv89 to transition WPIPE_system_output_pipe_1026_sample_start_
        WPIPE_system_output_pipe_1026_sample_start_ <-& (type_cast_1024_update_completed_)
        // done: Forward dependencies from conv89 to transition WPIPE_system_output_pipe_1026_sample_start_
        // end:  		system_output_pipe := conv89 $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe system_output_pipe
        // read-dependencies for pipe system_output_pipe
        // write-dependencies for pipe system_output_pipe
        // signal write dependencies for system_output_pipe
      }
      assign_stmt_1025_to_assign_stmt_1028__entry__ |-> (assign_stmt_1025_to_assign_stmt_1028)
      assign_stmt_1025_to_assign_stmt_1028__exit__ <-| (assign_stmt_1025_to_assign_stmt_1028)
      // control-path for merge  
      //  file prog.linked.opt.aa, line 249
      //---------------------   merge statement  file prog.linked.opt.aa, line 249  --------------------------
      ||[entry_whilex_xbody_PhiReq] 
      {
        // skipped constant phi phi_stmt_838
        // skipped constant phi phi_stmt_843
        // skipped constant phi phi_stmt_848
        // skipped constant phi phi_stmt_853
      }
      entry_whilex_xbody |-> (entry_whilex_xbody_PhiReq)
      $P [merge_stmt_837_PhiReqMerge] 
      merge_stmt_837_PhiReqMerge <-| ( entry_whilex_xbody_PhiReq )
      ||[merge_stmt_837_PhiAck] 
      {
        // skipped constant phi phi_stmt_838
        // skipped constant phi phi_stmt_843
        // skipped constant phi phi_stmt_848
        // skipped constant phi phi_stmt_853
      }
      merge_stmt_837_PhiReqMerge |-> (merge_stmt_837_PhiAck)
      merge_stmt_837__exit__  <-| (merge_stmt_837_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 249  --------------------------
      // control-path for merge  
      //  file prog.linked.opt.aa, line 301
      ;;[merge_stmt_1016_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_1016__entry__ |-> (merge_stmt_1016_dead_link)
      merge_stmt_1016__exit__ <-| (merge_stmt_1016_dead_link)
      //---------------------   merge statement  file prog.linked.opt.aa, line 301  --------------------------
      ||[whilex_xbody_whilex_xend_PhiReq] 
      {
        ;;[phi_stmt_1017] 
        {
          ||[phi_stmt_1017_sources] 
          {
            // sources for 			$phi inc76x_xrow18x_x1x_xlcssa := 			  ($cast ($uint<16>) inc76x_xrow18x_x1 ) $on   whilex_xbody_whilex_xend 
            // type of target is $uint<16>
            // trivial non-constant source .... interlock-buffer introduced 
            // ($cast ($uint<16>) inc76x_xrow18x_x1 )
            ;;[type_cast_1020] 
            {
              // type-cast expression
              ||[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]  
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca] 
                }
              }
            }
          }
          $T [phi_stmt_1017_req] 
        }
      }
      whilex_xbody_whilex_xend |-> (whilex_xbody_whilex_xend_PhiReq)
      $P [merge_stmt_1016_PhiReqMerge] 
      merge_stmt_1016_PhiReqMerge <-| ( whilex_xbody_whilex_xend_PhiReq )
      ||[merge_stmt_1016_PhiAck] 
      {
        $T [phi_stmt_1017_ack] 
      }
      merge_stmt_1016_PhiReqMerge |-> (merge_stmt_1016_PhiAck)
      merge_stmt_1016__exit__  <-| (merge_stmt_1016_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 301  --------------------------
      // control-path for merge  
      //  file prog.linked.opt.aa, line 308
      //---------------------   merge statement  file prog.linked.opt.aa, line 308  --------------------------
      ||[return___PhiReq] 
      {
        // no phi statements in merge..
      }
      return__ |-> (return___PhiReq)
      $P [merge_stmt_1030_PhiReqMerge] 
      merge_stmt_1030_PhiReqMerge <-| ( return___PhiReq )
      ||[merge_stmt_1030_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_1030_PhiReqMerge |-> (merge_stmt_1030_PhiAck)
      merge_stmt_1030__exit__  <-| (merge_stmt_1030_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 308  --------------------------
      assign_stmt_807_to_assign_stmt_835__entry__ <-| (branch_block_stmt_801__entry__)
      entry_whilex_xbody <-| (assign_stmt_807_to_assign_stmt_835__exit__)
      do_while_stmt_859__entry__ <-| (merge_stmt_837__exit__)
      if_stmt_1012__entry__ <-| (do_while_stmt_859__exit__)
      merge_stmt_1016__entry__ <-| (if_stmt_1012__exit__)
      assign_stmt_1025_to_assign_stmt_1028__entry__ <-| (merge_stmt_1016__exit__)
      return__ <-| (assign_stmt_1025_to_assign_stmt_1028__exit__)
      merge_stmt_1030__exit__ |-> (branch_block_stmt_801__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %maxPool3D%body%
    //  file prog.linked.opt.aa, line 249
    // constant-object-declarations for block %maxPool3D%body%
    //  file prog.linked.opt.aa, line 261
    // constant-object-declarations for block %maxPool3D%body%
    //  file prog.linked.opt.aa, line 301
    // constant-object-declarations for block %maxPool3D%body%
    //  file prog.linked.opt.aa, line 308
    // constant-object-declarations for block %maxPool3D%body
    //  file prog.linked.opt.aa, line 239
    // constant-object-declarations for block %maxPool3D
    //  file prog.linked.opt.aa, line 234
    // constant-declarations for block %maxPool3D%body
    //  file prog.linked.opt.aa, line 239
    // ($bitcast ($uint<16>) _b0000000000000011  )
    $constant $W[type_cast_805_wire_constant] : $int<16> := _b0000000000000011// 3
    // ($bitcast ($uint<32>) _b00000000000000000000000000000001  )
    $constant $W[type_cast_828_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // constant-declarations for block %maxPool3D%body%
    //  file prog.linked.opt.aa, line 249
    // constant-declarations for phi:  			$phi iNsTr_1_at_entry := 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   entry_whilex_xbody 
    // type of target is $uint<32>
    //  file prog.linked.opt.aa, line 250
    $constant $W[iNsTr_1_at_entry_838] : $int<32> := _b00000000000000000000000000000000 // 0
    // constant-declarations for phi:  			$phi row18x_x1_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   entry_whilex_xbody 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 252
    $constant $W[row18x_x1_at_entry_843] : $int<16> := _b0000000000000000 // 0
    // constant-declarations for phi:  			$phi colx_x1_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   entry_whilex_xbody 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 254
    $constant $W[colx_x1_at_entry_848] : $int<16> := _b0000000000000000 // 0
    // constant-declarations for phi:  			$phi chlx_x0_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   entry_whilex_xbody 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 256
    $constant $W[chlx_x0_at_entry_853] : $int<16> := _b0000000000000000 // 0
    // do-while statement  
    //  file prog.linked.opt.aa, line 259
    // constant-declarations for block %maxPool3D%body%
    //  file prog.linked.opt.aa, line 261
    // constant-declarations for phi:  			$phi iNsTr_1 := 			  iNsTr_1_at_entry $on   $entry 			  ($cast ($uint<32>) add79 ) $on   $loopback 
    // type of target is $uint<32>
    //  file prog.linked.opt.aa, line 262
    // constant-declarations for phi:  			$phi row18x_x1 := 			  ($cast ($uint<16>) inc76x_xrow18x_x1 ) $on   $loopback 			  row18x_x1_at_entry $on   $entry 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 264
    // constant-declarations for phi:  			$phi colx_x1 := 			  ($cast ($uint<16>) colx_x2 ) $on   $loopback 			  colx_x1_at_entry $on   $entry 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 266
    // constant-declarations for phi:  			$phi chlx_x0 := 			  ($cast ($uint<16>) chlx_x1 ) $on   $loopback 			  chlx_x0_at_entry $on   $entry 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 268
    // 			$call maxPool4 (iNsTr_1_923_delayed_1_0 add43 add50 add54 add57 index_in index_out ) (call ) 
    //  file prog.linked.opt.aa, line 282
    // ($bitcast ($uint<16>) _b0000000000000001  )
    $constant $W[type_cast_944_wire_constant] : $int<16> := _b0000000000000001// 1
    // ( $mux cmp ($bitcast ($uint<16>) _b0000000000000000  )  inc ) 
    // ($bitcast ($uint<16>) _b0000000000000000  )
    $constant $W[type_cast_967_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux cmp72 ($bitcast ($uint<16>) _b0000000000000000  )  inc67x_xcolx_x1 ) 
    // ($bitcast ($uint<16>) _b0000000000000000  )
    $constant $W[type_cast_991_wire_constant] : $int<16> := _b0000000000000000// 0
    // ($bitcast ($uint<32>) _b00000000000000000000000000000001  )
    $constant $W[type_cast_998_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // if-statement  
    //  file prog.linked.opt.aa, line 0
    // constant-declarations for block %maxPool3D%body%
    //  file prog.linked.opt.aa, line 301
    // constant-declarations for phi:  			$phi inc76x_xrow18x_x1x_xlcssa := 			  ($cast ($uint<16>) inc76x_xrow18x_x1 ) $on   whilex_xbody_whilex_xend 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 302
    // constant-declarations for block %maxPool3D%body%
    //  file prog.linked.opt.aa, line 308
    // block %maxPool3D%body
    //  file prog.linked.opt.aa, line 239
    // 		$volatile shr91 := (chl_out >> ($bitcast ($uint<16>) _b0000000000000011  )) $buffering 1
    //  file prog.linked.opt.aa, line 241
    // shr91
    $W[shr91_807] : $int<16>
    // 		$volatile mul := (shr91 * ct) $buffering 1
    //  file prog.linked.opt.aa, line 242
    // mul
    $W[mul_812] : $int<16>
    // 		conv23 := ($cast ($uint<32>) shr91 ) $buffering 1// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 243
    // conv23
    $W[conv23_816] : $int<32>
    // 		conv25 := ($cast ($uint<32>) mul ) $buffering 1// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 244
    // conv25
    $W[conv25_820] : $int<32>
    // 		conv37 := ($cast ($uint<32>) ct ) $buffering 1// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 245
    // conv37
    $W[conv37_824] : $int<32>
    // 		$volatile mul42 := (conv23 << ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
    //  file prog.linked.opt.aa, line 246
    // mul42
    $W[mul42_830] : $int<32>
    // 		$volatile add := (conv25 + conv23) $buffering 1
    //  file prog.linked.opt.aa, line 247
    // add
    $W[add_835] : $int<32>
    // merge-statement  
    //  file prog.linked.opt.aa, line 249
    // do-while statement  
    //  file prog.linked.opt.aa, line 259
    // ( ~ cmp84 )
    $intermediate $W[NOT_u1_u1_1011_wire] : $int<1>
    // merge-statement  
    //  file prog.linked.opt.aa, line 261
    // 			$phi iNsTr_1 := 			  iNsTr_1_at_entry $on   $entry 			  ($cast ($uint<32>) add79 ) $on   $loopback 
    // type of target is $uint<32>
    //  file prog.linked.opt.aa, line 262
    // ($cast ($uint<32>) add79 )
    $intermediate $W[type_cast_865_wire] : $int<32>
    // iNsTr_1
    $W[iNsTr_1_861] : $int<32>
    // 			$phi row18x_x1 := 			  ($cast ($uint<16>) inc76x_xrow18x_x1 ) $on   $loopback 			  row18x_x1_at_entry $on   $entry 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 264
    // ($cast ($uint<16>) inc76x_xrow18x_x1 )
    $intermediate $W[type_cast_869_wire] : $int<16>
    // row18x_x1
    $W[row18x_x1_866] : $int<16>
    // 			$phi colx_x1 := 			  ($cast ($uint<16>) colx_x2 ) $on   $loopback 			  colx_x1_at_entry $on   $entry 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 266
    // ($cast ($uint<16>) colx_x2 )
    $intermediate $W[type_cast_874_wire] : $int<16>
    // colx_x1
    $W[colx_x1_871] : $int<16>
    // 			$phi chlx_x0 := 			  ($cast ($uint<16>) chlx_x1 ) $on   $loopback 			  chlx_x0_at_entry $on   $entry 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 268
    // ($cast ($uint<16>) chlx_x1 )
    $intermediate $W[type_cast_879_wire] : $int<16>
    // chlx_x0
    $W[chlx_x0_876] : $int<16>
    // 			conv31 := ($cast ($uint<32>) chlx_x0 ) $buffering 1// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 271
    // conv31
    $W[conv31_885] : $int<32>
    // 			conv35 := ($cast ($uint<32>) colx_x1 ) $buffering 1// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 272
    // conv35
    $W[conv35_889] : $int<32>
    // 			conv39 := ($cast ($uint<32>) row18x_x1 ) $buffering 1// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 273
    // conv39
    $W[conv39_893] : $int<32>
    // 			$volatile mul40 := (conv39 * conv37) $buffering 1
    //  file prog.linked.opt.aa, line 274
    // mul40
    $W[mul40_898] : $int<32>
    // 			$volatile add41 := (conv35 + mul40) $buffering 1
    //  file prog.linked.opt.aa, line 275
    // add41
    $W[add41_903] : $int<32>
    // 			$volatile shl := (mul42 * add41) $buffering 1
    //  file prog.linked.opt.aa, line 276
    // shl
    $W[shl_908] : $int<32>
    // 			$volatile add43 := (shl + conv31) $buffering 1
    //  file prog.linked.opt.aa, line 277
    // add43
    $W[add43_913] : $int<32>
    // 			$volatile add50 := (add43 + conv23) $buffering 1
    //  file prog.linked.opt.aa, line 278
    // add50
    $W[add50_918] : $int<32>
    // 			$volatile add54 := (add43 + conv25) $buffering 1
    //  file prog.linked.opt.aa, line 279
    // add54
    $W[add54_923] : $int<32>
    // 			$volatile add57 := (add + add43) $buffering 1
    //  file prog.linked.opt.aa, line 280
    // add57
    $W[add57_928] : $int<32>
    // 			iNsTr_1_923_delayed_1_0 := iNsTr_1 $buffering 1 $cut_through // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 281
    // iNsTr_1_923_delayed_1_0
    $W[iNsTr_1_923_delayed_1_0_931] : $int<32>
    // 			$call maxPool4 (iNsTr_1_923_delayed_1_0 add43 add50 add54 add57 index_in index_out ) (call ) 
    //  file prog.linked.opt.aa, line 282
    // call
    $W[call_940] : $int<8>
    // 			$volatile inc := (chlx_x0 + ($bitcast ($uint<16>) _b0000000000000001  )) $buffering 1
    //  file prog.linked.opt.aa, line 283
    // inc
    $W[inc_946] : $int<16>
    // 			$volatile cmp := (inc == shr91) $buffering 1
    //  file prog.linked.opt.aa, line 284
    // cmp
    $W[cmp_951] : $int<1>
    // 			inc67 := ($cast ($uint<16>) cmp ) $buffering 2// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 285
    // inc67
    $W[inc67_955] : $int<16>
    // 			colx_x1_949_delayed_1_0 := colx_x1 $buffering 2 $cut_through // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 286
    // colx_x1_949_delayed_1_0
    $W[colx_x1_949_delayed_1_0_958] : $int<16>
    // 			$volatile inc67x_xcolx_x1 := (inc67 + colx_x1_949_delayed_1_0) $buffering 1
    //  file prog.linked.opt.aa, line 287
    // inc67x_xcolx_x1
    $W[inc67x_xcolx_x1_963] : $int<16>
    // 			$volatile chlx_x1 := ( $mux cmp ($bitcast ($uint<16>) _b0000000000000000  )  inc )  $buffering 1
    //  file prog.linked.opt.aa, line 288
    // chlx_x1
    $W[chlx_x1_970] : $int<16>
    // 			$volatile cmp72 := (inc67x_xcolx_x1 == cb) $buffering 1
    //  file prog.linked.opt.aa, line 289
    // cmp72
    $W[cmp72_975] : $int<1>
    // 			inc76 := ($cast ($uint<16>) cmp72 ) $buffering 2// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 290
    // inc76
    $W[inc76_979] : $int<16>
    // 			row18x_x1_970_delayed_2_0 := row18x_x1 $buffering 2 $cut_through // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 291
    // row18x_x1_970_delayed_2_0
    $W[row18x_x1_970_delayed_2_0_982] : $int<16>
    // 			$volatile inc76x_xrow18x_x1 := (inc76 + row18x_x1_970_delayed_2_0) $buffering 1
    //  file prog.linked.opt.aa, line 292
    // inc76x_xrow18x_x1
    $W[inc76x_xrow18x_x1_987] : $int<16>
    // 			$volatile colx_x2 := ( $mux cmp72 ($bitcast ($uint<16>) _b0000000000000000  )  inc67x_xcolx_x1 )  $buffering 1
    //  file prog.linked.opt.aa, line 293
    // colx_x2
    $W[colx_x2_994] : $int<16>
    // 			$volatile add79 := (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
    //  file prog.linked.opt.aa, line 294
    // add79
    $W[add79_1000] : $int<32>
    // 			$volatile cmp84 := (inc76x_xrow18x_x1 == rb) $buffering 1
    //  file prog.linked.opt.aa, line 295
    // cmp84
    $W[cmp84_1005] : $int<1>
    // 			$volatile whilex_xbody_whilex_xend_taken := cmp84 $buffering 1
    //  file prog.linked.opt.aa, line 296
    // whilex_xbody_whilex_xend_taken
    $W[whilex_xbody_whilex_xend_taken_1008] : $int<1>
    // if statement  
    //  file prog.linked.opt.aa, line 0
    // merge-statement  
    //  file prog.linked.opt.aa, line 301
    // 			$phi inc76x_xrow18x_x1x_xlcssa := 			  ($cast ($uint<16>) inc76x_xrow18x_x1 ) $on   whilex_xbody_whilex_xend 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 302
    // ($cast ($uint<16>) inc76x_xrow18x_x1 )
    $intermediate $W[type_cast_1020_wire] : $int<16>
    // inc76x_xrow18x_x1x_xlcssa
    $W[inc76x_xrow18x_x1x_xlcssa_1017] : $int<16>
    // 		conv89 := ($cast ($uint<8>) inc76x_xrow18x_x1x_xlcssa ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 305
    // conv89
    $W[conv89_1025] : $int<8>
    // 		system_output_pipe := conv89 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 306
    // system_output_pipe
    // datapath-instances for block %maxPool3D%body
    //  file prog.linked.opt.aa, line 239
    // 		$volatile shr91 := (chl_out >> ($bitcast ($uint<16>) _b0000000000000011  )) $buffering 1
    //  file prog.linked.opt.aa, line 241
    // (chl_out >> ($bitcast ($uint<16>) _b0000000000000011  ))
    >>[LSHR_u16_u16_806_inst] (chl_out type_cast_805_wire_constant) (shr91_807)   $flowthrough 
    $delay LSHR_u16_u16_806_inst 0
    // 		$volatile mul := (shr91 * ct) $buffering 1
    //  file prog.linked.opt.aa, line 242
    // (shr91 * ct)
    *[MUL_u16_u16_811_inst] (shr91_807 ct) (mul_812)   $flowthrough 
    $delay MUL_u16_u16_811_inst 0
    // 		conv23 := ($cast ($uint<32>) shr91 ) $buffering 1// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 243
    // ($cast ($uint<32>) shr91 )
    # := [type_cast_815_inst] (shr91_807) (conv23_816)    
    $buffering  $out type_cast_815_inst conv23_816 1
    $delay type_cast_815_inst 1
    // 		conv25 := ($cast ($uint<32>) mul ) $buffering 1// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 244
    // ($cast ($uint<32>) mul )
    # := [type_cast_819_inst] (mul_812) (conv25_820)    
    $buffering  $out type_cast_819_inst conv25_820 1
    $delay type_cast_819_inst 1
    // 		conv37 := ($cast ($uint<32>) ct ) $buffering 1// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 245
    // ($cast ($uint<32>) ct )
    # := [type_cast_823_inst] (ct) (conv37_824)    
    $buffering  $out type_cast_823_inst conv37_824 1
    $delay type_cast_823_inst 1
    // 		$volatile mul42 := (conv23 << ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
    //  file prog.linked.opt.aa, line 246
    // (conv23 << ($bitcast ($uint<32>) _b00000000000000000000000000000001  ))
    <<[SHL_u32_u32_829_inst] (conv23_816 type_cast_828_wire_constant) (mul42_830)   $flowthrough 
    $delay SHL_u32_u32_829_inst 0
    // 		$volatile add := (conv25 + conv23) $buffering 1
    //  file prog.linked.opt.aa, line 247
    // (conv25 + conv23)
    +[ADD_u32_u32_834_inst] (conv25_820 conv23_816) (add_835)   $flowthrough 
    $delay ADD_u32_u32_834_inst 0
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 249
    // 			$phi iNsTr_1_at_entry := 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   entry_whilex_xbody 
    // type of target is $uint<32>
    //  file prog.linked.opt.aa, line 250
    // constant phi data-path element skipped phi_stmt_838
    // 			$phi row18x_x1_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   entry_whilex_xbody 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 252
    // constant phi data-path element skipped phi_stmt_843
    // 			$phi colx_x1_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   entry_whilex_xbody 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 254
    // constant phi data-path element skipped phi_stmt_848
    // 			$phi chlx_x0_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   entry_whilex_xbody 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 256
    // constant phi data-path element skipped phi_stmt_853
    // datapath-instances for do-while  
    //  file prog.linked.opt.aa, line 259
    // ( ~ cmp84 )
    ~ [NOT_u1_u1_1011_inst] (cmp84_1005) (NOT_u1_u1_1011_wire)   $flowthrough
    $delay NOT_u1_u1_1011_inst 0
    ==0? [do_while_stmt_859_branch] (NOT_u1_u1_1011_wire)
    $flowthrough
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 261
    // 			$phi iNsTr_1 := 			  iNsTr_1_at_entry $on   $entry 			  ($cast ($uint<32>) add79 ) $on   $loopback 
    // type of target is $uint<32>
    //  file prog.linked.opt.aa, line 262
    // ($cast ($uint<32>) add79 )
    # := [type_cast_865_inst] (add79_1000) (type_cast_865_wire)     $fullrate
    $buffering  $out type_cast_865_inst type_cast_865_wire 1
    $delay type_cast_865_inst 1
    # $phi [phi_stmt_861] (iNsTr_1_at_entry_838 type_cast_865_wire) ( iNsTr_1_861 ) $fullrate
    // $buffering  $out phi_stmt_861 iNsTr_1_861 2
    // 			$phi row18x_x1 := 			  ($cast ($uint<16>) inc76x_xrow18x_x1 ) $on   $loopback 			  row18x_x1_at_entry $on   $entry 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 264
    // ($cast ($uint<16>) inc76x_xrow18x_x1 )
    # := [type_cast_869_inst] (inc76x_xrow18x_x1_987) (type_cast_869_wire)     $fullrate
    $buffering  $out type_cast_869_inst type_cast_869_wire 1
    $delay type_cast_869_inst 1
    # $phi [phi_stmt_866] (type_cast_869_wire row18x_x1_at_entry_843) ( row18x_x1_866 ) $fullrate
    // $buffering  $out phi_stmt_866 row18x_x1_866 2
    // 			$phi colx_x1 := 			  ($cast ($uint<16>) colx_x2 ) $on   $loopback 			  colx_x1_at_entry $on   $entry 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 266
    // ($cast ($uint<16>) colx_x2 )
    # := [type_cast_874_inst] (colx_x2_994) (type_cast_874_wire)     $fullrate
    $buffering  $out type_cast_874_inst type_cast_874_wire 1
    $delay type_cast_874_inst 1
    # $phi [phi_stmt_871] (type_cast_874_wire colx_x1_at_entry_848) ( colx_x1_871 ) $fullrate
    // $buffering  $out phi_stmt_871 colx_x1_871 2
    // 			$phi chlx_x0 := 			  ($cast ($uint<16>) chlx_x1 ) $on   $loopback 			  chlx_x0_at_entry $on   $entry 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 268
    // ($cast ($uint<16>) chlx_x1 )
    # := [type_cast_879_inst] (chlx_x1_970) (type_cast_879_wire)     $fullrate
    $buffering  $out type_cast_879_inst type_cast_879_wire 1
    $delay type_cast_879_inst 1
    # $phi [phi_stmt_876] (type_cast_879_wire chlx_x0_at_entry_853) ( chlx_x0_876 ) $fullrate
    // $buffering  $out phi_stmt_876 chlx_x0_876 2
    // 			conv31 := ($cast ($uint<32>) chlx_x0 ) $buffering 1// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 271
    // ($cast ($uint<32>) chlx_x0 )
    # := [type_cast_884_inst] (chlx_x0_876) (conv31_885)     $fullrate
    $buffering  $out type_cast_884_inst conv31_885 1
    $delay type_cast_884_inst 1
    // 			conv35 := ($cast ($uint<32>) colx_x1 ) $buffering 1// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 272
    // ($cast ($uint<32>) colx_x1 )
    # := [type_cast_888_inst] (colx_x1_871) (conv35_889)     $fullrate
    $buffering  $out type_cast_888_inst conv35_889 1
    $delay type_cast_888_inst 1
    // 			conv39 := ($cast ($uint<32>) row18x_x1 ) $buffering 1// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 273
    // ($cast ($uint<32>) row18x_x1 )
    # := [type_cast_892_inst] (row18x_x1_866) (conv39_893)     $fullrate
    $buffering  $out type_cast_892_inst conv39_893 1
    $delay type_cast_892_inst 1
    // 			$volatile mul40 := (conv39 * conv37) $buffering 1
    //  file prog.linked.opt.aa, line 274
    // (conv39 * conv37)
    *[MUL_u32_u32_897_inst] (conv39_893 conv37_824) (mul40_898)   $flowthrough 
    $delay MUL_u32_u32_897_inst 0
    // 			$volatile add41 := (conv35 + mul40) $buffering 1
    //  file prog.linked.opt.aa, line 275
    // (conv35 + mul40)
    +[ADD_u32_u32_902_inst] (conv35_889 mul40_898) (add41_903)   $flowthrough 
    $delay ADD_u32_u32_902_inst 0
    // 			$volatile shl := (mul42 * add41) $buffering 1
    //  file prog.linked.opt.aa, line 276
    // (mul42 * add41)
    *[MUL_u32_u32_907_inst] (mul42_830 add41_903) (shl_908)   $flowthrough 
    $delay MUL_u32_u32_907_inst 0
    // 			$volatile add43 := (shl + conv31) $buffering 1
    //  file prog.linked.opt.aa, line 277
    // (shl + conv31)
    +[ADD_u32_u32_912_inst] (shl_908 conv31_885) (add43_913)   $flowthrough 
    $delay ADD_u32_u32_912_inst 0
    // 			$volatile add50 := (add43 + conv23) $buffering 1
    //  file prog.linked.opt.aa, line 278
    // (add43 + conv23)
    +[ADD_u32_u32_917_inst] (add43_913 conv23_816) (add50_918)   $flowthrough 
    $delay ADD_u32_u32_917_inst 0
    // 			$volatile add54 := (add43 + conv25) $buffering 1
    //  file prog.linked.opt.aa, line 279
    // (add43 + conv25)
    +[ADD_u32_u32_922_inst] (add43_913 conv25_820) (add54_923)   $flowthrough 
    $delay ADD_u32_u32_922_inst 0
    // 			$volatile add57 := (add + add43) $buffering 1
    //  file prog.linked.opt.aa, line 280
    // (add + add43)
    +[ADD_u32_u32_927_inst] (add_835 add43_913) (add57_928)   $flowthrough 
    $delay ADD_u32_u32_927_inst 0
    // 			iNsTr_1_923_delayed_1_0 := iNsTr_1 $buffering 1 $cut_through // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 281
    # := [W_iNsTr_1_923_delayed_1_0_929_inst] (iNsTr_1_861) (iNsTr_1_923_delayed_1_0_931)  $cut_through    $fullrate
    // 			$call maxPool4 (iNsTr_1_923_delayed_1_0 add43 add50 add54 add57 index_in index_out ) (call ) 
    //  file prog.linked.opt.aa, line 282
    $call [call_stmt_940_call] $module maxPool4(iNsTr_1_923_delayed_1_0_931 add43_913 add50_918 add54_923 add57_928 index_in index_out) (call_940)   $fullrate
    $delay call_stmt_940_call 15
    $buffering  $in call_stmt_940_call iNsTr_1_923_delayed_1_0_931 1
    $buffering  $in call_stmt_940_call add43_913 1
    $buffering  $in call_stmt_940_call add50_918 1
    $buffering  $in call_stmt_940_call add54_923 1
    $buffering  $in call_stmt_940_call add57_928 1
    $buffering  $in call_stmt_940_call index_in 1
    $buffering  $in call_stmt_940_call index_out 1
    $buffering  $out call_stmt_940_call call_940 1
    // 			$volatile inc := (chlx_x0 + ($bitcast ($uint<16>) _b0000000000000001  )) $buffering 1
    //  file prog.linked.opt.aa, line 283
    // (chlx_x0 + ($bitcast ($uint<16>) _b0000000000000001  ))
    +[ADD_u16_u16_945_inst] (chlx_x0_876 type_cast_944_wire_constant) (inc_946)   $flowthrough 
    $delay ADD_u16_u16_945_inst 0
    // 			$volatile cmp := (inc == shr91) $buffering 1
    //  file prog.linked.opt.aa, line 284
    // (inc == shr91)
    ==[EQ_u16_u1_950_inst] (inc_946 shr91_807) (cmp_951)   $flowthrough 
    $delay EQ_u16_u1_950_inst 0
    // 			inc67 := ($cast ($uint<16>) cmp ) $buffering 2// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 285
    // ($cast ($uint<16>) cmp )
    # := [type_cast_954_inst] (cmp_951) (inc67_955)     $fullrate
    $buffering  $out type_cast_954_inst inc67_955 2
    $delay type_cast_954_inst 1
    // 			colx_x1_949_delayed_1_0 := colx_x1 $buffering 2 $cut_through // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 286
    # := [W_colx_x1_949_delayed_1_0_956_inst] (colx_x1_871) (colx_x1_949_delayed_1_0_958)  $cut_through    $fullrate
    $buffering  $out W_colx_x1_949_delayed_1_0_956_inst colx_x1_949_delayed_1_0_958 2
    // 			$volatile inc67x_xcolx_x1 := (inc67 + colx_x1_949_delayed_1_0) $buffering 1
    //  file prog.linked.opt.aa, line 287
    // (inc67 + colx_x1_949_delayed_1_0)
    +[ADD_u16_u16_962_inst] (inc67_955 colx_x1_949_delayed_1_0_958) (inc67x_xcolx_x1_963)   $flowthrough 
    $delay ADD_u16_u16_962_inst 0
    // 			$volatile chlx_x1 := ( $mux cmp ($bitcast ($uint<16>) _b0000000000000000  )  inc )  $buffering 1
    //  file prog.linked.opt.aa, line 288
    // ( $mux cmp ($bitcast ($uint<16>) _b0000000000000000  )  inc ) 
    ? [MUX_969_inst] (cmp_951 type_cast_967_wire_constant inc_946) (chlx_x1_970)  $flowthrough
    // 			$volatile cmp72 := (inc67x_xcolx_x1 == cb) $buffering 1
    //  file prog.linked.opt.aa, line 289
    // (inc67x_xcolx_x1 == cb)
    ==[EQ_u16_u1_974_inst] (inc67x_xcolx_x1_963 cb) (cmp72_975)   $flowthrough 
    $delay EQ_u16_u1_974_inst 0
    // 			inc76 := ($cast ($uint<16>) cmp72 ) $buffering 2// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 290
    // ($cast ($uint<16>) cmp72 )
    # := [type_cast_978_inst] (cmp72_975) (inc76_979)     $fullrate
    $buffering  $out type_cast_978_inst inc76_979 2
    $delay type_cast_978_inst 1
    // 			row18x_x1_970_delayed_2_0 := row18x_x1 $buffering 2 $cut_through // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 291
    # := [W_row18x_x1_970_delayed_2_0_980_inst] (row18x_x1_866) (row18x_x1_970_delayed_2_0_982)  $cut_through    $fullrate
    $buffering  $out W_row18x_x1_970_delayed_2_0_980_inst row18x_x1_970_delayed_2_0_982 2
    // 			$volatile inc76x_xrow18x_x1 := (inc76 + row18x_x1_970_delayed_2_0) $buffering 1
    //  file prog.linked.opt.aa, line 292
    // (inc76 + row18x_x1_970_delayed_2_0)
    +[ADD_u16_u16_986_inst] (inc76_979 row18x_x1_970_delayed_2_0_982) (inc76x_xrow18x_x1_987)   $flowthrough 
    $delay ADD_u16_u16_986_inst 0
    // 			$volatile colx_x2 := ( $mux cmp72 ($bitcast ($uint<16>) _b0000000000000000  )  inc67x_xcolx_x1 )  $buffering 1
    //  file prog.linked.opt.aa, line 293
    // ( $mux cmp72 ($bitcast ($uint<16>) _b0000000000000000  )  inc67x_xcolx_x1 ) 
    ? [MUX_993_inst] (cmp72_975 type_cast_991_wire_constant inc67x_xcolx_x1_963) (colx_x2_994)  $flowthrough
    // 			$volatile add79 := (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
    //  file prog.linked.opt.aa, line 294
    // (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  ))
    +[ADD_u32_u32_999_inst] (iNsTr_1_861 type_cast_998_wire_constant) (add79_1000)   $flowthrough 
    $delay ADD_u32_u32_999_inst 0
    // 			$volatile cmp84 := (inc76x_xrow18x_x1 == rb) $buffering 1
    //  file prog.linked.opt.aa, line 295
    // (inc76x_xrow18x_x1 == rb)
    ==[EQ_u16_u1_1004_inst] (inc76x_xrow18x_x1_987 rb) (cmp84_1005)   $flowthrough 
    $delay EQ_u16_u1_1004_inst 0
    // 			$volatile whilex_xbody_whilex_xend_taken := cmp84 $buffering 1
    //  file prog.linked.opt.aa, line 296
    # := [W_whilex_xbody_whilex_xend_taken_1006_inst] (cmp84_1005) (whilex_xbody_whilex_xend_taken_1008)    $flowthrough 
    // datapath-instances for if  
    //  file prog.linked.opt.aa, line 0
    ==0? [if_stmt_1012_branch] (whilex_xbody_whilex_xend_taken_1008)
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 301
    // 			$phi inc76x_xrow18x_x1x_xlcssa := 			  ($cast ($uint<16>) inc76x_xrow18x_x1 ) $on   whilex_xbody_whilex_xend 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 302
    // ($cast ($uint<16>) inc76x_xrow18x_x1 )
    # := [type_cast_1020_inst] (inc76x_xrow18x_x1_987) (type_cast_1020_wire)    
    $buffering  $out type_cast_1020_inst type_cast_1020_wire 1
    $delay type_cast_1020_inst 1
    $phi [phi_stmt_1017] (type_cast_1020_wire) ( inc76x_xrow18x_x1x_xlcssa_1017 ) 
    // 		conv89 := ($cast ($uint<8>) inc76x_xrow18x_x1x_xlcssa ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 305
    // ($cast ($uint<8>) inc76x_xrow18x_x1x_xlcssa )
    # := [type_cast_1024_inst] (inc76x_xrow18x_x1x_xlcssa_1017) (conv89_1025)    
    $buffering  $out type_cast_1024_inst conv89_1025 1
    $delay type_cast_1024_inst 1
    // 		system_output_pipe := conv89 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 306
    // system_output_pipe
    $ioport $out [WPIPE_system_output_pipe_1026_inst]  (conv89_1025) (system_output_pipe) 
  }
  // end data-path
  // 		$volatile shr91 := (chl_out >> ($bitcast ($uint<16>) _b0000000000000011  )) $buffering 1
  //  file prog.linked.opt.aa, line 241
  // (chl_out >> ($bitcast ($uint<16>) _b0000000000000011  ))
  // chl_out
  // 		$volatile mul := (shr91 * ct) $buffering 1
  //  file prog.linked.opt.aa, line 242
  // (shr91 * ct)
  // shr91
  // ct
  // 		conv23 := ($cast ($uint<32>) shr91 ) $buffering 1// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 243
  // shr91
  // ($cast ($uint<32>) shr91 )
  type_cast_815_inst <=> (branch_block_stmt_801/assign_stmt_807_to_assign_stmt_835/type_cast_815_Sample/rr branch_block_stmt_801/assign_stmt_807_to_assign_stmt_835/type_cast_815_Update/cr) (branch_block_stmt_801/assign_stmt_807_to_assign_stmt_835/type_cast_815_Sample/ra branch_block_stmt_801/assign_stmt_807_to_assign_stmt_835/type_cast_815_Update/ca)
  // 		conv25 := ($cast ($uint<32>) mul ) $buffering 1// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 244
  // mul
  // ($cast ($uint<32>) mul )
  type_cast_819_inst <=> (branch_block_stmt_801/assign_stmt_807_to_assign_stmt_835/type_cast_819_Sample/rr branch_block_stmt_801/assign_stmt_807_to_assign_stmt_835/type_cast_819_Update/cr) (branch_block_stmt_801/assign_stmt_807_to_assign_stmt_835/type_cast_819_Sample/ra branch_block_stmt_801/assign_stmt_807_to_assign_stmt_835/type_cast_819_Update/ca)
  // 		conv37 := ($cast ($uint<32>) ct ) $buffering 1// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 245
  // ct
  // ($cast ($uint<32>) ct )
  type_cast_823_inst <=> (branch_block_stmt_801/assign_stmt_807_to_assign_stmt_835/type_cast_823_Sample/rr branch_block_stmt_801/assign_stmt_807_to_assign_stmt_835/type_cast_823_Update/cr) (branch_block_stmt_801/assign_stmt_807_to_assign_stmt_835/type_cast_823_Sample/ra branch_block_stmt_801/assign_stmt_807_to_assign_stmt_835/type_cast_823_Update/ca)
  // 		$volatile mul42 := (conv23 << ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
  //  file prog.linked.opt.aa, line 246
  // (conv23 << ($bitcast ($uint<32>) _b00000000000000000000000000000001  ))
  // conv23
  // 		$volatile add := (conv25 + conv23) $buffering 1
  //  file prog.linked.opt.aa, line 247
  // (conv25 + conv23)
  // conv25
  // conv23
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 249
  // In merge, skipped links for constant phi phi_stmt_838
  // In merge, skipped links for constant phi phi_stmt_843
  // In merge, skipped links for constant phi phi_stmt_848
  // In merge, skipped links for constant phi phi_stmt_853
  // CP-DP links for do-while  do_while_stmt_859
  //  file prog.linked.opt.aa, line 259
  phi_stmt_861 <=> (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/phi_stmt_861_entry_sample_req branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/phi_stmt_861_loopback_sample_req) (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/phi_stmt_861_phi_mux_ack)
  // add79
  // ($cast ($uint<32>) add79 )
  type_cast_865_inst <=> (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_865_Sample/rr branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_865_Update/cr) (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_865_Sample/ra branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_865_Update/ca)
  phi_stmt_866 <=> (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/phi_stmt_866_loopback_sample_req branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/phi_stmt_866_entry_sample_req) (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/phi_stmt_866_phi_mux_ack)
  // inc76x_xrow18x_x1
  // ($cast ($uint<16>) inc76x_xrow18x_x1 )
  type_cast_869_inst <=> (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_869_Sample/rr branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_869_Update/cr) (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_869_Sample/ra branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_869_Update/ca)
  phi_stmt_871 <=> (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/phi_stmt_871_loopback_sample_req branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/phi_stmt_871_entry_sample_req) (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/phi_stmt_871_phi_mux_ack)
  // colx_x2
  // ($cast ($uint<16>) colx_x2 )
  type_cast_874_inst <=> (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_874_Sample/rr branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_874_Update/cr) (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_874_Sample/ra branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_874_Update/ca)
  phi_stmt_876 <=> (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/phi_stmt_876_loopback_sample_req branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/phi_stmt_876_entry_sample_req) (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/phi_stmt_876_phi_mux_ack)
  // chlx_x1
  // ($cast ($uint<16>) chlx_x1 )
  type_cast_879_inst <=> (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_879_Sample/rr branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_879_Update/cr) (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_879_Sample/ra branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_879_Update/ca)
  // 			conv31 := ($cast ($uint<32>) chlx_x0 ) $buffering 1// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 271
  // chlx_x0
  // ($cast ($uint<32>) chlx_x0 )
  type_cast_884_inst <=> (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_884_Sample/rr branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_884_Update/cr) (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_884_Sample/ra branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_884_Update/ca)
  // 			conv35 := ($cast ($uint<32>) colx_x1 ) $buffering 1// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 272
  // colx_x1
  // ($cast ($uint<32>) colx_x1 )
  type_cast_888_inst <=> (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_888_Sample/rr branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_888_Update/cr) (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_888_Sample/ra branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_888_Update/ca)
  // 			conv39 := ($cast ($uint<32>) row18x_x1 ) $buffering 1// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 273
  // row18x_x1
  // ($cast ($uint<32>) row18x_x1 )
  type_cast_892_inst <=> (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_892_Sample/rr branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_892_Update/cr) (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_892_Sample/ra branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_892_Update/ca)
  // 			$volatile mul40 := (conv39 * conv37) $buffering 1
  //  file prog.linked.opt.aa, line 274
  // (conv39 * conv37)
  // conv39
  // conv37
  // 			$volatile add41 := (conv35 + mul40) $buffering 1
  //  file prog.linked.opt.aa, line 275
  // (conv35 + mul40)
  // conv35
  // mul40
  // 			$volatile shl := (mul42 * add41) $buffering 1
  //  file prog.linked.opt.aa, line 276
  // (mul42 * add41)
  // mul42
  // add41
  // 			$volatile add43 := (shl + conv31) $buffering 1
  //  file prog.linked.opt.aa, line 277
  // (shl + conv31)
  // shl
  // conv31
  // 			$volatile add50 := (add43 + conv23) $buffering 1
  //  file prog.linked.opt.aa, line 278
  // (add43 + conv23)
  // add43
  // conv23
  // 			$volatile add54 := (add43 + conv25) $buffering 1
  //  file prog.linked.opt.aa, line 279
  // (add43 + conv25)
  // add43
  // conv25
  // 			$volatile add57 := (add + add43) $buffering 1
  //  file prog.linked.opt.aa, line 280
  // (add + add43)
  // add
  // add43
  // 			iNsTr_1_923_delayed_1_0 := iNsTr_1 $buffering 1 $cut_through // bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 281
  // iNsTr_1
  W_iNsTr_1_923_delayed_1_0_929_inst <=> (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/assign_stmt_931_Sample/req branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/assign_stmt_931_Update/req) (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/assign_stmt_931_Sample/ack branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/assign_stmt_931_Update/ack)
  // 			$call maxPool4 (iNsTr_1_923_delayed_1_0 add43 add50 add54 add57 index_in index_out ) (call ) 
  //  file prog.linked.opt.aa, line 282
  // iNsTr_1_923_delayed_1_0
  // add43
  // add50
  // add54
  // add57
  // index_in
  // index_out
  call_stmt_940_call <=> (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/call_stmt_940_Sample/crr branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/call_stmt_940_Update/ccr) (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/call_stmt_940_Sample/cra branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/call_stmt_940_Update/cca)
  // 			$volatile inc := (chlx_x0 + ($bitcast ($uint<16>) _b0000000000000001  )) $buffering 1
  //  file prog.linked.opt.aa, line 283
  // (chlx_x0 + ($bitcast ($uint<16>) _b0000000000000001  ))
  // chlx_x0
  // 			$volatile cmp := (inc == shr91) $buffering 1
  //  file prog.linked.opt.aa, line 284
  // (inc == shr91)
  // inc
  // shr91
  // 			inc67 := ($cast ($uint<16>) cmp ) $buffering 2// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 285
  // cmp
  // ($cast ($uint<16>) cmp )
  type_cast_954_inst <=> (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_954_Sample/rr branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_954_Update/cr) (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_954_Sample/ra branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_954_Update/ca)
  // 			colx_x1_949_delayed_1_0 := colx_x1 $buffering 2 $cut_through // bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 286
  // colx_x1
  W_colx_x1_949_delayed_1_0_956_inst <=> (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/assign_stmt_958_Sample/req branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/assign_stmt_958_Update/req) (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/assign_stmt_958_Sample/ack branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/assign_stmt_958_Update/ack)
  // 			$volatile inc67x_xcolx_x1 := (inc67 + colx_x1_949_delayed_1_0) $buffering 1
  //  file prog.linked.opt.aa, line 287
  // (inc67 + colx_x1_949_delayed_1_0)
  // inc67
  // colx_x1_949_delayed_1_0
  // 			$volatile chlx_x1 := ( $mux cmp ($bitcast ($uint<16>) _b0000000000000000  )  inc )  $buffering 1
  //  file prog.linked.opt.aa, line 288
  // cmp
  // inc
  // ( $mux cmp ($bitcast ($uint<16>) _b0000000000000000  )  inc ) 
  // 			$volatile cmp72 := (inc67x_xcolx_x1 == cb) $buffering 1
  //  file prog.linked.opt.aa, line 289
  // (inc67x_xcolx_x1 == cb)
  // inc67x_xcolx_x1
  // cb
  // 			inc76 := ($cast ($uint<16>) cmp72 ) $buffering 2// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 290
  // cmp72
  // ($cast ($uint<16>) cmp72 )
  type_cast_978_inst <=> (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_978_Sample/rr branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_978_Update/cr) (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_978_Sample/ra branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/type_cast_978_Update/ca)
  // 			row18x_x1_970_delayed_2_0 := row18x_x1 $buffering 2 $cut_through // bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 291
  // row18x_x1
  W_row18x_x1_970_delayed_2_0_980_inst <=> (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/assign_stmt_982_Sample/req branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/assign_stmt_982_Update/req) (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/assign_stmt_982_Sample/ack branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/assign_stmt_982_Update/ack)
  // 			$volatile inc76x_xrow18x_x1 := (inc76 + row18x_x1_970_delayed_2_0) $buffering 1
  //  file prog.linked.opt.aa, line 292
  // (inc76 + row18x_x1_970_delayed_2_0)
  // inc76
  // row18x_x1_970_delayed_2_0
  // 			$volatile colx_x2 := ( $mux cmp72 ($bitcast ($uint<16>) _b0000000000000000  )  inc67x_xcolx_x1 )  $buffering 1
  //  file prog.linked.opt.aa, line 293
  // cmp72
  // inc67x_xcolx_x1
  // ( $mux cmp72 ($bitcast ($uint<16>) _b0000000000000000  )  inc67x_xcolx_x1 ) 
  // 			$volatile add79 := (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
  //  file prog.linked.opt.aa, line 294
  // (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  ))
  // iNsTr_1
  // 			$volatile cmp84 := (inc76x_xrow18x_x1 == rb) $buffering 1
  //  file prog.linked.opt.aa, line 295
  // (inc76x_xrow18x_x1 == rb)
  // inc76x_xrow18x_x1
  // rb
  // 			$volatile whilex_xbody_whilex_xend_taken := cmp84 $buffering 1
  //  file prog.linked.opt.aa, line 296
  // cmp84
  // cmp84
  do_while_stmt_859_branch <=> (branch_block_stmt_801/do_while_stmt_859/do_while_stmt_859_loop_body/condition_evaluated) (branch_block_stmt_801/do_while_stmt_859/loop_exit/ack branch_block_stmt_801/do_while_stmt_859/loop_taken/ack)
  // CP-DP links for if  
  //  file prog.linked.opt.aa, line 0
  if_stmt_1012_branch <=> (branch_block_stmt_801/if_stmt_1012_eval_test/branch_req) (branch_block_stmt_801/if_stmt_1012_else_link/else_choice_transition branch_block_stmt_801/if_stmt_1012_if_link/if_choice_transition)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 301
  // ($cast ($uint<16>) inc76x_xrow18x_x1 )
  type_cast_1020_inst <=> (branch_block_stmt_801/whilex_xbody_whilex_xend_PhiReq/phi_stmt_1017/phi_stmt_1017_sources/type_cast_1020/SplitProtocol/Sample/rr branch_block_stmt_801/whilex_xbody_whilex_xend_PhiReq/phi_stmt_1017/phi_stmt_1017_sources/type_cast_1020/SplitProtocol/Update/cr) (branch_block_stmt_801/whilex_xbody_whilex_xend_PhiReq/phi_stmt_1017/phi_stmt_1017_sources/type_cast_1020/SplitProtocol/Sample/ra branch_block_stmt_801/whilex_xbody_whilex_xend_PhiReq/phi_stmt_1017/phi_stmt_1017_sources/type_cast_1020/SplitProtocol/Update/ca)
  phi_stmt_1017 <=> (branch_block_stmt_801/whilex_xbody_whilex_xend_PhiReq/phi_stmt_1017/phi_stmt_1017_req) (branch_block_stmt_801/merge_stmt_1016_PhiAck/phi_stmt_1017_ack)
  // 		conv89 := ($cast ($uint<8>) inc76x_xrow18x_x1x_xlcssa ) $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 305
  // inc76x_xrow18x_x1x_xlcssa
  // ($cast ($uint<8>) inc76x_xrow18x_x1x_xlcssa )
  type_cast_1024_inst <=> (branch_block_stmt_801/assign_stmt_1025_to_assign_stmt_1028/type_cast_1024_Sample/rr branch_block_stmt_801/assign_stmt_1025_to_assign_stmt_1028/type_cast_1024_Update/cr) (branch_block_stmt_801/assign_stmt_1025_to_assign_stmt_1028/type_cast_1024_Sample/ra branch_block_stmt_801/assign_stmt_1025_to_assign_stmt_1028/type_cast_1024_Update/ca)
  // 		system_output_pipe := conv89 $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 306
  // conv89
  // system_output_pipe
  WPIPE_system_output_pipe_1026_inst <=> (branch_block_stmt_801/assign_stmt_1025_to_assign_stmt_1028/WPIPE_system_output_pipe_1026_Sample/req branch_block_stmt_801/assign_stmt_1025_to_assign_stmt_1028/WPIPE_system_output_pipe_1026_Update/req) (branch_block_stmt_801/assign_stmt_1025_to_assign_stmt_1028/WPIPE_system_output_pipe_1026_Sample/ack branch_block_stmt_801/assign_stmt_1025_to_assign_stmt_1028/WPIPE_system_output_pipe_1026_Update/ack)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 308
}
$module [readModule1] 
{
  $in address:$int<32>
  // can point into 
  $out data:$int<64>
  // can point into 
  // pipe-declarations for block %readModule1
  //  file prog.linked.opt.aa, line 312
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[call_stmt_1042] 
    {
      // start: 	$call memoryModule (1  (0  + address) 0  ) (data ) 
      //  file prog.linked.opt.aa, line 317
      $T[call_stmt_1042_sample_start_] 
      $T[call_stmt_1042_sample_completed_] 
      $T[call_stmt_1042_update_start_] 
      $T[call_stmt_1042_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // (0  + address)
      // address
      // Call input argument 2
      // start: Forward dependencies from (0  + address) to transition call_stmt_1042_sample_start_
      // done: Forward dependencies from (0  + address) to transition call_stmt_1042_sample_start_
      ;;[call_stmt_1042_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_1042_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_1042_sample_start_ &-> (call_stmt_1042_Sample)
      call_stmt_1042_sample_completed_ <-& (call_stmt_1042_Sample)
      call_stmt_1042_sample_completed_ &-> ($null)
      call_stmt_1042_update_start_ &-> (call_stmt_1042_Update)
      call_stmt_1042_update_completed_ <-& (call_stmt_1042_Update)
      // Call output argument 0
      // (as target) data
      // data
      // write to interface object
      // data
      // write to interface object
      // start: WAR dependencies for data
      // done: WAR dependencies for data
      // end: 	$call memoryModule (1  (0  + address) 0  ) (data ) 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MAIN_MEM_REQUEST
      // read-dependencies for pipe MAIN_MEM_REQUEST
      // write-dependencies for pipe MAIN_MEM_REQUEST
      // signal write dependencies for MAIN_MEM_REQUEST
      // pipe read/write dependencies for pipe MAIN_MEM_RESPONSE
      // read-dependencies for pipe MAIN_MEM_RESPONSE
      // write-dependencies for pipe MAIN_MEM_RESPONSE
      // signal write dependencies for MAIN_MEM_RESPONSE
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %readModule1
    //  file prog.linked.opt.aa, line 312
    // 	$call memoryModule (1  (0  + address) 0  ) (data ) 
    //  file prog.linked.opt.aa, line 317
    // 1 
    $constant $W[konst_1036_wire_constant] : $int<1> := _b1// 1
    // 0 
    $constant $W[konst_1037_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // 0 
    $constant $W[konst_1040_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // 	$call memoryModule (1  (0  + address) 0  ) (data ) 
    //  file prog.linked.opt.aa, line 317
    // (0  + address)
    $intermediate $W[ADD_u32_u32_1039_wire] : $int<32>
    // data
    // 	$call memoryModule (1  (0  + address) 0  ) (data ) 
    //  file prog.linked.opt.aa, line 317
    // (0  + address)
    +[ADD_u32_u32_1039_inst] (konst_1037_wire_constant address) (ADD_u32_u32_1039_wire)   $flowthrough 
    $delay ADD_u32_u32_1039_inst 0
    $call [call_stmt_1042_call] $module memoryModule(konst_1036_wire_constant ADD_u32_u32_1039_wire konst_1040_wire_constant) (data)  
    $delay call_stmt_1042_call 4
    $buffering  $in call_stmt_1042_call konst_1036_wire_constant 1
    $buffering  $in call_stmt_1042_call ADD_u32_u32_1039_wire 1
    $buffering  $in call_stmt_1042_call konst_1040_wire_constant 1
    $buffering  $out call_stmt_1042_call data 1
  }
  // end data-path
  // 	$call memoryModule (1  (0  + address) 0  ) (data ) 
  //  file prog.linked.opt.aa, line 317
  // (0  + address)
  // address
  call_stmt_1042_call <=> (call_stmt_1042/call_stmt_1042_Sample/crr call_stmt_1042/call_stmt_1042_Update/ccr) (call_stmt_1042/call_stmt_1042_Sample/cra call_stmt_1042/call_stmt_1042_Update/cca)
}
$module [sendOutput] 
{
  // pipe-declarations for block %sendOutput
  //  file prog.linked.opt.aa, line 319
  // pipe-declarations for block %sendOutput%body
  //  file prog.linked.opt.aa, line 324
  // pipe-declarations for block %sendOutput%body%
  //  file prog.linked.opt.aa, line 327
  // pipe-declarations for block %sendOutput%body%
  //  file prog.linked.opt.aa, line 362
  // pipe-declarations for block %sendOutput%body%
  //  file prog.linked.opt.aa, line 365
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1045] // Branch Block  file prog.linked.opt.aa, line 324
    {
      $P [branch_block_stmt_1045__entry__]
      branch_block_stmt_1045__entry__ <-| ($entry)
      $P [branch_block_stmt_1045__exit__]
      branch_block_stmt_1045__exit__ |-> ($exit)
      $P [bbx_xnph_forx_xbody]
      $P [merge_stmt_1047__exit__] 
      $P [call_stmt_1058_to_assign_stmt_1168__entry__] 
      $P [call_stmt_1058_to_assign_stmt_1168__exit__] 
      $P [if_stmt_1169__entry__] 
      $P [if_stmt_1169__exit__] 
      $P [merge_stmt_1175__entry__] 
      $P [merge_stmt_1175__exit__] 
      $P [return__]
      $P [merge_stmt_1177__exit__] 
      ::[call_stmt_1058_to_assign_stmt_1168] 
      {
        // start: 		$call readModule1 (iNsTr_1 ) (call ) 
        //  file prog.linked.opt.aa, line 331
        $T[call_stmt_1058_sample_start_] 
        $T[call_stmt_1058_sample_completed_] 
        $T[call_stmt_1058_update_start_] 
        $T[call_stmt_1058_update_completed_] 
        // Call input argument 0
        // iNsTr_1
        // start: Forward dependencies from iNsTr_1 to transition call_stmt_1058_sample_start_
        // done: Forward dependencies from iNsTr_1 to transition call_stmt_1058_sample_start_
        ;;[call_stmt_1058_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1058_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1058_sample_start_ &-> (call_stmt_1058_Sample)
        call_stmt_1058_sample_completed_ <-& (call_stmt_1058_Sample)
        call_stmt_1058_sample_completed_ &-> ($null)
        call_stmt_1058_update_start_ &-> (call_stmt_1058_Update)
        call_stmt_1058_update_completed_ <-& (call_stmt_1058_Update)
        // Call output argument 0
        // (as target) call
        // start: WAR dependencies for call
        // done: WAR dependencies for call
        // end: 		$call readModule1 (iNsTr_1 ) (call ) 
        // start:  		conv := ($cast ($uint<8>) call ) $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 332
        // Source expression
        // ($cast ($uint<8>) call )
        $T[type_cast_1061_sample_start_] 
        $T[type_cast_1061_sample_completed_] 
        $T[type_cast_1061_update_start_] 
        $T[type_cast_1061_update_completed_] 
        // call
        // start: Forward dependencies from call to transition type_cast_1061_sample_start_
        type_cast_1061_sample_start_ <-& (call_stmt_1058_update_completed_)
        // done: Forward dependencies from call to transition type_cast_1061_sample_start_
        ;;[type_cast_1061_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_1061_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_1061_sample_start_ &-> (type_cast_1061_Sample)
        type_cast_1061_sample_completed_ <-& (type_cast_1061_Sample)
        type_cast_1061_sample_completed_ &-> ($null)
        type_cast_1061_update_start_ &-> (type_cast_1061_Update)
        type_cast_1061_update_completed_ <-& (type_cast_1061_Update)
        // Target expression
        // (as target) conv
        // start: WAR dependencies for conv
        // done: WAR dependencies for conv
        // end:  		conv := ($cast ($uint<8>) call ) $buffering 1// bits of buffering = 8. 
        // start: WAR dependencies for shr
        // done: WAR dependencies for shr
        // start:  		$volatile shr := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
        //  file prog.linked.opt.aa, line 333
        // volatile! 
        // Source expression
        // (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
        // call
        // Target expression
        // (as target) shr
        // start: WAR dependencies for shr
        // done: WAR dependencies for shr
        // end:  		$volatile shr := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
        // start:  		conv8 := ($cast ($uint<8>) shr ) $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 334
        // Source expression
        // ($cast ($uint<8>) shr )
        $T[type_cast_1071_sample_start_] 
        $T[type_cast_1071_sample_completed_] 
        $T[type_cast_1071_update_start_] 
        $T[type_cast_1071_update_completed_] 
        // shr
        // start: Forward dependencies from shr to transition type_cast_1071_sample_start_
        type_cast_1071_sample_start_ <-& (call_stmt_1058_update_completed_)
        // done: Forward dependencies from shr to transition type_cast_1071_sample_start_
        ;;[type_cast_1071_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_1071_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_1071_sample_start_ &-> (type_cast_1071_Sample)
        type_cast_1071_sample_completed_ <-& (type_cast_1071_Sample)
        type_cast_1071_sample_completed_ &-> ($null)
        type_cast_1071_update_start_ &-> (type_cast_1071_Update)
        type_cast_1071_update_completed_ <-& (type_cast_1071_Update)
        // Target expression
        // (as target) conv8
        // start: WAR dependencies for conv8
        // done: WAR dependencies for conv8
        // end:  		conv8 := ($cast ($uint<8>) shr ) $buffering 1// bits of buffering = 8. 
        // start: WAR dependencies for shr11
        // done: WAR dependencies for shr11
        // start:  		$volatile shr11 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  )) $buffering 1
        //  file prog.linked.opt.aa, line 335
        // volatile! 
        // Source expression
        // (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  ))
        // call
        // Target expression
        // (as target) shr11
        // start: WAR dependencies for shr11
        // done: WAR dependencies for shr11
        // end:  		$volatile shr11 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  )) $buffering 1
        // start:  		conv14 := ($cast ($uint<8>) shr11 ) $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 336
        // Source expression
        // ($cast ($uint<8>) shr11 )
        $T[type_cast_1081_sample_start_] 
        $T[type_cast_1081_sample_completed_] 
        $T[type_cast_1081_update_start_] 
        $T[type_cast_1081_update_completed_] 
        // shr11
        // start: Forward dependencies from shr11 to transition type_cast_1081_sample_start_
        type_cast_1081_sample_start_ <-& (call_stmt_1058_update_completed_)
        // done: Forward dependencies from shr11 to transition type_cast_1081_sample_start_
        ;;[type_cast_1081_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_1081_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_1081_sample_start_ &-> (type_cast_1081_Sample)
        type_cast_1081_sample_completed_ <-& (type_cast_1081_Sample)
        type_cast_1081_sample_completed_ &-> ($null)
        type_cast_1081_update_start_ &-> (type_cast_1081_Update)
        type_cast_1081_update_completed_ <-& (type_cast_1081_Update)
        // Target expression
        // (as target) conv14
        // start: WAR dependencies for conv14
        // done: WAR dependencies for conv14
        // end:  		conv14 := ($cast ($uint<8>) shr11 ) $buffering 1// bits of buffering = 8. 
        // start: WAR dependencies for shr17
        // done: WAR dependencies for shr17
        // start:  		$volatile shr17 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  )) $buffering 1
        //  file prog.linked.opt.aa, line 337
        // volatile! 
        // Source expression
        // (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  ))
        // call
        // Target expression
        // (as target) shr17
        // start: WAR dependencies for shr17
        // done: WAR dependencies for shr17
        // end:  		$volatile shr17 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  )) $buffering 1
        // start:  		conv20 := ($cast ($uint<8>) shr17 ) $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 338
        // Source expression
        // ($cast ($uint<8>) shr17 )
        $T[type_cast_1091_sample_start_] 
        $T[type_cast_1091_sample_completed_] 
        $T[type_cast_1091_update_start_] 
        $T[type_cast_1091_update_completed_] 
        // shr17
        // start: Forward dependencies from shr17 to transition type_cast_1091_sample_start_
        type_cast_1091_sample_start_ <-& (call_stmt_1058_update_completed_)
        // done: Forward dependencies from shr17 to transition type_cast_1091_sample_start_
        ;;[type_cast_1091_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_1091_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_1091_sample_start_ &-> (type_cast_1091_Sample)
        type_cast_1091_sample_completed_ <-& (type_cast_1091_Sample)
        type_cast_1091_sample_completed_ &-> ($null)
        type_cast_1091_update_start_ &-> (type_cast_1091_Update)
        type_cast_1091_update_completed_ <-& (type_cast_1091_Update)
        // Target expression
        // (as target) conv20
        // start: WAR dependencies for conv20
        // done: WAR dependencies for conv20
        // end:  		conv20 := ($cast ($uint<8>) shr17 ) $buffering 1// bits of buffering = 8. 
        // start: WAR dependencies for shr23
        // done: WAR dependencies for shr23
        // start:  		$volatile shr23 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  )) $buffering 1
        //  file prog.linked.opt.aa, line 339
        // volatile! 
        // Source expression
        // (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  ))
        // call
        // Target expression
        // (as target) shr23
        // start: WAR dependencies for shr23
        // done: WAR dependencies for shr23
        // end:  		$volatile shr23 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  )) $buffering 1
        // start:  		conv26 := ($cast ($uint<8>) shr23 ) $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 340
        // Source expression
        // ($cast ($uint<8>) shr23 )
        $T[type_cast_1101_sample_start_] 
        $T[type_cast_1101_sample_completed_] 
        $T[type_cast_1101_update_start_] 
        $T[type_cast_1101_update_completed_] 
        // shr23
        // start: Forward dependencies from shr23 to transition type_cast_1101_sample_start_
        type_cast_1101_sample_start_ <-& (call_stmt_1058_update_completed_)
        // done: Forward dependencies from shr23 to transition type_cast_1101_sample_start_
        ;;[type_cast_1101_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_1101_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_1101_sample_start_ &-> (type_cast_1101_Sample)
        type_cast_1101_sample_completed_ <-& (type_cast_1101_Sample)
        type_cast_1101_sample_completed_ &-> ($null)
        type_cast_1101_update_start_ &-> (type_cast_1101_Update)
        type_cast_1101_update_completed_ <-& (type_cast_1101_Update)
        // Target expression
        // (as target) conv26
        // start: WAR dependencies for conv26
        // done: WAR dependencies for conv26
        // end:  		conv26 := ($cast ($uint<8>) shr23 ) $buffering 1// bits of buffering = 8. 
        // start: WAR dependencies for shr29
        // done: WAR dependencies for shr29
        // start:  		$volatile shr29 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  )) $buffering 1
        //  file prog.linked.opt.aa, line 341
        // volatile! 
        // Source expression
        // (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  ))
        // call
        // Target expression
        // (as target) shr29
        // start: WAR dependencies for shr29
        // done: WAR dependencies for shr29
        // end:  		$volatile shr29 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  )) $buffering 1
        // start:  		conv32 := ($cast ($uint<8>) shr29 ) $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 342
        // Source expression
        // ($cast ($uint<8>) shr29 )
        $T[type_cast_1111_sample_start_] 
        $T[type_cast_1111_sample_completed_] 
        $T[type_cast_1111_update_start_] 
        $T[type_cast_1111_update_completed_] 
        // shr29
        // start: Forward dependencies from shr29 to transition type_cast_1111_sample_start_
        type_cast_1111_sample_start_ <-& (call_stmt_1058_update_completed_)
        // done: Forward dependencies from shr29 to transition type_cast_1111_sample_start_
        ;;[type_cast_1111_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_1111_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_1111_sample_start_ &-> (type_cast_1111_Sample)
        type_cast_1111_sample_completed_ <-& (type_cast_1111_Sample)
        type_cast_1111_sample_completed_ &-> ($null)
        type_cast_1111_update_start_ &-> (type_cast_1111_Update)
        type_cast_1111_update_completed_ <-& (type_cast_1111_Update)
        // Target expression
        // (as target) conv32
        // start: WAR dependencies for conv32
        // done: WAR dependencies for conv32
        // end:  		conv32 := ($cast ($uint<8>) shr29 ) $buffering 1// bits of buffering = 8. 
        // start: WAR dependencies for shr35
        // done: WAR dependencies for shr35
        // start:  		$volatile shr35 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  )) $buffering 1
        //  file prog.linked.opt.aa, line 343
        // volatile! 
        // Source expression
        // (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  ))
        // call
        // Target expression
        // (as target) shr35
        // start: WAR dependencies for shr35
        // done: WAR dependencies for shr35
        // end:  		$volatile shr35 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  )) $buffering 1
        // start:  		conv38 := ($cast ($uint<8>) shr35 ) $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 344
        // Source expression
        // ($cast ($uint<8>) shr35 )
        $T[type_cast_1121_sample_start_] 
        $T[type_cast_1121_sample_completed_] 
        $T[type_cast_1121_update_start_] 
        $T[type_cast_1121_update_completed_] 
        // shr35
        // start: Forward dependencies from shr35 to transition type_cast_1121_sample_start_
        type_cast_1121_sample_start_ <-& (call_stmt_1058_update_completed_)
        // done: Forward dependencies from shr35 to transition type_cast_1121_sample_start_
        ;;[type_cast_1121_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_1121_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_1121_sample_start_ &-> (type_cast_1121_Sample)
        type_cast_1121_sample_completed_ <-& (type_cast_1121_Sample)
        type_cast_1121_sample_completed_ &-> ($null)
        type_cast_1121_update_start_ &-> (type_cast_1121_Update)
        type_cast_1121_update_completed_ <-& (type_cast_1121_Update)
        // Target expression
        // (as target) conv38
        // start: WAR dependencies for conv38
        // done: WAR dependencies for conv38
        // end:  		conv38 := ($cast ($uint<8>) shr35 ) $buffering 1// bits of buffering = 8. 
        // start: WAR dependencies for shr41
        // done: WAR dependencies for shr41
        // start:  		$volatile shr41 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  )) $buffering 1
        //  file prog.linked.opt.aa, line 345
        // volatile! 
        // Source expression
        // (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  ))
        // call
        // Target expression
        // (as target) shr41
        // start: WAR dependencies for shr41
        // done: WAR dependencies for shr41
        // end:  		$volatile shr41 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  )) $buffering 1
        // start:  		conv44 := ($cast ($uint<8>) shr41 ) $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 346
        // Source expression
        // ($cast ($uint<8>) shr41 )
        $T[type_cast_1131_sample_start_] 
        $T[type_cast_1131_sample_completed_] 
        $T[type_cast_1131_update_start_] 
        $T[type_cast_1131_update_completed_] 
        // shr41
        // start: Forward dependencies from shr41 to transition type_cast_1131_sample_start_
        type_cast_1131_sample_start_ <-& (call_stmt_1058_update_completed_)
        // done: Forward dependencies from shr41 to transition type_cast_1131_sample_start_
        ;;[type_cast_1131_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_1131_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_1131_sample_start_ &-> (type_cast_1131_Sample)
        type_cast_1131_sample_completed_ <-& (type_cast_1131_Sample)
        type_cast_1131_sample_completed_ &-> ($null)
        type_cast_1131_update_start_ &-> (type_cast_1131_Update)
        type_cast_1131_update_completed_ <-& (type_cast_1131_Update)
        // Target expression
        // (as target) conv44
        // start: WAR dependencies for conv44
        // done: WAR dependencies for conv44
        // end:  		conv44 := ($cast ($uint<8>) shr41 ) $buffering 1// bits of buffering = 8. 
        // start:  		system_output_pipe := conv44 $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 347
        // Source expression
        // conv44
        // Target expression
        // (as target) system_output_pipe
        $T[WPIPE_system_output_pipe_1133_sample_start_] 
        $T[WPIPE_system_output_pipe_1133_sample_completed_] 
        $T[WPIPE_system_output_pipe_1133_update_start_] 
        $T[WPIPE_system_output_pipe_1133_update_completed_] 
        ;;[WPIPE_system_output_pipe_1133_Sample] 
        {
          // pipe write sample-start system_output_pipe
          $T [req] $T [ack] 
        }
        ;;[WPIPE_system_output_pipe_1133_Update] 
        {
          // pipe write update (complete) system_output_pipe
          $T [req] $T [ack] 
        }
        WPIPE_system_output_pipe_1133_sample_start_ &-> (WPIPE_system_output_pipe_1133_Sample)
        WPIPE_system_output_pipe_1133_sample_completed_ <-& (WPIPE_system_output_pipe_1133_Sample)
        WPIPE_system_output_pipe_1133_update_start_ <-& (WPIPE_system_output_pipe_1133_sample_completed_)
        WPIPE_system_output_pipe_1133_update_start_ &-> (WPIPE_system_output_pipe_1133_Update)
        WPIPE_system_output_pipe_1133_update_completed_ <-& (WPIPE_system_output_pipe_1133_Update)
        // start: Forward dependencies from conv44 to transition WPIPE_system_output_pipe_1133_sample_start_
        WPIPE_system_output_pipe_1133_sample_start_ <-& (type_cast_1131_update_completed_)
        // done: Forward dependencies from conv44 to transition WPIPE_system_output_pipe_1133_sample_start_
        // end:  		system_output_pipe := conv44 $buffering 1// bits of buffering = 8. 
        // start:  		system_output_pipe := conv38 $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 348
        // Source expression
        // conv38
        // Target expression
        // (as target) system_output_pipe
        $T[WPIPE_system_output_pipe_1136_sample_start_] 
        $T[WPIPE_system_output_pipe_1136_sample_completed_] 
        $T[WPIPE_system_output_pipe_1136_update_start_] 
        $T[WPIPE_system_output_pipe_1136_update_completed_] 
        ;;[WPIPE_system_output_pipe_1136_Sample] 
        {
          // pipe write sample-start system_output_pipe
          $T [req] $T [ack] 
        }
        ;;[WPIPE_system_output_pipe_1136_Update] 
        {
          // pipe write update (complete) system_output_pipe
          $T [req] $T [ack] 
        }
        WPIPE_system_output_pipe_1136_sample_start_ &-> (WPIPE_system_output_pipe_1136_Sample)
        WPIPE_system_output_pipe_1136_sample_completed_ <-& (WPIPE_system_output_pipe_1136_Sample)
        WPIPE_system_output_pipe_1136_update_start_ <-& (WPIPE_system_output_pipe_1136_sample_completed_)
        WPIPE_system_output_pipe_1136_update_start_ &-> (WPIPE_system_output_pipe_1136_Update)
        WPIPE_system_output_pipe_1136_update_completed_ <-& (WPIPE_system_output_pipe_1136_Update)
        // start: Forward dependencies from conv38 to transition WPIPE_system_output_pipe_1136_sample_start_
        WPIPE_system_output_pipe_1136_sample_start_ <-& (type_cast_1121_update_completed_)
        // done: Forward dependencies from conv38 to transition WPIPE_system_output_pipe_1136_sample_start_
        // end:  		system_output_pipe := conv38 $buffering 1// bits of buffering = 8. 
        // start:  		system_output_pipe := conv32 $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 349
        // Source expression
        // conv32
        // Target expression
        // (as target) system_output_pipe
        $T[WPIPE_system_output_pipe_1139_sample_start_] 
        $T[WPIPE_system_output_pipe_1139_sample_completed_] 
        $T[WPIPE_system_output_pipe_1139_update_start_] 
        $T[WPIPE_system_output_pipe_1139_update_completed_] 
        ;;[WPIPE_system_output_pipe_1139_Sample] 
        {
          // pipe write sample-start system_output_pipe
          $T [req] $T [ack] 
        }
        ;;[WPIPE_system_output_pipe_1139_Update] 
        {
          // pipe write update (complete) system_output_pipe
          $T [req] $T [ack] 
        }
        WPIPE_system_output_pipe_1139_sample_start_ &-> (WPIPE_system_output_pipe_1139_Sample)
        WPIPE_system_output_pipe_1139_sample_completed_ <-& (WPIPE_system_output_pipe_1139_Sample)
        WPIPE_system_output_pipe_1139_update_start_ <-& (WPIPE_system_output_pipe_1139_sample_completed_)
        WPIPE_system_output_pipe_1139_update_start_ &-> (WPIPE_system_output_pipe_1139_Update)
        WPIPE_system_output_pipe_1139_update_completed_ <-& (WPIPE_system_output_pipe_1139_Update)
        // start: Forward dependencies from conv32 to transition WPIPE_system_output_pipe_1139_sample_start_
        WPIPE_system_output_pipe_1139_sample_start_ <-& (type_cast_1111_update_completed_)
        // done: Forward dependencies from conv32 to transition WPIPE_system_output_pipe_1139_sample_start_
        // end:  		system_output_pipe := conv32 $buffering 1// bits of buffering = 8. 
        // start:  		system_output_pipe := conv26 $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 350
        // Source expression
        // conv26
        // Target expression
        // (as target) system_output_pipe
        $T[WPIPE_system_output_pipe_1142_sample_start_] 
        $T[WPIPE_system_output_pipe_1142_sample_completed_] 
        $T[WPIPE_system_output_pipe_1142_update_start_] 
        $T[WPIPE_system_output_pipe_1142_update_completed_] 
        ;;[WPIPE_system_output_pipe_1142_Sample] 
        {
          // pipe write sample-start system_output_pipe
          $T [req] $T [ack] 
        }
        ;;[WPIPE_system_output_pipe_1142_Update] 
        {
          // pipe write update (complete) system_output_pipe
          $T [req] $T [ack] 
        }
        WPIPE_system_output_pipe_1142_sample_start_ &-> (WPIPE_system_output_pipe_1142_Sample)
        WPIPE_system_output_pipe_1142_sample_completed_ <-& (WPIPE_system_output_pipe_1142_Sample)
        WPIPE_system_output_pipe_1142_update_start_ <-& (WPIPE_system_output_pipe_1142_sample_completed_)
        WPIPE_system_output_pipe_1142_update_start_ &-> (WPIPE_system_output_pipe_1142_Update)
        WPIPE_system_output_pipe_1142_update_completed_ <-& (WPIPE_system_output_pipe_1142_Update)
        // start: Forward dependencies from conv26 to transition WPIPE_system_output_pipe_1142_sample_start_
        WPIPE_system_output_pipe_1142_sample_start_ <-& (type_cast_1101_update_completed_)
        // done: Forward dependencies from conv26 to transition WPIPE_system_output_pipe_1142_sample_start_
        // end:  		system_output_pipe := conv26 $buffering 1// bits of buffering = 8. 
        // start:  		system_output_pipe := conv20 $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 351
        // Source expression
        // conv20
        // Target expression
        // (as target) system_output_pipe
        $T[WPIPE_system_output_pipe_1145_sample_start_] 
        $T[WPIPE_system_output_pipe_1145_sample_completed_] 
        $T[WPIPE_system_output_pipe_1145_update_start_] 
        $T[WPIPE_system_output_pipe_1145_update_completed_] 
        ;;[WPIPE_system_output_pipe_1145_Sample] 
        {
          // pipe write sample-start system_output_pipe
          $T [req] $T [ack] 
        }
        ;;[WPIPE_system_output_pipe_1145_Update] 
        {
          // pipe write update (complete) system_output_pipe
          $T [req] $T [ack] 
        }
        WPIPE_system_output_pipe_1145_sample_start_ &-> (WPIPE_system_output_pipe_1145_Sample)
        WPIPE_system_output_pipe_1145_sample_completed_ <-& (WPIPE_system_output_pipe_1145_Sample)
        WPIPE_system_output_pipe_1145_update_start_ <-& (WPIPE_system_output_pipe_1145_sample_completed_)
        WPIPE_system_output_pipe_1145_update_start_ &-> (WPIPE_system_output_pipe_1145_Update)
        WPIPE_system_output_pipe_1145_update_completed_ <-& (WPIPE_system_output_pipe_1145_Update)
        // start: Forward dependencies from conv20 to transition WPIPE_system_output_pipe_1145_sample_start_
        WPIPE_system_output_pipe_1145_sample_start_ <-& (type_cast_1091_update_completed_)
        // done: Forward dependencies from conv20 to transition WPIPE_system_output_pipe_1145_sample_start_
        // end:  		system_output_pipe := conv20 $buffering 1// bits of buffering = 8. 
        // start:  		system_output_pipe := conv14 $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 352
        // Source expression
        // conv14
        // Target expression
        // (as target) system_output_pipe
        $T[WPIPE_system_output_pipe_1148_sample_start_] 
        $T[WPIPE_system_output_pipe_1148_sample_completed_] 
        $T[WPIPE_system_output_pipe_1148_update_start_] 
        $T[WPIPE_system_output_pipe_1148_update_completed_] 
        ;;[WPIPE_system_output_pipe_1148_Sample] 
        {
          // pipe write sample-start system_output_pipe
          $T [req] $T [ack] 
        }
        ;;[WPIPE_system_output_pipe_1148_Update] 
        {
          // pipe write update (complete) system_output_pipe
          $T [req] $T [ack] 
        }
        WPIPE_system_output_pipe_1148_sample_start_ &-> (WPIPE_system_output_pipe_1148_Sample)
        WPIPE_system_output_pipe_1148_sample_completed_ <-& (WPIPE_system_output_pipe_1148_Sample)
        WPIPE_system_output_pipe_1148_update_start_ <-& (WPIPE_system_output_pipe_1148_sample_completed_)
        WPIPE_system_output_pipe_1148_update_start_ &-> (WPIPE_system_output_pipe_1148_Update)
        WPIPE_system_output_pipe_1148_update_completed_ <-& (WPIPE_system_output_pipe_1148_Update)
        // start: Forward dependencies from conv14 to transition WPIPE_system_output_pipe_1148_sample_start_
        WPIPE_system_output_pipe_1148_sample_start_ <-& (type_cast_1081_update_completed_)
        // done: Forward dependencies from conv14 to transition WPIPE_system_output_pipe_1148_sample_start_
        // end:  		system_output_pipe := conv14 $buffering 1// bits of buffering = 8. 
        // start:  		system_output_pipe := conv8 $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 353
        // Source expression
        // conv8
        // Target expression
        // (as target) system_output_pipe
        $T[WPIPE_system_output_pipe_1151_sample_start_] 
        $T[WPIPE_system_output_pipe_1151_sample_completed_] 
        $T[WPIPE_system_output_pipe_1151_update_start_] 
        $T[WPIPE_system_output_pipe_1151_update_completed_] 
        ;;[WPIPE_system_output_pipe_1151_Sample] 
        {
          // pipe write sample-start system_output_pipe
          $T [req] $T [ack] 
        }
        ;;[WPIPE_system_output_pipe_1151_Update] 
        {
          // pipe write update (complete) system_output_pipe
          $T [req] $T [ack] 
        }
        WPIPE_system_output_pipe_1151_sample_start_ &-> (WPIPE_system_output_pipe_1151_Sample)
        WPIPE_system_output_pipe_1151_sample_completed_ <-& (WPIPE_system_output_pipe_1151_Sample)
        WPIPE_system_output_pipe_1151_update_start_ <-& (WPIPE_system_output_pipe_1151_sample_completed_)
        WPIPE_system_output_pipe_1151_update_start_ &-> (WPIPE_system_output_pipe_1151_Update)
        WPIPE_system_output_pipe_1151_update_completed_ <-& (WPIPE_system_output_pipe_1151_Update)
        // start: Forward dependencies from conv8 to transition WPIPE_system_output_pipe_1151_sample_start_
        WPIPE_system_output_pipe_1151_sample_start_ <-& (type_cast_1071_update_completed_)
        // done: Forward dependencies from conv8 to transition WPIPE_system_output_pipe_1151_sample_start_
        // end:  		system_output_pipe := conv8 $buffering 1// bits of buffering = 8. 
        // start:  		system_output_pipe := conv $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 354
        // Source expression
        // conv
        // Target expression
        // (as target) system_output_pipe
        $T[WPIPE_system_output_pipe_1154_sample_start_] 
        $T[WPIPE_system_output_pipe_1154_sample_completed_] 
        $T[WPIPE_system_output_pipe_1154_update_start_] 
        $T[WPIPE_system_output_pipe_1154_update_completed_] 
        ;;[WPIPE_system_output_pipe_1154_Sample] 
        {
          // pipe write sample-start system_output_pipe
          $T [req] $T [ack] 
        }
        ;;[WPIPE_system_output_pipe_1154_Update] 
        {
          // pipe write update (complete) system_output_pipe
          $T [req] $T [ack] 
        }
        WPIPE_system_output_pipe_1154_sample_start_ &-> (WPIPE_system_output_pipe_1154_Sample)
        WPIPE_system_output_pipe_1154_sample_completed_ <-& (WPIPE_system_output_pipe_1154_Sample)
        WPIPE_system_output_pipe_1154_update_start_ <-& (WPIPE_system_output_pipe_1154_sample_completed_)
        WPIPE_system_output_pipe_1154_update_start_ &-> (WPIPE_system_output_pipe_1154_Update)
        WPIPE_system_output_pipe_1154_update_completed_ <-& (WPIPE_system_output_pipe_1154_Update)
        // start: Forward dependencies from conv to transition WPIPE_system_output_pipe_1154_sample_start_
        WPIPE_system_output_pipe_1154_sample_start_ <-& (type_cast_1061_update_completed_)
        // done: Forward dependencies from conv to transition WPIPE_system_output_pipe_1154_sample_start_
        // end:  		system_output_pipe := conv $buffering 1// bits of buffering = 8. 
        // start: WAR dependencies for inc
        // ignored out-of-scope w_root 			$phi iNsTr_1 := 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody 			  ($cast ($uint<32>) inc ) $on   forx_xbody_forx_xbody 
        // type of target is $uint<32>
        // done: WAR dependencies for inc
        // start:  		$volatile inc := (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
        //  file prog.linked.opt.aa, line 355
        // volatile! 
        // Source expression
        // (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  ))
        // iNsTr_1
        // Target expression
        // (as target) inc
        // start: WAR dependencies for inc
        // ignored out-of-scope w_root 			$phi iNsTr_1 := 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody 			  ($cast ($uint<32>) inc ) $on   forx_xbody_forx_xbody 
        // type of target is $uint<32>
        // done: WAR dependencies for inc
        // end:  		$volatile inc := (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
        // start: WAR dependencies for exitcond1
        // ignored out-of-scope w_root 			$phi iNsTr_1 := 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody 			  ($cast ($uint<32>) inc ) $on   forx_xbody_forx_xbody 
        // type of target is $uint<32>
        // done: WAR dependencies for exitcond1
        // start:  		$volatile exitcond1 := (inc == ($bitcast ($uint<32>) _b00000000000000001100010000000000  )) $buffering 1
        //  file prog.linked.opt.aa, line 356
        // volatile! 
        // Source expression
        // (inc == ($bitcast ($uint<32>) _b00000000000000001100010000000000  ))
        // inc
        // Target expression
        // (as target) exitcond1
        // start: WAR dependencies for exitcond1
        // ignored out-of-scope w_root 			$phi iNsTr_1 := 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody 			  ($cast ($uint<32>) inc ) $on   forx_xbody_forx_xbody 
        // type of target is $uint<32>
        // done: WAR dependencies for exitcond1
        // end:  		$volatile exitcond1 := (inc == ($bitcast ($uint<32>) _b00000000000000001100010000000000  )) $buffering 1
        // load-store dependencies..
        // pipe read/write dependencies for pipe MAIN_MEM_REQUEST
        // read-dependencies for pipe MAIN_MEM_REQUEST
        // write-dependencies for pipe MAIN_MEM_REQUEST
        // signal write dependencies for MAIN_MEM_REQUEST
        // pipe read/write dependencies for pipe MAIN_MEM_RESPONSE
        // read-dependencies for pipe MAIN_MEM_RESPONSE
        // write-dependencies for pipe MAIN_MEM_RESPONSE
        // signal write dependencies for MAIN_MEM_RESPONSE
        // pipe read/write dependencies for pipe system_output_pipe
        // read-dependencies for pipe system_output_pipe
        // write-dependencies for pipe system_output_pipe
        WPIPE_system_output_pipe_1136_sample_start_ <-& (WPIPE_system_output_pipe_1133_update_completed_)
        WPIPE_system_output_pipe_1139_sample_start_ <-& (WPIPE_system_output_pipe_1136_update_completed_)
        WPIPE_system_output_pipe_1142_sample_start_ <-& (WPIPE_system_output_pipe_1139_update_completed_)
        WPIPE_system_output_pipe_1145_sample_start_ <-& (WPIPE_system_output_pipe_1142_update_completed_)
        WPIPE_system_output_pipe_1148_sample_start_ <-& (WPIPE_system_output_pipe_1145_update_completed_)
        WPIPE_system_output_pipe_1151_sample_start_ <-& (WPIPE_system_output_pipe_1148_update_completed_)
        WPIPE_system_output_pipe_1154_sample_start_ <-& (WPIPE_system_output_pipe_1151_update_completed_)
        // signal write dependencies for system_output_pipe
      }
      call_stmt_1058_to_assign_stmt_1168__entry__ |-> (call_stmt_1058_to_assign_stmt_1168)
      call_stmt_1058_to_assign_stmt_1168__exit__ <-| (call_stmt_1058_to_assign_stmt_1168)
      // if-statement  
      //  file prog.linked.opt.aa, line 357
      ;;[if_stmt_1169_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1169__entry__ |-> (if_stmt_1169_dead_link)
      if_stmt_1169__exit__ <-| (if_stmt_1169_dead_link)
      ;;[if_stmt_1169_eval_test] 
      {
        // test expression evaluate and trigger branch 
        $T [branch_req] 
      }
      if_stmt_1169__entry__ |-> (if_stmt_1169_eval_test)
      $P [R_exitcond1_1170_place]
      R_exitcond1_1170_place <-| (if_stmt_1169_eval_test)
      ;;[if_stmt_1169_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1169_else_link] 
      {
        $T [else_choice_transition] 
      }
      R_exitcond1_1170_place |-> (if_stmt_1169_if_link if_stmt_1169_else_link)
      $P [forx_xbody_forx_xend]
      forx_xbody_forx_xend <-| (if_stmt_1169_if_link)
      $P [forx_xbody_forx_xbody]
      forx_xbody_forx_xbody <-| (if_stmt_1169_else_link)
      // control-path for merge  
      //  file prog.linked.opt.aa, line 327
      //---------------------   merge statement  file prog.linked.opt.aa, line 327  --------------------------
      ||[bbx_xnph_forx_xbody_PhiReq] 
      {
        ;;[phi_stmt_1048] 
        {
          ||[phi_stmt_1048_sources] 
          {
            // sources for 			$phi iNsTr_1 := 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody 			  ($cast ($uint<32>) inc ) $on   forx_xbody_forx_xbody 
            // type of target is $uint<32>
            // constant source .... delay transition 
            $T [type_cast_1052_konst_delay_trans] $delay
          }
          $T [phi_stmt_1048_req] 
        }
      }
      bbx_xnph_forx_xbody |-> (bbx_xnph_forx_xbody_PhiReq)
      ||[forx_xbody_forx_xbody_PhiReq] 
      {
        ;;[phi_stmt_1048] 
        {
          ||[phi_stmt_1048_sources] 
          {
            // sources for 			$phi iNsTr_1 := 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody 			  ($cast ($uint<32>) inc ) $on   forx_xbody_forx_xbody 
            // type of target is $uint<32>
            // trivial non-constant source .... interlock-buffer introduced 
            // ($cast ($uint<32>) inc )
            ;;[type_cast_1054] 
            {
              // type-cast expression
              ||[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]  
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca] 
                }
              }
            }
          }
          $T [phi_stmt_1048_req] 
        }
      }
      forx_xbody_forx_xbody |-> (forx_xbody_forx_xbody_PhiReq)
      $P [merge_stmt_1047_PhiReqMerge] 
      merge_stmt_1047_PhiReqMerge <-| ( bbx_xnph_forx_xbody_PhiReq  forx_xbody_forx_xbody_PhiReq )
      ||[merge_stmt_1047_PhiAck] 
      {
        $T [phi_stmt_1048_ack] 
      }
      merge_stmt_1047_PhiReqMerge |-> (merge_stmt_1047_PhiAck)
      merge_stmt_1047__exit__  <-| (merge_stmt_1047_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 327  --------------------------
      // control-path for merge  
      //  file prog.linked.opt.aa, line 362
      ;;[merge_stmt_1175_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_1175__entry__ |-> (merge_stmt_1175_dead_link)
      merge_stmt_1175__exit__ <-| (merge_stmt_1175_dead_link)
      //---------------------   merge statement  file prog.linked.opt.aa, line 362  --------------------------
      ||[forx_xbody_forx_xend_PhiReq] 
      {
        // no phi statements in merge..
      }
      forx_xbody_forx_xend |-> (forx_xbody_forx_xend_PhiReq)
      $P [merge_stmt_1175_PhiReqMerge] 
      merge_stmt_1175_PhiReqMerge <-| ( forx_xbody_forx_xend_PhiReq )
      ||[merge_stmt_1175_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_1175_PhiReqMerge |-> (merge_stmt_1175_PhiAck)
      merge_stmt_1175__exit__  <-| (merge_stmt_1175_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 362  --------------------------
      // control-path for merge  
      //  file prog.linked.opt.aa, line 365
      //---------------------   merge statement  file prog.linked.opt.aa, line 365  --------------------------
      ||[return___PhiReq] 
      {
        // no phi statements in merge..
      }
      return__ |-> (return___PhiReq)
      $P [merge_stmt_1177_PhiReqMerge] 
      merge_stmt_1177_PhiReqMerge <-| ( return___PhiReq )
      ||[merge_stmt_1177_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_1177_PhiReqMerge |-> (merge_stmt_1177_PhiAck)
      merge_stmt_1177__exit__  <-| (merge_stmt_1177_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 365  --------------------------
      bbx_xnph_forx_xbody <-| (branch_block_stmt_1045__entry__)
      call_stmt_1058_to_assign_stmt_1168__entry__ <-| (merge_stmt_1047__exit__)
      if_stmt_1169__entry__ <-| (call_stmt_1058_to_assign_stmt_1168__exit__)
      merge_stmt_1175__entry__ <-| (if_stmt_1169__exit__)
      return__ <-| (merge_stmt_1175__exit__)
      merge_stmt_1177__exit__ |-> (branch_block_stmt_1045__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %sendOutput%body%
    //  file prog.linked.opt.aa, line 327
    // constant-object-declarations for block %sendOutput%body%
    //  file prog.linked.opt.aa, line 362
    // constant-object-declarations for block %sendOutput%body%
    //  file prog.linked.opt.aa, line 365
    // constant-object-declarations for block %sendOutput%body
    //  file prog.linked.opt.aa, line 324
    // constant-object-declarations for block %sendOutput
    //  file prog.linked.opt.aa, line 319
    // constant-declarations for block %sendOutput%body
    //  file prog.linked.opt.aa, line 324
    // constant-declarations for block %sendOutput%body%
    //  file prog.linked.opt.aa, line 327
    // constant-declarations for phi:  			$phi iNsTr_1 := 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody 			  ($cast ($uint<32>) inc ) $on   forx_xbody_forx_xbody 
    // type of target is $uint<32>
    //  file prog.linked.opt.aa, line 328
    // ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) )
    $constant $W[type_cast_1052_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // 		$call readModule1 (iNsTr_1 ) (call ) 
    //  file prog.linked.opt.aa, line 331
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )
    $constant $W[type_cast_1066_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000001000// 8
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  )
    $constant $W[type_cast_1076_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000010000// 16
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  )
    $constant $W[type_cast_1086_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000011000// 24
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  )
    $constant $W[type_cast_1096_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000100000// 32
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  )
    $constant $W[type_cast_1106_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000101000// 40
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  )
    $constant $W[type_cast_1116_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000110000// 48
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  )
    $constant $W[type_cast_1126_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000111000// 56
    // ($bitcast ($uint<32>) _b00000000000000000000000000000001  )
    $constant $W[type_cast_1160_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // ($bitcast ($uint<32>) _b00000000000000001100010000000000  )
    $constant $W[type_cast_1166_wire_constant] : $int<32> := _b00000000000000001100010000000000// 50176
    // if-statement  
    //  file prog.linked.opt.aa, line 357
    // constant-declarations for block %sendOutput%body%
    //  file prog.linked.opt.aa, line 362
    // constant-declarations for block %sendOutput%body%
    //  file prog.linked.opt.aa, line 365
    // block %sendOutput%body
    //  file prog.linked.opt.aa, line 324
    // merge-statement  
    //  file prog.linked.opt.aa, line 327
    // 			$phi iNsTr_1 := 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody 			  ($cast ($uint<32>) inc ) $on   forx_xbody_forx_xbody 
    // type of target is $uint<32>
    //  file prog.linked.opt.aa, line 328
    // ($cast ($uint<32>) inc )
    $intermediate $W[type_cast_1054_wire] : $int<32>
    // iNsTr_1
    $W[iNsTr_1_1048] : $int<32>
    // 		$call readModule1 (iNsTr_1 ) (call ) 
    //  file prog.linked.opt.aa, line 331
    // call
    $W[call_1058] : $int<64>
    // 		conv := ($cast ($uint<8>) call ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 332
    // conv
    $W[conv_1062] : $int<8>
    // 		$volatile shr := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    //  file prog.linked.opt.aa, line 333
    // shr
    $W[shr_1068] : $int<64>
    // 		conv8 := ($cast ($uint<8>) shr ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 334
    // conv8
    $W[conv8_1072] : $int<8>
    // 		$volatile shr11 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  )) $buffering 1
    //  file prog.linked.opt.aa, line 335
    // shr11
    $W[shr11_1078] : $int<64>
    // 		conv14 := ($cast ($uint<8>) shr11 ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 336
    // conv14
    $W[conv14_1082] : $int<8>
    // 		$volatile shr17 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  )) $buffering 1
    //  file prog.linked.opt.aa, line 337
    // shr17
    $W[shr17_1088] : $int<64>
    // 		conv20 := ($cast ($uint<8>) shr17 ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 338
    // conv20
    $W[conv20_1092] : $int<8>
    // 		$volatile shr23 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  )) $buffering 1
    //  file prog.linked.opt.aa, line 339
    // shr23
    $W[shr23_1098] : $int<64>
    // 		conv26 := ($cast ($uint<8>) shr23 ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 340
    // conv26
    $W[conv26_1102] : $int<8>
    // 		$volatile shr29 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  )) $buffering 1
    //  file prog.linked.opt.aa, line 341
    // shr29
    $W[shr29_1108] : $int<64>
    // 		conv32 := ($cast ($uint<8>) shr29 ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 342
    // conv32
    $W[conv32_1112] : $int<8>
    // 		$volatile shr35 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  )) $buffering 1
    //  file prog.linked.opt.aa, line 343
    // shr35
    $W[shr35_1118] : $int<64>
    // 		conv38 := ($cast ($uint<8>) shr35 ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 344
    // conv38
    $W[conv38_1122] : $int<8>
    // 		$volatile shr41 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  )) $buffering 1
    //  file prog.linked.opt.aa, line 345
    // shr41
    $W[shr41_1128] : $int<64>
    // 		conv44 := ($cast ($uint<8>) shr41 ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 346
    // conv44
    $W[conv44_1132] : $int<8>
    // 		system_output_pipe := conv44 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 347
    // system_output_pipe
    // 		system_output_pipe := conv38 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 348
    // system_output_pipe
    // 		system_output_pipe := conv32 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 349
    // system_output_pipe
    // 		system_output_pipe := conv26 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 350
    // system_output_pipe
    // 		system_output_pipe := conv20 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 351
    // system_output_pipe
    // 		system_output_pipe := conv14 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 352
    // system_output_pipe
    // 		system_output_pipe := conv8 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 353
    // system_output_pipe
    // 		system_output_pipe := conv $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 354
    // system_output_pipe
    // 		$volatile inc := (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
    //  file prog.linked.opt.aa, line 355
    // inc
    $W[inc_1162] : $int<32>
    // 		$volatile exitcond1 := (inc == ($bitcast ($uint<32>) _b00000000000000001100010000000000  )) $buffering 1
    //  file prog.linked.opt.aa, line 356
    // exitcond1
    $W[exitcond1_1168] : $int<1>
    // if statement  
    //  file prog.linked.opt.aa, line 357
    // datapath-instances for block %sendOutput%body
    //  file prog.linked.opt.aa, line 324
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 327
    // 			$phi iNsTr_1 := 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody 			  ($cast ($uint<32>) inc ) $on   forx_xbody_forx_xbody 
    // type of target is $uint<32>
    //  file prog.linked.opt.aa, line 328
    // ($cast ($uint<32>) inc )
    # := [type_cast_1054_inst] (inc_1162) (type_cast_1054_wire)    
    $buffering  $out type_cast_1054_inst type_cast_1054_wire 1
    $delay type_cast_1054_inst 1
    $phi [phi_stmt_1048] (type_cast_1052_wire_constant type_cast_1054_wire) ( iNsTr_1_1048 ) 
    // 		$call readModule1 (iNsTr_1 ) (call ) 
    //  file prog.linked.opt.aa, line 331
    $call [call_stmt_1058_call] $module readModule1(iNsTr_1_1048) (call_1058)  
    $delay call_stmt_1058_call 4
    $buffering  $in call_stmt_1058_call iNsTr_1_1048 1
    $buffering  $out call_stmt_1058_call call_1058 1
    // 		conv := ($cast ($uint<8>) call ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 332
    // ($cast ($uint<8>) call )
    # := [type_cast_1061_inst] (call_1058) (conv_1062)    
    $buffering  $out type_cast_1061_inst conv_1062 1
    $delay type_cast_1061_inst 1
    // 		$volatile shr := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    //  file prog.linked.opt.aa, line 333
    // (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
    >>[LSHR_u64_u64_1067_inst] (call_1058 type_cast_1066_wire_constant) (shr_1068)   $flowthrough 
    $delay LSHR_u64_u64_1067_inst 0
    // 		conv8 := ($cast ($uint<8>) shr ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 334
    // ($cast ($uint<8>) shr )
    # := [type_cast_1071_inst] (shr_1068) (conv8_1072)    
    $buffering  $out type_cast_1071_inst conv8_1072 1
    $delay type_cast_1071_inst 1
    // 		$volatile shr11 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  )) $buffering 1
    //  file prog.linked.opt.aa, line 335
    // (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  ))
    >>[LSHR_u64_u64_1077_inst] (call_1058 type_cast_1076_wire_constant) (shr11_1078)   $flowthrough 
    $delay LSHR_u64_u64_1077_inst 0
    // 		conv14 := ($cast ($uint<8>) shr11 ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 336
    // ($cast ($uint<8>) shr11 )
    # := [type_cast_1081_inst] (shr11_1078) (conv14_1082)    
    $buffering  $out type_cast_1081_inst conv14_1082 1
    $delay type_cast_1081_inst 1
    // 		$volatile shr17 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  )) $buffering 1
    //  file prog.linked.opt.aa, line 337
    // (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  ))
    >>[LSHR_u64_u64_1087_inst] (call_1058 type_cast_1086_wire_constant) (shr17_1088)   $flowthrough 
    $delay LSHR_u64_u64_1087_inst 0
    // 		conv20 := ($cast ($uint<8>) shr17 ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 338
    // ($cast ($uint<8>) shr17 )
    # := [type_cast_1091_inst] (shr17_1088) (conv20_1092)    
    $buffering  $out type_cast_1091_inst conv20_1092 1
    $delay type_cast_1091_inst 1
    // 		$volatile shr23 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  )) $buffering 1
    //  file prog.linked.opt.aa, line 339
    // (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  ))
    >>[LSHR_u64_u64_1097_inst] (call_1058 type_cast_1096_wire_constant) (shr23_1098)   $flowthrough 
    $delay LSHR_u64_u64_1097_inst 0
    // 		conv26 := ($cast ($uint<8>) shr23 ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 340
    // ($cast ($uint<8>) shr23 )
    # := [type_cast_1101_inst] (shr23_1098) (conv26_1102)    
    $buffering  $out type_cast_1101_inst conv26_1102 1
    $delay type_cast_1101_inst 1
    // 		$volatile shr29 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  )) $buffering 1
    //  file prog.linked.opt.aa, line 341
    // (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  ))
    >>[LSHR_u64_u64_1107_inst] (call_1058 type_cast_1106_wire_constant) (shr29_1108)   $flowthrough 
    $delay LSHR_u64_u64_1107_inst 0
    // 		conv32 := ($cast ($uint<8>) shr29 ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 342
    // ($cast ($uint<8>) shr29 )
    # := [type_cast_1111_inst] (shr29_1108) (conv32_1112)    
    $buffering  $out type_cast_1111_inst conv32_1112 1
    $delay type_cast_1111_inst 1
    // 		$volatile shr35 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  )) $buffering 1
    //  file prog.linked.opt.aa, line 343
    // (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  ))
    >>[LSHR_u64_u64_1117_inst] (call_1058 type_cast_1116_wire_constant) (shr35_1118)   $flowthrough 
    $delay LSHR_u64_u64_1117_inst 0
    // 		conv38 := ($cast ($uint<8>) shr35 ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 344
    // ($cast ($uint<8>) shr35 )
    # := [type_cast_1121_inst] (shr35_1118) (conv38_1122)    
    $buffering  $out type_cast_1121_inst conv38_1122 1
    $delay type_cast_1121_inst 1
    // 		$volatile shr41 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  )) $buffering 1
    //  file prog.linked.opt.aa, line 345
    // (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  ))
    >>[LSHR_u64_u64_1127_inst] (call_1058 type_cast_1126_wire_constant) (shr41_1128)   $flowthrough 
    $delay LSHR_u64_u64_1127_inst 0
    // 		conv44 := ($cast ($uint<8>) shr41 ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 346
    // ($cast ($uint<8>) shr41 )
    # := [type_cast_1131_inst] (shr41_1128) (conv44_1132)    
    $buffering  $out type_cast_1131_inst conv44_1132 1
    $delay type_cast_1131_inst 1
    // 		system_output_pipe := conv44 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 347
    // system_output_pipe
    $ioport $out [WPIPE_system_output_pipe_1133_inst]  (conv44_1132) (system_output_pipe) 
    // 		system_output_pipe := conv38 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 348
    // system_output_pipe
    $ioport $out [WPIPE_system_output_pipe_1136_inst]  (conv38_1122) (system_output_pipe) 
    // 		system_output_pipe := conv32 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 349
    // system_output_pipe
    $ioport $out [WPIPE_system_output_pipe_1139_inst]  (conv32_1112) (system_output_pipe) 
    // 		system_output_pipe := conv26 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 350
    // system_output_pipe
    $ioport $out [WPIPE_system_output_pipe_1142_inst]  (conv26_1102) (system_output_pipe) 
    // 		system_output_pipe := conv20 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 351
    // system_output_pipe
    $ioport $out [WPIPE_system_output_pipe_1145_inst]  (conv20_1092) (system_output_pipe) 
    // 		system_output_pipe := conv14 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 352
    // system_output_pipe
    $ioport $out [WPIPE_system_output_pipe_1148_inst]  (conv14_1082) (system_output_pipe) 
    // 		system_output_pipe := conv8 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 353
    // system_output_pipe
    $ioport $out [WPIPE_system_output_pipe_1151_inst]  (conv8_1072) (system_output_pipe) 
    // 		system_output_pipe := conv $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 354
    // system_output_pipe
    $ioport $out [WPIPE_system_output_pipe_1154_inst]  (conv_1062) (system_output_pipe) 
    // 		$volatile inc := (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
    //  file prog.linked.opt.aa, line 355
    // (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  ))
    +[ADD_u32_u32_1161_inst] (iNsTr_1_1048 type_cast_1160_wire_constant) (inc_1162)   $flowthrough 
    $delay ADD_u32_u32_1161_inst 0
    // 		$volatile exitcond1 := (inc == ($bitcast ($uint<32>) _b00000000000000001100010000000000  )) $buffering 1
    //  file prog.linked.opt.aa, line 356
    // (inc == ($bitcast ($uint<32>) _b00000000000000001100010000000000  ))
    ==[EQ_u32_u1_1167_inst] (inc_1162 type_cast_1166_wire_constant) (exitcond1_1168)   $flowthrough 
    $delay EQ_u32_u1_1167_inst 0
    // datapath-instances for if  
    //  file prog.linked.opt.aa, line 357
    ==0? [if_stmt_1169_branch] (exitcond1_1168)
  }
  // end data-path
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 327
  // ($cast ($uint<32>) inc )
  type_cast_1054_inst <=> (branch_block_stmt_1045/forx_xbody_forx_xbody_PhiReq/phi_stmt_1048/phi_stmt_1048_sources/type_cast_1054/SplitProtocol/Sample/rr branch_block_stmt_1045/forx_xbody_forx_xbody_PhiReq/phi_stmt_1048/phi_stmt_1048_sources/type_cast_1054/SplitProtocol/Update/cr) (branch_block_stmt_1045/forx_xbody_forx_xbody_PhiReq/phi_stmt_1048/phi_stmt_1048_sources/type_cast_1054/SplitProtocol/Sample/ra branch_block_stmt_1045/forx_xbody_forx_xbody_PhiReq/phi_stmt_1048/phi_stmt_1048_sources/type_cast_1054/SplitProtocol/Update/ca)
  phi_stmt_1048 <=> (branch_block_stmt_1045/bbx_xnph_forx_xbody_PhiReq/phi_stmt_1048/phi_stmt_1048_req branch_block_stmt_1045/forx_xbody_forx_xbody_PhiReq/phi_stmt_1048/phi_stmt_1048_req) (branch_block_stmt_1045/merge_stmt_1047_PhiAck/phi_stmt_1048_ack)
  // 		$call readModule1 (iNsTr_1 ) (call ) 
  //  file prog.linked.opt.aa, line 331
  // iNsTr_1
  call_stmt_1058_call <=> (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/call_stmt_1058_Sample/crr branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/call_stmt_1058_Update/ccr) (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/call_stmt_1058_Sample/cra branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/call_stmt_1058_Update/cca)
  // 		conv := ($cast ($uint<8>) call ) $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 332
  // call
  // ($cast ($uint<8>) call )
  type_cast_1061_inst <=> (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1061_Sample/rr branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1061_Update/cr) (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1061_Sample/ra branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1061_Update/ca)
  // 		$volatile shr := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
  //  file prog.linked.opt.aa, line 333
  // (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
  // call
  // 		conv8 := ($cast ($uint<8>) shr ) $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 334
  // shr
  // ($cast ($uint<8>) shr )
  type_cast_1071_inst <=> (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1071_Sample/rr branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1071_Update/cr) (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1071_Sample/ra branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1071_Update/ca)
  // 		$volatile shr11 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  )) $buffering 1
  //  file prog.linked.opt.aa, line 335
  // (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  ))
  // call
  // 		conv14 := ($cast ($uint<8>) shr11 ) $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 336
  // shr11
  // ($cast ($uint<8>) shr11 )
  type_cast_1081_inst <=> (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1081_Sample/rr branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1081_Update/cr) (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1081_Sample/ra branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1081_Update/ca)
  // 		$volatile shr17 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  )) $buffering 1
  //  file prog.linked.opt.aa, line 337
  // (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  ))
  // call
  // 		conv20 := ($cast ($uint<8>) shr17 ) $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 338
  // shr17
  // ($cast ($uint<8>) shr17 )
  type_cast_1091_inst <=> (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1091_Sample/rr branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1091_Update/cr) (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1091_Sample/ra branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1091_Update/ca)
  // 		$volatile shr23 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  )) $buffering 1
  //  file prog.linked.opt.aa, line 339
  // (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  ))
  // call
  // 		conv26 := ($cast ($uint<8>) shr23 ) $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 340
  // shr23
  // ($cast ($uint<8>) shr23 )
  type_cast_1101_inst <=> (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1101_Sample/rr branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1101_Update/cr) (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1101_Sample/ra branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1101_Update/ca)
  // 		$volatile shr29 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  )) $buffering 1
  //  file prog.linked.opt.aa, line 341
  // (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  ))
  // call
  // 		conv32 := ($cast ($uint<8>) shr29 ) $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 342
  // shr29
  // ($cast ($uint<8>) shr29 )
  type_cast_1111_inst <=> (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1111_Sample/rr branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1111_Update/cr) (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1111_Sample/ra branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1111_Update/ca)
  // 		$volatile shr35 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  )) $buffering 1
  //  file prog.linked.opt.aa, line 343
  // (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  ))
  // call
  // 		conv38 := ($cast ($uint<8>) shr35 ) $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 344
  // shr35
  // ($cast ($uint<8>) shr35 )
  type_cast_1121_inst <=> (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1121_Sample/rr branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1121_Update/cr) (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1121_Sample/ra branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1121_Update/ca)
  // 		$volatile shr41 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  )) $buffering 1
  //  file prog.linked.opt.aa, line 345
  // (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  ))
  // call
  // 		conv44 := ($cast ($uint<8>) shr41 ) $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 346
  // shr41
  // ($cast ($uint<8>) shr41 )
  type_cast_1131_inst <=> (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1131_Sample/rr branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1131_Update/cr) (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1131_Sample/ra branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/type_cast_1131_Update/ca)
  // 		system_output_pipe := conv44 $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 347
  // conv44
  // system_output_pipe
  WPIPE_system_output_pipe_1133_inst <=> (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1133_Sample/req branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1133_Update/req) (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1133_Sample/ack branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1133_Update/ack)
  // 		system_output_pipe := conv38 $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 348
  // conv38
  // system_output_pipe
  WPIPE_system_output_pipe_1136_inst <=> (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1136_Sample/req branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1136_Update/req) (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1136_Sample/ack branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1136_Update/ack)
  // 		system_output_pipe := conv32 $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 349
  // conv32
  // system_output_pipe
  WPIPE_system_output_pipe_1139_inst <=> (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1139_Sample/req branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1139_Update/req) (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1139_Sample/ack branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1139_Update/ack)
  // 		system_output_pipe := conv26 $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 350
  // conv26
  // system_output_pipe
  WPIPE_system_output_pipe_1142_inst <=> (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1142_Sample/req branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1142_Update/req) (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1142_Sample/ack branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1142_Update/ack)
  // 		system_output_pipe := conv20 $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 351
  // conv20
  // system_output_pipe
  WPIPE_system_output_pipe_1145_inst <=> (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1145_Sample/req branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1145_Update/req) (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1145_Sample/ack branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1145_Update/ack)
  // 		system_output_pipe := conv14 $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 352
  // conv14
  // system_output_pipe
  WPIPE_system_output_pipe_1148_inst <=> (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1148_Sample/req branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1148_Update/req) (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1148_Sample/ack branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1148_Update/ack)
  // 		system_output_pipe := conv8 $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 353
  // conv8
  // system_output_pipe
  WPIPE_system_output_pipe_1151_inst <=> (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1151_Sample/req branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1151_Update/req) (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1151_Sample/ack branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1151_Update/ack)
  // 		system_output_pipe := conv $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 354
  // conv
  // system_output_pipe
  WPIPE_system_output_pipe_1154_inst <=> (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1154_Sample/req branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1154_Update/req) (branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1154_Sample/ack branch_block_stmt_1045/call_stmt_1058_to_assign_stmt_1168/WPIPE_system_output_pipe_1154_Update/ack)
  // 		$volatile inc := (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
  //  file prog.linked.opt.aa, line 355
  // (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  ))
  // iNsTr_1
  // 		$volatile exitcond1 := (inc == ($bitcast ($uint<32>) _b00000000000000001100010000000000  )) $buffering 1
  //  file prog.linked.opt.aa, line 356
  // (inc == ($bitcast ($uint<32>) _b00000000000000001100010000000000  ))
  // inc
  // CP-DP links for if  
  //  file prog.linked.opt.aa, line 357
  if_stmt_1169_branch <=> (branch_block_stmt_1045/if_stmt_1169_eval_test/branch_req) (branch_block_stmt_1045/if_stmt_1169_else_link/else_choice_transition branch_block_stmt_1045/if_stmt_1169_if_link/if_choice_transition)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 362
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 365
}
$module [timer] 
{
  $out T:$int<64>
  // can point into 
  // pipe-declarations for block %timer
  //  file prog.linked.opt.aa, line 369
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_1185_to_assign_stmt_1188] 
    {
      // start:  	timer_req := ($bitcast ($uint<1>) _b1  ) $buffering 1// bits of buffering = 1. 
      //  file prog.linked.opt.aa, line 374
      // Target expression
      // (as target) timer_req
      $T[WPIPE_timer_req_1182_sample_start_] 
      $T[WPIPE_timer_req_1182_sample_completed_] 
      $T[WPIPE_timer_req_1182_update_start_] 
      $T[WPIPE_timer_req_1182_update_completed_] 
      ;;[WPIPE_timer_req_1182_Sample] 
      {
        // pipe write sample-start timer_req
        $T [req] $T [ack] 
      }
      ;;[WPIPE_timer_req_1182_Update] 
      {
        // pipe write update (complete) timer_req
        $T [req] $T [ack] 
      }
      WPIPE_timer_req_1182_sample_start_ &-> (WPIPE_timer_req_1182_Sample)
      WPIPE_timer_req_1182_sample_completed_ <-& (WPIPE_timer_req_1182_Sample)
      WPIPE_timer_req_1182_update_start_ <-& (WPIPE_timer_req_1182_sample_completed_)
      WPIPE_timer_req_1182_update_start_ &-> (WPIPE_timer_req_1182_Update)
      WPIPE_timer_req_1182_update_completed_ <-& (WPIPE_timer_req_1182_Update)
      // end:  	timer_req := ($bitcast ($uint<1>) _b1  ) $buffering 1// bits of buffering = 1. 
      // start:  	T := timer_resp $buffering 1// bits of buffering = 64. 
      //  file prog.linked.opt.aa, line 375
      // Source expression
      // timer_resp
      $T[RPIPE_timer_resp_1187_sample_start_] 
      $T[RPIPE_timer_resp_1187_sample_completed_] 
      $T[RPIPE_timer_resp_1187_update_start_] 
      $T[RPIPE_timer_resp_1187_update_completed_] 
      ;;[RPIPE_timer_resp_1187_Sample] 
      {
        // pipe read sample
        $T [rr] $T [ra] 
      }
      ;;[RPIPE_timer_resp_1187_Update] 
      {
        // pipe read update
        $T [cr] $T [ca] 
      }
      RPIPE_timer_resp_1187_sample_start_ &-> (RPIPE_timer_resp_1187_Sample)
      RPIPE_timer_resp_1187_sample_completed_ <-& (RPIPE_timer_resp_1187_Sample)
      RPIPE_timer_resp_1187_update_start_ <-& (RPIPE_timer_resp_1187_sample_completed_)
      RPIPE_timer_resp_1187_update_start_ &-> (RPIPE_timer_resp_1187_Update)
      RPIPE_timer_resp_1187_update_completed_ <-& (RPIPE_timer_resp_1187_Update)
      // Target expression
      // (as target) T
      // T
      // write to interface object
      // start: WAR dependencies for T
      // done: WAR dependencies for T
      // T
      // write to interface object
      // end:  	T := timer_resp $buffering 1// bits of buffering = 64. 
      // load-store dependencies..
      // pipe read/write dependencies for pipe timer_resp
      // read-dependencies for pipe timer_resp
      // write-dependencies for pipe timer_resp
      // signal write dependencies for timer_resp
      // pipe read/write dependencies for pipe timer_req
      // read-dependencies for pipe timer_req
      // write-dependencies for pipe timer_req
      // signal write dependencies for timer_req
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %timer
    //  file prog.linked.opt.aa, line 369
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_1184_wire_constant] : $int<1> := _b1// 1
    // 	timer_req := ($bitcast ($uint<1>) _b1  ) $buffering 1// bits of buffering = 1. 
    //  file prog.linked.opt.aa, line 374
    // timer_req
    // 	T := timer_resp $buffering 1// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 375
    // T
    // 	timer_req := ($bitcast ($uint<1>) _b1  ) $buffering 1// bits of buffering = 1. 
    //  file prog.linked.opt.aa, line 374
    // timer_req
    $ioport $out [WPIPE_timer_req_1182_inst]  (type_cast_1184_wire_constant) (timer_req) 
    // 	T := timer_resp $buffering 1// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 375
    // timer_resp
    $ioport $in [RPIPE_timer_resp_1187_inst] (timer_resp) (T) 
    $buffering $out RPIPE_timer_resp_1187_inst T 1
  }
  // end data-path
  // 	timer_req := ($bitcast ($uint<1>) _b1  ) $buffering 1// bits of buffering = 1. 
  //  file prog.linked.opt.aa, line 374
  // timer_req
  WPIPE_timer_req_1182_inst <=> (assign_stmt_1185_to_assign_stmt_1188/WPIPE_timer_req_1182_Sample/req assign_stmt_1185_to_assign_stmt_1188/WPIPE_timer_req_1182_Update/req) (assign_stmt_1185_to_assign_stmt_1188/WPIPE_timer_req_1182_Sample/ack assign_stmt_1185_to_assign_stmt_1188/WPIPE_timer_req_1182_Update/ack)
  // 	T := timer_resp $buffering 1// bits of buffering = 64. 
  //  file prog.linked.opt.aa, line 375
  // timer_resp
  RPIPE_timer_resp_1187_inst <=> (assign_stmt_1185_to_assign_stmt_1188/RPIPE_timer_resp_1187_Sample/rr assign_stmt_1185_to_assign_stmt_1188/RPIPE_timer_resp_1187_Update/cr) (assign_stmt_1185_to_assign_stmt_1188/RPIPE_timer_resp_1187_Sample/ra assign_stmt_1185_to_assign_stmt_1188/RPIPE_timer_resp_1187_Update/ca)
}
$module [systemTOP] 
{
  // pipe-declarations for block %systemTOP
  //  file prog.linked.opt.aa, line 377
  // pipe-declarations for block %systemTOP%body
  //  file prog.linked.opt.aa, line 382
  // pipe-declarations for block %systemTOP%body%
  //  file prog.linked.opt.aa, line 387
  // pipe-declarations for block %systemTOP%body%
  //  file prog.linked.opt.aa, line 439
  // pipe-declarations for block %systemTOP%body%
  //  file prog.linked.opt.aa, line 474
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1191] // Branch Block  file prog.linked.opt.aa, line 382
    {
      $P [branch_block_stmt_1191__entry__]
      branch_block_stmt_1191__entry__ <-| ($entry)
      $P [branch_block_stmt_1191__exit__]
      branch_block_stmt_1191__exit__ |-> ($exit)
      $P [call_stmt_1192_to_call_stmt_1194__entry__] 
      $P [call_stmt_1192_to_call_stmt_1194__exit__] 
      $P [entry_whilex_xbodyx_xi]
      $P [merge_stmt_1196__exit__] 
      $P [do_while_stmt_1218__entry__] 
      $P [do_while_stmt_1218__exit__] 
      $P [if_stmt_1381__entry__] 
      $P [if_stmt_1381__exit__] 
      $P [merge_stmt_1385__entry__] 
      $P [merge_stmt_1385__exit__] 
      $P [assign_stmt_1396_to_call_stmt_1514__entry__] 
      $P [assign_stmt_1396_to_call_stmt_1514__exit__] 
      $P [return__]
      $P [merge_stmt_1516__exit__] 
      ::[call_stmt_1192_to_call_stmt_1194] 
      {
        // start: 		$call fill_input () () 
        //  file prog.linked.opt.aa, line 384
        $T[call_stmt_1192_sample_start_] 
        $T[call_stmt_1192_sample_completed_] 
        $T[call_stmt_1192_update_start_] 
        $T[call_stmt_1192_update_completed_] 
        ;;[call_stmt_1192_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1192_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1192_sample_start_ &-> (call_stmt_1192_Sample)
        call_stmt_1192_sample_completed_ <-& (call_stmt_1192_Sample)
        call_stmt_1192_sample_completed_ &-> ($null)
        call_stmt_1192_update_start_ &-> (call_stmt_1192_Update)
        call_stmt_1192_update_completed_ <-& (call_stmt_1192_Update)
        // end: 		$call fill_input () () 
        // start: 		$call timer () (call ) 
        //  file prog.linked.opt.aa, line 385
        $T[call_stmt_1194_sample_start_] 
        $T[call_stmt_1194_sample_completed_] 
        $T[call_stmt_1194_update_start_] 
        $T[call_stmt_1194_update_completed_] 
        ;;[call_stmt_1194_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1194_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1194_sample_start_ &-> (call_stmt_1194_Sample)
        call_stmt_1194_sample_completed_ <-& (call_stmt_1194_Sample)
        call_stmt_1194_sample_completed_ &-> ($null)
        call_stmt_1194_update_start_ &-> (call_stmt_1194_Update)
        call_stmt_1194_update_completed_ <-& (call_stmt_1194_Update)
        // Call output argument 0
        // (as target) call
        // start: WAR dependencies for call
        // done: WAR dependencies for call
        // end: 		$call timer () (call ) 
        // load-store dependencies..
        // pipe read/write dependencies for pipe timer_resp
        // read-dependencies for pipe timer_resp
        // write-dependencies for pipe timer_resp
        // signal write dependencies for timer_resp
        // pipe read/write dependencies for pipe MAIN_MEM_REQUEST
        // read-dependencies for pipe MAIN_MEM_REQUEST
        // write-dependencies for pipe MAIN_MEM_REQUEST
        // signal write dependencies for MAIN_MEM_REQUEST
        // pipe read/write dependencies for pipe MAIN_MEM_RESPONSE
        // read-dependencies for pipe MAIN_MEM_RESPONSE
        // write-dependencies for pipe MAIN_MEM_RESPONSE
        // signal write dependencies for MAIN_MEM_RESPONSE
        // pipe read/write dependencies for pipe system_input_pipe
        // read-dependencies for pipe system_input_pipe
        // write-dependencies for pipe system_input_pipe
        // signal write dependencies for system_input_pipe
        // pipe read/write dependencies for pipe timer_req
        // read-dependencies for pipe timer_req
        // write-dependencies for pipe timer_req
        // signal write dependencies for timer_req
      }
      call_stmt_1192_to_call_stmt_1194__entry__ |-> (call_stmt_1192_to_call_stmt_1194)
      call_stmt_1192_to_call_stmt_1194__exit__ <-| (call_stmt_1192_to_call_stmt_1194)
      // do-while-statement  
      //  file prog.linked.opt.aa, line 397
      <o> [do_while_stmt_1218]  $depth 15 $buffering 1 
      {
        $P[do_while_stmt_1218__entry__] 
        $P[do_while_stmt_1218__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1218_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_1220
          // 			$phi iNsTr_2 := 			  ($cast ($uint<32>) add79x_xi ) $on   $loopback 			  iNsTr_2_at_entry $on   $entry 
          // type of target is $uint<32>
          $T[phi_stmt_1220_sample_start_] 
          $T[phi_stmt_1220_sample_completed_] 
          $T[phi_stmt_1220_update_start_] 
          $T[phi_stmt_1220_update_completed_] 
          $T[phi_stmt_1220_sample_start__ps] 
          phi_stmt_1220_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1220_sample_completed__ps] 
          phi_stmt_1220_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1220_update_start__ps] 
          phi_stmt_1220_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1220_update_completed__ps] 
          phi_stmt_1220_update_completed_ <-& (phi_stmt_1220_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1220_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1220_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1220_update_start_)
          $T[phi_stmt_1220_loopback_trigger] 
          phi_stmt_1220_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1220_loopback_sample_req] 
          $T[phi_stmt_1220_loopback_sample_req_ps] 
          phi_stmt_1220_loopback_sample_req <-& (phi_stmt_1220_loopback_sample_req_ps)
          phi_stmt_1220_loopback_sample_req &-> ($null)
          $T[phi_stmt_1220_entry_trigger] 
          phi_stmt_1220_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1220_entry_sample_req] 
          $T[phi_stmt_1220_entry_sample_req_ps] 
          phi_stmt_1220_entry_sample_req <-& (phi_stmt_1220_entry_sample_req_ps)
          phi_stmt_1220_entry_sample_req &-> ($null)
          phi_stmt_1220_update_start_ o<-& (phi_stmt_1220_update_completed_ 0)
          phi_stmt_1220_sample_start_ o<-& (phi_stmt_1220_sample_completed_ 1)
          $T[phi_stmt_1220_merged_reqs] 
          $T[phi_stmt_1220_phi_mux_ack] 
          $T[phi_stmt_1220_phi_mux_ack_ps] 
          phi_stmt_1220_phi_mux_ack_ps <-& (phi_stmt_1220_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1220_update_completed_)
          $T[type_cast_1223_sample_start__ps] 
          $T[type_cast_1223_sample_completed__ps] 
          $T[type_cast_1223_update_start__ps] 
          $T[type_cast_1223_update_completed__ps] 
          // source expression in Phi alternative 0
          // ($cast ($uint<32>) add79x_xi )
          $T[type_cast_1223_sample_start_] 
          $T[type_cast_1223_sample_completed_] 
          $T[type_cast_1223_update_start_] 
          $T[type_cast_1223_update_completed_] 
          // add79x_xi
          // start: Forward dependencies from add79x_xi to transition type_cast_1223_sample_start_
          // done: Forward dependencies from add79x_xi to transition type_cast_1223_sample_start_
          ;;[type_cast_1223_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_1223_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_1223_sample_start_ &-> (type_cast_1223_Sample)
          type_cast_1223_sample_completed_ <-& (type_cast_1223_Sample)
          type_cast_1223_sample_completed_ &-> ($null)
          type_cast_1223_update_start_ &-> (type_cast_1223_Update)
          type_cast_1223_update_completed_ <-& (type_cast_1223_Update)
          // RAW reenables for add79x_xi
          // self-release: 
          type_cast_1223_sample_start_ o<-& (type_cast_1223_sample_completed_ 1)
          $null &-> (type_cast_1223_update_start_)
          type_cast_1223_update_start_ o<-& (type_cast_1223_update_completed_ 0)
          // Phi start dependency
          type_cast_1223_sample_start_ <-& (type_cast_1223_sample_start__ps)
          type_cast_1223_update_start_ <-& (type_cast_1223_update_start__ps)
          // RAW reenables for ($cast ($uint<32>) add79x_xi )
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          type_cast_1223_sample_completed__ps <-& (type_cast_1223_sample_completed_)
          type_cast_1223_update_completed__ps <-& (type_cast_1223_update_completed_)
          $T[R_iNsTr_2_at_entry_1224_sample_start__ps] 
          $T[R_iNsTr_2_at_entry_1224_sample_completed__ps] 
          $T[R_iNsTr_2_at_entry_1224_update_start__ps] 
          $T[R_iNsTr_2_at_entry_1224_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_iNsTr_2_at_entry_1224_sample_start_] 
          $T[R_iNsTr_2_at_entry_1224_sample_completed_] 
          R_iNsTr_2_at_entry_1224_sample_completed_ <-& (R_iNsTr_2_at_entry_1224_sample_start_)
          $T[R_iNsTr_2_at_entry_1224_update_start_] 
          $T [R_iNsTr_2_at_entry_1224_update_completed_] $delay 
          R_iNsTr_2_at_entry_1224_update_completed_ <-& (R_iNsTr_2_at_entry_1224_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_iNsTr_2_at_entry_1224_sample_start_ <-& (R_iNsTr_2_at_entry_1224_sample_start__ps)
          R_iNsTr_2_at_entry_1224_update_start_ <-& (R_iNsTr_2_at_entry_1224_update_start__ps)
          // Phi complete dependency.
          R_iNsTr_2_at_entry_1224_sample_completed__ps <-& (R_iNsTr_2_at_entry_1224_sample_completed_)
          R_iNsTr_2_at_entry_1224_update_completed__ps <-& (R_iNsTr_2_at_entry_1224_update_completed_)
          $phisequencer [ phi_stmt_1220_phi_seq] : 
          phi_stmt_1220_loopback_trigger type_cast_1223_sample_start__ps type_cast_1223_sample_completed__ps type_cast_1223_update_start__ps type_cast_1223_update_completed__ps phi_stmt_1220_entry_trigger R_iNsTr_2_at_entry_1224_sample_start__ps R_iNsTr_2_at_entry_1224_sample_completed__ps R_iNsTr_2_at_entry_1224_update_start__ps R_iNsTr_2_at_entry_1224_update_completed__ps :
          phi_stmt_1220_sample_start__ps phi_stmt_1220_sample_completed__ps phi_stmt_1220_update_start__ps phi_stmt_1220_update_completed__ps :
          phi_stmt_1220_loopback_sample_req_ps phi_stmt_1220_entry_sample_req_ps : 
          phi_stmt_1220_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1220
          // start:  PHI statement phi_stmt_1225
          // 			$phi row18x_x1x_xi := 			  ($cast ($uint<16>) inc76x_xrow18x_x1x_xi ) $on   $loopback 			  row18x_x1x_xi_at_entry $on   $entry 
          // type of target is $uint<16>
          $T[phi_stmt_1225_sample_start_] 
          $T[phi_stmt_1225_sample_completed_] 
          $T[phi_stmt_1225_update_start_] 
          $T[phi_stmt_1225_update_completed_] 
          $T[phi_stmt_1225_sample_start__ps] 
          phi_stmt_1225_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1225_sample_completed__ps] 
          phi_stmt_1225_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1225_update_start__ps] 
          phi_stmt_1225_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1225_update_completed__ps] 
          phi_stmt_1225_update_completed_ <-& (phi_stmt_1225_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1225_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1225_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1225_update_start_)
          $T[phi_stmt_1225_loopback_trigger] 
          phi_stmt_1225_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1225_loopback_sample_req] 
          $T[phi_stmt_1225_loopback_sample_req_ps] 
          phi_stmt_1225_loopback_sample_req <-& (phi_stmt_1225_loopback_sample_req_ps)
          phi_stmt_1225_loopback_sample_req &-> ($null)
          $T[phi_stmt_1225_entry_trigger] 
          phi_stmt_1225_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1225_entry_sample_req] 
          $T[phi_stmt_1225_entry_sample_req_ps] 
          phi_stmt_1225_entry_sample_req <-& (phi_stmt_1225_entry_sample_req_ps)
          phi_stmt_1225_entry_sample_req &-> ($null)
          phi_stmt_1225_update_start_ o<-& (phi_stmt_1225_update_completed_ 0)
          phi_stmt_1225_sample_start_ o<-& (phi_stmt_1225_sample_completed_ 1)
          $T[phi_stmt_1225_merged_reqs] 
          $T[phi_stmt_1225_phi_mux_ack] 
          $T[phi_stmt_1225_phi_mux_ack_ps] 
          phi_stmt_1225_phi_mux_ack_ps <-& (phi_stmt_1225_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1225_update_completed_)
          $T[type_cast_1228_sample_start__ps] 
          $T[type_cast_1228_sample_completed__ps] 
          $T[type_cast_1228_update_start__ps] 
          $T[type_cast_1228_update_completed__ps] 
          // source expression in Phi alternative 0
          // ($cast ($uint<16>) inc76x_xrow18x_x1x_xi )
          $T[type_cast_1228_sample_start_] 
          $T[type_cast_1228_sample_completed_] 
          $T[type_cast_1228_update_start_] 
          $T[type_cast_1228_update_completed_] 
          // inc76x_xrow18x_x1x_xi
          // start: Forward dependencies from inc76x_xrow18x_x1x_xi to transition type_cast_1228_sample_start_
          // done: Forward dependencies from inc76x_xrow18x_x1x_xi to transition type_cast_1228_sample_start_
          ;;[type_cast_1228_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_1228_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_1228_sample_start_ &-> (type_cast_1228_Sample)
          type_cast_1228_sample_completed_ <-& (type_cast_1228_Sample)
          type_cast_1228_sample_completed_ &-> ($null)
          type_cast_1228_update_start_ &-> (type_cast_1228_Update)
          type_cast_1228_update_completed_ <-& (type_cast_1228_Update)
          // RAW reenables for inc76x_xrow18x_x1x_xi
          // self-release: 
          type_cast_1228_sample_start_ o<-& (type_cast_1228_sample_completed_ 1)
          $null &-> (type_cast_1228_update_start_)
          type_cast_1228_update_start_ o<-& (type_cast_1228_update_completed_ 0)
          // Phi start dependency
          type_cast_1228_sample_start_ <-& (type_cast_1228_sample_start__ps)
          type_cast_1228_update_start_ <-& (type_cast_1228_update_start__ps)
          // RAW reenables for ($cast ($uint<16>) inc76x_xrow18x_x1x_xi )
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          type_cast_1228_sample_completed__ps <-& (type_cast_1228_sample_completed_)
          type_cast_1228_update_completed__ps <-& (type_cast_1228_update_completed_)
          $T[R_row18x_x1x_xi_at_entry_1229_sample_start__ps] 
          $T[R_row18x_x1x_xi_at_entry_1229_sample_completed__ps] 
          $T[R_row18x_x1x_xi_at_entry_1229_update_start__ps] 
          $T[R_row18x_x1x_xi_at_entry_1229_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_row18x_x1x_xi_at_entry_1229_sample_start_] 
          $T[R_row18x_x1x_xi_at_entry_1229_sample_completed_] 
          R_row18x_x1x_xi_at_entry_1229_sample_completed_ <-& (R_row18x_x1x_xi_at_entry_1229_sample_start_)
          $T[R_row18x_x1x_xi_at_entry_1229_update_start_] 
          $T [R_row18x_x1x_xi_at_entry_1229_update_completed_] $delay 
          R_row18x_x1x_xi_at_entry_1229_update_completed_ <-& (R_row18x_x1x_xi_at_entry_1229_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_row18x_x1x_xi_at_entry_1229_sample_start_ <-& (R_row18x_x1x_xi_at_entry_1229_sample_start__ps)
          R_row18x_x1x_xi_at_entry_1229_update_start_ <-& (R_row18x_x1x_xi_at_entry_1229_update_start__ps)
          // Phi complete dependency.
          R_row18x_x1x_xi_at_entry_1229_sample_completed__ps <-& (R_row18x_x1x_xi_at_entry_1229_sample_completed_)
          R_row18x_x1x_xi_at_entry_1229_update_completed__ps <-& (R_row18x_x1x_xi_at_entry_1229_update_completed_)
          $phisequencer [ phi_stmt_1225_phi_seq] : 
          phi_stmt_1225_loopback_trigger type_cast_1228_sample_start__ps type_cast_1228_sample_completed__ps type_cast_1228_update_start__ps type_cast_1228_update_completed__ps phi_stmt_1225_entry_trigger R_row18x_x1x_xi_at_entry_1229_sample_start__ps R_row18x_x1x_xi_at_entry_1229_sample_completed__ps R_row18x_x1x_xi_at_entry_1229_update_start__ps R_row18x_x1x_xi_at_entry_1229_update_completed__ps :
          phi_stmt_1225_sample_start__ps phi_stmt_1225_sample_completed__ps phi_stmt_1225_update_start__ps phi_stmt_1225_update_completed__ps :
          phi_stmt_1225_loopback_sample_req_ps phi_stmt_1225_entry_sample_req_ps : 
          phi_stmt_1225_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1225
          // start:  PHI statement phi_stmt_1230
          // 			$phi colx_x1x_xi := 			  ($cast ($uint<16>) colx_x2x_xi ) $on   $loopback 			  colx_x1x_xi_at_entry $on   $entry 
          // type of target is $uint<16>
          $T[phi_stmt_1230_sample_start_] 
          $T[phi_stmt_1230_sample_completed_] 
          $T[phi_stmt_1230_update_start_] 
          $T[phi_stmt_1230_update_completed_] 
          $T[phi_stmt_1230_sample_start__ps] 
          phi_stmt_1230_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1230_sample_completed__ps] 
          phi_stmt_1230_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1230_update_start__ps] 
          phi_stmt_1230_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1230_update_completed__ps] 
          phi_stmt_1230_update_completed_ <-& (phi_stmt_1230_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1230_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1230_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1230_update_start_)
          $T[phi_stmt_1230_loopback_trigger] 
          phi_stmt_1230_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1230_loopback_sample_req] 
          $T[phi_stmt_1230_loopback_sample_req_ps] 
          phi_stmt_1230_loopback_sample_req <-& (phi_stmt_1230_loopback_sample_req_ps)
          phi_stmt_1230_loopback_sample_req &-> ($null)
          $T[phi_stmt_1230_entry_trigger] 
          phi_stmt_1230_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1230_entry_sample_req] 
          $T[phi_stmt_1230_entry_sample_req_ps] 
          phi_stmt_1230_entry_sample_req <-& (phi_stmt_1230_entry_sample_req_ps)
          phi_stmt_1230_entry_sample_req &-> ($null)
          phi_stmt_1230_update_start_ o<-& (phi_stmt_1230_update_completed_ 0)
          phi_stmt_1230_sample_start_ o<-& (phi_stmt_1230_sample_completed_ 1)
          $T[phi_stmt_1230_merged_reqs] 
          $T[phi_stmt_1230_phi_mux_ack] 
          $T[phi_stmt_1230_phi_mux_ack_ps] 
          phi_stmt_1230_phi_mux_ack_ps <-& (phi_stmt_1230_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1230_update_completed_)
          $T[type_cast_1233_sample_start__ps] 
          $T[type_cast_1233_sample_completed__ps] 
          $T[type_cast_1233_update_start__ps] 
          $T[type_cast_1233_update_completed__ps] 
          // source expression in Phi alternative 0
          // ($cast ($uint<16>) colx_x2x_xi )
          $T[type_cast_1233_sample_start_] 
          $T[type_cast_1233_sample_completed_] 
          $T[type_cast_1233_update_start_] 
          $T[type_cast_1233_update_completed_] 
          // colx_x2x_xi
          // start: Forward dependencies from colx_x2x_xi to transition type_cast_1233_sample_start_
          // done: Forward dependencies from colx_x2x_xi to transition type_cast_1233_sample_start_
          ;;[type_cast_1233_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_1233_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_1233_sample_start_ &-> (type_cast_1233_Sample)
          type_cast_1233_sample_completed_ <-& (type_cast_1233_Sample)
          type_cast_1233_sample_completed_ &-> ($null)
          type_cast_1233_update_start_ &-> (type_cast_1233_Update)
          type_cast_1233_update_completed_ <-& (type_cast_1233_Update)
          // RAW reenables for colx_x2x_xi
          // self-release: 
          type_cast_1233_sample_start_ o<-& (type_cast_1233_sample_completed_ 1)
          $null &-> (type_cast_1233_update_start_)
          type_cast_1233_update_start_ o<-& (type_cast_1233_update_completed_ 0)
          // Phi start dependency
          type_cast_1233_sample_start_ <-& (type_cast_1233_sample_start__ps)
          type_cast_1233_update_start_ <-& (type_cast_1233_update_start__ps)
          // RAW reenables for ($cast ($uint<16>) colx_x2x_xi )
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          type_cast_1233_sample_completed__ps <-& (type_cast_1233_sample_completed_)
          type_cast_1233_update_completed__ps <-& (type_cast_1233_update_completed_)
          $T[R_colx_x1x_xi_at_entry_1234_sample_start__ps] 
          $T[R_colx_x1x_xi_at_entry_1234_sample_completed__ps] 
          $T[R_colx_x1x_xi_at_entry_1234_update_start__ps] 
          $T[R_colx_x1x_xi_at_entry_1234_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_colx_x1x_xi_at_entry_1234_sample_start_] 
          $T[R_colx_x1x_xi_at_entry_1234_sample_completed_] 
          R_colx_x1x_xi_at_entry_1234_sample_completed_ <-& (R_colx_x1x_xi_at_entry_1234_sample_start_)
          $T[R_colx_x1x_xi_at_entry_1234_update_start_] 
          $T [R_colx_x1x_xi_at_entry_1234_update_completed_] $delay 
          R_colx_x1x_xi_at_entry_1234_update_completed_ <-& (R_colx_x1x_xi_at_entry_1234_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_colx_x1x_xi_at_entry_1234_sample_start_ <-& (R_colx_x1x_xi_at_entry_1234_sample_start__ps)
          R_colx_x1x_xi_at_entry_1234_update_start_ <-& (R_colx_x1x_xi_at_entry_1234_update_start__ps)
          // Phi complete dependency.
          R_colx_x1x_xi_at_entry_1234_sample_completed__ps <-& (R_colx_x1x_xi_at_entry_1234_sample_completed_)
          R_colx_x1x_xi_at_entry_1234_update_completed__ps <-& (R_colx_x1x_xi_at_entry_1234_update_completed_)
          $phisequencer [ phi_stmt_1230_phi_seq] : 
          phi_stmt_1230_loopback_trigger type_cast_1233_sample_start__ps type_cast_1233_sample_completed__ps type_cast_1233_update_start__ps type_cast_1233_update_completed__ps phi_stmt_1230_entry_trigger R_colx_x1x_xi_at_entry_1234_sample_start__ps R_colx_x1x_xi_at_entry_1234_sample_completed__ps R_colx_x1x_xi_at_entry_1234_update_start__ps R_colx_x1x_xi_at_entry_1234_update_completed__ps :
          phi_stmt_1230_sample_start__ps phi_stmt_1230_sample_completed__ps phi_stmt_1230_update_start__ps phi_stmt_1230_update_completed__ps :
          phi_stmt_1230_loopback_sample_req_ps phi_stmt_1230_entry_sample_req_ps : 
          phi_stmt_1230_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1230
          // start:  PHI statement phi_stmt_1235
          // 			$phi chlx_x0x_xi := 			  ($cast ($uint<16>) chlx_x1x_xi ) $on   $loopback 			  chlx_x0x_xi_at_entry $on   $entry 
          // type of target is $uint<16>
          $T[phi_stmt_1235_sample_start_] 
          $T[phi_stmt_1235_sample_completed_] 
          $T[phi_stmt_1235_update_start_] 
          $T[phi_stmt_1235_update_completed_] 
          $T[phi_stmt_1235_sample_start__ps] 
          phi_stmt_1235_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1235_sample_completed__ps] 
          phi_stmt_1235_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1235_update_start__ps] 
          phi_stmt_1235_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1235_update_completed__ps] 
          phi_stmt_1235_update_completed_ <-& (phi_stmt_1235_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1235_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1235_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1235_update_start_)
          $T[phi_stmt_1235_loopback_trigger] 
          phi_stmt_1235_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1235_loopback_sample_req] 
          $T[phi_stmt_1235_loopback_sample_req_ps] 
          phi_stmt_1235_loopback_sample_req <-& (phi_stmt_1235_loopback_sample_req_ps)
          phi_stmt_1235_loopback_sample_req &-> ($null)
          $T[phi_stmt_1235_entry_trigger] 
          phi_stmt_1235_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1235_entry_sample_req] 
          $T[phi_stmt_1235_entry_sample_req_ps] 
          phi_stmt_1235_entry_sample_req <-& (phi_stmt_1235_entry_sample_req_ps)
          phi_stmt_1235_entry_sample_req &-> ($null)
          phi_stmt_1235_update_start_ o<-& (phi_stmt_1235_update_completed_ 0)
          phi_stmt_1235_sample_start_ o<-& (phi_stmt_1235_sample_completed_ 1)
          $T[phi_stmt_1235_merged_reqs] 
          $T[phi_stmt_1235_phi_mux_ack] 
          $T[phi_stmt_1235_phi_mux_ack_ps] 
          phi_stmt_1235_phi_mux_ack_ps <-& (phi_stmt_1235_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1235_update_completed_)
          $T[type_cast_1238_sample_start__ps] 
          $T[type_cast_1238_sample_completed__ps] 
          $T[type_cast_1238_update_start__ps] 
          $T[type_cast_1238_update_completed__ps] 
          // source expression in Phi alternative 0
          // ($cast ($uint<16>) chlx_x1x_xi )
          $T[type_cast_1238_sample_start_] 
          $T[type_cast_1238_sample_completed_] 
          $T[type_cast_1238_update_start_] 
          $T[type_cast_1238_update_completed_] 
          // chlx_x1x_xi
          // start: Forward dependencies from chlx_x1x_xi to transition type_cast_1238_sample_start_
          // done: Forward dependencies from chlx_x1x_xi to transition type_cast_1238_sample_start_
          ;;[type_cast_1238_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_1238_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_1238_sample_start_ &-> (type_cast_1238_Sample)
          type_cast_1238_sample_completed_ <-& (type_cast_1238_Sample)
          type_cast_1238_sample_completed_ &-> ($null)
          type_cast_1238_update_start_ &-> (type_cast_1238_Update)
          type_cast_1238_update_completed_ <-& (type_cast_1238_Update)
          // RAW reenables for chlx_x1x_xi
          // self-release: 
          type_cast_1238_sample_start_ o<-& (type_cast_1238_sample_completed_ 1)
          $null &-> (type_cast_1238_update_start_)
          type_cast_1238_update_start_ o<-& (type_cast_1238_update_completed_ 0)
          // Phi start dependency
          type_cast_1238_sample_start_ <-& (type_cast_1238_sample_start__ps)
          type_cast_1238_update_start_ <-& (type_cast_1238_update_start__ps)
          // RAW reenables for ($cast ($uint<16>) chlx_x1x_xi )
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          type_cast_1238_sample_completed__ps <-& (type_cast_1238_sample_completed_)
          type_cast_1238_update_completed__ps <-& (type_cast_1238_update_completed_)
          $T[R_chlx_x0x_xi_at_entry_1239_sample_start__ps] 
          $T[R_chlx_x0x_xi_at_entry_1239_sample_completed__ps] 
          $T[R_chlx_x0x_xi_at_entry_1239_update_start__ps] 
          $T[R_chlx_x0x_xi_at_entry_1239_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_chlx_x0x_xi_at_entry_1239_sample_start_] 
          $T[R_chlx_x0x_xi_at_entry_1239_sample_completed_] 
          R_chlx_x0x_xi_at_entry_1239_sample_completed_ <-& (R_chlx_x0x_xi_at_entry_1239_sample_start_)
          $T[R_chlx_x0x_xi_at_entry_1239_update_start_] 
          $T [R_chlx_x0x_xi_at_entry_1239_update_completed_] $delay 
          R_chlx_x0x_xi_at_entry_1239_update_completed_ <-& (R_chlx_x0x_xi_at_entry_1239_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_chlx_x0x_xi_at_entry_1239_sample_start_ <-& (R_chlx_x0x_xi_at_entry_1239_sample_start__ps)
          R_chlx_x0x_xi_at_entry_1239_update_start_ <-& (R_chlx_x0x_xi_at_entry_1239_update_start__ps)
          // Phi complete dependency.
          R_chlx_x0x_xi_at_entry_1239_sample_completed__ps <-& (R_chlx_x0x_xi_at_entry_1239_sample_completed_)
          R_chlx_x0x_xi_at_entry_1239_update_completed__ps <-& (R_chlx_x0x_xi_at_entry_1239_update_completed_)
          $phisequencer [ phi_stmt_1235_phi_seq] : 
          phi_stmt_1235_loopback_trigger type_cast_1238_sample_start__ps type_cast_1238_sample_completed__ps type_cast_1238_update_start__ps type_cast_1238_update_completed__ps phi_stmt_1235_entry_trigger R_chlx_x0x_xi_at_entry_1239_sample_start__ps R_chlx_x0x_xi_at_entry_1239_sample_completed__ps R_chlx_x0x_xi_at_entry_1239_update_start__ps R_chlx_x0x_xi_at_entry_1239_update_completed__ps :
          phi_stmt_1235_sample_start__ps phi_stmt_1235_sample_completed__ps phi_stmt_1235_update_start__ps phi_stmt_1235_update_completed__ps :
          phi_stmt_1235_loopback_sample_req_ps phi_stmt_1235_entry_sample_req_ps : 
          phi_stmt_1235_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1235
          // start:  			conv31x_xi := ($cast ($uint<32>) chlx_x0x_xi ) $buffering 1// bits of buffering = 32. 
          //  file prog.linked.opt.aa, line 409
          // Source expression
          // ($cast ($uint<32>) chlx_x0x_xi )
          $T[type_cast_1243_sample_start_] 
          $T[type_cast_1243_sample_completed_] 
          $T[type_cast_1243_update_start_] 
          $T[type_cast_1243_update_completed_] 
          // chlx_x0x_xi
          // start: Forward dependencies from chlx_x0x_xi to transition type_cast_1243_sample_start_
          type_cast_1243_sample_start_ <-& (phi_stmt_1235_update_completed_)
          // done: Forward dependencies from chlx_x0x_xi to transition type_cast_1243_sample_start_
          ;;[type_cast_1243_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_1243_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_1243_sample_start_ &-> (type_cast_1243_Sample)
          type_cast_1243_sample_completed_ <-& (type_cast_1243_Sample)
          type_cast_1243_sample_completed_ &-> ($null)
          type_cast_1243_update_start_ &-> (type_cast_1243_Update)
          type_cast_1243_update_completed_ <-& (type_cast_1243_Update)
          // RAW reenables for chlx_x0x_xi
          phi_stmt_1235_update_start_ o<-& (type_cast_1243_sample_completed_ 0)
          // self-release: 
          type_cast_1243_sample_start_ o<-& (type_cast_1243_sample_completed_ 1)
          $null &-> (type_cast_1243_update_start_)
          type_cast_1243_update_start_ o<-& (type_cast_1243_update_completed_ 0)
          // Target expression
          // (as target) conv31x_xi
          // start: WAR dependencies for conv31x_xi
          // done: WAR dependencies for conv31x_xi
          // end:  			conv31x_xi := ($cast ($uint<32>) chlx_x0x_xi ) $buffering 1// bits of buffering = 32. 
          // start:  			conv35x_xi := ($cast ($uint<32>) colx_x1x_xi ) $buffering 1// bits of buffering = 32. 
          //  file prog.linked.opt.aa, line 410
          // Source expression
          // ($cast ($uint<32>) colx_x1x_xi )
          $T[type_cast_1247_sample_start_] 
          $T[type_cast_1247_sample_completed_] 
          $T[type_cast_1247_update_start_] 
          $T[type_cast_1247_update_completed_] 
          // colx_x1x_xi
          // start: Forward dependencies from colx_x1x_xi to transition type_cast_1247_sample_start_
          type_cast_1247_sample_start_ <-& (phi_stmt_1230_update_completed_)
          // done: Forward dependencies from colx_x1x_xi to transition type_cast_1247_sample_start_
          ;;[type_cast_1247_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_1247_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_1247_sample_start_ &-> (type_cast_1247_Sample)
          type_cast_1247_sample_completed_ <-& (type_cast_1247_Sample)
          type_cast_1247_sample_completed_ &-> ($null)
          type_cast_1247_update_start_ &-> (type_cast_1247_Update)
          type_cast_1247_update_completed_ <-& (type_cast_1247_Update)
          // RAW reenables for colx_x1x_xi
          phi_stmt_1230_update_start_ o<-& (type_cast_1247_sample_completed_ 0)
          // self-release: 
          type_cast_1247_sample_start_ o<-& (type_cast_1247_sample_completed_ 1)
          $null &-> (type_cast_1247_update_start_)
          type_cast_1247_update_start_ o<-& (type_cast_1247_update_completed_ 0)
          // Target expression
          // (as target) conv35x_xi
          // start: WAR dependencies for conv35x_xi
          // done: WAR dependencies for conv35x_xi
          // end:  			conv35x_xi := ($cast ($uint<32>) colx_x1x_xi ) $buffering 1// bits of buffering = 32. 
          // start:  			conv39x_xi := ($cast ($uint<32>) row18x_x1x_xi ) $buffering 1// bits of buffering = 32. 
          //  file prog.linked.opt.aa, line 411
          // Source expression
          // ($cast ($uint<32>) row18x_x1x_xi )
          $T[type_cast_1251_sample_start_] 
          $T[type_cast_1251_sample_completed_] 
          $T[type_cast_1251_update_start_] 
          $T[type_cast_1251_update_completed_] 
          // row18x_x1x_xi
          // start: Forward dependencies from row18x_x1x_xi to transition type_cast_1251_sample_start_
          type_cast_1251_sample_start_ <-& (phi_stmt_1225_update_completed_)
          // done: Forward dependencies from row18x_x1x_xi to transition type_cast_1251_sample_start_
          ;;[type_cast_1251_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_1251_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_1251_sample_start_ &-> (type_cast_1251_Sample)
          type_cast_1251_sample_completed_ <-& (type_cast_1251_Sample)
          type_cast_1251_sample_completed_ &-> ($null)
          type_cast_1251_update_start_ &-> (type_cast_1251_Update)
          type_cast_1251_update_completed_ <-& (type_cast_1251_Update)
          // RAW reenables for row18x_x1x_xi
          phi_stmt_1225_update_start_ o<-& (type_cast_1251_sample_completed_ 0)
          // self-release: 
          type_cast_1251_sample_start_ o<-& (type_cast_1251_sample_completed_ 1)
          $null &-> (type_cast_1251_update_start_)
          type_cast_1251_update_start_ o<-& (type_cast_1251_update_completed_ 0)
          // Target expression
          // (as target) conv39x_xi
          // start: WAR dependencies for conv39x_xi
          // done: WAR dependencies for conv39x_xi
          // end:  			conv39x_xi := ($cast ($uint<32>) row18x_x1x_xi ) $buffering 1// bits of buffering = 32. 
          // start: WAR dependencies for mul40x_xi
          // done: WAR dependencies for mul40x_xi
          // start:  			$volatile mul40x_xi := (conv39x_xi * ($bitcast ($uint<32>) _b00000000000000000000000001110000  )) $buffering 1
          //  file prog.linked.opt.aa, line 412
          // volatile! 
          // Source expression
          // (conv39x_xi * ($bitcast ($uint<32>) _b00000000000000000000000001110000  ))
          // conv39x_xi
          // Target expression
          // (as target) mul40x_xi
          // start: WAR dependencies for mul40x_xi
          // done: WAR dependencies for mul40x_xi
          // end:  			$volatile mul40x_xi := (conv39x_xi * ($bitcast ($uint<32>) _b00000000000000000000000001110000  )) $buffering 1
          // start: WAR dependencies for add41x_xi
          // done: WAR dependencies for add41x_xi
          // start:  			$volatile add41x_xi := (conv35x_xi + mul40x_xi) $buffering 1
          //  file prog.linked.opt.aa, line 413
          // volatile! 
          // Source expression
          // (conv35x_xi + mul40x_xi)
          // conv35x_xi
          // mul40x_xi
          // Target expression
          // (as target) add41x_xi
          // start: WAR dependencies for add41x_xi
          // done: WAR dependencies for add41x_xi
          // end:  			$volatile add41x_xi := (conv35x_xi + mul40x_xi) $buffering 1
          // start: WAR dependencies for shlx_xi
          // done: WAR dependencies for shlx_xi
          // start:  			$volatile shlx_xi := (add41x_xi << ($bitcast ($uint<32>) _b00000000000000000000000000000101  )) $buffering 1
          //  file prog.linked.opt.aa, line 414
          // volatile! 
          // Source expression
          // (add41x_xi << ($bitcast ($uint<32>) _b00000000000000000000000000000101  ))
          // add41x_xi
          // Target expression
          // (as target) shlx_xi
          // start: WAR dependencies for shlx_xi
          // done: WAR dependencies for shlx_xi
          // end:  			$volatile shlx_xi := (add41x_xi << ($bitcast ($uint<32>) _b00000000000000000000000000000101  )) $buffering 1
          // start: WAR dependencies for add43x_xi
          // done: WAR dependencies for add43x_xi
          // start:  			$volatile add43x_xi := (shlx_xi + conv31x_xi) $buffering 1
          //  file prog.linked.opt.aa, line 415
          // volatile! 
          // Source expression
          // (shlx_xi + conv31x_xi)
          // shlx_xi
          // conv31x_xi
          // Target expression
          // (as target) add43x_xi
          // start: WAR dependencies for add43x_xi
          // done: WAR dependencies for add43x_xi
          // end:  			$volatile add43x_xi := (shlx_xi + conv31x_xi) $buffering 1
          // start: WAR dependencies for add50x_xi
          // done: WAR dependencies for add50x_xi
          // start:  			$volatile add50x_xi := (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000000000010000  )) $buffering 1
          //  file prog.linked.opt.aa, line 416
          // volatile! 
          // Source expression
          // (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000000000010000  ))
          // add43x_xi
          // Target expression
          // (as target) add50x_xi
          // start: WAR dependencies for add50x_xi
          // done: WAR dependencies for add50x_xi
          // end:  			$volatile add50x_xi := (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000000000010000  )) $buffering 1
          // start: WAR dependencies for add54x_xi
          // done: WAR dependencies for add54x_xi
          // start:  			$volatile add54x_xi := (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000011100000000  )) $buffering 1
          //  file prog.linked.opt.aa, line 417
          // volatile! 
          // Source expression
          // (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000011100000000  ))
          // add43x_xi
          // Target expression
          // (as target) add54x_xi
          // start: WAR dependencies for add54x_xi
          // done: WAR dependencies for add54x_xi
          // end:  			$volatile add54x_xi := (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000011100000000  )) $buffering 1
          // start: WAR dependencies for add57x_xi
          // done: WAR dependencies for add57x_xi
          // start:  			$volatile add57x_xi := (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000011100010000  )) $buffering 1
          //  file prog.linked.opt.aa, line 418
          // volatile! 
          // Source expression
          // (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000011100010000  ))
          // add43x_xi
          // Target expression
          // (as target) add57x_xi
          // start: WAR dependencies for add57x_xi
          // done: WAR dependencies for add57x_xi
          // end:  			$volatile add57x_xi := (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000011100010000  )) $buffering 1
          // start:  			iNsTr_2_1278_delayed_1_0 := iNsTr_2 $buffering 1 $cut_through // bits of buffering = 32. 
          //  file prog.linked.opt.aa, line 419
          $T[assign_stmt_1295_sample_start_] 
          $T[assign_stmt_1295_sample_completed_] 
          $T[assign_stmt_1295_update_start_] 
          $T[assign_stmt_1295_update_completed_] 
          // Source expression
          // iNsTr_2
          // Target expression
          // (as target) iNsTr_2_1278_delayed_1_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_1295_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_1295_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_1295_sample_start_ &-> (assign_stmt_1295_Sample)
          assign_stmt_1295_sample_completed_ <-& (assign_stmt_1295_Sample)
          assign_stmt_1295_sample_completed_ &-> ($null)
          assign_stmt_1295_update_start_ &-> (assign_stmt_1295_Update)
          assign_stmt_1295_update_completed_ <-& (assign_stmt_1295_Update)
          // start: Forward dependencies from iNsTr_2 to transition assign_stmt_1295_sample_start_
          assign_stmt_1295_sample_start_ <-& (phi_stmt_1220_update_completed_)
          // done: Forward dependencies from iNsTr_2 to transition assign_stmt_1295_sample_start_
          // RAW reenables for iNsTr_2
          phi_stmt_1220_update_start_ o<-& (assign_stmt_1295_sample_completed_ 0)
          // self-release: 
          assign_stmt_1295_sample_start_ o<-& (assign_stmt_1295_sample_completed_ 1)
          $null &-> (assign_stmt_1295_update_start_)
          assign_stmt_1295_update_start_ o<-& (assign_stmt_1295_update_completed_ 0)
          // start: WAR dependencies for iNsTr_2_1278_delayed_1_0
          // done: WAR dependencies for iNsTr_2_1278_delayed_1_0
          // end:  			iNsTr_2_1278_delayed_1_0 := iNsTr_2 $buffering 1 $cut_through // bits of buffering = 32. 
          // start: 			$call maxPool4 (iNsTr_2_1278_delayed_1_0 add43x_xi add50x_xi add54x_xi add57x_xi ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000000  ) ) (callx_xi ) 
          //  file prog.linked.opt.aa, line 420
          $T[call_stmt_1306_sample_start_] 
          $T[call_stmt_1306_sample_completed_] 
          $T[call_stmt_1306_update_start_] 
          $T[call_stmt_1306_update_completed_] 
          // Call input argument 0
          // iNsTr_2_1278_delayed_1_0
          // Call input argument 1
          // add43x_xi
          // Call input argument 2
          // add50x_xi
          // Call input argument 3
          // add54x_xi
          // Call input argument 4
          // add57x_xi
          // Call input argument 5
          // Call input argument 6
          // start: Forward dependencies from iNsTr_2_1278_delayed_1_0 to transition call_stmt_1306_sample_start_
          call_stmt_1306_sample_start_ <-& (assign_stmt_1295_update_completed_)
          // done: Forward dependencies from iNsTr_2_1278_delayed_1_0 to transition call_stmt_1306_sample_start_
          // RAW reenables for iNsTr_2_1278_delayed_1_0
          assign_stmt_1295_update_start_ o<-& (call_stmt_1306_sample_completed_ 0)
          // start: Forward dependencies from add43x_xi to transition call_stmt_1306_sample_start_
          call_stmt_1306_sample_start_ <-& (type_cast_1243_update_completed_)
          call_stmt_1306_sample_start_ <-& (type_cast_1247_update_completed_)
          call_stmt_1306_sample_start_ <-& (type_cast_1251_update_completed_)
          // done: Forward dependencies from add43x_xi to transition call_stmt_1306_sample_start_
          // RAW reenables for add43x_xi
          type_cast_1243_update_start_ o<-& (call_stmt_1306_sample_completed_ 0)
          type_cast_1247_update_start_ o<-& (call_stmt_1306_sample_completed_ 0)
          type_cast_1251_update_start_ o<-& (call_stmt_1306_sample_completed_ 0)
          // start: Forward dependencies from add50x_xi to transition call_stmt_1306_sample_start_
          call_stmt_1306_sample_start_ <-& (type_cast_1243_update_completed_)
          call_stmt_1306_sample_start_ <-& (type_cast_1247_update_completed_)
          call_stmt_1306_sample_start_ <-& (type_cast_1251_update_completed_)
          // done: Forward dependencies from add50x_xi to transition call_stmt_1306_sample_start_
          // RAW reenables for add50x_xi
          type_cast_1243_update_start_ o<-& (call_stmt_1306_sample_completed_ 0)
          type_cast_1247_update_start_ o<-& (call_stmt_1306_sample_completed_ 0)
          type_cast_1251_update_start_ o<-& (call_stmt_1306_sample_completed_ 0)
          // start: Forward dependencies from add54x_xi to transition call_stmt_1306_sample_start_
          call_stmt_1306_sample_start_ <-& (type_cast_1243_update_completed_)
          call_stmt_1306_sample_start_ <-& (type_cast_1247_update_completed_)
          call_stmt_1306_sample_start_ <-& (type_cast_1251_update_completed_)
          // done: Forward dependencies from add54x_xi to transition call_stmt_1306_sample_start_
          // RAW reenables for add54x_xi
          type_cast_1243_update_start_ o<-& (call_stmt_1306_sample_completed_ 0)
          type_cast_1247_update_start_ o<-& (call_stmt_1306_sample_completed_ 0)
          type_cast_1251_update_start_ o<-& (call_stmt_1306_sample_completed_ 0)
          // start: Forward dependencies from add57x_xi to transition call_stmt_1306_sample_start_
          call_stmt_1306_sample_start_ <-& (type_cast_1243_update_completed_)
          call_stmt_1306_sample_start_ <-& (type_cast_1247_update_completed_)
          call_stmt_1306_sample_start_ <-& (type_cast_1251_update_completed_)
          // done: Forward dependencies from add57x_xi to transition call_stmt_1306_sample_start_
          // RAW reenables for add57x_xi
          type_cast_1243_update_start_ o<-& (call_stmt_1306_sample_completed_ 0)
          type_cast_1247_update_start_ o<-& (call_stmt_1306_sample_completed_ 0)
          type_cast_1251_update_start_ o<-& (call_stmt_1306_sample_completed_ 0)
          ;;[call_stmt_1306_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_1306_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_1306_sample_start_ &-> (call_stmt_1306_Sample)
          call_stmt_1306_sample_completed_ <-& (call_stmt_1306_Sample)
          call_stmt_1306_sample_completed_ &-> ($null)
          call_stmt_1306_update_start_ &-> (call_stmt_1306_Update)
          call_stmt_1306_update_completed_ <-& (call_stmt_1306_Update)
          // Call output argument 0
          // (as target) callx_xi
          // self-release: 
          call_stmt_1306_sample_start_ o<-& (call_stmt_1306_sample_completed_ 1)
          $null &-> (call_stmt_1306_update_start_)
          call_stmt_1306_update_start_ o<-& (call_stmt_1306_update_completed_ 0)
          // start: WAR dependencies for callx_xi
          // done: WAR dependencies for callx_xi
          // end: 			$call maxPool4 (iNsTr_2_1278_delayed_1_0 add43x_xi add50x_xi add54x_xi add57x_xi ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000000  ) ) (callx_xi ) 
          // start: WAR dependencies for incx_xi
          // done: WAR dependencies for incx_xi
          // start:  			$volatile incx_xi := (chlx_x0x_xi + ($bitcast ($uint<16>) _b0000000000000001  )) $buffering 1
          //  file prog.linked.opt.aa, line 421
          // volatile! 
          // Source expression
          // (chlx_x0x_xi + ($bitcast ($uint<16>) _b0000000000000001  ))
          // chlx_x0x_xi
          // Target expression
          // (as target) incx_xi
          // start: WAR dependencies for incx_xi
          // done: WAR dependencies for incx_xi
          // end:  			$volatile incx_xi := (chlx_x0x_xi + ($bitcast ($uint<16>) _b0000000000000001  )) $buffering 1
          // start: WAR dependencies for cmpx_xi
          // done: WAR dependencies for cmpx_xi
          // start:  			$volatile cmpx_xi := (incx_xi == ($bitcast ($uint<16>) _b0000000000010000  )) $buffering 1
          //  file prog.linked.opt.aa, line 422
          // volatile! 
          // Source expression
          // (incx_xi == ($bitcast ($uint<16>) _b0000000000010000  ))
          // incx_xi
          // Target expression
          // (as target) cmpx_xi
          // start: WAR dependencies for cmpx_xi
          // done: WAR dependencies for cmpx_xi
          // end:  			$volatile cmpx_xi := (incx_xi == ($bitcast ($uint<16>) _b0000000000010000  )) $buffering 1
          // start:  			inc67x_xi := ($cast ($uint<16>) cmpx_xi ) $buffering 1// bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 423
          // Source expression
          // ($cast ($uint<16>) cmpx_xi )
          $T[type_cast_1321_sample_start_] 
          $T[type_cast_1321_sample_completed_] 
          $T[type_cast_1321_update_start_] 
          $T[type_cast_1321_update_completed_] 
          // cmpx_xi
          // start: Forward dependencies from cmpx_xi to transition type_cast_1321_sample_start_
          type_cast_1321_sample_start_ <-& (phi_stmt_1235_update_completed_)
          // done: Forward dependencies from cmpx_xi to transition type_cast_1321_sample_start_
          ;;[type_cast_1321_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_1321_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_1321_sample_start_ &-> (type_cast_1321_Sample)
          type_cast_1321_sample_completed_ <-& (type_cast_1321_Sample)
          type_cast_1321_sample_completed_ &-> ($null)
          type_cast_1321_update_start_ &-> (type_cast_1321_Update)
          type_cast_1321_update_completed_ <-& (type_cast_1321_Update)
          // RAW reenables for cmpx_xi
          phi_stmt_1235_update_start_ o<-& (type_cast_1321_sample_completed_ 0)
          // self-release: 
          type_cast_1321_sample_start_ o<-& (type_cast_1321_sample_completed_ 1)
          $null &-> (type_cast_1321_update_start_)
          type_cast_1321_update_start_ o<-& (type_cast_1321_update_completed_ 0)
          // Target expression
          // (as target) inc67x_xi
          // start: WAR dependencies for inc67x_xi
          // done: WAR dependencies for inc67x_xi
          // end:  			inc67x_xi := ($cast ($uint<16>) cmpx_xi ) $buffering 1// bits of buffering = 16. 
          // start:  			colx_x1x_xi_1307_delayed_1_0 := colx_x1x_xi $buffering 1 $cut_through // bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 424
          $T[assign_stmt_1325_sample_start_] 
          $T[assign_stmt_1325_sample_completed_] 
          $T[assign_stmt_1325_update_start_] 
          $T[assign_stmt_1325_update_completed_] 
          // Source expression
          // colx_x1x_xi
          // Target expression
          // (as target) colx_x1x_xi_1307_delayed_1_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_1325_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_1325_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_1325_sample_start_ &-> (assign_stmt_1325_Sample)
          assign_stmt_1325_sample_completed_ <-& (assign_stmt_1325_Sample)
          assign_stmt_1325_sample_completed_ &-> ($null)
          assign_stmt_1325_update_start_ &-> (assign_stmt_1325_Update)
          assign_stmt_1325_update_completed_ <-& (assign_stmt_1325_Update)
          // start: Forward dependencies from colx_x1x_xi to transition assign_stmt_1325_sample_start_
          assign_stmt_1325_sample_start_ <-& (phi_stmt_1230_update_completed_)
          // done: Forward dependencies from colx_x1x_xi to transition assign_stmt_1325_sample_start_
          // RAW reenables for colx_x1x_xi
          phi_stmt_1230_update_start_ o<-& (assign_stmt_1325_sample_completed_ 0)
          // self-release: 
          assign_stmt_1325_sample_start_ o<-& (assign_stmt_1325_sample_completed_ 1)
          $null &-> (assign_stmt_1325_update_start_)
          assign_stmt_1325_update_start_ o<-& (assign_stmt_1325_update_completed_ 0)
          // start: WAR dependencies for colx_x1x_xi_1307_delayed_1_0
          // done: WAR dependencies for colx_x1x_xi_1307_delayed_1_0
          // end:  			colx_x1x_xi_1307_delayed_1_0 := colx_x1x_xi $buffering 1 $cut_through // bits of buffering = 16. 
          // start: WAR dependencies for inc67x_xcolx_x1x_xi
          // done: WAR dependencies for inc67x_xcolx_x1x_xi
          // start:  			$volatile inc67x_xcolx_x1x_xi := (inc67x_xi + colx_x1x_xi_1307_delayed_1_0) $buffering 1
          //  file prog.linked.opt.aa, line 425
          // volatile! 
          // Source expression
          // (inc67x_xi + colx_x1x_xi_1307_delayed_1_0)
          // inc67x_xi
          // colx_x1x_xi_1307_delayed_1_0
          // Target expression
          // (as target) inc67x_xcolx_x1x_xi
          // start: WAR dependencies for inc67x_xcolx_x1x_xi
          // done: WAR dependencies for inc67x_xcolx_x1x_xi
          // end:  			$volatile inc67x_xcolx_x1x_xi := (inc67x_xi + colx_x1x_xi_1307_delayed_1_0) $buffering 1
          // start: WAR dependencies for chlx_x1x_xi
          // WAR dependency: Read: chlx_x1x_xi before Write: 			$volatile chlx_x1x_xi := ( $mux cmpx_xi ($bitcast ($uint<16>) _b0000000000000000  )  incx_xi )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for chlx_x1x_xi
          // start:  			$volatile chlx_x1x_xi := ( $mux cmpx_xi ($bitcast ($uint<16>) _b0000000000000000  )  incx_xi )  $buffering 1
          //  file prog.linked.opt.aa, line 426
          // volatile! 
          // Source expression
          // ( $mux cmpx_xi ($bitcast ($uint<16>) _b0000000000000000  )  incx_xi ) 
          // cmpx_xi
          // incx_xi
          // Target expression
          // (as target) chlx_x1x_xi
          // start: WAR dependencies for chlx_x1x_xi
          // WAR dependency: Read: chlx_x1x_xi before Write: 			$volatile chlx_x1x_xi := ( $mux cmpx_xi ($bitcast ($uint<16>) _b0000000000000000  )  incx_xi )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for chlx_x1x_xi
          // end:  			$volatile chlx_x1x_xi := ( $mux cmpx_xi ($bitcast ($uint<16>) _b0000000000000000  )  incx_xi )  $buffering 1
          // start: WAR dependencies for cmp72x_xi
          // done: WAR dependencies for cmp72x_xi
          // start:  			$volatile cmp72x_xi := (inc67x_xcolx_x1x_xi == ($bitcast ($uint<16>) _b0000000000111000  )) $buffering 1
          //  file prog.linked.opt.aa, line 427
          // volatile! 
          // Source expression
          // (inc67x_xcolx_x1x_xi == ($bitcast ($uint<16>) _b0000000000111000  ))
          // inc67x_xcolx_x1x_xi
          // Target expression
          // (as target) cmp72x_xi
          // start: WAR dependencies for cmp72x_xi
          // done: WAR dependencies for cmp72x_xi
          // end:  			$volatile cmp72x_xi := (inc67x_xcolx_x1x_xi == ($bitcast ($uint<16>) _b0000000000111000  )) $buffering 1
          // start:  			inc76x_xi := ($cast ($uint<16>) cmp72x_xi ) $buffering 1// bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 428
          // Source expression
          // ($cast ($uint<16>) cmp72x_xi )
          $T[type_cast_1346_sample_start_] 
          $T[type_cast_1346_sample_completed_] 
          $T[type_cast_1346_update_start_] 
          $T[type_cast_1346_update_completed_] 
          // cmp72x_xi
          // start: Forward dependencies from cmp72x_xi to transition type_cast_1346_sample_start_
          type_cast_1346_sample_start_ <-& (type_cast_1321_update_completed_)
          type_cast_1346_sample_start_ <-& (assign_stmt_1325_update_completed_)
          // done: Forward dependencies from cmp72x_xi to transition type_cast_1346_sample_start_
          ;;[type_cast_1346_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_1346_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_1346_sample_start_ &-> (type_cast_1346_Sample)
          type_cast_1346_sample_completed_ <-& (type_cast_1346_Sample)
          type_cast_1346_sample_completed_ &-> ($null)
          type_cast_1346_update_start_ &-> (type_cast_1346_Update)
          type_cast_1346_update_completed_ <-& (type_cast_1346_Update)
          // RAW reenables for cmp72x_xi
          type_cast_1321_update_start_ o<-& (type_cast_1346_sample_completed_ 0)
          assign_stmt_1325_update_start_ o<-& (type_cast_1346_sample_completed_ 0)
          // self-release: 
          type_cast_1346_sample_start_ o<-& (type_cast_1346_sample_completed_ 1)
          $null &-> (type_cast_1346_update_start_)
          type_cast_1346_update_start_ o<-& (type_cast_1346_update_completed_ 0)
          // Target expression
          // (as target) inc76x_xi
          // start: WAR dependencies for inc76x_xi
          // done: WAR dependencies for inc76x_xi
          // end:  			inc76x_xi := ($cast ($uint<16>) cmp72x_xi ) $buffering 1// bits of buffering = 16. 
          // start:  			row18x_x1x_xi_1329_delayed_2_0 := row18x_x1x_xi $buffering 2 $cut_through // bits of buffering = 32. 
          //  file prog.linked.opt.aa, line 429
          $T[assign_stmt_1350_sample_start_] 
          $T[assign_stmt_1350_sample_completed_] 
          $T[assign_stmt_1350_update_start_] 
          $T[assign_stmt_1350_update_completed_] 
          // Source expression
          // row18x_x1x_xi
          // Target expression
          // (as target) row18x_x1x_xi_1329_delayed_2_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_1350_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_1350_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_1350_sample_start_ &-> (assign_stmt_1350_Sample)
          assign_stmt_1350_sample_completed_ <-& (assign_stmt_1350_Sample)
          assign_stmt_1350_sample_completed_ &-> ($null)
          assign_stmt_1350_update_start_ &-> (assign_stmt_1350_Update)
          assign_stmt_1350_update_completed_ <-& (assign_stmt_1350_Update)
          // start: Forward dependencies from row18x_x1x_xi to transition assign_stmt_1350_sample_start_
          assign_stmt_1350_sample_start_ <-& (phi_stmt_1225_update_completed_)
          // done: Forward dependencies from row18x_x1x_xi to transition assign_stmt_1350_sample_start_
          // RAW reenables for row18x_x1x_xi
          phi_stmt_1225_update_start_ o<-& (assign_stmt_1350_sample_completed_ 0)
          // self-release: 
          assign_stmt_1350_sample_start_ o<-& (assign_stmt_1350_sample_completed_ 1)
          $null &-> (assign_stmt_1350_update_start_)
          assign_stmt_1350_update_start_ o<-& (assign_stmt_1350_update_completed_ 0)
          // start: WAR dependencies for row18x_x1x_xi_1329_delayed_2_0
          // done: WAR dependencies for row18x_x1x_xi_1329_delayed_2_0
          // end:  			row18x_x1x_xi_1329_delayed_2_0 := row18x_x1x_xi $buffering 2 $cut_through // bits of buffering = 32. 
          // start: WAR dependencies for inc76x_xrow18x_x1x_xi
          // WAR dependency: Read: inc76x_xrow18x_x1x_xi before Write: 			$volatile inc76x_xrow18x_x1x_xi := (inc76x_xi + row18x_x1x_xi_1329_delayed_2_0) $buffering 1
          type_cast_1346_update_start_ <-& (phi_stmt_1225_sample_completed_)
          phi_stmt_1225_sample_start_ o<-& (type_cast_1346_update_completed_ 0)
          // WAR dependency: release  Read: inc76x_xrow18x_x1x_xi with Write: 			inc76x_xi := ($cast ($uint<16>) cmp72x_xi ) $buffering 1// bits of buffering = 16. 
          assign_stmt_1350_update_start_ <-& (phi_stmt_1225_sample_completed_)
          phi_stmt_1225_sample_start_ o<-& (assign_stmt_1350_update_completed_ 0)
          // WAR dependency: release  Read: inc76x_xrow18x_x1x_xi with Write: 			row18x_x1x_xi_1329_delayed_2_0 := row18x_x1x_xi $buffering 2 $cut_through // bits of buffering = 32. 
          // done: WAR dependencies for inc76x_xrow18x_x1x_xi
          // start:  			$volatile inc76x_xrow18x_x1x_xi := (inc76x_xi + row18x_x1x_xi_1329_delayed_2_0) $buffering 1
          //  file prog.linked.opt.aa, line 430
          // volatile! 
          // Source expression
          // (inc76x_xi + row18x_x1x_xi_1329_delayed_2_0)
          // inc76x_xi
          // row18x_x1x_xi_1329_delayed_2_0
          // Target expression
          // (as target) inc76x_xrow18x_x1x_xi
          // start: WAR dependencies for inc76x_xrow18x_x1x_xi
          // WAR dependency: Read: inc76x_xrow18x_x1x_xi before Write: 			$volatile inc76x_xrow18x_x1x_xi := (inc76x_xi + row18x_x1x_xi_1329_delayed_2_0) $buffering 1
          type_cast_1346_update_start_ <-& (phi_stmt_1225_sample_completed_)
          phi_stmt_1225_sample_start_ o<-& (type_cast_1346_update_completed_ 0)
          // WAR dependency: release  Read: inc76x_xrow18x_x1x_xi with Write: 			inc76x_xi := ($cast ($uint<16>) cmp72x_xi ) $buffering 2// bits of buffering = 32. 
          assign_stmt_1350_update_start_ <-& (phi_stmt_1225_sample_completed_)
          phi_stmt_1225_sample_start_ o<-& (assign_stmt_1350_update_completed_ 0)
          // WAR dependency: release  Read: inc76x_xrow18x_x1x_xi with Write: 			row18x_x1x_xi_1329_delayed_2_0 := row18x_x1x_xi $buffering 2 $cut_through // bits of buffering = 32. 
          // done: WAR dependencies for inc76x_xrow18x_x1x_xi
          // end:  			$volatile inc76x_xrow18x_x1x_xi := (inc76x_xi + row18x_x1x_xi_1329_delayed_2_0) $buffering 1
          // start: WAR dependencies for colx_x2x_xi
          // WAR dependency: Read: colx_x2x_xi before Write: 			$volatile colx_x2x_xi := ( $mux cmp72x_xi ($bitcast ($uint<16>) _b0000000000000000  )  inc67x_xcolx_x1x_xi )  $buffering 1
          type_cast_1321_update_start_ <-& (phi_stmt_1230_sample_completed_)
          phi_stmt_1230_sample_start_ o<-& (type_cast_1321_update_completed_ 0)
          // WAR dependency: release  Read: colx_x2x_xi with Write: 			inc67x_xi := ($cast ($uint<16>) cmpx_xi ) $buffering 1// bits of buffering = 16. 
          assign_stmt_1325_update_start_ <-& (phi_stmt_1230_sample_completed_)
          phi_stmt_1230_sample_start_ o<-& (assign_stmt_1325_update_completed_ 0)
          // WAR dependency: release  Read: colx_x2x_xi with Write: 			colx_x1x_xi_1307_delayed_1_0 := colx_x1x_xi $buffering 1 $cut_through // bits of buffering = 16. 
          // done: WAR dependencies for colx_x2x_xi
          // start:  			$volatile colx_x2x_xi := ( $mux cmp72x_xi ($bitcast ($uint<16>) _b0000000000000000  )  inc67x_xcolx_x1x_xi )  $buffering 1
          //  file prog.linked.opt.aa, line 431
          // volatile! 
          // Source expression
          // ( $mux cmp72x_xi ($bitcast ($uint<16>) _b0000000000000000  )  inc67x_xcolx_x1x_xi ) 
          // cmp72x_xi
          // inc67x_xcolx_x1x_xi
          // Target expression
          // (as target) colx_x2x_xi
          // start: WAR dependencies for colx_x2x_xi
          // WAR dependency: Read: colx_x2x_xi before Write: 			$volatile colx_x2x_xi := ( $mux cmp72x_xi ($bitcast ($uint<16>) _b0000000000000000  )  inc67x_xcolx_x1x_xi )  $buffering 1
          type_cast_1321_update_start_ <-& (phi_stmt_1230_sample_completed_)
          phi_stmt_1230_sample_start_ o<-& (type_cast_1321_update_completed_ 0)
          // WAR dependency: release  Read: colx_x2x_xi with Write: 			inc67x_xi := ($cast ($uint<16>) cmpx_xi ) $buffering 2// bits of buffering = 32. 
          assign_stmt_1325_update_start_ <-& (phi_stmt_1230_sample_completed_)
          phi_stmt_1230_sample_start_ o<-& (assign_stmt_1325_update_completed_ 0)
          // WAR dependency: release  Read: colx_x2x_xi with Write: 			colx_x1x_xi_1307_delayed_1_0 := colx_x1x_xi $buffering 2 $cut_through // bits of buffering = 32. 
          // done: WAR dependencies for colx_x2x_xi
          // end:  			$volatile colx_x2x_xi := ( $mux cmp72x_xi ($bitcast ($uint<16>) _b0000000000000000  )  inc67x_xcolx_x1x_xi )  $buffering 1
          // start: WAR dependencies for add79x_xi
          // WAR dependency: Read: add79x_xi before Write: 			$volatile add79x_xi := (iNsTr_2 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for add79x_xi
          // start:  			$volatile add79x_xi := (iNsTr_2 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
          //  file prog.linked.opt.aa, line 432
          // volatile! 
          // Source expression
          // (iNsTr_2 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  ))
          // iNsTr_2
          // Target expression
          // (as target) add79x_xi
          // start: WAR dependencies for add79x_xi
          // WAR dependency: Read: add79x_xi before Write: 			$volatile add79x_xi := (iNsTr_2 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for add79x_xi
          // end:  			$volatile add79x_xi := (iNsTr_2 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
          // start: WAR dependencies for cmp84x_xi
          // done: WAR dependencies for cmp84x_xi
          // start:  			$volatile cmp84x_xi := (inc76x_xrow18x_x1x_xi == ($bitcast ($uint<16>) _b0000000000111000  )) $buffering 1
          //  file prog.linked.opt.aa, line 433
          // volatile! 
          // Source expression
          // (inc76x_xrow18x_x1x_xi == ($bitcast ($uint<16>) _b0000000000111000  ))
          // inc76x_xrow18x_x1x_xi
          // Target expression
          // (as target) cmp84x_xi
          // start: WAR dependencies for cmp84x_xi
          // done: WAR dependencies for cmp84x_xi
          // end:  			$volatile cmp84x_xi := (inc76x_xrow18x_x1x_xi == ($bitcast ($uint<16>) _b0000000000111000  )) $buffering 1
          // start: WAR dependencies for whilex_xbodyx_xi_maxPool3Dx_xexit_taken
          // done: WAR dependencies for whilex_xbodyx_xi_maxPool3Dx_xexit_taken
          // start:  			$volatile whilex_xbodyx_xi_maxPool3Dx_xexit_taken := cmp84x_xi $buffering 1
          //  file prog.linked.opt.aa, line 434
          // volatile! 
          // Source expression
          // cmp84x_xi
          // Target expression
          // (as target) whilex_xbodyx_xi_maxPool3Dx_xexit_taken
          // start: WAR dependencies for whilex_xbodyx_xi_maxPool3Dx_xexit_taken
          // done: WAR dependencies for whilex_xbodyx_xi_maxPool3Dx_xexit_taken
          // end:  			$volatile whilex_xbodyx_xi_maxPool3Dx_xexit_taken := cmp84x_xi $buffering 1
          // ( ~ cmp84x_xi )
          // cmp84x_xi
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from ( ~ cmp84x_xi ) to transition condition_evaluated
          condition_evaluated <-& (type_cast_1346_update_completed_)
          condition_evaluated <-& (assign_stmt_1350_update_completed_)
          // done: Forward dependencies from ( ~ cmp84x_xi ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe MAIN_MEM_REQUEST
          // read-dependencies for pipe MAIN_MEM_REQUEST
          // write-dependencies for pipe MAIN_MEM_REQUEST
          // signal write dependencies for MAIN_MEM_REQUEST
          // pipe read/write dependencies for pipe MAIN_MEM_RESPONSE
          // read-dependencies for pipe MAIN_MEM_RESPONSE
          // write-dependencies for pipe MAIN_MEM_RESPONSE
          // signal write dependencies for MAIN_MEM_RESPONSE
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1218__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1218_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1218__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1218_loop_body : condition_evaluated
        $bind do_while_stmt_1218__entry__  => do_while_stmt_1218_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1218_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1218__exit__)
      }
      do_while_stmt_1218__entry__ |-> (do_while_stmt_1218)
      do_while_stmt_1218__exit__ <-| (do_while_stmt_1218)
      // if-statement  
      //  file prog.linked.opt.aa, line 0
      ;;[if_stmt_1381_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1381__entry__ |-> (if_stmt_1381_dead_link)
      if_stmt_1381__exit__ <-| (if_stmt_1381_dead_link)
      ;;[if_stmt_1381_eval_test] 
      {
        // test expression evaluate and trigger branch 
        $T [branch_req] 
      }
      if_stmt_1381__entry__ |-> (if_stmt_1381_eval_test)
      $P [R_whilex_xbodyx_xi_maxPool3Dx_xexit_taken_1382_place]
      R_whilex_xbodyx_xi_maxPool3Dx_xexit_taken_1382_place <-| (if_stmt_1381_eval_test)
      ;;[if_stmt_1381_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1381_else_link] 
      {
        $T [else_choice_transition] 
      }
      R_whilex_xbodyx_xi_maxPool3Dx_xexit_taken_1382_place |-> (if_stmt_1381_if_link if_stmt_1381_else_link)
      $P [whilex_xbodyx_xi_maxPool3Dx_xexit]
      whilex_xbodyx_xi_maxPool3Dx_xexit <-| (if_stmt_1381_if_link)
      if_stmt_1381__exit__ <-| (if_stmt_1381_else_link)
      ::[assign_stmt_1396_to_call_stmt_1514] 
      {
        // start:  		conv := ($bitcast ($uint<64>) ($cast ($int<64>) call ) ) $buffering 1// bits of buffering = 64. 
        //  file prog.linked.opt.aa, line 443
        // Source expression
        // ($bitcast ($uint<64>) ($cast ($int<64>) call ) )
        $T[type_cast_1395_sample_start_] 
        $T[type_cast_1395_sample_completed_] 
        $T[type_cast_1395_update_start_] 
        $T[type_cast_1395_update_completed_] 
        // ($cast ($int<64>) call )
        // call
        // start: Forward dependencies from ($cast ($int<64>) call ) to transition type_cast_1395_sample_start_
        // done: Forward dependencies from ($cast ($int<64>) call ) to transition type_cast_1395_sample_start_
        ;;[type_cast_1395_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_1395_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_1395_sample_start_ &-> (type_cast_1395_Sample)
        type_cast_1395_sample_completed_ <-& (type_cast_1395_Sample)
        type_cast_1395_sample_completed_ &-> ($null)
        type_cast_1395_update_start_ &-> (type_cast_1395_Update)
        type_cast_1395_update_completed_ <-& (type_cast_1395_Update)
        // Target expression
        // (as target) conv
        // start: WAR dependencies for conv
        // done: WAR dependencies for conv
        // end:  		conv := ($bitcast ($uint<64>) ($cast ($int<64>) call ) ) $buffering 1// bits of buffering = 64. 
        // start:  		conv89x_xi := ($cast ($uint<8>) inc76x_xrow18x_x1x_xix_xlcssa ) $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 444
        // Source expression
        // ($cast ($uint<8>) inc76x_xrow18x_x1x_xix_xlcssa )
        $T[type_cast_1399_sample_start_] 
        $T[type_cast_1399_sample_completed_] 
        $T[type_cast_1399_update_start_] 
        $T[type_cast_1399_update_completed_] 
        // inc76x_xrow18x_x1x_xix_xlcssa
        // start: Forward dependencies from inc76x_xrow18x_x1x_xix_xlcssa to transition type_cast_1399_sample_start_
        // done: Forward dependencies from inc76x_xrow18x_x1x_xix_xlcssa to transition type_cast_1399_sample_start_
        ;;[type_cast_1399_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_1399_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_1399_sample_start_ &-> (type_cast_1399_Sample)
        type_cast_1399_sample_completed_ <-& (type_cast_1399_Sample)
        type_cast_1399_sample_completed_ &-> ($null)
        type_cast_1399_update_start_ &-> (type_cast_1399_Update)
        type_cast_1399_update_completed_ <-& (type_cast_1399_Update)
        // Target expression
        // (as target) conv89x_xi
        // start: WAR dependencies for conv89x_xi
        // done: WAR dependencies for conv89x_xi
        // end:  		conv89x_xi := ($cast ($uint<8>) inc76x_xrow18x_x1x_xix_xlcssa ) $buffering 1// bits of buffering = 8. 
        // start:  		system_output_pipe := conv89x_xi $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 445
        // Source expression
        // conv89x_xi
        // Target expression
        // (as target) system_output_pipe
        $T[WPIPE_system_output_pipe_1401_sample_start_] 
        $T[WPIPE_system_output_pipe_1401_sample_completed_] 
        $T[WPIPE_system_output_pipe_1401_update_start_] 
        $T[WPIPE_system_output_pipe_1401_update_completed_] 
        ;;[WPIPE_system_output_pipe_1401_Sample] 
        {
          // pipe write sample-start system_output_pipe
          $T [req] $T [ack] 
        }
        ;;[WPIPE_system_output_pipe_1401_Update] 
        {
          // pipe write update (complete) system_output_pipe
          $T [req] $T [ack] 
        }
        WPIPE_system_output_pipe_1401_sample_start_ &-> (WPIPE_system_output_pipe_1401_Sample)
        WPIPE_system_output_pipe_1401_sample_completed_ <-& (WPIPE_system_output_pipe_1401_Sample)
        WPIPE_system_output_pipe_1401_update_start_ <-& (WPIPE_system_output_pipe_1401_sample_completed_)
        WPIPE_system_output_pipe_1401_update_start_ &-> (WPIPE_system_output_pipe_1401_Update)
        WPIPE_system_output_pipe_1401_update_completed_ <-& (WPIPE_system_output_pipe_1401_Update)
        // start: Forward dependencies from conv89x_xi to transition WPIPE_system_output_pipe_1401_sample_start_
        WPIPE_system_output_pipe_1401_sample_start_ <-& (type_cast_1399_update_completed_)
        // done: Forward dependencies from conv89x_xi to transition WPIPE_system_output_pipe_1401_sample_start_
        // end:  		system_output_pipe := conv89x_xi $buffering 1// bits of buffering = 8. 
        // start: 		$call timer () (call1 ) 
        //  file prog.linked.opt.aa, line 446
        $T[call_stmt_1405_sample_start_] 
        $T[call_stmt_1405_sample_completed_] 
        $T[call_stmt_1405_update_start_] 
        $T[call_stmt_1405_update_completed_] 
        ;;[call_stmt_1405_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1405_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1405_sample_start_ &-> (call_stmt_1405_Sample)
        call_stmt_1405_sample_completed_ <-& (call_stmt_1405_Sample)
        call_stmt_1405_sample_completed_ &-> ($null)
        call_stmt_1405_update_start_ &-> (call_stmt_1405_Update)
        call_stmt_1405_update_completed_ <-& (call_stmt_1405_Update)
        // Call output argument 0
        // (as target) call1
        // start: WAR dependencies for call1
        // done: WAR dependencies for call1
        // end: 		$call timer () (call1 ) 
        // start:  		conv2 := ($bitcast ($uint<64>) ($cast ($int<64>) call1 ) ) $buffering 1// bits of buffering = 64. 
        //  file prog.linked.opt.aa, line 447
        // Source expression
        // ($bitcast ($uint<64>) ($cast ($int<64>) call1 ) )
        $T[type_cast_1409_sample_start_] 
        $T[type_cast_1409_sample_completed_] 
        $T[type_cast_1409_update_start_] 
        $T[type_cast_1409_update_completed_] 
        // ($cast ($int<64>) call1 )
        // call1
        // start: Forward dependencies from ($cast ($int<64>) call1 ) to transition type_cast_1409_sample_start_
        type_cast_1409_sample_start_ <-& (call_stmt_1405_update_completed_)
        // done: Forward dependencies from ($cast ($int<64>) call1 ) to transition type_cast_1409_sample_start_
        ;;[type_cast_1409_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_1409_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_1409_sample_start_ &-> (type_cast_1409_Sample)
        type_cast_1409_sample_completed_ <-& (type_cast_1409_Sample)
        type_cast_1409_sample_completed_ &-> ($null)
        type_cast_1409_update_start_ &-> (type_cast_1409_Update)
        type_cast_1409_update_completed_ <-& (type_cast_1409_Update)
        // Target expression
        // (as target) conv2
        // start: WAR dependencies for conv2
        // done: WAR dependencies for conv2
        // end:  		conv2 := ($bitcast ($uint<64>) ($cast ($int<64>) call1 ) ) $buffering 1// bits of buffering = 64. 
        // start: WAR dependencies for sub
        // done: WAR dependencies for sub
        // start:  		$volatile sub := (conv2 - conv) $buffering 1
        //  file prog.linked.opt.aa, line 448
        // volatile! 
        // Source expression
        // (conv2 - conv)
        // conv2
        // conv
        // Target expression
        // (as target) sub
        // start: WAR dependencies for sub
        // done: WAR dependencies for sub
        // end:  		$volatile sub := (conv2 - conv) $buffering 1
        // start:  		conv6 := ($cast ($uint<8>) sub ) $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 449
        // Source expression
        // ($cast ($uint<8>) sub )
        $T[type_cast_1418_sample_start_] 
        $T[type_cast_1418_sample_completed_] 
        $T[type_cast_1418_update_start_] 
        $T[type_cast_1418_update_completed_] 
        // sub
        // start: Forward dependencies from sub to transition type_cast_1418_sample_start_
        type_cast_1418_sample_start_ <-& (type_cast_1395_update_completed_)
        type_cast_1418_sample_start_ <-& (type_cast_1409_update_completed_)
        // done: Forward dependencies from sub to transition type_cast_1418_sample_start_
        ;;[type_cast_1418_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_1418_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_1418_sample_start_ &-> (type_cast_1418_Sample)
        type_cast_1418_sample_completed_ <-& (type_cast_1418_Sample)
        type_cast_1418_sample_completed_ &-> ($null)
        type_cast_1418_update_start_ &-> (type_cast_1418_Update)
        type_cast_1418_update_completed_ <-& (type_cast_1418_Update)
        // Target expression
        // (as target) conv6
        // start: WAR dependencies for conv6
        // done: WAR dependencies for conv6
        // end:  		conv6 := ($cast ($uint<8>) sub ) $buffering 1// bits of buffering = 8. 
        // start: WAR dependencies for shr
        // done: WAR dependencies for shr
        // start:  		$volatile shr := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
        //  file prog.linked.opt.aa, line 450
        // volatile! 
        // Source expression
        // (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
        // sub
        // Target expression
        // (as target) shr
        // start: WAR dependencies for shr
        // done: WAR dependencies for shr
        // end:  		$volatile shr := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
        // start:  		conv10 := ($cast ($uint<8>) shr ) $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 451
        // Source expression
        // ($cast ($uint<8>) shr )
        $T[type_cast_1428_sample_start_] 
        $T[type_cast_1428_sample_completed_] 
        $T[type_cast_1428_update_start_] 
        $T[type_cast_1428_update_completed_] 
        // shr
        // start: Forward dependencies from shr to transition type_cast_1428_sample_start_
        type_cast_1428_sample_start_ <-& (type_cast_1395_update_completed_)
        type_cast_1428_sample_start_ <-& (type_cast_1409_update_completed_)
        // done: Forward dependencies from shr to transition type_cast_1428_sample_start_
        ;;[type_cast_1428_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_1428_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_1428_sample_start_ &-> (type_cast_1428_Sample)
        type_cast_1428_sample_completed_ <-& (type_cast_1428_Sample)
        type_cast_1428_sample_completed_ &-> ($null)
        type_cast_1428_update_start_ &-> (type_cast_1428_Update)
        type_cast_1428_update_completed_ <-& (type_cast_1428_Update)
        // Target expression
        // (as target) conv10
        // start: WAR dependencies for conv10
        // done: WAR dependencies for conv10
        // end:  		conv10 := ($cast ($uint<8>) shr ) $buffering 1// bits of buffering = 8. 
        // start: WAR dependencies for shr13
        // done: WAR dependencies for shr13
        // start:  		$volatile shr13 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  )) $buffering 1
        //  file prog.linked.opt.aa, line 452
        // volatile! 
        // Source expression
        // (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  ))
        // sub
        // Target expression
        // (as target) shr13
        // start: WAR dependencies for shr13
        // done: WAR dependencies for shr13
        // end:  		$volatile shr13 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  )) $buffering 1
        // start:  		conv16 := ($cast ($uint<8>) shr13 ) $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 453
        // Source expression
        // ($cast ($uint<8>) shr13 )
        $T[type_cast_1438_sample_start_] 
        $T[type_cast_1438_sample_completed_] 
        $T[type_cast_1438_update_start_] 
        $T[type_cast_1438_update_completed_] 
        // shr13
        // start: Forward dependencies from shr13 to transition type_cast_1438_sample_start_
        type_cast_1438_sample_start_ <-& (type_cast_1395_update_completed_)
        type_cast_1438_sample_start_ <-& (type_cast_1409_update_completed_)
        // done: Forward dependencies from shr13 to transition type_cast_1438_sample_start_
        ;;[type_cast_1438_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_1438_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_1438_sample_start_ &-> (type_cast_1438_Sample)
        type_cast_1438_sample_completed_ <-& (type_cast_1438_Sample)
        type_cast_1438_sample_completed_ &-> ($null)
        type_cast_1438_update_start_ &-> (type_cast_1438_Update)
        type_cast_1438_update_completed_ <-& (type_cast_1438_Update)
        // Target expression
        // (as target) conv16
        // start: WAR dependencies for conv16
        // done: WAR dependencies for conv16
        // end:  		conv16 := ($cast ($uint<8>) shr13 ) $buffering 1// bits of buffering = 8. 
        // start: WAR dependencies for shr19
        // done: WAR dependencies for shr19
        // start:  		$volatile shr19 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  )) $buffering 1
        //  file prog.linked.opt.aa, line 454
        // volatile! 
        // Source expression
        // (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  ))
        // sub
        // Target expression
        // (as target) shr19
        // start: WAR dependencies for shr19
        // done: WAR dependencies for shr19
        // end:  		$volatile shr19 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  )) $buffering 1
        // start:  		conv22 := ($cast ($uint<8>) shr19 ) $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 455
        // Source expression
        // ($cast ($uint<8>) shr19 )
        $T[type_cast_1448_sample_start_] 
        $T[type_cast_1448_sample_completed_] 
        $T[type_cast_1448_update_start_] 
        $T[type_cast_1448_update_completed_] 
        // shr19
        // start: Forward dependencies from shr19 to transition type_cast_1448_sample_start_
        type_cast_1448_sample_start_ <-& (type_cast_1395_update_completed_)
        type_cast_1448_sample_start_ <-& (type_cast_1409_update_completed_)
        // done: Forward dependencies from shr19 to transition type_cast_1448_sample_start_
        ;;[type_cast_1448_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_1448_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_1448_sample_start_ &-> (type_cast_1448_Sample)
        type_cast_1448_sample_completed_ <-& (type_cast_1448_Sample)
        type_cast_1448_sample_completed_ &-> ($null)
        type_cast_1448_update_start_ &-> (type_cast_1448_Update)
        type_cast_1448_update_completed_ <-& (type_cast_1448_Update)
        // Target expression
        // (as target) conv22
        // start: WAR dependencies for conv22
        // done: WAR dependencies for conv22
        // end:  		conv22 := ($cast ($uint<8>) shr19 ) $buffering 1// bits of buffering = 8. 
        // start: WAR dependencies for shr25
        // done: WAR dependencies for shr25
        // start:  		$volatile shr25 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  )) $buffering 1
        //  file prog.linked.opt.aa, line 456
        // volatile! 
        // Source expression
        // (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  ))
        // sub
        // Target expression
        // (as target) shr25
        // start: WAR dependencies for shr25
        // done: WAR dependencies for shr25
        // end:  		$volatile shr25 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  )) $buffering 1
        // start:  		conv28 := ($cast ($uint<8>) shr25 ) $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 457
        // Source expression
        // ($cast ($uint<8>) shr25 )
        $T[type_cast_1458_sample_start_] 
        $T[type_cast_1458_sample_completed_] 
        $T[type_cast_1458_update_start_] 
        $T[type_cast_1458_update_completed_] 
        // shr25
        // start: Forward dependencies from shr25 to transition type_cast_1458_sample_start_
        type_cast_1458_sample_start_ <-& (type_cast_1395_update_completed_)
        type_cast_1458_sample_start_ <-& (type_cast_1409_update_completed_)
        // done: Forward dependencies from shr25 to transition type_cast_1458_sample_start_
        ;;[type_cast_1458_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_1458_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_1458_sample_start_ &-> (type_cast_1458_Sample)
        type_cast_1458_sample_completed_ <-& (type_cast_1458_Sample)
        type_cast_1458_sample_completed_ &-> ($null)
        type_cast_1458_update_start_ &-> (type_cast_1458_Update)
        type_cast_1458_update_completed_ <-& (type_cast_1458_Update)
        // Target expression
        // (as target) conv28
        // start: WAR dependencies for conv28
        // done: WAR dependencies for conv28
        // end:  		conv28 := ($cast ($uint<8>) shr25 ) $buffering 1// bits of buffering = 8. 
        // start: WAR dependencies for shr31
        // done: WAR dependencies for shr31
        // start:  		$volatile shr31 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  )) $buffering 1
        //  file prog.linked.opt.aa, line 458
        // volatile! 
        // Source expression
        // (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  ))
        // sub
        // Target expression
        // (as target) shr31
        // start: WAR dependencies for shr31
        // done: WAR dependencies for shr31
        // end:  		$volatile shr31 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  )) $buffering 1
        // start:  		conv34 := ($cast ($uint<8>) shr31 ) $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 459
        // Source expression
        // ($cast ($uint<8>) shr31 )
        $T[type_cast_1468_sample_start_] 
        $T[type_cast_1468_sample_completed_] 
        $T[type_cast_1468_update_start_] 
        $T[type_cast_1468_update_completed_] 
        // shr31
        // start: Forward dependencies from shr31 to transition type_cast_1468_sample_start_
        type_cast_1468_sample_start_ <-& (type_cast_1395_update_completed_)
        type_cast_1468_sample_start_ <-& (type_cast_1409_update_completed_)
        // done: Forward dependencies from shr31 to transition type_cast_1468_sample_start_
        ;;[type_cast_1468_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_1468_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_1468_sample_start_ &-> (type_cast_1468_Sample)
        type_cast_1468_sample_completed_ <-& (type_cast_1468_Sample)
        type_cast_1468_sample_completed_ &-> ($null)
        type_cast_1468_update_start_ &-> (type_cast_1468_Update)
        type_cast_1468_update_completed_ <-& (type_cast_1468_Update)
        // Target expression
        // (as target) conv34
        // start: WAR dependencies for conv34
        // done: WAR dependencies for conv34
        // end:  		conv34 := ($cast ($uint<8>) shr31 ) $buffering 1// bits of buffering = 8. 
        // start: WAR dependencies for shr37
        // done: WAR dependencies for shr37
        // start:  		$volatile shr37 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  )) $buffering 1
        //  file prog.linked.opt.aa, line 460
        // volatile! 
        // Source expression
        // (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  ))
        // sub
        // Target expression
        // (as target) shr37
        // start: WAR dependencies for shr37
        // done: WAR dependencies for shr37
        // end:  		$volatile shr37 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  )) $buffering 1
        // start:  		conv40 := ($cast ($uint<8>) shr37 ) $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 461
        // Source expression
        // ($cast ($uint<8>) shr37 )
        $T[type_cast_1478_sample_start_] 
        $T[type_cast_1478_sample_completed_] 
        $T[type_cast_1478_update_start_] 
        $T[type_cast_1478_update_completed_] 
        // shr37
        // start: Forward dependencies from shr37 to transition type_cast_1478_sample_start_
        type_cast_1478_sample_start_ <-& (type_cast_1395_update_completed_)
        type_cast_1478_sample_start_ <-& (type_cast_1409_update_completed_)
        // done: Forward dependencies from shr37 to transition type_cast_1478_sample_start_
        ;;[type_cast_1478_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_1478_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_1478_sample_start_ &-> (type_cast_1478_Sample)
        type_cast_1478_sample_completed_ <-& (type_cast_1478_Sample)
        type_cast_1478_sample_completed_ &-> ($null)
        type_cast_1478_update_start_ &-> (type_cast_1478_Update)
        type_cast_1478_update_completed_ <-& (type_cast_1478_Update)
        // Target expression
        // (as target) conv40
        // start: WAR dependencies for conv40
        // done: WAR dependencies for conv40
        // end:  		conv40 := ($cast ($uint<8>) shr37 ) $buffering 1// bits of buffering = 8. 
        // start: WAR dependencies for shr43
        // done: WAR dependencies for shr43
        // start:  		$volatile shr43 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  )) $buffering 1
        //  file prog.linked.opt.aa, line 462
        // volatile! 
        // Source expression
        // (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  ))
        // sub
        // Target expression
        // (as target) shr43
        // start: WAR dependencies for shr43
        // done: WAR dependencies for shr43
        // end:  		$volatile shr43 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  )) $buffering 1
        // start:  		conv46 := ($cast ($uint<8>) shr43 ) $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 463
        // Source expression
        // ($cast ($uint<8>) shr43 )
        $T[type_cast_1488_sample_start_] 
        $T[type_cast_1488_sample_completed_] 
        $T[type_cast_1488_update_start_] 
        $T[type_cast_1488_update_completed_] 
        // shr43
        // start: Forward dependencies from shr43 to transition type_cast_1488_sample_start_
        type_cast_1488_sample_start_ <-& (type_cast_1395_update_completed_)
        type_cast_1488_sample_start_ <-& (type_cast_1409_update_completed_)
        // done: Forward dependencies from shr43 to transition type_cast_1488_sample_start_
        ;;[type_cast_1488_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_1488_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_1488_sample_start_ &-> (type_cast_1488_Sample)
        type_cast_1488_sample_completed_ <-& (type_cast_1488_Sample)
        type_cast_1488_sample_completed_ &-> ($null)
        type_cast_1488_update_start_ &-> (type_cast_1488_Update)
        type_cast_1488_update_completed_ <-& (type_cast_1488_Update)
        // Target expression
        // (as target) conv46
        // start: WAR dependencies for conv46
        // done: WAR dependencies for conv46
        // end:  		conv46 := ($cast ($uint<8>) shr43 ) $buffering 1// bits of buffering = 8. 
        // start:  		system_output_pipe := conv46 $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 464
        // Source expression
        // conv46
        // Target expression
        // (as target) system_output_pipe
        $T[WPIPE_system_output_pipe_1490_sample_start_] 
        $T[WPIPE_system_output_pipe_1490_sample_completed_] 
        $T[WPIPE_system_output_pipe_1490_update_start_] 
        $T[WPIPE_system_output_pipe_1490_update_completed_] 
        ;;[WPIPE_system_output_pipe_1490_Sample] 
        {
          // pipe write sample-start system_output_pipe
          $T [req] $T [ack] 
        }
        ;;[WPIPE_system_output_pipe_1490_Update] 
        {
          // pipe write update (complete) system_output_pipe
          $T [req] $T [ack] 
        }
        WPIPE_system_output_pipe_1490_sample_start_ &-> (WPIPE_system_output_pipe_1490_Sample)
        WPIPE_system_output_pipe_1490_sample_completed_ <-& (WPIPE_system_output_pipe_1490_Sample)
        WPIPE_system_output_pipe_1490_update_start_ <-& (WPIPE_system_output_pipe_1490_sample_completed_)
        WPIPE_system_output_pipe_1490_update_start_ &-> (WPIPE_system_output_pipe_1490_Update)
        WPIPE_system_output_pipe_1490_update_completed_ <-& (WPIPE_system_output_pipe_1490_Update)
        // start: Forward dependencies from conv46 to transition WPIPE_system_output_pipe_1490_sample_start_
        WPIPE_system_output_pipe_1490_sample_start_ <-& (type_cast_1488_update_completed_)
        // done: Forward dependencies from conv46 to transition WPIPE_system_output_pipe_1490_sample_start_
        // end:  		system_output_pipe := conv46 $buffering 1// bits of buffering = 8. 
        // start:  		system_output_pipe := conv40 $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 465
        // Source expression
        // conv40
        // Target expression
        // (as target) system_output_pipe
        $T[WPIPE_system_output_pipe_1493_sample_start_] 
        $T[WPIPE_system_output_pipe_1493_sample_completed_] 
        $T[WPIPE_system_output_pipe_1493_update_start_] 
        $T[WPIPE_system_output_pipe_1493_update_completed_] 
        ;;[WPIPE_system_output_pipe_1493_Sample] 
        {
          // pipe write sample-start system_output_pipe
          $T [req] $T [ack] 
        }
        ;;[WPIPE_system_output_pipe_1493_Update] 
        {
          // pipe write update (complete) system_output_pipe
          $T [req] $T [ack] 
        }
        WPIPE_system_output_pipe_1493_sample_start_ &-> (WPIPE_system_output_pipe_1493_Sample)
        WPIPE_system_output_pipe_1493_sample_completed_ <-& (WPIPE_system_output_pipe_1493_Sample)
        WPIPE_system_output_pipe_1493_update_start_ <-& (WPIPE_system_output_pipe_1493_sample_completed_)
        WPIPE_system_output_pipe_1493_update_start_ &-> (WPIPE_system_output_pipe_1493_Update)
        WPIPE_system_output_pipe_1493_update_completed_ <-& (WPIPE_system_output_pipe_1493_Update)
        // start: Forward dependencies from conv40 to transition WPIPE_system_output_pipe_1493_sample_start_
        WPIPE_system_output_pipe_1493_sample_start_ <-& (type_cast_1478_update_completed_)
        // done: Forward dependencies from conv40 to transition WPIPE_system_output_pipe_1493_sample_start_
        // end:  		system_output_pipe := conv40 $buffering 1// bits of buffering = 8. 
        // start:  		system_output_pipe := conv34 $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 466
        // Source expression
        // conv34
        // Target expression
        // (as target) system_output_pipe
        $T[WPIPE_system_output_pipe_1496_sample_start_] 
        $T[WPIPE_system_output_pipe_1496_sample_completed_] 
        $T[WPIPE_system_output_pipe_1496_update_start_] 
        $T[WPIPE_system_output_pipe_1496_update_completed_] 
        ;;[WPIPE_system_output_pipe_1496_Sample] 
        {
          // pipe write sample-start system_output_pipe
          $T [req] $T [ack] 
        }
        ;;[WPIPE_system_output_pipe_1496_Update] 
        {
          // pipe write update (complete) system_output_pipe
          $T [req] $T [ack] 
        }
        WPIPE_system_output_pipe_1496_sample_start_ &-> (WPIPE_system_output_pipe_1496_Sample)
        WPIPE_system_output_pipe_1496_sample_completed_ <-& (WPIPE_system_output_pipe_1496_Sample)
        WPIPE_system_output_pipe_1496_update_start_ <-& (WPIPE_system_output_pipe_1496_sample_completed_)
        WPIPE_system_output_pipe_1496_update_start_ &-> (WPIPE_system_output_pipe_1496_Update)
        WPIPE_system_output_pipe_1496_update_completed_ <-& (WPIPE_system_output_pipe_1496_Update)
        // start: Forward dependencies from conv34 to transition WPIPE_system_output_pipe_1496_sample_start_
        WPIPE_system_output_pipe_1496_sample_start_ <-& (type_cast_1468_update_completed_)
        // done: Forward dependencies from conv34 to transition WPIPE_system_output_pipe_1496_sample_start_
        // end:  		system_output_pipe := conv34 $buffering 1// bits of buffering = 8. 
        // start:  		system_output_pipe := conv28 $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 467
        // Source expression
        // conv28
        // Target expression
        // (as target) system_output_pipe
        $T[WPIPE_system_output_pipe_1499_sample_start_] 
        $T[WPIPE_system_output_pipe_1499_sample_completed_] 
        $T[WPIPE_system_output_pipe_1499_update_start_] 
        $T[WPIPE_system_output_pipe_1499_update_completed_] 
        ;;[WPIPE_system_output_pipe_1499_Sample] 
        {
          // pipe write sample-start system_output_pipe
          $T [req] $T [ack] 
        }
        ;;[WPIPE_system_output_pipe_1499_Update] 
        {
          // pipe write update (complete) system_output_pipe
          $T [req] $T [ack] 
        }
        WPIPE_system_output_pipe_1499_sample_start_ &-> (WPIPE_system_output_pipe_1499_Sample)
        WPIPE_system_output_pipe_1499_sample_completed_ <-& (WPIPE_system_output_pipe_1499_Sample)
        WPIPE_system_output_pipe_1499_update_start_ <-& (WPIPE_system_output_pipe_1499_sample_completed_)
        WPIPE_system_output_pipe_1499_update_start_ &-> (WPIPE_system_output_pipe_1499_Update)
        WPIPE_system_output_pipe_1499_update_completed_ <-& (WPIPE_system_output_pipe_1499_Update)
        // start: Forward dependencies from conv28 to transition WPIPE_system_output_pipe_1499_sample_start_
        WPIPE_system_output_pipe_1499_sample_start_ <-& (type_cast_1458_update_completed_)
        // done: Forward dependencies from conv28 to transition WPIPE_system_output_pipe_1499_sample_start_
        // end:  		system_output_pipe := conv28 $buffering 1// bits of buffering = 8. 
        // start:  		system_output_pipe := conv22 $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 468
        // Source expression
        // conv22
        // Target expression
        // (as target) system_output_pipe
        $T[WPIPE_system_output_pipe_1502_sample_start_] 
        $T[WPIPE_system_output_pipe_1502_sample_completed_] 
        $T[WPIPE_system_output_pipe_1502_update_start_] 
        $T[WPIPE_system_output_pipe_1502_update_completed_] 
        ;;[WPIPE_system_output_pipe_1502_Sample] 
        {
          // pipe write sample-start system_output_pipe
          $T [req] $T [ack] 
        }
        ;;[WPIPE_system_output_pipe_1502_Update] 
        {
          // pipe write update (complete) system_output_pipe
          $T [req] $T [ack] 
        }
        WPIPE_system_output_pipe_1502_sample_start_ &-> (WPIPE_system_output_pipe_1502_Sample)
        WPIPE_system_output_pipe_1502_sample_completed_ <-& (WPIPE_system_output_pipe_1502_Sample)
        WPIPE_system_output_pipe_1502_update_start_ <-& (WPIPE_system_output_pipe_1502_sample_completed_)
        WPIPE_system_output_pipe_1502_update_start_ &-> (WPIPE_system_output_pipe_1502_Update)
        WPIPE_system_output_pipe_1502_update_completed_ <-& (WPIPE_system_output_pipe_1502_Update)
        // start: Forward dependencies from conv22 to transition WPIPE_system_output_pipe_1502_sample_start_
        WPIPE_system_output_pipe_1502_sample_start_ <-& (type_cast_1448_update_completed_)
        // done: Forward dependencies from conv22 to transition WPIPE_system_output_pipe_1502_sample_start_
        // end:  		system_output_pipe := conv22 $buffering 1// bits of buffering = 8. 
        // start:  		system_output_pipe := conv16 $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 469
        // Source expression
        // conv16
        // Target expression
        // (as target) system_output_pipe
        $T[WPIPE_system_output_pipe_1505_sample_start_] 
        $T[WPIPE_system_output_pipe_1505_sample_completed_] 
        $T[WPIPE_system_output_pipe_1505_update_start_] 
        $T[WPIPE_system_output_pipe_1505_update_completed_] 
        ;;[WPIPE_system_output_pipe_1505_Sample] 
        {
          // pipe write sample-start system_output_pipe
          $T [req] $T [ack] 
        }
        ;;[WPIPE_system_output_pipe_1505_Update] 
        {
          // pipe write update (complete) system_output_pipe
          $T [req] $T [ack] 
        }
        WPIPE_system_output_pipe_1505_sample_start_ &-> (WPIPE_system_output_pipe_1505_Sample)
        WPIPE_system_output_pipe_1505_sample_completed_ <-& (WPIPE_system_output_pipe_1505_Sample)
        WPIPE_system_output_pipe_1505_update_start_ <-& (WPIPE_system_output_pipe_1505_sample_completed_)
        WPIPE_system_output_pipe_1505_update_start_ &-> (WPIPE_system_output_pipe_1505_Update)
        WPIPE_system_output_pipe_1505_update_completed_ <-& (WPIPE_system_output_pipe_1505_Update)
        // start: Forward dependencies from conv16 to transition WPIPE_system_output_pipe_1505_sample_start_
        WPIPE_system_output_pipe_1505_sample_start_ <-& (type_cast_1438_update_completed_)
        // done: Forward dependencies from conv16 to transition WPIPE_system_output_pipe_1505_sample_start_
        // end:  		system_output_pipe := conv16 $buffering 1// bits of buffering = 8. 
        // start:  		system_output_pipe := conv10 $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 470
        // Source expression
        // conv10
        // Target expression
        // (as target) system_output_pipe
        $T[WPIPE_system_output_pipe_1508_sample_start_] 
        $T[WPIPE_system_output_pipe_1508_sample_completed_] 
        $T[WPIPE_system_output_pipe_1508_update_start_] 
        $T[WPIPE_system_output_pipe_1508_update_completed_] 
        ;;[WPIPE_system_output_pipe_1508_Sample] 
        {
          // pipe write sample-start system_output_pipe
          $T [req] $T [ack] 
        }
        ;;[WPIPE_system_output_pipe_1508_Update] 
        {
          // pipe write update (complete) system_output_pipe
          $T [req] $T [ack] 
        }
        WPIPE_system_output_pipe_1508_sample_start_ &-> (WPIPE_system_output_pipe_1508_Sample)
        WPIPE_system_output_pipe_1508_sample_completed_ <-& (WPIPE_system_output_pipe_1508_Sample)
        WPIPE_system_output_pipe_1508_update_start_ <-& (WPIPE_system_output_pipe_1508_sample_completed_)
        WPIPE_system_output_pipe_1508_update_start_ &-> (WPIPE_system_output_pipe_1508_Update)
        WPIPE_system_output_pipe_1508_update_completed_ <-& (WPIPE_system_output_pipe_1508_Update)
        // start: Forward dependencies from conv10 to transition WPIPE_system_output_pipe_1508_sample_start_
        WPIPE_system_output_pipe_1508_sample_start_ <-& (type_cast_1428_update_completed_)
        // done: Forward dependencies from conv10 to transition WPIPE_system_output_pipe_1508_sample_start_
        // end:  		system_output_pipe := conv10 $buffering 1// bits of buffering = 8. 
        // start:  		system_output_pipe := conv6 $buffering 1// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 471
        // Source expression
        // conv6
        // Target expression
        // (as target) system_output_pipe
        $T[WPIPE_system_output_pipe_1511_sample_start_] 
        $T[WPIPE_system_output_pipe_1511_sample_completed_] 
        $T[WPIPE_system_output_pipe_1511_update_start_] 
        $T[WPIPE_system_output_pipe_1511_update_completed_] 
        ;;[WPIPE_system_output_pipe_1511_Sample] 
        {
          // pipe write sample-start system_output_pipe
          $T [req] $T [ack] 
        }
        ;;[WPIPE_system_output_pipe_1511_Update] 
        {
          // pipe write update (complete) system_output_pipe
          $T [req] $T [ack] 
        }
        WPIPE_system_output_pipe_1511_sample_start_ &-> (WPIPE_system_output_pipe_1511_Sample)
        WPIPE_system_output_pipe_1511_sample_completed_ <-& (WPIPE_system_output_pipe_1511_Sample)
        WPIPE_system_output_pipe_1511_update_start_ <-& (WPIPE_system_output_pipe_1511_sample_completed_)
        WPIPE_system_output_pipe_1511_update_start_ &-> (WPIPE_system_output_pipe_1511_Update)
        WPIPE_system_output_pipe_1511_update_completed_ <-& (WPIPE_system_output_pipe_1511_Update)
        // start: Forward dependencies from conv6 to transition WPIPE_system_output_pipe_1511_sample_start_
        WPIPE_system_output_pipe_1511_sample_start_ <-& (type_cast_1418_update_completed_)
        // done: Forward dependencies from conv6 to transition WPIPE_system_output_pipe_1511_sample_start_
        // end:  		system_output_pipe := conv6 $buffering 1// bits of buffering = 8. 
        // start: 		$call sendOutput () () 
        //  file prog.linked.opt.aa, line 472
        $T[call_stmt_1514_sample_start_] 
        $T[call_stmt_1514_sample_completed_] 
        $T[call_stmt_1514_update_start_] 
        $T[call_stmt_1514_update_completed_] 
        ;;[call_stmt_1514_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1514_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1514_sample_start_ &-> (call_stmt_1514_Sample)
        call_stmt_1514_sample_completed_ <-& (call_stmt_1514_Sample)
        call_stmt_1514_sample_completed_ &-> ($null)
        call_stmt_1514_update_start_ &-> (call_stmt_1514_Update)
        call_stmt_1514_update_completed_ <-& (call_stmt_1514_Update)
        // end: 		$call sendOutput () () 
        // load-store dependencies..
        // pipe read/write dependencies for pipe timer_resp
        // read-dependencies for pipe timer_resp
        // write-dependencies for pipe timer_resp
        // signal write dependencies for timer_resp
        // pipe read/write dependencies for pipe MAIN_MEM_REQUEST
        // read-dependencies for pipe MAIN_MEM_REQUEST
        // write-dependencies for pipe MAIN_MEM_REQUEST
        // signal write dependencies for MAIN_MEM_REQUEST
        // pipe read/write dependencies for pipe MAIN_MEM_RESPONSE
        // read-dependencies for pipe MAIN_MEM_RESPONSE
        // write-dependencies for pipe MAIN_MEM_RESPONSE
        // signal write dependencies for MAIN_MEM_RESPONSE
        // pipe read/write dependencies for pipe system_output_pipe
        // read-dependencies for pipe system_output_pipe
        // write-dependencies for pipe system_output_pipe
        WPIPE_system_output_pipe_1490_sample_start_ <-& (WPIPE_system_output_pipe_1401_update_completed_)
        WPIPE_system_output_pipe_1493_sample_start_ <-& (WPIPE_system_output_pipe_1490_update_completed_)
        WPIPE_system_output_pipe_1496_sample_start_ <-& (WPIPE_system_output_pipe_1493_update_completed_)
        WPIPE_system_output_pipe_1499_sample_start_ <-& (WPIPE_system_output_pipe_1496_update_completed_)
        WPIPE_system_output_pipe_1502_sample_start_ <-& (WPIPE_system_output_pipe_1499_update_completed_)
        WPIPE_system_output_pipe_1505_sample_start_ <-& (WPIPE_system_output_pipe_1502_update_completed_)
        WPIPE_system_output_pipe_1508_sample_start_ <-& (WPIPE_system_output_pipe_1505_update_completed_)
        WPIPE_system_output_pipe_1511_sample_start_ <-& (WPIPE_system_output_pipe_1508_update_completed_)
        call_stmt_1514_sample_start_ <-& (WPIPE_system_output_pipe_1511_update_completed_)
        // signal write dependencies for system_output_pipe
        // pipe read/write dependencies for pipe timer_req
        // read-dependencies for pipe timer_req
        // write-dependencies for pipe timer_req
        // signal write dependencies for timer_req
      }
      assign_stmt_1396_to_call_stmt_1514__entry__ |-> (assign_stmt_1396_to_call_stmt_1514)
      assign_stmt_1396_to_call_stmt_1514__exit__ <-| (assign_stmt_1396_to_call_stmt_1514)
      // control-path for merge  
      //  file prog.linked.opt.aa, line 387
      //---------------------   merge statement  file prog.linked.opt.aa, line 387  --------------------------
      ||[entry_whilex_xbodyx_xi_PhiReq] 
      {
        // skipped constant phi phi_stmt_1197
        // skipped constant phi phi_stmt_1202
        // skipped constant phi phi_stmt_1207
        // skipped constant phi phi_stmt_1212
      }
      entry_whilex_xbodyx_xi |-> (entry_whilex_xbodyx_xi_PhiReq)
      $P [merge_stmt_1196_PhiReqMerge] 
      merge_stmt_1196_PhiReqMerge <-| ( entry_whilex_xbodyx_xi_PhiReq )
      ||[merge_stmt_1196_PhiAck] 
      {
        // skipped constant phi phi_stmt_1197
        // skipped constant phi phi_stmt_1202
        // skipped constant phi phi_stmt_1207
        // skipped constant phi phi_stmt_1212
      }
      merge_stmt_1196_PhiReqMerge |-> (merge_stmt_1196_PhiAck)
      merge_stmt_1196__exit__  <-| (merge_stmt_1196_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 387  --------------------------
      // control-path for merge  
      //  file prog.linked.opt.aa, line 439
      ;;[merge_stmt_1385_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_1385__entry__ |-> (merge_stmt_1385_dead_link)
      merge_stmt_1385__exit__ <-| (merge_stmt_1385_dead_link)
      //---------------------   merge statement  file prog.linked.opt.aa, line 439  --------------------------
      ||[whilex_xbodyx_xi_maxPool3Dx_xexit_PhiReq] 
      {
        ;;[phi_stmt_1386] 
        {
          ||[phi_stmt_1386_sources] 
          {
            // sources for 			$phi inc76x_xrow18x_x1x_xix_xlcssa := 			  ($cast ($uint<16>) inc76x_xrow18x_x1x_xi ) $on   whilex_xbodyx_xi_maxPool3Dx_xexit 
            // type of target is $uint<16>
            // trivial non-constant source .... interlock-buffer introduced 
            // ($cast ($uint<16>) inc76x_xrow18x_x1x_xi )
            ;;[type_cast_1389] 
            {
              // type-cast expression
              ||[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]  
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca] 
                }
              }
            }
          }
          $T [phi_stmt_1386_req] 
        }
      }
      whilex_xbodyx_xi_maxPool3Dx_xexit |-> (whilex_xbodyx_xi_maxPool3Dx_xexit_PhiReq)
      $P [merge_stmt_1385_PhiReqMerge] 
      merge_stmt_1385_PhiReqMerge <-| ( whilex_xbodyx_xi_maxPool3Dx_xexit_PhiReq )
      ||[merge_stmt_1385_PhiAck] 
      {
        $T [phi_stmt_1386_ack] 
      }
      merge_stmt_1385_PhiReqMerge |-> (merge_stmt_1385_PhiAck)
      merge_stmt_1385__exit__  <-| (merge_stmt_1385_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 439  --------------------------
      // control-path for merge  
      //  file prog.linked.opt.aa, line 474
      //---------------------   merge statement  file prog.linked.opt.aa, line 474  --------------------------
      ||[return___PhiReq] 
      {
        // no phi statements in merge..
      }
      return__ |-> (return___PhiReq)
      $P [merge_stmt_1516_PhiReqMerge] 
      merge_stmt_1516_PhiReqMerge <-| ( return___PhiReq )
      ||[merge_stmt_1516_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_1516_PhiReqMerge |-> (merge_stmt_1516_PhiAck)
      merge_stmt_1516__exit__  <-| (merge_stmt_1516_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 474  --------------------------
      call_stmt_1192_to_call_stmt_1194__entry__ <-| (branch_block_stmt_1191__entry__)
      entry_whilex_xbodyx_xi <-| (call_stmt_1192_to_call_stmt_1194__exit__)
      do_while_stmt_1218__entry__ <-| (merge_stmt_1196__exit__)
      if_stmt_1381__entry__ <-| (do_while_stmt_1218__exit__)
      merge_stmt_1385__entry__ <-| (if_stmt_1381__exit__)
      assign_stmt_1396_to_call_stmt_1514__entry__ <-| (merge_stmt_1385__exit__)
      return__ <-| (assign_stmt_1396_to_call_stmt_1514__exit__)
      merge_stmt_1516__exit__ |-> (branch_block_stmt_1191__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %systemTOP%body%
    //  file prog.linked.opt.aa, line 387
    // constant-object-declarations for block %systemTOP%body%
    //  file prog.linked.opt.aa, line 399
    // constant-object-declarations for block %systemTOP%body%
    //  file prog.linked.opt.aa, line 439
    // constant-object-declarations for block %systemTOP%body%
    //  file prog.linked.opt.aa, line 474
    // constant-object-declarations for block %systemTOP%body
    //  file prog.linked.opt.aa, line 382
    // constant-object-declarations for block %systemTOP
    //  file prog.linked.opt.aa, line 377
    // constant-declarations for block %systemTOP%body
    //  file prog.linked.opt.aa, line 382
    // 		$call fill_input () () 
    //  file prog.linked.opt.aa, line 384
    // 		$call timer () (call ) 
    //  file prog.linked.opt.aa, line 385
    // constant-declarations for block %systemTOP%body%
    //  file prog.linked.opt.aa, line 387
    // constant-declarations for phi:  			$phi iNsTr_2_at_entry := 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   entry_whilex_xbodyx_xi 
    // type of target is $uint<32>
    //  file prog.linked.opt.aa, line 388
    $constant $W[iNsTr_2_at_entry_1197] : $int<32> := _b00000000000000000000000000000000 // 0
    // constant-declarations for phi:  			$phi row18x_x1x_xi_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   entry_whilex_xbodyx_xi 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 390
    $constant $W[row18x_x1x_xi_at_entry_1202] : $int<16> := _b0000000000000000 // 0
    // constant-declarations for phi:  			$phi colx_x1x_xi_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   entry_whilex_xbodyx_xi 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 392
    $constant $W[colx_x1x_xi_at_entry_1207] : $int<16> := _b0000000000000000 // 0
    // constant-declarations for phi:  			$phi chlx_x0x_xi_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   entry_whilex_xbodyx_xi 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 394
    $constant $W[chlx_x0x_xi_at_entry_1212] : $int<16> := _b0000000000000000 // 0
    // do-while statement  
    //  file prog.linked.opt.aa, line 397
    // constant-declarations for block %systemTOP%body%
    //  file prog.linked.opt.aa, line 399
    // constant-declarations for phi:  			$phi iNsTr_2 := 			  ($cast ($uint<32>) add79x_xi ) $on   $loopback 			  iNsTr_2_at_entry $on   $entry 
    // type of target is $uint<32>
    //  file prog.linked.opt.aa, line 400
    // constant-declarations for phi:  			$phi row18x_x1x_xi := 			  ($cast ($uint<16>) inc76x_xrow18x_x1x_xi ) $on   $loopback 			  row18x_x1x_xi_at_entry $on   $entry 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 402
    // constant-declarations for phi:  			$phi colx_x1x_xi := 			  ($cast ($uint<16>) colx_x2x_xi ) $on   $loopback 			  colx_x1x_xi_at_entry $on   $entry 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 404
    // constant-declarations for phi:  			$phi chlx_x0x_xi := 			  ($cast ($uint<16>) chlx_x1x_xi ) $on   $loopback 			  chlx_x0x_xi_at_entry $on   $entry 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 406
    // ($bitcast ($uint<32>) _b00000000000000000000000001110000  )
    $constant $W[type_cast_1256_wire_constant] : $int<32> := _b00000000000000000000000001110000// 112
    // ($bitcast ($uint<32>) _b00000000000000000000000000000101  )
    $constant $W[type_cast_1267_wire_constant] : $int<32> := _b00000000000000000000000000000101// 5
    // ($bitcast ($uint<32>) _b00000000000000000000000000010000  )
    $constant $W[type_cast_1278_wire_constant] : $int<32> := _b00000000000000000000000000010000// 16
    // ($bitcast ($uint<32>) _b00000000000000000000011100000000  )
    $constant $W[type_cast_1284_wire_constant] : $int<32> := _b00000000000000000000011100000000// 1792
    // ($bitcast ($uint<32>) _b00000000000000000000011100010000  )
    $constant $W[type_cast_1290_wire_constant] : $int<32> := _b00000000000000000000011100010000// 1808
    // 			$call maxPool4 (iNsTr_2_1278_delayed_1_0 add43x_xi add50x_xi add54x_xi add57x_xi ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000000  ) ) (callx_xi ) 
    //  file prog.linked.opt.aa, line 420
    // ($bitcast ($uint<8>) _b00000001  )
    $constant $W[type_cast_1302_wire_constant] : $int<8> := _b00000001// 1
    // ($bitcast ($uint<8>) _b00000000  )
    $constant $W[type_cast_1304_wire_constant] : $int<8> := _b00000000// 0
    // ($bitcast ($uint<16>) _b0000000000000001  )
    $constant $W[type_cast_1310_wire_constant] : $int<16> := _b0000000000000001// 1
    // ($bitcast ($uint<16>) _b0000000000010000  )
    $constant $W[type_cast_1316_wire_constant] : $int<16> := _b0000000000010000// 16
    // ( $mux cmpx_xi ($bitcast ($uint<16>) _b0000000000000000  )  incx_xi ) 
    // ($bitcast ($uint<16>) _b0000000000000000  )
    $constant $W[type_cast_1334_wire_constant] : $int<16> := _b0000000000000000// 0
    // ($bitcast ($uint<16>) _b0000000000111000  )
    $constant $W[type_cast_1341_wire_constant] : $int<16> := _b0000000000111000// 56
    // ( $mux cmp72x_xi ($bitcast ($uint<16>) _b0000000000000000  )  inc67x_xcolx_x1x_xi ) 
    // ($bitcast ($uint<16>) _b0000000000000000  )
    $constant $W[type_cast_1359_wire_constant] : $int<16> := _b0000000000000000// 0
    // ($bitcast ($uint<32>) _b00000000000000000000000000000001  )
    $constant $W[type_cast_1366_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // ($bitcast ($uint<16>) _b0000000000111000  )
    $constant $W[type_cast_1372_wire_constant] : $int<16> := _b0000000000111000// 56
    // if-statement  
    //  file prog.linked.opt.aa, line 0
    // constant-declarations for block %systemTOP%body%
    //  file prog.linked.opt.aa, line 439
    // constant-declarations for phi:  			$phi inc76x_xrow18x_x1x_xix_xlcssa := 			  ($cast ($uint<16>) inc76x_xrow18x_x1x_xi ) $on   whilex_xbodyx_xi_maxPool3Dx_xexit 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 440
    // 		$call timer () (call1 ) 
    //  file prog.linked.opt.aa, line 446
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )
    $constant $W[type_cast_1423_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000001000// 8
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  )
    $constant $W[type_cast_1433_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000010000// 16
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  )
    $constant $W[type_cast_1443_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000011000// 24
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  )
    $constant $W[type_cast_1453_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000100000// 32
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  )
    $constant $W[type_cast_1463_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000101000// 40
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  )
    $constant $W[type_cast_1473_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000110000// 48
    // ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  )
    $constant $W[type_cast_1483_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000111000// 56
    // 		$call sendOutput () () 
    //  file prog.linked.opt.aa, line 472
    // constant-declarations for block %systemTOP%body%
    //  file prog.linked.opt.aa, line 474
    // block %systemTOP%body
    //  file prog.linked.opt.aa, line 382
    // 		$call fill_input () () 
    //  file prog.linked.opt.aa, line 384
    // 		$call timer () (call ) 
    //  file prog.linked.opt.aa, line 385
    // call
    $W[call_1194] : $int<64>
    // merge-statement  
    //  file prog.linked.opt.aa, line 387
    // do-while statement  
    //  file prog.linked.opt.aa, line 397
    // ( ~ cmp84x_xi )
    $intermediate $W[NOT_u1_u1_1380_wire] : $int<1>
    // merge-statement  
    //  file prog.linked.opt.aa, line 399
    // 			$phi iNsTr_2 := 			  ($cast ($uint<32>) add79x_xi ) $on   $loopback 			  iNsTr_2_at_entry $on   $entry 
    // type of target is $uint<32>
    //  file prog.linked.opt.aa, line 400
    // ($cast ($uint<32>) add79x_xi )
    $intermediate $W[type_cast_1223_wire] : $int<32>
    // iNsTr_2
    $W[iNsTr_2_1220] : $int<32>
    // 			$phi row18x_x1x_xi := 			  ($cast ($uint<16>) inc76x_xrow18x_x1x_xi ) $on   $loopback 			  row18x_x1x_xi_at_entry $on   $entry 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 402
    // ($cast ($uint<16>) inc76x_xrow18x_x1x_xi )
    $intermediate $W[type_cast_1228_wire] : $int<16>
    // row18x_x1x_xi
    $W[row18x_x1x_xi_1225] : $int<16>
    // 			$phi colx_x1x_xi := 			  ($cast ($uint<16>) colx_x2x_xi ) $on   $loopback 			  colx_x1x_xi_at_entry $on   $entry 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 404
    // ($cast ($uint<16>) colx_x2x_xi )
    $intermediate $W[type_cast_1233_wire] : $int<16>
    // colx_x1x_xi
    $W[colx_x1x_xi_1230] : $int<16>
    // 			$phi chlx_x0x_xi := 			  ($cast ($uint<16>) chlx_x1x_xi ) $on   $loopback 			  chlx_x0x_xi_at_entry $on   $entry 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 406
    // ($cast ($uint<16>) chlx_x1x_xi )
    $intermediate $W[type_cast_1238_wire] : $int<16>
    // chlx_x0x_xi
    $W[chlx_x0x_xi_1235] : $int<16>
    // 			conv31x_xi := ($cast ($uint<32>) chlx_x0x_xi ) $buffering 1// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 409
    // conv31x_xi
    $W[conv31x_xi_1244] : $int<32>
    // 			conv35x_xi := ($cast ($uint<32>) colx_x1x_xi ) $buffering 1// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 410
    // conv35x_xi
    $W[conv35x_xi_1248] : $int<32>
    // 			conv39x_xi := ($cast ($uint<32>) row18x_x1x_xi ) $buffering 1// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 411
    // conv39x_xi
    $W[conv39x_xi_1252] : $int<32>
    // 			$volatile mul40x_xi := (conv39x_xi * ($bitcast ($uint<32>) _b00000000000000000000000001110000  )) $buffering 1
    //  file prog.linked.opt.aa, line 412
    // mul40x_xi
    $W[mul40x_xi_1258] : $int<32>
    // 			$volatile add41x_xi := (conv35x_xi + mul40x_xi) $buffering 1
    //  file prog.linked.opt.aa, line 413
    // add41x_xi
    $W[add41x_xi_1263] : $int<32>
    // 			$volatile shlx_xi := (add41x_xi << ($bitcast ($uint<32>) _b00000000000000000000000000000101  )) $buffering 1
    //  file prog.linked.opt.aa, line 414
    // shlx_xi
    $W[shlx_xi_1269] : $int<32>
    // 			$volatile add43x_xi := (shlx_xi + conv31x_xi) $buffering 1
    //  file prog.linked.opt.aa, line 415
    // add43x_xi
    $W[add43x_xi_1274] : $int<32>
    // 			$volatile add50x_xi := (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000000000010000  )) $buffering 1
    //  file prog.linked.opt.aa, line 416
    // add50x_xi
    $W[add50x_xi_1280] : $int<32>
    // 			$volatile add54x_xi := (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000011100000000  )) $buffering 1
    //  file prog.linked.opt.aa, line 417
    // add54x_xi
    $W[add54x_xi_1286] : $int<32>
    // 			$volatile add57x_xi := (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000011100010000  )) $buffering 1
    //  file prog.linked.opt.aa, line 418
    // add57x_xi
    $W[add57x_xi_1292] : $int<32>
    // 			iNsTr_2_1278_delayed_1_0 := iNsTr_2 $buffering 1 $cut_through // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 419
    // iNsTr_2_1278_delayed_1_0
    $W[iNsTr_2_1278_delayed_1_0_1295] : $int<32>
    // 			$call maxPool4 (iNsTr_2_1278_delayed_1_0 add43x_xi add50x_xi add54x_xi add57x_xi ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000000  ) ) (callx_xi ) 
    //  file prog.linked.opt.aa, line 420
    // callx_xi
    $W[callx_xi_1306] : $int<8>
    // 			$volatile incx_xi := (chlx_x0x_xi + ($bitcast ($uint<16>) _b0000000000000001  )) $buffering 1
    //  file prog.linked.opt.aa, line 421
    // incx_xi
    $W[incx_xi_1312] : $int<16>
    // 			$volatile cmpx_xi := (incx_xi == ($bitcast ($uint<16>) _b0000000000010000  )) $buffering 1
    //  file prog.linked.opt.aa, line 422
    // cmpx_xi
    $W[cmpx_xi_1318] : $int<1>
    // 			inc67x_xi := ($cast ($uint<16>) cmpx_xi ) $buffering 2// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 423
    // inc67x_xi
    $W[inc67x_xi_1322] : $int<16>
    // 			colx_x1x_xi_1307_delayed_1_0 := colx_x1x_xi $buffering 2 $cut_through // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 424
    // colx_x1x_xi_1307_delayed_1_0
    $W[colx_x1x_xi_1307_delayed_1_0_1325] : $int<16>
    // 			$volatile inc67x_xcolx_x1x_xi := (inc67x_xi + colx_x1x_xi_1307_delayed_1_0) $buffering 1
    //  file prog.linked.opt.aa, line 425
    // inc67x_xcolx_x1x_xi
    $W[inc67x_xcolx_x1x_xi_1330] : $int<16>
    // 			$volatile chlx_x1x_xi := ( $mux cmpx_xi ($bitcast ($uint<16>) _b0000000000000000  )  incx_xi )  $buffering 1
    //  file prog.linked.opt.aa, line 426
    // chlx_x1x_xi
    $W[chlx_x1x_xi_1337] : $int<16>
    // 			$volatile cmp72x_xi := (inc67x_xcolx_x1x_xi == ($bitcast ($uint<16>) _b0000000000111000  )) $buffering 1
    //  file prog.linked.opt.aa, line 427
    // cmp72x_xi
    $W[cmp72x_xi_1343] : $int<1>
    // 			inc76x_xi := ($cast ($uint<16>) cmp72x_xi ) $buffering 2// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 428
    // inc76x_xi
    $W[inc76x_xi_1347] : $int<16>
    // 			row18x_x1x_xi_1329_delayed_2_0 := row18x_x1x_xi $buffering 2 $cut_through // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 429
    // row18x_x1x_xi_1329_delayed_2_0
    $W[row18x_x1x_xi_1329_delayed_2_0_1350] : $int<16>
    // 			$volatile inc76x_xrow18x_x1x_xi := (inc76x_xi + row18x_x1x_xi_1329_delayed_2_0) $buffering 1
    //  file prog.linked.opt.aa, line 430
    // inc76x_xrow18x_x1x_xi
    $W[inc76x_xrow18x_x1x_xi_1355] : $int<16>
    // 			$volatile colx_x2x_xi := ( $mux cmp72x_xi ($bitcast ($uint<16>) _b0000000000000000  )  inc67x_xcolx_x1x_xi )  $buffering 1
    //  file prog.linked.opt.aa, line 431
    // colx_x2x_xi
    $W[colx_x2x_xi_1362] : $int<16>
    // 			$volatile add79x_xi := (iNsTr_2 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
    //  file prog.linked.opt.aa, line 432
    // add79x_xi
    $W[add79x_xi_1368] : $int<32>
    // 			$volatile cmp84x_xi := (inc76x_xrow18x_x1x_xi == ($bitcast ($uint<16>) _b0000000000111000  )) $buffering 1
    //  file prog.linked.opt.aa, line 433
    // cmp84x_xi
    $W[cmp84x_xi_1374] : $int<1>
    // 			$volatile whilex_xbodyx_xi_maxPool3Dx_xexit_taken := cmp84x_xi $buffering 1
    //  file prog.linked.opt.aa, line 434
    // whilex_xbodyx_xi_maxPool3Dx_xexit_taken
    $W[whilex_xbodyx_xi_maxPool3Dx_xexit_taken_1377] : $int<1>
    // if statement  
    //  file prog.linked.opt.aa, line 0
    // merge-statement  
    //  file prog.linked.opt.aa, line 439
    // 			$phi inc76x_xrow18x_x1x_xix_xlcssa := 			  ($cast ($uint<16>) inc76x_xrow18x_x1x_xi ) $on   whilex_xbodyx_xi_maxPool3Dx_xexit 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 440
    // ($cast ($uint<16>) inc76x_xrow18x_x1x_xi )
    $intermediate $W[type_cast_1389_wire] : $int<16>
    // inc76x_xrow18x_x1x_xix_xlcssa
    $W[inc76x_xrow18x_x1x_xix_xlcssa_1386] : $int<16>
    // 		conv := ($bitcast ($uint<64>) ($cast ($int<64>) call ) ) $buffering 1// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 443
    // ($cast ($int<64>) call )
    $intermediate $W[type_cast_1394_wire] : $int<64>
    // conv
    $W[conv_1396] : $int<64>
    // 		conv89x_xi := ($cast ($uint<8>) inc76x_xrow18x_x1x_xix_xlcssa ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 444
    // conv89x_xi
    $W[conv89x_xi_1400] : $int<8>
    // 		system_output_pipe := conv89x_xi $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 445
    // system_output_pipe
    // 		$call timer () (call1 ) 
    //  file prog.linked.opt.aa, line 446
    // call1
    $W[call1_1405] : $int<64>
    // 		conv2 := ($bitcast ($uint<64>) ($cast ($int<64>) call1 ) ) $buffering 1// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 447
    // ($cast ($int<64>) call1 )
    $intermediate $W[type_cast_1408_wire] : $int<64>
    // conv2
    $W[conv2_1410] : $int<64>
    // 		$volatile sub := (conv2 - conv) $buffering 1
    //  file prog.linked.opt.aa, line 448
    // sub
    $W[sub_1415] : $int<64>
    // 		conv6 := ($cast ($uint<8>) sub ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 449
    // conv6
    $W[conv6_1419] : $int<8>
    // 		$volatile shr := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    //  file prog.linked.opt.aa, line 450
    // shr
    $W[shr_1425] : $int<64>
    // 		conv10 := ($cast ($uint<8>) shr ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 451
    // conv10
    $W[conv10_1429] : $int<8>
    // 		$volatile shr13 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  )) $buffering 1
    //  file prog.linked.opt.aa, line 452
    // shr13
    $W[shr13_1435] : $int<64>
    // 		conv16 := ($cast ($uint<8>) shr13 ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 453
    // conv16
    $W[conv16_1439] : $int<8>
    // 		$volatile shr19 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  )) $buffering 1
    //  file prog.linked.opt.aa, line 454
    // shr19
    $W[shr19_1445] : $int<64>
    // 		conv22 := ($cast ($uint<8>) shr19 ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 455
    // conv22
    $W[conv22_1449] : $int<8>
    // 		$volatile shr25 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  )) $buffering 1
    //  file prog.linked.opt.aa, line 456
    // shr25
    $W[shr25_1455] : $int<64>
    // 		conv28 := ($cast ($uint<8>) shr25 ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 457
    // conv28
    $W[conv28_1459] : $int<8>
    // 		$volatile shr31 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  )) $buffering 1
    //  file prog.linked.opt.aa, line 458
    // shr31
    $W[shr31_1465] : $int<64>
    // 		conv34 := ($cast ($uint<8>) shr31 ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 459
    // conv34
    $W[conv34_1469] : $int<8>
    // 		$volatile shr37 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  )) $buffering 1
    //  file prog.linked.opt.aa, line 460
    // shr37
    $W[shr37_1475] : $int<64>
    // 		conv40 := ($cast ($uint<8>) shr37 ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 461
    // conv40
    $W[conv40_1479] : $int<8>
    // 		$volatile shr43 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  )) $buffering 1
    //  file prog.linked.opt.aa, line 462
    // shr43
    $W[shr43_1485] : $int<64>
    // 		conv46 := ($cast ($uint<8>) shr43 ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 463
    // conv46
    $W[conv46_1489] : $int<8>
    // 		system_output_pipe := conv46 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 464
    // system_output_pipe
    // 		system_output_pipe := conv40 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 465
    // system_output_pipe
    // 		system_output_pipe := conv34 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 466
    // system_output_pipe
    // 		system_output_pipe := conv28 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 467
    // system_output_pipe
    // 		system_output_pipe := conv22 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 468
    // system_output_pipe
    // 		system_output_pipe := conv16 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 469
    // system_output_pipe
    // 		system_output_pipe := conv10 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 470
    // system_output_pipe
    // 		system_output_pipe := conv6 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 471
    // system_output_pipe
    // 		$call sendOutput () () 
    //  file prog.linked.opt.aa, line 472
    // datapath-instances for block %systemTOP%body
    //  file prog.linked.opt.aa, line 382
    // 		$call fill_input () () 
    //  file prog.linked.opt.aa, line 384
    $call [call_stmt_1192_call] $module fill_input() ()  
    $delay call_stmt_1192_call 4
    // 		$call timer () (call ) 
    //  file prog.linked.opt.aa, line 385
    $call [call_stmt_1194_call] $module timer() (call_1194)  
    $delay call_stmt_1194_call 4
    $buffering  $out call_stmt_1194_call call_1194 1
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 387
    // 			$phi iNsTr_2_at_entry := 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   entry_whilex_xbodyx_xi 
    // type of target is $uint<32>
    //  file prog.linked.opt.aa, line 388
    // constant phi data-path element skipped phi_stmt_1197
    // 			$phi row18x_x1x_xi_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   entry_whilex_xbodyx_xi 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 390
    // constant phi data-path element skipped phi_stmt_1202
    // 			$phi colx_x1x_xi_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   entry_whilex_xbodyx_xi 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 392
    // constant phi data-path element skipped phi_stmt_1207
    // 			$phi chlx_x0x_xi_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   entry_whilex_xbodyx_xi 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 394
    // constant phi data-path element skipped phi_stmt_1212
    // datapath-instances for do-while  
    //  file prog.linked.opt.aa, line 397
    // ( ~ cmp84x_xi )
    ~ [NOT_u1_u1_1380_inst] (cmp84x_xi_1374) (NOT_u1_u1_1380_wire)   $flowthrough
    $delay NOT_u1_u1_1380_inst 0
    ==0? [do_while_stmt_1218_branch] (NOT_u1_u1_1380_wire)
    $flowthrough
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 399
    // 			$phi iNsTr_2 := 			  ($cast ($uint<32>) add79x_xi ) $on   $loopback 			  iNsTr_2_at_entry $on   $entry 
    // type of target is $uint<32>
    //  file prog.linked.opt.aa, line 400
    // ($cast ($uint<32>) add79x_xi )
    # := [type_cast_1223_inst] (add79x_xi_1368) (type_cast_1223_wire)     $fullrate
    $buffering  $out type_cast_1223_inst type_cast_1223_wire 1
    $delay type_cast_1223_inst 1
    # $phi [phi_stmt_1220] (type_cast_1223_wire iNsTr_2_at_entry_1197) ( iNsTr_2_1220 ) $fullrate
    // $buffering  $out phi_stmt_1220 iNsTr_2_1220 2
    // 			$phi row18x_x1x_xi := 			  ($cast ($uint<16>) inc76x_xrow18x_x1x_xi ) $on   $loopback 			  row18x_x1x_xi_at_entry $on   $entry 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 402
    // ($cast ($uint<16>) inc76x_xrow18x_x1x_xi )
    # := [type_cast_1228_inst] (inc76x_xrow18x_x1x_xi_1355) (type_cast_1228_wire)     $fullrate
    $buffering  $out type_cast_1228_inst type_cast_1228_wire 1
    $delay type_cast_1228_inst 1
    # $phi [phi_stmt_1225] (type_cast_1228_wire row18x_x1x_xi_at_entry_1202) ( row18x_x1x_xi_1225 ) $fullrate
    // $buffering  $out phi_stmt_1225 row18x_x1x_xi_1225 2
    // 			$phi colx_x1x_xi := 			  ($cast ($uint<16>) colx_x2x_xi ) $on   $loopback 			  colx_x1x_xi_at_entry $on   $entry 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 404
    // ($cast ($uint<16>) colx_x2x_xi )
    # := [type_cast_1233_inst] (colx_x2x_xi_1362) (type_cast_1233_wire)     $fullrate
    $buffering  $out type_cast_1233_inst type_cast_1233_wire 1
    $delay type_cast_1233_inst 1
    # $phi [phi_stmt_1230] (type_cast_1233_wire colx_x1x_xi_at_entry_1207) ( colx_x1x_xi_1230 ) $fullrate
    // $buffering  $out phi_stmt_1230 colx_x1x_xi_1230 2
    // 			$phi chlx_x0x_xi := 			  ($cast ($uint<16>) chlx_x1x_xi ) $on   $loopback 			  chlx_x0x_xi_at_entry $on   $entry 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 406
    // ($cast ($uint<16>) chlx_x1x_xi )
    # := [type_cast_1238_inst] (chlx_x1x_xi_1337) (type_cast_1238_wire)     $fullrate
    $buffering  $out type_cast_1238_inst type_cast_1238_wire 1
    $delay type_cast_1238_inst 1
    # $phi [phi_stmt_1235] (type_cast_1238_wire chlx_x0x_xi_at_entry_1212) ( chlx_x0x_xi_1235 ) $fullrate
    // $buffering  $out phi_stmt_1235 chlx_x0x_xi_1235 2
    // 			conv31x_xi := ($cast ($uint<32>) chlx_x0x_xi ) $buffering 1// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 409
    // ($cast ($uint<32>) chlx_x0x_xi )
    # := [type_cast_1243_inst] (chlx_x0x_xi_1235) (conv31x_xi_1244)     $fullrate
    $buffering  $out type_cast_1243_inst conv31x_xi_1244 1
    $delay type_cast_1243_inst 1
    // 			conv35x_xi := ($cast ($uint<32>) colx_x1x_xi ) $buffering 1// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 410
    // ($cast ($uint<32>) colx_x1x_xi )
    # := [type_cast_1247_inst] (colx_x1x_xi_1230) (conv35x_xi_1248)     $fullrate
    $buffering  $out type_cast_1247_inst conv35x_xi_1248 1
    $delay type_cast_1247_inst 1
    // 			conv39x_xi := ($cast ($uint<32>) row18x_x1x_xi ) $buffering 1// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 411
    // ($cast ($uint<32>) row18x_x1x_xi )
    # := [type_cast_1251_inst] (row18x_x1x_xi_1225) (conv39x_xi_1252)     $fullrate
    $buffering  $out type_cast_1251_inst conv39x_xi_1252 1
    $delay type_cast_1251_inst 1
    // 			$volatile mul40x_xi := (conv39x_xi * ($bitcast ($uint<32>) _b00000000000000000000000001110000  )) $buffering 1
    //  file prog.linked.opt.aa, line 412
    // (conv39x_xi * ($bitcast ($uint<32>) _b00000000000000000000000001110000  ))
    *[MUL_u32_u32_1257_inst] (conv39x_xi_1252 type_cast_1256_wire_constant) (mul40x_xi_1258)   $flowthrough 
    $delay MUL_u32_u32_1257_inst 0
    // 			$volatile add41x_xi := (conv35x_xi + mul40x_xi) $buffering 1
    //  file prog.linked.opt.aa, line 413
    // (conv35x_xi + mul40x_xi)
    +[ADD_u32_u32_1262_inst] (conv35x_xi_1248 mul40x_xi_1258) (add41x_xi_1263)   $flowthrough 
    $delay ADD_u32_u32_1262_inst 0
    // 			$volatile shlx_xi := (add41x_xi << ($bitcast ($uint<32>) _b00000000000000000000000000000101  )) $buffering 1
    //  file prog.linked.opt.aa, line 414
    // (add41x_xi << ($bitcast ($uint<32>) _b00000000000000000000000000000101  ))
    <<[SHL_u32_u32_1268_inst] (add41x_xi_1263 type_cast_1267_wire_constant) (shlx_xi_1269)   $flowthrough 
    $delay SHL_u32_u32_1268_inst 0
    // 			$volatile add43x_xi := (shlx_xi + conv31x_xi) $buffering 1
    //  file prog.linked.opt.aa, line 415
    // (shlx_xi + conv31x_xi)
    +[ADD_u32_u32_1273_inst] (shlx_xi_1269 conv31x_xi_1244) (add43x_xi_1274)   $flowthrough 
    $delay ADD_u32_u32_1273_inst 0
    // 			$volatile add50x_xi := (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000000000010000  )) $buffering 1
    //  file prog.linked.opt.aa, line 416
    // (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000000000010000  ))
    +[ADD_u32_u32_1279_inst] (add43x_xi_1274 type_cast_1278_wire_constant) (add50x_xi_1280)   $flowthrough 
    $delay ADD_u32_u32_1279_inst 0
    // 			$volatile add54x_xi := (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000011100000000  )) $buffering 1
    //  file prog.linked.opt.aa, line 417
    // (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000011100000000  ))
    +[ADD_u32_u32_1285_inst] (add43x_xi_1274 type_cast_1284_wire_constant) (add54x_xi_1286)   $flowthrough 
    $delay ADD_u32_u32_1285_inst 0
    // 			$volatile add57x_xi := (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000011100010000  )) $buffering 1
    //  file prog.linked.opt.aa, line 418
    // (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000011100010000  ))
    +[ADD_u32_u32_1291_inst] (add43x_xi_1274 type_cast_1290_wire_constant) (add57x_xi_1292)   $flowthrough 
    $delay ADD_u32_u32_1291_inst 0
    // 			iNsTr_2_1278_delayed_1_0 := iNsTr_2 $buffering 1 $cut_through // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 419
    # := [W_iNsTr_2_1278_delayed_1_0_1293_inst] (iNsTr_2_1220) (iNsTr_2_1278_delayed_1_0_1295)  $cut_through    $fullrate
    // 			$call maxPool4 (iNsTr_2_1278_delayed_1_0 add43x_xi add50x_xi add54x_xi add57x_xi ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000000  ) ) (callx_xi ) 
    //  file prog.linked.opt.aa, line 420
    $call [call_stmt_1306_call] $module maxPool4(iNsTr_2_1278_delayed_1_0_1295 add43x_xi_1274 add50x_xi_1280 add54x_xi_1286 add57x_xi_1292 type_cast_1302_wire_constant type_cast_1304_wire_constant) (callx_xi_1306)   $fullrate
    $delay call_stmt_1306_call 15
    $buffering  $in call_stmt_1306_call iNsTr_2_1278_delayed_1_0_1295 1
    $buffering  $in call_stmt_1306_call add43x_xi_1274 1
    $buffering  $in call_stmt_1306_call add50x_xi_1280 1
    $buffering  $in call_stmt_1306_call add54x_xi_1286 1
    $buffering  $in call_stmt_1306_call add57x_xi_1292 1
    $buffering  $in call_stmt_1306_call type_cast_1302_wire_constant 1
    $buffering  $in call_stmt_1306_call type_cast_1304_wire_constant 1
    $buffering  $out call_stmt_1306_call callx_xi_1306 1
    // 			$volatile incx_xi := (chlx_x0x_xi + ($bitcast ($uint<16>) _b0000000000000001  )) $buffering 1
    //  file prog.linked.opt.aa, line 421
    // (chlx_x0x_xi + ($bitcast ($uint<16>) _b0000000000000001  ))
    +[ADD_u16_u16_1311_inst] (chlx_x0x_xi_1235 type_cast_1310_wire_constant) (incx_xi_1312)   $flowthrough 
    $delay ADD_u16_u16_1311_inst 0
    // 			$volatile cmpx_xi := (incx_xi == ($bitcast ($uint<16>) _b0000000000010000  )) $buffering 1
    //  file prog.linked.opt.aa, line 422
    // (incx_xi == ($bitcast ($uint<16>) _b0000000000010000  ))
    ==[EQ_u16_u1_1317_inst] (incx_xi_1312 type_cast_1316_wire_constant) (cmpx_xi_1318)   $flowthrough 
    $delay EQ_u16_u1_1317_inst 0
    // 			inc67x_xi := ($cast ($uint<16>) cmpx_xi ) $buffering 2// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 423
    // ($cast ($uint<16>) cmpx_xi )
    # := [type_cast_1321_inst] (cmpx_xi_1318) (inc67x_xi_1322)     $fullrate
    $buffering  $out type_cast_1321_inst inc67x_xi_1322 2
    $delay type_cast_1321_inst 1
    // 			colx_x1x_xi_1307_delayed_1_0 := colx_x1x_xi $buffering 2 $cut_through // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 424
    # := [W_colx_x1x_xi_1307_delayed_1_0_1323_inst] (colx_x1x_xi_1230) (colx_x1x_xi_1307_delayed_1_0_1325)  $cut_through    $fullrate
    $buffering  $out W_colx_x1x_xi_1307_delayed_1_0_1323_inst colx_x1x_xi_1307_delayed_1_0_1325 2
    // 			$volatile inc67x_xcolx_x1x_xi := (inc67x_xi + colx_x1x_xi_1307_delayed_1_0) $buffering 1
    //  file prog.linked.opt.aa, line 425
    // (inc67x_xi + colx_x1x_xi_1307_delayed_1_0)
    +[ADD_u16_u16_1329_inst] (inc67x_xi_1322 colx_x1x_xi_1307_delayed_1_0_1325) (inc67x_xcolx_x1x_xi_1330)   $flowthrough 
    $delay ADD_u16_u16_1329_inst 0
    // 			$volatile chlx_x1x_xi := ( $mux cmpx_xi ($bitcast ($uint<16>) _b0000000000000000  )  incx_xi )  $buffering 1
    //  file prog.linked.opt.aa, line 426
    // ( $mux cmpx_xi ($bitcast ($uint<16>) _b0000000000000000  )  incx_xi ) 
    ? [MUX_1336_inst] (cmpx_xi_1318 type_cast_1334_wire_constant incx_xi_1312) (chlx_x1x_xi_1337)  $flowthrough
    // 			$volatile cmp72x_xi := (inc67x_xcolx_x1x_xi == ($bitcast ($uint<16>) _b0000000000111000  )) $buffering 1
    //  file prog.linked.opt.aa, line 427
    // (inc67x_xcolx_x1x_xi == ($bitcast ($uint<16>) _b0000000000111000  ))
    ==[EQ_u16_u1_1342_inst] (inc67x_xcolx_x1x_xi_1330 type_cast_1341_wire_constant) (cmp72x_xi_1343)   $flowthrough 
    $delay EQ_u16_u1_1342_inst 0
    // 			inc76x_xi := ($cast ($uint<16>) cmp72x_xi ) $buffering 2// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 428
    // ($cast ($uint<16>) cmp72x_xi )
    # := [type_cast_1346_inst] (cmp72x_xi_1343) (inc76x_xi_1347)     $fullrate
    $buffering  $out type_cast_1346_inst inc76x_xi_1347 2
    $delay type_cast_1346_inst 1
    // 			row18x_x1x_xi_1329_delayed_2_0 := row18x_x1x_xi $buffering 2 $cut_through // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 429
    # := [W_row18x_x1x_xi_1329_delayed_2_0_1348_inst] (row18x_x1x_xi_1225) (row18x_x1x_xi_1329_delayed_2_0_1350)  $cut_through    $fullrate
    $buffering  $out W_row18x_x1x_xi_1329_delayed_2_0_1348_inst row18x_x1x_xi_1329_delayed_2_0_1350 2
    // 			$volatile inc76x_xrow18x_x1x_xi := (inc76x_xi + row18x_x1x_xi_1329_delayed_2_0) $buffering 1
    //  file prog.linked.opt.aa, line 430
    // (inc76x_xi + row18x_x1x_xi_1329_delayed_2_0)
    +[ADD_u16_u16_1354_inst] (inc76x_xi_1347 row18x_x1x_xi_1329_delayed_2_0_1350) (inc76x_xrow18x_x1x_xi_1355)   $flowthrough 
    $delay ADD_u16_u16_1354_inst 0
    // 			$volatile colx_x2x_xi := ( $mux cmp72x_xi ($bitcast ($uint<16>) _b0000000000000000  )  inc67x_xcolx_x1x_xi )  $buffering 1
    //  file prog.linked.opt.aa, line 431
    // ( $mux cmp72x_xi ($bitcast ($uint<16>) _b0000000000000000  )  inc67x_xcolx_x1x_xi ) 
    ? [MUX_1361_inst] (cmp72x_xi_1343 type_cast_1359_wire_constant inc67x_xcolx_x1x_xi_1330) (colx_x2x_xi_1362)  $flowthrough
    // 			$volatile add79x_xi := (iNsTr_2 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
    //  file prog.linked.opt.aa, line 432
    // (iNsTr_2 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  ))
    +[ADD_u32_u32_1367_inst] (iNsTr_2_1220 type_cast_1366_wire_constant) (add79x_xi_1368)   $flowthrough 
    $delay ADD_u32_u32_1367_inst 0
    // 			$volatile cmp84x_xi := (inc76x_xrow18x_x1x_xi == ($bitcast ($uint<16>) _b0000000000111000  )) $buffering 1
    //  file prog.linked.opt.aa, line 433
    // (inc76x_xrow18x_x1x_xi == ($bitcast ($uint<16>) _b0000000000111000  ))
    ==[EQ_u16_u1_1373_inst] (inc76x_xrow18x_x1x_xi_1355 type_cast_1372_wire_constant) (cmp84x_xi_1374)   $flowthrough 
    $delay EQ_u16_u1_1373_inst 0
    // 			$volatile whilex_xbodyx_xi_maxPool3Dx_xexit_taken := cmp84x_xi $buffering 1
    //  file prog.linked.opt.aa, line 434
    # := [W_whilex_xbodyx_xi_maxPool3Dx_xexit_taken_1375_inst] (cmp84x_xi_1374) (whilex_xbodyx_xi_maxPool3Dx_xexit_taken_1377)    $flowthrough 
    // datapath-instances for if  
    //  file prog.linked.opt.aa, line 0
    ==0? [if_stmt_1381_branch] (whilex_xbodyx_xi_maxPool3Dx_xexit_taken_1377)
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 439
    // 			$phi inc76x_xrow18x_x1x_xix_xlcssa := 			  ($cast ($uint<16>) inc76x_xrow18x_x1x_xi ) $on   whilex_xbodyx_xi_maxPool3Dx_xexit 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 440
    // ($cast ($uint<16>) inc76x_xrow18x_x1x_xi )
    # := [type_cast_1389_inst] (inc76x_xrow18x_x1x_xi_1355) (type_cast_1389_wire)    
    $buffering  $out type_cast_1389_inst type_cast_1389_wire 1
    $delay type_cast_1389_inst 1
    $phi [phi_stmt_1386] (type_cast_1389_wire) ( inc76x_xrow18x_x1x_xix_xlcssa_1386 ) 
    // 		conv := ($bitcast ($uint<64>) ($cast ($int<64>) call ) ) $buffering 1// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 443
    // ($cast ($int<64>) call )
    $S:=$U [type_cast_1394_inst] (call_1194) (type_cast_1394_wire)   $flowthrough
    $delay type_cast_1394_inst 0
    // ($bitcast ($uint<64>) ($cast ($int<64>) call ) )
    # := [type_cast_1395_inst] (type_cast_1394_wire) (conv_1396)    
    $buffering  $out type_cast_1395_inst conv_1396 1
    $delay type_cast_1395_inst 1
    // 		conv89x_xi := ($cast ($uint<8>) inc76x_xrow18x_x1x_xix_xlcssa ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 444
    // ($cast ($uint<8>) inc76x_xrow18x_x1x_xix_xlcssa )
    # := [type_cast_1399_inst] (inc76x_xrow18x_x1x_xix_xlcssa_1386) (conv89x_xi_1400)    
    $buffering  $out type_cast_1399_inst conv89x_xi_1400 1
    $delay type_cast_1399_inst 1
    // 		system_output_pipe := conv89x_xi $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 445
    // system_output_pipe
    $ioport $out [WPIPE_system_output_pipe_1401_inst]  (conv89x_xi_1400) (system_output_pipe) 
    // 		$call timer () (call1 ) 
    //  file prog.linked.opt.aa, line 446
    $call [call_stmt_1405_call] $module timer() (call1_1405)  
    $delay call_stmt_1405_call 4
    $buffering  $out call_stmt_1405_call call1_1405 1
    // 		conv2 := ($bitcast ($uint<64>) ($cast ($int<64>) call1 ) ) $buffering 1// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 447
    // ($cast ($int<64>) call1 )
    $S:=$U [type_cast_1408_inst] (call1_1405) (type_cast_1408_wire)   $flowthrough
    $delay type_cast_1408_inst 0
    // ($bitcast ($uint<64>) ($cast ($int<64>) call1 ) )
    # := [type_cast_1409_inst] (type_cast_1408_wire) (conv2_1410)    
    $buffering  $out type_cast_1409_inst conv2_1410 1
    $delay type_cast_1409_inst 1
    // 		$volatile sub := (conv2 - conv) $buffering 1
    //  file prog.linked.opt.aa, line 448
    // (conv2 - conv)
    -[SUB_u64_u64_1414_inst] (conv2_1410 conv_1396) (sub_1415)   $flowthrough 
    $delay SUB_u64_u64_1414_inst 0
    // 		conv6 := ($cast ($uint<8>) sub ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 449
    // ($cast ($uint<8>) sub )
    # := [type_cast_1418_inst] (sub_1415) (conv6_1419)    
    $buffering  $out type_cast_1418_inst conv6_1419 1
    $delay type_cast_1418_inst 1
    // 		$volatile shr := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    //  file prog.linked.opt.aa, line 450
    // (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
    >>[LSHR_u64_u64_1424_inst] (sub_1415 type_cast_1423_wire_constant) (shr_1425)   $flowthrough 
    $delay LSHR_u64_u64_1424_inst 0
    // 		conv10 := ($cast ($uint<8>) shr ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 451
    // ($cast ($uint<8>) shr )
    # := [type_cast_1428_inst] (shr_1425) (conv10_1429)    
    $buffering  $out type_cast_1428_inst conv10_1429 1
    $delay type_cast_1428_inst 1
    // 		$volatile shr13 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  )) $buffering 1
    //  file prog.linked.opt.aa, line 452
    // (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  ))
    >>[LSHR_u64_u64_1434_inst] (sub_1415 type_cast_1433_wire_constant) (shr13_1435)   $flowthrough 
    $delay LSHR_u64_u64_1434_inst 0
    // 		conv16 := ($cast ($uint<8>) shr13 ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 453
    // ($cast ($uint<8>) shr13 )
    # := [type_cast_1438_inst] (shr13_1435) (conv16_1439)    
    $buffering  $out type_cast_1438_inst conv16_1439 1
    $delay type_cast_1438_inst 1
    // 		$volatile shr19 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  )) $buffering 1
    //  file prog.linked.opt.aa, line 454
    // (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  ))
    >>[LSHR_u64_u64_1444_inst] (sub_1415 type_cast_1443_wire_constant) (shr19_1445)   $flowthrough 
    $delay LSHR_u64_u64_1444_inst 0
    // 		conv22 := ($cast ($uint<8>) shr19 ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 455
    // ($cast ($uint<8>) shr19 )
    # := [type_cast_1448_inst] (shr19_1445) (conv22_1449)    
    $buffering  $out type_cast_1448_inst conv22_1449 1
    $delay type_cast_1448_inst 1
    // 		$volatile shr25 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  )) $buffering 1
    //  file prog.linked.opt.aa, line 456
    // (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  ))
    >>[LSHR_u64_u64_1454_inst] (sub_1415 type_cast_1453_wire_constant) (shr25_1455)   $flowthrough 
    $delay LSHR_u64_u64_1454_inst 0
    // 		conv28 := ($cast ($uint<8>) shr25 ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 457
    // ($cast ($uint<8>) shr25 )
    # := [type_cast_1458_inst] (shr25_1455) (conv28_1459)    
    $buffering  $out type_cast_1458_inst conv28_1459 1
    $delay type_cast_1458_inst 1
    // 		$volatile shr31 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  )) $buffering 1
    //  file prog.linked.opt.aa, line 458
    // (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  ))
    >>[LSHR_u64_u64_1464_inst] (sub_1415 type_cast_1463_wire_constant) (shr31_1465)   $flowthrough 
    $delay LSHR_u64_u64_1464_inst 0
    // 		conv34 := ($cast ($uint<8>) shr31 ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 459
    // ($cast ($uint<8>) shr31 )
    # := [type_cast_1468_inst] (shr31_1465) (conv34_1469)    
    $buffering  $out type_cast_1468_inst conv34_1469 1
    $delay type_cast_1468_inst 1
    // 		$volatile shr37 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  )) $buffering 1
    //  file prog.linked.opt.aa, line 460
    // (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  ))
    >>[LSHR_u64_u64_1474_inst] (sub_1415 type_cast_1473_wire_constant) (shr37_1475)   $flowthrough 
    $delay LSHR_u64_u64_1474_inst 0
    // 		conv40 := ($cast ($uint<8>) shr37 ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 461
    // ($cast ($uint<8>) shr37 )
    # := [type_cast_1478_inst] (shr37_1475) (conv40_1479)    
    $buffering  $out type_cast_1478_inst conv40_1479 1
    $delay type_cast_1478_inst 1
    // 		$volatile shr43 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  )) $buffering 1
    //  file prog.linked.opt.aa, line 462
    // (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  ))
    >>[LSHR_u64_u64_1484_inst] (sub_1415 type_cast_1483_wire_constant) (shr43_1485)   $flowthrough 
    $delay LSHR_u64_u64_1484_inst 0
    // 		conv46 := ($cast ($uint<8>) shr43 ) $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 463
    // ($cast ($uint<8>) shr43 )
    # := [type_cast_1488_inst] (shr43_1485) (conv46_1489)    
    $buffering  $out type_cast_1488_inst conv46_1489 1
    $delay type_cast_1488_inst 1
    // 		system_output_pipe := conv46 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 464
    // system_output_pipe
    $ioport $out [WPIPE_system_output_pipe_1490_inst]  (conv46_1489) (system_output_pipe) 
    // 		system_output_pipe := conv40 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 465
    // system_output_pipe
    $ioport $out [WPIPE_system_output_pipe_1493_inst]  (conv40_1479) (system_output_pipe) 
    // 		system_output_pipe := conv34 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 466
    // system_output_pipe
    $ioport $out [WPIPE_system_output_pipe_1496_inst]  (conv34_1469) (system_output_pipe) 
    // 		system_output_pipe := conv28 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 467
    // system_output_pipe
    $ioport $out [WPIPE_system_output_pipe_1499_inst]  (conv28_1459) (system_output_pipe) 
    // 		system_output_pipe := conv22 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 468
    // system_output_pipe
    $ioport $out [WPIPE_system_output_pipe_1502_inst]  (conv22_1449) (system_output_pipe) 
    // 		system_output_pipe := conv16 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 469
    // system_output_pipe
    $ioport $out [WPIPE_system_output_pipe_1505_inst]  (conv16_1439) (system_output_pipe) 
    // 		system_output_pipe := conv10 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 470
    // system_output_pipe
    $ioport $out [WPIPE_system_output_pipe_1508_inst]  (conv10_1429) (system_output_pipe) 
    // 		system_output_pipe := conv6 $buffering 1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 471
    // system_output_pipe
    $ioport $out [WPIPE_system_output_pipe_1511_inst]  (conv6_1419) (system_output_pipe) 
    // 		$call sendOutput () () 
    //  file prog.linked.opt.aa, line 472
    $call [call_stmt_1514_call] $module sendOutput() ()  
    $delay call_stmt_1514_call 4
  }
  // end data-path
  // 		$call fill_input () () 
  //  file prog.linked.opt.aa, line 384
  call_stmt_1192_call <=> (branch_block_stmt_1191/call_stmt_1192_to_call_stmt_1194/call_stmt_1192_Sample/crr branch_block_stmt_1191/call_stmt_1192_to_call_stmt_1194/call_stmt_1192_Update/ccr) (branch_block_stmt_1191/call_stmt_1192_to_call_stmt_1194/call_stmt_1192_Sample/cra branch_block_stmt_1191/call_stmt_1192_to_call_stmt_1194/call_stmt_1192_Update/cca)
  // 		$call timer () (call ) 
  //  file prog.linked.opt.aa, line 385
  call_stmt_1194_call <=> (branch_block_stmt_1191/call_stmt_1192_to_call_stmt_1194/call_stmt_1194_Sample/crr branch_block_stmt_1191/call_stmt_1192_to_call_stmt_1194/call_stmt_1194_Update/ccr) (branch_block_stmt_1191/call_stmt_1192_to_call_stmt_1194/call_stmt_1194_Sample/cra branch_block_stmt_1191/call_stmt_1192_to_call_stmt_1194/call_stmt_1194_Update/cca)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 387
  // In merge, skipped links for constant phi phi_stmt_1197
  // In merge, skipped links for constant phi phi_stmt_1202
  // In merge, skipped links for constant phi phi_stmt_1207
  // In merge, skipped links for constant phi phi_stmt_1212
  // CP-DP links for do-while  do_while_stmt_1218
  //  file prog.linked.opt.aa, line 397
  phi_stmt_1220 <=> (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/phi_stmt_1220_loopback_sample_req branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/phi_stmt_1220_entry_sample_req) (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/phi_stmt_1220_phi_mux_ack)
  // add79x_xi
  // ($cast ($uint<32>) add79x_xi )
  type_cast_1223_inst <=> (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1223_Sample/rr branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1223_Update/cr) (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1223_Sample/ra branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1223_Update/ca)
  phi_stmt_1225 <=> (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/phi_stmt_1225_loopback_sample_req branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/phi_stmt_1225_entry_sample_req) (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/phi_stmt_1225_phi_mux_ack)
  // inc76x_xrow18x_x1x_xi
  // ($cast ($uint<16>) inc76x_xrow18x_x1x_xi )
  type_cast_1228_inst <=> (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1228_Sample/rr branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1228_Update/cr) (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1228_Sample/ra branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1228_Update/ca)
  phi_stmt_1230 <=> (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/phi_stmt_1230_loopback_sample_req branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/phi_stmt_1230_entry_sample_req) (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/phi_stmt_1230_phi_mux_ack)
  // colx_x2x_xi
  // ($cast ($uint<16>) colx_x2x_xi )
  type_cast_1233_inst <=> (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1233_Sample/rr branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1233_Update/cr) (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1233_Sample/ra branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1233_Update/ca)
  phi_stmt_1235 <=> (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/phi_stmt_1235_loopback_sample_req branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/phi_stmt_1235_entry_sample_req) (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/phi_stmt_1235_phi_mux_ack)
  // chlx_x1x_xi
  // ($cast ($uint<16>) chlx_x1x_xi )
  type_cast_1238_inst <=> (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1238_Sample/rr branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1238_Update/cr) (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1238_Sample/ra branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1238_Update/ca)
  // 			conv31x_xi := ($cast ($uint<32>) chlx_x0x_xi ) $buffering 1// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 409
  // chlx_x0x_xi
  // ($cast ($uint<32>) chlx_x0x_xi )
  type_cast_1243_inst <=> (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1243_Sample/rr branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1243_Update/cr) (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1243_Sample/ra branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1243_Update/ca)
  // 			conv35x_xi := ($cast ($uint<32>) colx_x1x_xi ) $buffering 1// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 410
  // colx_x1x_xi
  // ($cast ($uint<32>) colx_x1x_xi )
  type_cast_1247_inst <=> (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1247_Sample/rr branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1247_Update/cr) (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1247_Sample/ra branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1247_Update/ca)
  // 			conv39x_xi := ($cast ($uint<32>) row18x_x1x_xi ) $buffering 1// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 411
  // row18x_x1x_xi
  // ($cast ($uint<32>) row18x_x1x_xi )
  type_cast_1251_inst <=> (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1251_Sample/rr branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1251_Update/cr) (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1251_Sample/ra branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1251_Update/ca)
  // 			$volatile mul40x_xi := (conv39x_xi * ($bitcast ($uint<32>) _b00000000000000000000000001110000  )) $buffering 1
  //  file prog.linked.opt.aa, line 412
  // (conv39x_xi * ($bitcast ($uint<32>) _b00000000000000000000000001110000  ))
  // conv39x_xi
  // 			$volatile add41x_xi := (conv35x_xi + mul40x_xi) $buffering 1
  //  file prog.linked.opt.aa, line 413
  // (conv35x_xi + mul40x_xi)
  // conv35x_xi
  // mul40x_xi
  // 			$volatile shlx_xi := (add41x_xi << ($bitcast ($uint<32>) _b00000000000000000000000000000101  )) $buffering 1
  //  file prog.linked.opt.aa, line 414
  // (add41x_xi << ($bitcast ($uint<32>) _b00000000000000000000000000000101  ))
  // add41x_xi
  // 			$volatile add43x_xi := (shlx_xi + conv31x_xi) $buffering 1
  //  file prog.linked.opt.aa, line 415
  // (shlx_xi + conv31x_xi)
  // shlx_xi
  // conv31x_xi
  // 			$volatile add50x_xi := (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000000000010000  )) $buffering 1
  //  file prog.linked.opt.aa, line 416
  // (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000000000010000  ))
  // add43x_xi
  // 			$volatile add54x_xi := (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000011100000000  )) $buffering 1
  //  file prog.linked.opt.aa, line 417
  // (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000011100000000  ))
  // add43x_xi
  // 			$volatile add57x_xi := (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000011100010000  )) $buffering 1
  //  file prog.linked.opt.aa, line 418
  // (add43x_xi + ($bitcast ($uint<32>) _b00000000000000000000011100010000  ))
  // add43x_xi
  // 			iNsTr_2_1278_delayed_1_0 := iNsTr_2 $buffering 1 $cut_through // bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 419
  // iNsTr_2
  W_iNsTr_2_1278_delayed_1_0_1293_inst <=> (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/assign_stmt_1295_Sample/req branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/assign_stmt_1295_Update/req) (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/assign_stmt_1295_Sample/ack branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/assign_stmt_1295_Update/ack)
  // 			$call maxPool4 (iNsTr_2_1278_delayed_1_0 add43x_xi add50x_xi add54x_xi add57x_xi ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000000  ) ) (callx_xi ) 
  //  file prog.linked.opt.aa, line 420
  // iNsTr_2_1278_delayed_1_0
  // add43x_xi
  // add50x_xi
  // add54x_xi
  // add57x_xi
  call_stmt_1306_call <=> (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/call_stmt_1306_Sample/crr branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/call_stmt_1306_Update/ccr) (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/call_stmt_1306_Sample/cra branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/call_stmt_1306_Update/cca)
  // 			$volatile incx_xi := (chlx_x0x_xi + ($bitcast ($uint<16>) _b0000000000000001  )) $buffering 1
  //  file prog.linked.opt.aa, line 421
  // (chlx_x0x_xi + ($bitcast ($uint<16>) _b0000000000000001  ))
  // chlx_x0x_xi
  // 			$volatile cmpx_xi := (incx_xi == ($bitcast ($uint<16>) _b0000000000010000  )) $buffering 1
  //  file prog.linked.opt.aa, line 422
  // (incx_xi == ($bitcast ($uint<16>) _b0000000000010000  ))
  // incx_xi
  // 			inc67x_xi := ($cast ($uint<16>) cmpx_xi ) $buffering 2// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 423
  // cmpx_xi
  // ($cast ($uint<16>) cmpx_xi )
  type_cast_1321_inst <=> (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1321_Sample/rr branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1321_Update/cr) (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1321_Sample/ra branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1321_Update/ca)
  // 			colx_x1x_xi_1307_delayed_1_0 := colx_x1x_xi $buffering 2 $cut_through // bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 424
  // colx_x1x_xi
  W_colx_x1x_xi_1307_delayed_1_0_1323_inst <=> (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/assign_stmt_1325_Sample/req branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/assign_stmt_1325_Update/req) (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/assign_stmt_1325_Sample/ack branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/assign_stmt_1325_Update/ack)
  // 			$volatile inc67x_xcolx_x1x_xi := (inc67x_xi + colx_x1x_xi_1307_delayed_1_0) $buffering 1
  //  file prog.linked.opt.aa, line 425
  // (inc67x_xi + colx_x1x_xi_1307_delayed_1_0)
  // inc67x_xi
  // colx_x1x_xi_1307_delayed_1_0
  // 			$volatile chlx_x1x_xi := ( $mux cmpx_xi ($bitcast ($uint<16>) _b0000000000000000  )  incx_xi )  $buffering 1
  //  file prog.linked.opt.aa, line 426
  // cmpx_xi
  // incx_xi
  // ( $mux cmpx_xi ($bitcast ($uint<16>) _b0000000000000000  )  incx_xi ) 
  // 			$volatile cmp72x_xi := (inc67x_xcolx_x1x_xi == ($bitcast ($uint<16>) _b0000000000111000  )) $buffering 1
  //  file prog.linked.opt.aa, line 427
  // (inc67x_xcolx_x1x_xi == ($bitcast ($uint<16>) _b0000000000111000  ))
  // inc67x_xcolx_x1x_xi
  // 			inc76x_xi := ($cast ($uint<16>) cmp72x_xi ) $buffering 2// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 428
  // cmp72x_xi
  // ($cast ($uint<16>) cmp72x_xi )
  type_cast_1346_inst <=> (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1346_Sample/rr branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1346_Update/cr) (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1346_Sample/ra branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/type_cast_1346_Update/ca)
  // 			row18x_x1x_xi_1329_delayed_2_0 := row18x_x1x_xi $buffering 2 $cut_through // bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 429
  // row18x_x1x_xi
  W_row18x_x1x_xi_1329_delayed_2_0_1348_inst <=> (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/assign_stmt_1350_Sample/req branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/assign_stmt_1350_Update/req) (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/assign_stmt_1350_Sample/ack branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/assign_stmt_1350_Update/ack)
  // 			$volatile inc76x_xrow18x_x1x_xi := (inc76x_xi + row18x_x1x_xi_1329_delayed_2_0) $buffering 1
  //  file prog.linked.opt.aa, line 430
  // (inc76x_xi + row18x_x1x_xi_1329_delayed_2_0)
  // inc76x_xi
  // row18x_x1x_xi_1329_delayed_2_0
  // 			$volatile colx_x2x_xi := ( $mux cmp72x_xi ($bitcast ($uint<16>) _b0000000000000000  )  inc67x_xcolx_x1x_xi )  $buffering 1
  //  file prog.linked.opt.aa, line 431
  // cmp72x_xi
  // inc67x_xcolx_x1x_xi
  // ( $mux cmp72x_xi ($bitcast ($uint<16>) _b0000000000000000  )  inc67x_xcolx_x1x_xi ) 
  // 			$volatile add79x_xi := (iNsTr_2 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
  //  file prog.linked.opt.aa, line 432
  // (iNsTr_2 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  ))
  // iNsTr_2
  // 			$volatile cmp84x_xi := (inc76x_xrow18x_x1x_xi == ($bitcast ($uint<16>) _b0000000000111000  )) $buffering 1
  //  file prog.linked.opt.aa, line 433
  // (inc76x_xrow18x_x1x_xi == ($bitcast ($uint<16>) _b0000000000111000  ))
  // inc76x_xrow18x_x1x_xi
  // 			$volatile whilex_xbodyx_xi_maxPool3Dx_xexit_taken := cmp84x_xi $buffering 1
  //  file prog.linked.opt.aa, line 434
  // cmp84x_xi
  // cmp84x_xi
  do_while_stmt_1218_branch <=> (branch_block_stmt_1191/do_while_stmt_1218/do_while_stmt_1218_loop_body/condition_evaluated) (branch_block_stmt_1191/do_while_stmt_1218/loop_exit/ack branch_block_stmt_1191/do_while_stmt_1218/loop_taken/ack)
  // CP-DP links for if  
  //  file prog.linked.opt.aa, line 0
  if_stmt_1381_branch <=> (branch_block_stmt_1191/if_stmt_1381_eval_test/branch_req) (branch_block_stmt_1191/if_stmt_1381_else_link/else_choice_transition branch_block_stmt_1191/if_stmt_1381_if_link/if_choice_transition)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 439
  // ($cast ($uint<16>) inc76x_xrow18x_x1x_xi )
  type_cast_1389_inst <=> (branch_block_stmt_1191/whilex_xbodyx_xi_maxPool3Dx_xexit_PhiReq/phi_stmt_1386/phi_stmt_1386_sources/type_cast_1389/SplitProtocol/Sample/rr branch_block_stmt_1191/whilex_xbodyx_xi_maxPool3Dx_xexit_PhiReq/phi_stmt_1386/phi_stmt_1386_sources/type_cast_1389/SplitProtocol/Update/cr) (branch_block_stmt_1191/whilex_xbodyx_xi_maxPool3Dx_xexit_PhiReq/phi_stmt_1386/phi_stmt_1386_sources/type_cast_1389/SplitProtocol/Sample/ra branch_block_stmt_1191/whilex_xbodyx_xi_maxPool3Dx_xexit_PhiReq/phi_stmt_1386/phi_stmt_1386_sources/type_cast_1389/SplitProtocol/Update/ca)
  phi_stmt_1386 <=> (branch_block_stmt_1191/whilex_xbodyx_xi_maxPool3Dx_xexit_PhiReq/phi_stmt_1386/phi_stmt_1386_req) (branch_block_stmt_1191/merge_stmt_1385_PhiAck/phi_stmt_1386_ack)
  // 		conv := ($bitcast ($uint<64>) ($cast ($int<64>) call ) ) $buffering 1// bits of buffering = 64. 
  //  file prog.linked.opt.aa, line 443
  // call
  // ($bitcast ($uint<64>) ($cast ($int<64>) call ) )
  type_cast_1395_inst <=> (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1395_Sample/rr branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1395_Update/cr) (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1395_Sample/ra branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1395_Update/ca)
  // 		conv89x_xi := ($cast ($uint<8>) inc76x_xrow18x_x1x_xix_xlcssa ) $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 444
  // inc76x_xrow18x_x1x_xix_xlcssa
  // ($cast ($uint<8>) inc76x_xrow18x_x1x_xix_xlcssa )
  type_cast_1399_inst <=> (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1399_Sample/rr branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1399_Update/cr) (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1399_Sample/ra branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1399_Update/ca)
  // 		system_output_pipe := conv89x_xi $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 445
  // conv89x_xi
  // system_output_pipe
  WPIPE_system_output_pipe_1401_inst <=> (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1401_Sample/req branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1401_Update/req) (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1401_Sample/ack branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1401_Update/ack)
  // 		$call timer () (call1 ) 
  //  file prog.linked.opt.aa, line 446
  call_stmt_1405_call <=> (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/call_stmt_1405_Sample/crr branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/call_stmt_1405_Update/ccr) (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/call_stmt_1405_Sample/cra branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/call_stmt_1405_Update/cca)
  // 		conv2 := ($bitcast ($uint<64>) ($cast ($int<64>) call1 ) ) $buffering 1// bits of buffering = 64. 
  //  file prog.linked.opt.aa, line 447
  // call1
  // ($bitcast ($uint<64>) ($cast ($int<64>) call1 ) )
  type_cast_1409_inst <=> (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1409_Sample/rr branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1409_Update/cr) (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1409_Sample/ra branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1409_Update/ca)
  // 		$volatile sub := (conv2 - conv) $buffering 1
  //  file prog.linked.opt.aa, line 448
  // (conv2 - conv)
  // conv2
  // conv
  // 		conv6 := ($cast ($uint<8>) sub ) $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 449
  // sub
  // ($cast ($uint<8>) sub )
  type_cast_1418_inst <=> (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1418_Sample/rr branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1418_Update/cr) (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1418_Sample/ra branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1418_Update/ca)
  // 		$volatile shr := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
  //  file prog.linked.opt.aa, line 450
  // (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  ))
  // sub
  // 		conv10 := ($cast ($uint<8>) shr ) $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 451
  // shr
  // ($cast ($uint<8>) shr )
  type_cast_1428_inst <=> (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1428_Sample/rr branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1428_Update/cr) (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1428_Sample/ra branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1428_Update/ca)
  // 		$volatile shr13 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  )) $buffering 1
  //  file prog.linked.opt.aa, line 452
  // (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  ))
  // sub
  // 		conv16 := ($cast ($uint<8>) shr13 ) $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 453
  // shr13
  // ($cast ($uint<8>) shr13 )
  type_cast_1438_inst <=> (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1438_Sample/rr branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1438_Update/cr) (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1438_Sample/ra branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1438_Update/ca)
  // 		$volatile shr19 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  )) $buffering 1
  //  file prog.linked.opt.aa, line 454
  // (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  ))
  // sub
  // 		conv22 := ($cast ($uint<8>) shr19 ) $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 455
  // shr19
  // ($cast ($uint<8>) shr19 )
  type_cast_1448_inst <=> (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1448_Sample/rr branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1448_Update/cr) (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1448_Sample/ra branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1448_Update/ca)
  // 		$volatile shr25 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  )) $buffering 1
  //  file prog.linked.opt.aa, line 456
  // (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  ))
  // sub
  // 		conv28 := ($cast ($uint<8>) shr25 ) $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 457
  // shr25
  // ($cast ($uint<8>) shr25 )
  type_cast_1458_inst <=> (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1458_Sample/rr branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1458_Update/cr) (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1458_Sample/ra branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1458_Update/ca)
  // 		$volatile shr31 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  )) $buffering 1
  //  file prog.linked.opt.aa, line 458
  // (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  ))
  // sub
  // 		conv34 := ($cast ($uint<8>) shr31 ) $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 459
  // shr31
  // ($cast ($uint<8>) shr31 )
  type_cast_1468_inst <=> (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1468_Sample/rr branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1468_Update/cr) (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1468_Sample/ra branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1468_Update/ca)
  // 		$volatile shr37 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  )) $buffering 1
  //  file prog.linked.opt.aa, line 460
  // (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  ))
  // sub
  // 		conv40 := ($cast ($uint<8>) shr37 ) $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 461
  // shr37
  // ($cast ($uint<8>) shr37 )
  type_cast_1478_inst <=> (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1478_Sample/rr branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1478_Update/cr) (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1478_Sample/ra branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1478_Update/ca)
  // 		$volatile shr43 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  )) $buffering 1
  //  file prog.linked.opt.aa, line 462
  // (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  ))
  // sub
  // 		conv46 := ($cast ($uint<8>) shr43 ) $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 463
  // shr43
  // ($cast ($uint<8>) shr43 )
  type_cast_1488_inst <=> (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1488_Sample/rr branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1488_Update/cr) (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1488_Sample/ra branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/type_cast_1488_Update/ca)
  // 		system_output_pipe := conv46 $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 464
  // conv46
  // system_output_pipe
  WPIPE_system_output_pipe_1490_inst <=> (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1490_Sample/req branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1490_Update/req) (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1490_Sample/ack branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1490_Update/ack)
  // 		system_output_pipe := conv40 $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 465
  // conv40
  // system_output_pipe
  WPIPE_system_output_pipe_1493_inst <=> (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1493_Sample/req branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1493_Update/req) (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1493_Sample/ack branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1493_Update/ack)
  // 		system_output_pipe := conv34 $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 466
  // conv34
  // system_output_pipe
  WPIPE_system_output_pipe_1496_inst <=> (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1496_Sample/req branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1496_Update/req) (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1496_Sample/ack branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1496_Update/ack)
  // 		system_output_pipe := conv28 $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 467
  // conv28
  // system_output_pipe
  WPIPE_system_output_pipe_1499_inst <=> (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1499_Sample/req branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1499_Update/req) (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1499_Sample/ack branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1499_Update/ack)
  // 		system_output_pipe := conv22 $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 468
  // conv22
  // system_output_pipe
  WPIPE_system_output_pipe_1502_inst <=> (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1502_Sample/req branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1502_Update/req) (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1502_Sample/ack branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1502_Update/ack)
  // 		system_output_pipe := conv16 $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 469
  // conv16
  // system_output_pipe
  WPIPE_system_output_pipe_1505_inst <=> (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1505_Sample/req branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1505_Update/req) (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1505_Sample/ack branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1505_Update/ack)
  // 		system_output_pipe := conv10 $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 470
  // conv10
  // system_output_pipe
  WPIPE_system_output_pipe_1508_inst <=> (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1508_Sample/req branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1508_Update/req) (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1508_Sample/ack branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1508_Update/ack)
  // 		system_output_pipe := conv6 $buffering 1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 471
  // conv6
  // system_output_pipe
  WPIPE_system_output_pipe_1511_inst <=> (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1511_Sample/req branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1511_Update/req) (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1511_Sample/ack branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/WPIPE_system_output_pipe_1511_Update/ack)
  // 		$call sendOutput () () 
  //  file prog.linked.opt.aa, line 472
  call_stmt_1514_call <=> (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/call_stmt_1514_Sample/crr branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/call_stmt_1514_Update/ccr) (branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/call_stmt_1514_Sample/cra branch_block_stmt_1191/assign_stmt_1396_to_call_stmt_1514/call_stmt_1514_Update/cca)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 474
}
$module [timerDaemon] 
{
  // pipe-declarations for block %timerDaemon
  //  file prog.linked.opt.aa, line 478
  // pipe-declarations for block %timerDaemon%loop
  //  file prog.linked.opt.aa, line 483
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1520] // Branch Block  file prog.linked.opt.aa, line 483
    {
      $P [branch_block_stmt_1520__entry__]
      branch_block_stmt_1520__entry__ <-| ($entry)
      $P [branch_block_stmt_1520__exit__]
      branch_block_stmt_1520__exit__ |-> ($exit)
      $P [do_while_stmt_1521__entry__] 
      $P [do_while_stmt_1521__exit__] 
      // do-while-statement  
      //  file prog.linked.opt.aa, line 485
      <o> [do_while_stmt_1521]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1521__entry__] 
        $P[do_while_stmt_1521__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1521_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_1523
          // 			$phi COUNTER := 			  ($bitcast ($uint<64>) _b0  ) $on   $entry 			  nCOUNTER $on   $loopback 
          // type of target is $uint<64>
          $T[phi_stmt_1523_sample_start_] 
          $T[phi_stmt_1523_sample_completed_] 
          $T[phi_stmt_1523_update_start_] 
          $T[phi_stmt_1523_update_completed_] 
          $T[phi_stmt_1523_sample_start__ps] 
          phi_stmt_1523_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1523_sample_completed__ps] 
          phi_stmt_1523_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1523_update_start__ps] 
          phi_stmt_1523_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1523_update_completed__ps] 
          phi_stmt_1523_update_completed_ <-& (phi_stmt_1523_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1523_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1523_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1523_update_start_)
          $T[phi_stmt_1523_loopback_trigger] 
          phi_stmt_1523_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1523_loopback_sample_req] 
          $T[phi_stmt_1523_loopback_sample_req_ps] 
          phi_stmt_1523_loopback_sample_req <-& (phi_stmt_1523_loopback_sample_req_ps)
          phi_stmt_1523_loopback_sample_req &-> ($null)
          $T[phi_stmt_1523_entry_trigger] 
          phi_stmt_1523_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1523_entry_sample_req] 
          $T[phi_stmt_1523_entry_sample_req_ps] 
          phi_stmt_1523_entry_sample_req <-& (phi_stmt_1523_entry_sample_req_ps)
          phi_stmt_1523_entry_sample_req &-> ($null)
          phi_stmt_1523_update_start_ o<-& (phi_stmt_1523_update_completed_ 0)
          phi_stmt_1523_sample_start_ o<-& (phi_stmt_1523_sample_completed_ 1)
          $T[phi_stmt_1523_merged_reqs] 
          $T[phi_stmt_1523_phi_mux_ack] 
          $T[phi_stmt_1523_phi_mux_ack_ps] 
          phi_stmt_1523_phi_mux_ack_ps <-& (phi_stmt_1523_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1523_update_completed_)
          $T[type_cast_1526_sample_start__ps] 
          $T[type_cast_1526_sample_completed__ps] 
          $T[type_cast_1526_update_start__ps] 
          $T[type_cast_1526_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_1526_sample_start_] 
          $T[type_cast_1526_sample_completed_] 
          type_cast_1526_sample_completed_ <-& (type_cast_1526_sample_start_)
          $T[type_cast_1526_update_start_] 
          $T [type_cast_1526_update_completed_] $delay 
          type_cast_1526_update_completed_ <-& (type_cast_1526_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_1526_sample_start_ <-& (type_cast_1526_sample_start__ps)
          type_cast_1526_update_start_ <-& (type_cast_1526_update_start__ps)
          // Phi complete dependency.
          type_cast_1526_sample_completed__ps <-& (type_cast_1526_sample_completed_)
          type_cast_1526_update_completed__ps <-& (type_cast_1526_update_completed_)
          $T[R_nCOUNTER_1527_sample_start__ps] 
          $T[R_nCOUNTER_1527_sample_completed__ps] 
          $T[R_nCOUNTER_1527_update_start__ps] 
          $T[R_nCOUNTER_1527_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nCOUNTER_1527_sample_start_] 
          $T[R_nCOUNTER_1527_sample_completed_] 
          $T[R_nCOUNTER_1527_update_start_] 
          $T[R_nCOUNTER_1527_update_completed_] 
          ;;[R_nCOUNTER_1527_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nCOUNTER_1527_sample_start_ &-> (R_nCOUNTER_1527_Sample)
          R_nCOUNTER_1527_sample_completed_ <-& (R_nCOUNTER_1527_Sample)
          ;;[R_nCOUNTER_1527_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nCOUNTER_1527_update_start_ &-> (R_nCOUNTER_1527_Update)
          R_nCOUNTER_1527_update_completed_ <-& (R_nCOUNTER_1527_Update)
          // RAW reenables for nCOUNTER
          // Phi start dependency for implicit/constant alternative.
          R_nCOUNTER_1527_sample_start_ <-& (R_nCOUNTER_1527_sample_start__ps)
          R_nCOUNTER_1527_update_start_ <-& (R_nCOUNTER_1527_update_start__ps)
          // Phi complete dependency.
          R_nCOUNTER_1527_sample_completed__ps <-& (R_nCOUNTER_1527_sample_completed_)
          R_nCOUNTER_1527_update_completed__ps <-& (R_nCOUNTER_1527_update_completed_)
          $phisequencer [ phi_stmt_1523_phi_seq] : 
          phi_stmt_1523_entry_trigger type_cast_1526_sample_start__ps type_cast_1526_sample_completed__ps type_cast_1526_update_start__ps type_cast_1526_update_completed__ps phi_stmt_1523_loopback_trigger R_nCOUNTER_1527_sample_start__ps R_nCOUNTER_1527_sample_completed__ps R_nCOUNTER_1527_update_start__ps R_nCOUNTER_1527_update_completed__ps :
          phi_stmt_1523_sample_start__ps phi_stmt_1523_sample_completed__ps phi_stmt_1523_update_start__ps phi_stmt_1523_update_completed__ps :
          phi_stmt_1523_entry_sample_req_ps phi_stmt_1523_loopback_sample_req_ps : 
          phi_stmt_1523_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1523
          // start:  single source PHI statement phi_stmt_1528
          // 			$phi req := 			  timer_req $on   $entry ,   $loopback 
          // type of target is $uint<1>
          $T[phi_stmt_1528_sample_start_] 
          $T[phi_stmt_1528_sample_completed_] 
          $T[phi_stmt_1528_update_start_] 
          $T[phi_stmt_1528_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1528_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1528_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1528_update_start_)
          // non-implicit source expression in single-source phi
          // timer_req
          $T[RPIPE_timer_req_1530_sample_start_] 
          $T[RPIPE_timer_req_1530_sample_completed_] 
          $T[RPIPE_timer_req_1530_update_start_] 
          $T[RPIPE_timer_req_1530_update_completed_] 
          ;;[RPIPE_timer_req_1530_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_timer_req_1530_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_timer_req_1530_sample_start_ &-> (RPIPE_timer_req_1530_Sample)
          RPIPE_timer_req_1530_sample_completed_ <-& (RPIPE_timer_req_1530_Sample)
          RPIPE_timer_req_1530_update_start_ <-& (RPIPE_timer_req_1530_sample_completed_)
          RPIPE_timer_req_1530_update_start_ &-> (RPIPE_timer_req_1530_Update)
          RPIPE_timer_req_1530_update_completed_ <-& (RPIPE_timer_req_1530_Update)
          RPIPE_timer_req_1530_sample_start_ o<-& (RPIPE_timer_req_1530_update_completed_ 0)
          // RAW reenables for timer_req
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_timer_req_1530_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_timer_req_1530_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_timer_req_1530_update_start_)
          phi_stmt_1528_update_completed_ <-& (RPIPE_timer_req_1530_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1528_update_completed_)
          // done: PHI Statement phi_stmt_1528
          // start: WAR dependencies for nCOUNTER
          // WAR dependency: Read: nCOUNTER before Write: 			$volatile nCOUNTER := (COUNTER + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nCOUNTER
          // start:  			$volatile nCOUNTER := (COUNTER + 1 ) $buffering 1
          //  file prog.linked.opt.aa, line 493
          // volatile! 
          // Source expression
          // (COUNTER + 1 )
          // COUNTER
          // Target expression
          // (as target) nCOUNTER
          // start: WAR dependencies for nCOUNTER
          // WAR dependency: Read: nCOUNTER before Write: 			$volatile nCOUNTER := (COUNTER + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nCOUNTER
          // end:  			$volatile nCOUNTER := (COUNTER + 1 ) $buffering 1
          // start:  			$guard (req) timer_resp := COUNTER $buffering 1// bits of buffering = 64. 
          //  file prog.linked.opt.aa, line 494
          // Guard expression 
          // req
          // Source expression
          // COUNTER
          // Target expression
          // (as target) timer_resp
          $T[WPIPE_timer_resp_1538_sample_start_] 
          $T[WPIPE_timer_resp_1538_sample_completed_] 
          $T[WPIPE_timer_resp_1538_update_start_] 
          $T[WPIPE_timer_resp_1538_update_completed_] 
          // Guard dependency for expression WPIPE_timer_resp_1538 with guard R_req_1537
          WPIPE_timer_resp_1538_sample_start_ <-& (phi_stmt_1528_update_completed_)
          // RAW reenables for req
          phi_stmt_1528_update_start_ o<-& (WPIPE_timer_resp_1538_sample_completed_ 0)
          ;;[WPIPE_timer_resp_1538_Sample] 
          {
            // pipe write sample-start timer_resp
            $T [req] $T [ack] 
          }
          ;;[WPIPE_timer_resp_1538_Update] 
          {
            // pipe write update (complete) timer_resp
            $T [req] $T [ack] 
          }
          WPIPE_timer_resp_1538_sample_start_ &-> (WPIPE_timer_resp_1538_Sample)
          WPIPE_timer_resp_1538_sample_completed_ <-& (WPIPE_timer_resp_1538_Sample)
          WPIPE_timer_resp_1538_update_start_ <-& (WPIPE_timer_resp_1538_sample_completed_)
          WPIPE_timer_resp_1538_update_start_ &-> (WPIPE_timer_resp_1538_Update)
          WPIPE_timer_resp_1538_update_completed_ <-& (WPIPE_timer_resp_1538_Update)
          WPIPE_timer_resp_1538_sample_start_ o<-& (WPIPE_timer_resp_1538_update_completed_ 0)
          // start: Forward dependencies from COUNTER to transition WPIPE_timer_resp_1538_sample_start_
          WPIPE_timer_resp_1538_sample_start_ <-& (phi_stmt_1523_update_completed_)
          // done: Forward dependencies from COUNTER to transition WPIPE_timer_resp_1538_sample_start_
          // RAW reenables for COUNTER
          phi_stmt_1523_update_start_ o<-& (WPIPE_timer_resp_1538_sample_completed_ 0)
          // end:  			$guard (req) timer_resp := COUNTER $buffering 1// bits of buffering = 64. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe timer_resp
          // read-dependencies for pipe timer_resp
          // write-dependencies for pipe timer_resp
          // signal write dependencies for timer_resp
          // pipe read/write dependencies for pipe timer_req
          // read-dependencies for pipe timer_req
          // write-dependencies for pipe timer_req
          // signal write dependencies for timer_req
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1521__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1521_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1521__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1521_loop_body : condition_evaluated
        $bind do_while_stmt_1521__entry__  => do_while_stmt_1521_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1521_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1521__exit__)
      }
      do_while_stmt_1521__entry__ |-> (do_while_stmt_1521)
      do_while_stmt_1521__exit__ <-| (do_while_stmt_1521)
      do_while_stmt_1521__entry__ <-| (branch_block_stmt_1520__entry__)
      do_while_stmt_1521__exit__ |-> (branch_block_stmt_1520__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %timerDaemon%loop%
    //  file prog.linked.opt.aa, line 487
    // constant-object-declarations for block %timerDaemon%loop
    //  file prog.linked.opt.aa, line 483
    // constant-object-declarations for block %timerDaemon
    //  file prog.linked.opt.aa, line 478
    // constant-declarations for block %timerDaemon%loop
    //  file prog.linked.opt.aa, line 483
    // do-while statement  
    //  file prog.linked.opt.aa, line 485
    // 1 
    $constant $W[konst_1542_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %timerDaemon%loop%
    //  file prog.linked.opt.aa, line 487
    // constant-declarations for phi:  			$phi COUNTER := 			  ($bitcast ($uint<64>) _b0  ) $on   $entry 			  nCOUNTER $on   $loopback 
    // type of target is $uint<64>
    //  file prog.linked.opt.aa, line 488
    // ($bitcast ($uint<64>) _b0  )
    $constant $W[type_cast_1526_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi req := 			  timer_req $on   $entry ,   $loopback 
    // type of target is $uint<1>
    //  file prog.linked.opt.aa, line 490
    // 1 
    $constant $W[konst_1534_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000001// 1
    // block %timerDaemon%loop
    //  file prog.linked.opt.aa, line 483
    // do-while statement  
    //  file prog.linked.opt.aa, line 485
    // merge-statement  
    //  file prog.linked.opt.aa, line 487
    // 			$phi COUNTER := 			  ($bitcast ($uint<64>) _b0  ) $on   $entry 			  nCOUNTER $on   $loopback 
    // type of target is $uint<64>
    //  file prog.linked.opt.aa, line 488
    $W[nCOUNTER_1536_1527_buffered] : $int<64>
    // COUNTER
    $W[COUNTER_1523] : $int<64>
    // 			$phi req := 			  timer_req $on   $entry ,   $loopback 
    // type of target is $uint<1>
    //  file prog.linked.opt.aa, line 490
    // timer_req
    $W[RPIPE_timer_req_1530_wire] : $int<1>
    // req
    $W[req_1528] : $int<1>
    // 			$volatile nCOUNTER := (COUNTER + 1 ) $buffering 1
    //  file prog.linked.opt.aa, line 493
    // nCOUNTER
    $W[nCOUNTER_1536] : $int<64>
    // 			$guard (req) timer_resp := COUNTER $buffering 1// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 494
    // timer_resp
    // datapath-instances for block %timerDaemon%loop
    //  file prog.linked.opt.aa, line 483
    // datapath-instances for do-while  
    //  file prog.linked.opt.aa, line 485
    ==0? [do_while_stmt_1521_branch] (konst_1542_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 487
    // 			$phi COUNTER := 			  ($bitcast ($uint<64>) _b0  ) $on   $entry 			  nCOUNTER $on   $loopback 
    // type of target is $uint<64>
    //  file prog.linked.opt.aa, line 488
    # := [nCOUNTER_1536_1527_buf] (nCOUNTER_1536) (nCOUNTER_1536_1527_buffered)     $fullrate
    $buffering $out nCOUNTER_1536_1527_buf nCOUNTER_1536_1527_buffered  1
    # $phi [phi_stmt_1523] (type_cast_1526_wire_constant nCOUNTER_1536_1527_buffered) ( COUNTER_1523 ) $fullrate
    // $buffering  $out phi_stmt_1523 COUNTER_1523 2
    // 			$phi req := 			  timer_req $on   $entry ,   $loopback 
    // type of target is $uint<1>
    //  file prog.linked.opt.aa, line 490
    // timer_req
    $ioport $in [RPIPE_timer_req_1530_inst] (timer_req) (RPIPE_timer_req_1530_wire)  $fullrate 
    $buffering $out RPIPE_timer_req_1530_inst RPIPE_timer_req_1530_wire 1
    # := [ssrc_phi_stmt_1528] (RPIPE_timer_req_1530_wire) (req_1528)    $flowthrough 
    // 			$volatile nCOUNTER := (COUNTER + 1 ) $buffering 1
    //  file prog.linked.opt.aa, line 493
    // (COUNTER + 1 )
    +[ADD_u64_u64_1535_inst] (COUNTER_1523 konst_1534_wire_constant) (nCOUNTER_1536)   $flowthrough 
    $delay ADD_u64_u64_1535_inst 0
    // 			$guard (req) timer_resp := COUNTER $buffering 1// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 494
    // timer_resp
    $ioport $out [WPIPE_timer_resp_1538_inst]  (COUNTER_1523) (timer_resp) $guard ( req_1528 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1521
  //  file prog.linked.opt.aa, line 485
  phi_stmt_1523 <=> (branch_block_stmt_1520/do_while_stmt_1521/do_while_stmt_1521_loop_body/phi_stmt_1523_entry_sample_req branch_block_stmt_1520/do_while_stmt_1521/do_while_stmt_1521_loop_body/phi_stmt_1523_loopback_sample_req) (branch_block_stmt_1520/do_while_stmt_1521/do_while_stmt_1521_loop_body/phi_stmt_1523_phi_mux_ack)
  nCOUNTER_1536_1527_buf <=> (branch_block_stmt_1520/do_while_stmt_1521/do_while_stmt_1521_loop_body/R_nCOUNTER_1527_Sample/req branch_block_stmt_1520/do_while_stmt_1521/do_while_stmt_1521_loop_body/R_nCOUNTER_1527_Update/req) (branch_block_stmt_1520/do_while_stmt_1521/do_while_stmt_1521_loop_body/R_nCOUNTER_1527_Sample/ack branch_block_stmt_1520/do_while_stmt_1521/do_while_stmt_1521_loop_body/R_nCOUNTER_1527_Update/ack)
  // timer_req
  RPIPE_timer_req_1530_inst <=> (branch_block_stmt_1520/do_while_stmt_1521/do_while_stmt_1521_loop_body/RPIPE_timer_req_1530_Sample/rr branch_block_stmt_1520/do_while_stmt_1521/do_while_stmt_1521_loop_body/RPIPE_timer_req_1530_Update/cr) (branch_block_stmt_1520/do_while_stmt_1521/do_while_stmt_1521_loop_body/RPIPE_timer_req_1530_Sample/ra branch_block_stmt_1520/do_while_stmt_1521/do_while_stmt_1521_loop_body/RPIPE_timer_req_1530_Update/ca)
  // 			$volatile nCOUNTER := (COUNTER + 1 ) $buffering 1
  //  file prog.linked.opt.aa, line 493
  // (COUNTER + 1 )
  // COUNTER
  // 			$guard (req) timer_resp := COUNTER $buffering 1// bits of buffering = 64. 
  //  file prog.linked.opt.aa, line 494
  // COUNTER
  // timer_resp
  WPIPE_timer_resp_1538_inst <=> (branch_block_stmt_1520/do_while_stmt_1521/do_while_stmt_1521_loop_body/WPIPE_timer_resp_1538_Sample/req branch_block_stmt_1520/do_while_stmt_1521/do_while_stmt_1521_loop_body/WPIPE_timer_resp_1538_Update/req) (branch_block_stmt_1520/do_while_stmt_1521/do_while_stmt_1521_loop_body/WPIPE_timer_resp_1538_Sample/ack branch_block_stmt_1520/do_while_stmt_1521/do_while_stmt_1521_loop_body/WPIPE_timer_resp_1538_Update/ack)
  do_while_stmt_1521_branch <=> (branch_block_stmt_1520/do_while_stmt_1521/do_while_stmt_1521_loop_body/condition_evaluated) (branch_block_stmt_1520/do_while_stmt_1521/loop_exit/ack branch_block_stmt_1520/do_while_stmt_1521/loop_taken/ack)
}
