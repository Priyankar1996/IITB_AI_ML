$record [structx_x__SizedTensor_128K]  < $array[131072] $of $uint<64> > 
$record [structx_x__SizedTensor_16K]  < $array[16384] $of $uint<64> > 
$record [structx_x__SizedTensor_1M]  < $array[1048576] $of $uint<64> > 
$record [structx_x__SizedTensor_256K]  < $array[262144] $of $uint<64> > 
$record [structx_x__SizedTensor_32K]  < $array[32768] $of $uint<64> > 
$record [structx_x__SizedTensor_512]  < $array[512] $of $uint<64> > 
$record [structx_x__SizedTensor_512K]  < $array[524288] $of $uint<64> > 
$record [structx_x__SizedTensor_64K]  < $array[65536] $of $uint<64> > 
$record [structx_x__SizedTensor_8K]  < $array[8192] $of $uint<64> > 
$pipe  READ_K_RESP_QUEUE : $uint<64>  $depth 16 
// can point into 
$pipe  READ_T_RESP_QUEUE : $uint<64>  $depth 16 
// can point into 
$pipe  acc_pipe1_1 : $uint<16>  $depth 16 
// can point into 
$pipe  acc_pipe1_2 : $uint<16>  $depth 16 
// can point into 
$pipe  acc_pipe1_3 : $uint<16>  $depth 16 
// can point into 
$pipe  acc_pipe1_4 : $uint<16>  $depth 16 
// can point into 
$pipe  acc_pipe1_5 : $uint<16>  $depth 16 
// can point into 
$pipe  acc_pipe1_6 : $uint<16>  $depth 16 
// can point into 
$pipe  acc_pipe1_7 : $uint<16>  $depth 16 
// can point into 
$pipe  acc_pipe1_8 : $uint<16>  $depth 16 
// can point into 
$pipe  acc_pipe2_1 : $uint<16>  $depth 16 
// can point into 
$pipe  acc_pipe2_2 : $uint<16>  $depth 16 
// can point into 
$pipe  acc_pipe2_3 : $uint<16>  $depth 16 
// can point into 
$pipe  acc_pipe2_4 : $uint<16>  $depth 16 
// can point into 
$pipe  acc_pipe2_5 : $uint<16>  $depth 16 
// can point into 
$pipe  acc_pipe2_6 : $uint<16>  $depth 16 
// can point into 
$pipe  acc_pipe2_7 : $uint<16>  $depth 16 
// can point into 
$pipe  acc_pipe2_8 : $uint<16>  $depth 16 
// can point into 
$pipe  conv1_kp1 : $uint<64>  $depth 4096 
// can point into 
$pipe  conv1_kp2 : $uint<64>  $depth 4096 
// can point into 
$pipe  conv1_kp3 : $uint<64>  $depth 4096 
// can point into 
$pipe  conv2_kp1 : $uint<64>  $depth 4096 
// can point into 
$pipe  conv2_kp2 : $uint<64>  $depth 4096 
// can point into 
$pipe  conv2_kp3 : $uint<64>  $depth 4096 
// can point into 
$pipe  conv3_kp1 : $uint<64>  $depth 4096 
// can point into 
$pipe  conv3_kp2 : $uint<64>  $depth 4096 
// can point into 
$pipe  conv3_kp3 : $uint<64>  $depth 4096 
// can point into 
$pipe  conv4_kp1 : $uint<64>  $depth 4096 
// can point into 
$pipe  conv4_kp2 : $uint<64>  $depth 4096 
// can point into 
$pipe  conv4_kp3 : $uint<64>  $depth 4096 
// can point into 
$pipe  conv5_kp1 : $uint<64>  $depth 4096 
// can point into 
$pipe  conv5_kp2 : $uint<64>  $depth 4096 
// can point into 
$pipe  conv5_kp3 : $uint<64>  $depth 4096 
// can point into 
$pipe  conv6_kp1 : $uint<64>  $depth 4096 
// can point into 
$pipe  conv6_kp2 : $uint<64>  $depth 4096 
// can point into 
$pipe  conv6_kp3 : $uint<64>  $depth 4096 
// can point into 
$pipe  conv7_kp1 : $uint<64>  $depth 4096 
// can point into 
$pipe  conv7_kp2 : $uint<64>  $depth 4096 
// can point into 
$pipe  conv7_kp3 : $uint<64>  $depth 4096 
// can point into 
$pipe  conv8_kp1 : $uint<64>  $depth 4096 
// can point into 
$pipe  conv8_kp2 : $uint<64>  $depth 4096 
// can point into 
$pipe  conv8_kp3 : $uint<64>  $depth 4096 
// can point into 
$pipe  conv_ip1 : $uint<64>  $depth 256 
// can point into 
$pipe  conv_ip2 : $uint<64>  $depth 256 
// can point into 
$pipe  conv_ip3 : $uint<64>  $depth 256 
// can point into 
$pipe  conv_ip4 : $uint<64>  $depth 256 
// can point into 
$pipe  core1_kp1 : $uint<64>  $depth 512 
// can point into 
$pipe  core1_kp2 : $uint<64>  $depth 512 
// can point into 
$pipe  core1_kp3 : $uint<64>  $depth 512 
// can point into 
$pipe  core2_kp1 : $uint<64>  $depth 512 
// can point into 
$pipe  core2_kp2 : $uint<64>  $depth 512 
// can point into 
$pipe  core2_kp3 : $uint<64>  $depth 512 
// can point into 
$pipe  core3_kp1 : $uint<64>  $depth 512 
// can point into 
$pipe  core3_kp2 : $uint<64>  $depth 512 
// can point into 
$pipe  core3_kp3 : $uint<64>  $depth 512 
// can point into 
$pipe  core4_kp1 : $uint<64>  $depth 512 
// can point into 
$pipe  core4_kp2 : $uint<64>  $depth 512 
// can point into 
$pipe  core4_kp3 : $uint<64>  $depth 512 
// can point into 
$pipe  core5_kp1 : $uint<64>  $depth 512 
// can point into 
$pipe  core5_kp2 : $uint<64>  $depth 512 
// can point into 
$pipe  core5_kp3 : $uint<64>  $depth 512 
// can point into 
$pipe  core6_kp1 : $uint<64>  $depth 512 
// can point into 
$pipe  core6_kp2 : $uint<64>  $depth 512 
// can point into 
$pipe  core6_kp3 : $uint<64>  $depth 512 
// can point into 
$pipe  core7_kp1 : $uint<64>  $depth 512 
// can point into 
$pipe  core7_kp2 : $uint<64>  $depth 512 
// can point into 
$pipe  core7_kp3 : $uint<64>  $depth 512 
// can point into 
$pipe  core8_kp1 : $uint<64>  $depth 512 
// can point into 
$pipe  core8_kp2 : $uint<64>  $depth 512 
// can point into 
$pipe  core8_kp3 : $uint<64>  $depth 512 
// can point into 
$pipe  core_ip1 : $uint<64>  $depth 4096 
// can point into 
$pipe  core_ip2 : $uint<64>  $depth 4096 
// can point into 
$pipe  core_ip3 : $uint<64>  $depth 512 
// can point into 
$pipe  core_ip4 : $uint<64>  $depth 512 
// can point into 
$pipe  debug_input_pipe : $uint<8>  $depth 1 
// can point into 
$pipe  debug_output_pipe : $uint<8>  $depth 1 
// can point into 
$storage  global_time_val : $array[20] $of $uint<64> // memory space index = 0  base address = 0  word size = 64
// can point into 
$pipe  output_pipe1_1 : $uint<16>  $depth 16 
// can point into 
$pipe  output_pipe1_2 : $uint<16>  $depth 16 
// can point into 
$pipe  output_pipe2_1 : $uint<16>  $depth 16 
// can point into 
$pipe  output_pipe2_2 : $uint<16>  $depth 16 
// can point into 
$pipe  output_pipe3_1 : $uint<16>  $depth 16 
// can point into 
$pipe  output_pipe3_2 : $uint<16>  $depth 16 
// can point into 
$pipe  output_pipe4_1 : $uint<16>  $depth 16 
// can point into 
$pipe  output_pipe4_2 : $uint<16>  $depth 16 
// can point into 
$pipe  output_pipe5_1 : $uint<16>  $depth 16 
// can point into 
$pipe  output_pipe5_2 : $uint<16>  $depth 16 
// can point into 
$pipe  output_pipe6_1 : $uint<16>  $depth 16 
// can point into 
$pipe  output_pipe6_2 : $uint<16>  $depth 16 
// can point into 
$pipe  output_pipe7_1 : $uint<16>  $depth 16 
// can point into 
$pipe  output_pipe7_2 : $uint<16>  $depth 16 
// can point into 
$pipe  output_pipe8_1 : $uint<16>  $depth 16 
// can point into 
$pipe  output_pipe8_2 : $uint<16>  $depth 16 
// can point into 
$pipe  prev_core_ip1 : $uint<64>  $depth 512 
// can point into 
$pipe  prev_core_ip2 : $uint<64>  $depth 512 
// can point into 
$pipe  system_input_pipe : $uint<8>  $depth 1 
// can point into 
$pipe  system_output_pipe : $uint<8>  $depth 1 
// can point into 
$noblock $pipe  timer_req : $uint<1>  $depth 1 
// can point into 
$pipe  timer_resp : $uint<64>  $depth 1 
// can point into 
$opaque $module [Divider]
$in ( dividend : $uint<16>   divisor : $uint<16>  )
$out ( quotient : $uint<16>  )
$is
{
  $branchblock [DivBlock]
  {
    $volatile ext_div := ($bitcast ($uint<17>) dividend ) $buffering 1
    $dopipeline $depth 7 $buffering 1
    $fullrate 
    $merge $entry $loopback 
    $phi div := 			  ($bitcast ($uint<17>) divisor ) $on   $entry 			  ndiv $on   $loopback 
    // type of target is $uint<17>
    $phi cnt := 			  ($bitcast ($uint<5>) 0  ) $on   $entry 			  ncnt $on   $loopback 
    // type of target is $uint<5>
    $endmerge
    $volatile cmp := (div >= ext_div) $buffering 1
    $volatile ndiv := (div << 1 ) $buffering 1
    $volatile ncnt := (cnt + 1 ) $buffering 1
    $while ( ~ cmp )
    $dopipeline $depth 7 $buffering 1
    $fullrate 
    $merge $entry $loopback 
    $phi div_2 := 			  div $on   $entry 			  ndiv_2 $on   $loopback 
    // type of target is $uint<17>
    $phi ediv_2 := 			  ext_div $on   $entry 			  nediv_2 $on   $loopback 
    // type of target is $uint<17>
    $phi quo := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nq $on   $loopback 
    // type of target is $uint<16>
    $phi cnt2 := 			  cnt $on   $entry 			  ncnt2 $on   $loopback 
    // type of target is $uint<5>
    $endmerge
    $volatile cmp2 := (div_2 > ediv_2) $buffering 1
    $volatile ndiv_2 := (div_2 >> 1 ) $buffering 1
    $volatile nediv_2 := (ediv_2 - ( $mux cmp2 0   div_2 ) ) $buffering 1
    $volatile ncnt2 := (cnt2 - 1 ) $buffering 1
    nq := ((quo << 1 ) + ( $mux cmp2 0   1  ) ) $buffering 1// bits of buffering = 16. 
    $while (cnt2 > 0 )
    quotient := nq $buffering 1// bits of buffering = 16. 
  }
}
$opaque $module [TopMult]
$in ( in1 : $uint<32>   in2 : $uint<32>  )
$out ( output : $uint<32>  )
$is
{
  output := (in1 * in2) $buffering 1// bits of buffering = 32. 
}
$module [accumulator]
$in ( chl_in : $uint<16>   ck : $uint<16>   op_size : $uint<32>  )
$out ()
$is
{
  $branchblock [acc_blk]
  {
    acc_count := ((chl_in * ck) - 1 ) $buffering 1// bits of buffering = 16. 
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi acc1_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val1_1 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc1_2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val1_2 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc2_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val2_1 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc2_2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val2_2 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc3_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val3_1 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc3_2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val3_2 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc4_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val4_1 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc4_2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val4_2 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc5_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val5_1 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc5_2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val5_2 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc6_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val6_1 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc6_2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val6_2 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc7_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val7_1 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc7_2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val7_2 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc8_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val8_1 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc8_2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val8_2 )  $on   $loopback 
    // type of target is $uint<16>
    $phi c_count := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nc_count $on   $loopback 
    // type of target is $uint<16>
    $phi op_count := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nop_count $on   $loopback 
    // type of target is $uint<32>
    $phi t1 := 			  acc_pipe1_1 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi t2 := 			  acc_pipe1_2 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi t3 := 			  acc_pipe1_3 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi t4 := 			  acc_pipe1_4 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi t5 := 			  acc_pipe1_5 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi t6 := 			  acc_pipe1_6 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi t7 := 			  acc_pipe1_7 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi t8 := 			  acc_pipe1_8 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi r1 := 			  acc_pipe2_1 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi r2 := 			  acc_pipe2_2 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi r3 := 			  acc_pipe2_3 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi r4 := 			  acc_pipe2_4 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi r5 := 			  acc_pipe2_5 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi r6 := 			  acc_pipe2_6 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi r7 := 			  acc_pipe2_7 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi r8 := 			  acc_pipe2_8 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $endmerge
    $volatile num_done := (c_count == acc_count) $buffering 1
    $volatile nc_count := ( $mux num_done 0   (c_count + 1 ) )  $buffering 1
    $volatile nop_count := ( $mux num_done (op_count + 1 )  op_count )  $buffering 1
    $volatile acc_val1_1 := (acc1_1 + t1) $buffering 1
    $volatile acc_val2_1 := (acc2_1 + t2) $buffering 1
    $volatile acc_val3_1 := (acc3_1 + t3) $buffering 1
    $volatile acc_val4_1 := (acc4_1 + t4) $buffering 1
    $volatile acc_val5_1 := (acc5_1 + t5) $buffering 1
    $volatile acc_val6_1 := (acc6_1 + t6) $buffering 1
    $volatile acc_val7_1 := (acc7_1 + t7) $buffering 1
    $volatile acc_val8_1 := (acc8_1 + t8) $buffering 1
    $volatile acc_val1_2 := (acc1_2 + r1) $buffering 1
    $volatile acc_val2_2 := (acc2_2 + r2) $buffering 1
    $volatile acc_val3_2 := (acc3_2 + r3) $buffering 1
    $volatile acc_val4_2 := (acc4_2 + r4) $buffering 1
    $volatile acc_val5_2 := (acc5_2 + r5) $buffering 1
    $volatile acc_val6_2 := (acc6_2 + r6) $buffering 1
    $volatile acc_val7_2 := (acc7_2 + r7) $buffering 1
    $volatile acc_val8_2 := (acc8_2 + r8) $buffering 1
    $guard (num_done) output_pipe1_1 := acc_val1_1 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe1_2 := acc_val1_2 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe2_1 := acc_val2_1 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe2_2 := acc_val2_2 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe3_1 := acc_val3_1 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe3_2 := acc_val3_2 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe4_1 := acc_val4_1 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe4_2 := acc_val4_2 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe5_1 := acc_val5_1 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe5_2 := acc_val5_2 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe6_1 := acc_val6_1 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe6_2 := acc_val6_2 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe7_1 := acc_val7_1 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe7_2 := acc_val7_2 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe8_1 := acc_val8_1 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe8_2 := acc_val8_2 $buffering 1// bits of buffering = 16. 
    $while (nop_count < op_size)
  }
}
$operator $module [memoryXsingleX24X64]
$in ( enable : $uint<1>   write_bar : $uint<1>   write_data : $uint<64>   address : $uint<19>  )
$out ( read_data : $uint<64>  )
$is
{
  read_data := write_data $buffering 1// bits of buffering = 64. 
}
$pipeline $depth 15 $buffering 1 $fullrate $module [memoryModule]
$in ( r_wbar : $uint<1>   addr : $uint<32>   data_in : $uint<64>   bytemask : $uint<8>  )
$out ( data_out : $uint<64>  )
$is
{
  $call memoryXsingleX24X64 (($bitcast ($uint<1>) _b1 ) r_wbar data_in ( $slice addr 18 0 )  ) (data_out ) 
}
$pipeline $depth 7 $buffering 1 $fullrate $opaque $module [readModule_convolutionk2]
$in ( addr : $uint<32>  )
$out ( done : $uint<1>  )
$is
{
  $call memoryModule (1  addr 0  255  ) (data ) 
  READ_K_RESP_QUEUE := data $buffering 1// bits of buffering = 64. 
  done := (data [] 0 ) $buffering 1// bits of buffering = 1. 
}
$pipeline $depth 7 $buffering 1 $fullrate $opaque $module [readModule_convolutionk]
$in ( index : $uint<8>   address : $uint<32>  )
$out ( data : $uint<64>  )
$is
{
  addr := (311296 + address) $buffering 1// bits of buffering = 32. 
  $call readModule_convolutionk2 (addr ) (done ) 
  data := READ_K_RESP_QUEUE $buffering 1// bits of buffering = 64. 
}
$module [kernelModule_in1]
$in ( init_addr : $uint<32>   chl_in : $uint<16>   chl_out : $uint<16>   rk : $uint<16>   ck : $uint<16>   index : $uint<8>  )
$out ()
$is
{
  $branchblock [load_block]
  {
    row_size := (chl_in * ck) $buffering 1// bits of buffering = 16. 
    count_update := (row_size * (rk - 1 )) $buffering 1// bits of buffering = 16. 
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi chl_num := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_chl_num $on   $loopback 
    // type of target is $uint<16>
    $phi sent := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  n_sent $on   $loopback 
    // type of target is $uint<16>
    $phi fv1 := 			  0  $on   $entry 			  nfv1 $on   $loopback 
    // type of target is $uint<64>
    $phi cv1 := 			  ($bitcast ($uint<64>) 0  ) $on   $entry 			  ncv1 $on   $loopback 
    // type of target is $uint<64>
    $phi left := 			  chl_in $on   $entry 			  n_left $on   $loopback 
    // type of target is $uint<16>
    $phi head := 			  ($bitcast ($uint<3>) 0  ) $on   $entry 			  n_head $on   $loopback 
    // type of target is $uint<3>
    $phi addr1 := 			  init_addr $on   $entry 			  n_addr1 $on   $loopback 
    // type of target is $uint<32>
    $phi fn := 			  ($bitcast ($uint<1>) 1  ) $on   $entry 			  n_fn $on   $loopback 
    // type of target is $uint<1>
    $endmerge
    $volatile chl_3 := ($bitcast ($uint<3>) chl_num ) $buffering 1
    $volatile sp := ($bitcast ($uint<3>) addr1 ) $buffering 1
    $volatile min1 := ( $mux (sp > head) sp  head )  $buffering 1
    $volatile mi71 := (8  - ($bitcast ($uint<16>) min1 )) $buffering 1
    $volatile ns := ( $mux (mi71 < left) mi71  left )  $buffering 1
    $volatile hns := (head + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile sns := (sp + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile done := (left == ns) $buffering 1
    $volatile send := (done | (hns == 0 )) $buffering 1
    $volatile n_left := ( $mux done chl_in  (left - ns) )  $buffering 1
    $guard (fn) $call readModule_convolutionk (index (addr1 >> 3 ) ) (read_val ) 
    $volatile val_in_use := ( $mux fn read_val  fv1 )  $buffering 1
    $volatile tmp1 := ((val_in_use << (($bitcast ($uint<64>) sp ) << 3 )) >> (($bitcast ($uint<64>) head ) << 3 )) $buffering 1
    $volatile bytemask := (($bitcast ($uint<64>) _hFFFFFFFFFFFFFFFF  ) << (($bitcast ($uint<64>) (8  - hns) ) << 3 )) $buffering 1
    $volatile send_data := ((cv1 | tmp1) & bytemask) $buffering 1
    $volatile ncv1 := ( $mux send 0   send_data )  $buffering 1
    $volatile send_to_1 := (send & (chl_3 == 1 )) $buffering 1
    $volatile send_to_2 := (send & (chl_3 == 2 )) $buffering 1
    $volatile send_to_3 := (send & (chl_3 == 3 )) $buffering 1
    $volatile send_to_4 := (send & (chl_3 == 4 )) $buffering 1
    $volatile send_to_5 := (send & (chl_3 == 5 )) $buffering 1
    $volatile send_to_6 := (send & (chl_3 == 6 )) $buffering 1
    $volatile send_to_7 := (send & (chl_3 == 7 )) $buffering 1
    $volatile send_to_8 := (send & (chl_3 == 8 )) $buffering 1
    $guard (send_to_1) core1_kp1 := send_data $buffering 1// bits of buffering = 64. 
    $guard (send_to_2) core2_kp1 := send_data $buffering 1// bits of buffering = 64. 
    $guard (send_to_3) core3_kp1 := send_data $buffering 1// bits of buffering = 64. 
    $guard (send_to_4) core4_kp1 := send_data $buffering 1// bits of buffering = 64. 
    $guard (send_to_5) core5_kp1 := send_data $buffering 1// bits of buffering = 64. 
    $guard (send_to_6) core6_kp1 := send_data $buffering 1// bits of buffering = 64. 
    $guard (send_to_7) core7_kp1 := send_data $buffering 1// bits of buffering = 64. 
    $guard (send_to_8) core8_kp1 := send_data $buffering 1// bits of buffering = 64. 
    $volatile n_sent := ( $mux done ( $mux (sent == (ck - 1 )) 0   (sent + 1 ) )   sent )  $buffering 1
    $volatile n_head := ( $mux send 0   hns )  $buffering 1
    $volatile nxt_chl := ((n_sent == 0 ) & done) $buffering 1
    $volatile n_addr1 := (addr1 + ($bitcast ($uint<32>) ( $mux nxt_chl (count_update + ns)  ns )  )) $buffering 1
    $volatile n_chl_num := ( $mux nxt_chl (chl_num + 1 )  chl_num )  $buffering 1
    $volatile na3_1 := (n_addr1 >> 3 ) $buffering 1
    $volatile n_fn := (((sns == 0 ) | nxt_chl) | (done & (na3_1 != (addr1 >> 3 )))) $buffering 1
    $volatile nfv1 := val_in_use $buffering 1
    $volatile exit_cond := (nxt_chl & (chl_num == chl_out)) $buffering 1
    $while ( ~ exit_cond )
  }
}
$module [kernelModule_in2]
$in ( init_addr : $uint<32>   chl_in : $uint<16>   chl_out : $uint<16>   rk : $uint<16>   ck : $uint<16>   index : $uint<8>  )
$out ()
$is
{
  $branchblock [load_block]
  {
    row_size := (chl_in * ck) $buffering 1// bits of buffering = 16. 
    count_update := (row_size * (rk - 1 )) $buffering 1// bits of buffering = 16. 
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi chl_num := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_chl_num $on   $loopback 
    // type of target is $uint<16>
    $phi sent := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  n_sent $on   $loopback 
    // type of target is $uint<16>
    $phi fv1 := 			  0  $on   $entry 			  nfv1 $on   $loopback 
    // type of target is $uint<64>
    $phi cv1 := 			  ($bitcast ($uint<64>) 0  ) $on   $entry 			  ncv1 $on   $loopback 
    // type of target is $uint<64>
    $phi left := 			  chl_in $on   $entry 			  n_left $on   $loopback 
    // type of target is $uint<16>
    $phi head := 			  ($bitcast ($uint<3>) 0  ) $on   $entry 			  n_head $on   $loopback 
    // type of target is $uint<3>
    $phi addr1 := 			  init_addr $on   $entry 			  n_addr1 $on   $loopback 
    // type of target is $uint<32>
    $phi fn := 			  ($bitcast ($uint<1>) 1  ) $on   $entry 			  n_fn $on   $loopback 
    // type of target is $uint<1>
    $endmerge
    $volatile chl_3 := ($bitcast ($uint<3>) chl_num ) $buffering 1
    $volatile sp := ($bitcast ($uint<3>) addr1 ) $buffering 1
    $volatile min1 := ( $mux (sp > head) sp  head )  $buffering 1
    $volatile mi71 := (8  - ($bitcast ($uint<16>) min1 )) $buffering 1
    $volatile ns := ( $mux (mi71 < left) mi71  left )  $buffering 1
    $volatile hns := (head + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile sns := (sp + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile done := (left == ns) $buffering 1
    $volatile send := (done | (hns == 0 )) $buffering 1
    $volatile n_left := ( $mux done chl_in  (left - ns) )  $buffering 1
    $guard (fn) $call readModule_convolutionk (index (addr1 >> 3 ) ) (read_val ) 
    $volatile val_in_use := ( $mux fn read_val  fv1 )  $buffering 1
    $volatile tmp1 := ((val_in_use << (($bitcast ($uint<64>) sp ) << 3 )) >> (($bitcast ($uint<64>) head ) << 3 )) $buffering 1
    $volatile bytemask := (($bitcast ($uint<64>) _hFFFFFFFFFFFFFFFF  ) << (($bitcast ($uint<64>) (8  - hns) ) << 3 )) $buffering 1
    $volatile send_data := ((cv1 | tmp1) & bytemask) $buffering 1
    $volatile ncv1 := ( $mux send 0   send_data )  $buffering 1
    $volatile send_to_1 := (send & (chl_3 == 1 )) $buffering 1
    $volatile send_to_2 := (send & (chl_3 == 2 )) $buffering 1
    $volatile send_to_3 := (send & (chl_3 == 3 )) $buffering 1
    $volatile send_to_4 := (send & (chl_3 == 4 )) $buffering 1
    $volatile send_to_5 := (send & (chl_3 == 5 )) $buffering 1
    $volatile send_to_6 := (send & (chl_3 == 6 )) $buffering 1
    $volatile send_to_7 := (send & (chl_3 == 7 )) $buffering 1
    $volatile send_to_8 := (send & (chl_3 == 8 )) $buffering 1
    $guard (send_to_1) core1_kp2 := send_data $buffering 1// bits of buffering = 64. 
    $guard (send_to_2) core2_kp2 := send_data $buffering 1// bits of buffering = 64. 
    $guard (send_to_3) core3_kp2 := send_data $buffering 1// bits of buffering = 64. 
    $guard (send_to_4) core4_kp2 := send_data $buffering 1// bits of buffering = 64. 
    $guard (send_to_5) core5_kp2 := send_data $buffering 1// bits of buffering = 64. 
    $guard (send_to_6) core6_kp2 := send_data $buffering 1// bits of buffering = 64. 
    $guard (send_to_7) core7_kp2 := send_data $buffering 1// bits of buffering = 64. 
    $guard (send_to_8) core8_kp2 := send_data $buffering 1// bits of buffering = 64. 
    $volatile n_sent := ( $mux done ( $mux (sent == (ck - 1 )) 0   (sent + 1 ) )   sent )  $buffering 1
    $volatile n_head := ( $mux send 0   hns )  $buffering 1
    $volatile nxt_chl := ((n_sent == 0 ) & done) $buffering 1
    $volatile n_addr1 := (addr1 + ($bitcast ($uint<32>) ( $mux nxt_chl (count_update + ns)  ns )  )) $buffering 1
    $volatile n_chl_num := ( $mux nxt_chl (chl_num + 1 )  chl_num )  $buffering 1
    $volatile na3_1 := (n_addr1 >> 3 ) $buffering 1
    $volatile n_fn := (((sns == 0 ) | nxt_chl) | (done & (na3_1 != (addr1 >> 3 )))) $buffering 1
    $volatile nfv1 := val_in_use $buffering 1
    $volatile exit_cond := (nxt_chl & (chl_num == chl_out)) $buffering 1
    $while ( ~ exit_cond )
  }
}
$module [kernelModule_in3]
$in ( init_addr : $uint<32>   chl_in : $uint<16>   chl_out : $uint<16>   rk : $uint<16>   ck : $uint<16>   index : $uint<8>  )
$out ()
$is
{
  $branchblock [load_block]
  {
    row_size := (chl_in * ck) $buffering 1// bits of buffering = 16. 
    count_update := (row_size * (rk - 1 )) $buffering 1// bits of buffering = 16. 
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi chl_num := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_chl_num $on   $loopback 
    // type of target is $uint<16>
    $phi sent := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  n_sent $on   $loopback 
    // type of target is $uint<16>
    $phi fv1 := 			  0  $on   $entry 			  nfv1 $on   $loopback 
    // type of target is $uint<64>
    $phi cv1 := 			  ($bitcast ($uint<64>) 0  ) $on   $entry 			  ncv1 $on   $loopback 
    // type of target is $uint<64>
    $phi left := 			  chl_in $on   $entry 			  n_left $on   $loopback 
    // type of target is $uint<16>
    $phi head := 			  ($bitcast ($uint<3>) 0  ) $on   $entry 			  n_head $on   $loopback 
    // type of target is $uint<3>
    $phi addr1 := 			  init_addr $on   $entry 			  n_addr1 $on   $loopback 
    // type of target is $uint<32>
    $phi fn := 			  ($bitcast ($uint<1>) 1  ) $on   $entry 			  n_fn $on   $loopback 
    // type of target is $uint<1>
    $endmerge
    $volatile chl_3 := ($bitcast ($uint<3>) chl_num ) $buffering 1
    $volatile sp := ($bitcast ($uint<3>) addr1 ) $buffering 1
    $volatile min1 := ( $mux (sp > head) sp  head )  $buffering 1
    $volatile mi71 := (8  - ($bitcast ($uint<16>) min1 )) $buffering 1
    $volatile ns := ( $mux (mi71 < left) mi71  left )  $buffering 1
    $volatile hns := (head + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile sns := (sp + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile done := (left == ns) $buffering 1
    $volatile send := (done | (hns == 0 )) $buffering 1
    $volatile n_left := ( $mux done chl_in  (left - ns) )  $buffering 1
    $guard (fn) $call readModule_convolutionk (index (addr1 >> 3 ) ) (read_val ) 
    $volatile val_in_use := ( $mux fn read_val  fv1 )  $buffering 1
    $volatile tmp1 := ((val_in_use << (($bitcast ($uint<64>) sp ) << 3 )) >> (($bitcast ($uint<64>) head ) << 3 )) $buffering 1
    $volatile bytemask := (($bitcast ($uint<64>) _hFFFFFFFFFFFFFFFF  ) << (($bitcast ($uint<64>) (8  - hns) ) << 3 )) $buffering 1
    $volatile send_data := ((cv1 | tmp1) & bytemask) $buffering 1
    $volatile ncv1 := ( $mux send 0   send_data )  $buffering 1
    $volatile send_to_1 := (send & (chl_3 == 1 )) $buffering 1
    $volatile send_to_2 := (send & (chl_3 == 2 )) $buffering 1
    $volatile send_to_3 := (send & (chl_3 == 3 )) $buffering 1
    $volatile send_to_4 := (send & (chl_3 == 4 )) $buffering 1
    $volatile send_to_5 := (send & (chl_3 == 5 )) $buffering 1
    $volatile send_to_6 := (send & (chl_3 == 6 )) $buffering 1
    $volatile send_to_7 := (send & (chl_3 == 7 )) $buffering 1
    $volatile send_to_8 := (send & (chl_3 == 8 )) $buffering 1
    $guard (send_to_1) core1_kp3 := send_data $buffering 1// bits of buffering = 64. 
    $guard (send_to_2) core2_kp3 := send_data $buffering 1// bits of buffering = 64. 
    $guard (send_to_3) core3_kp3 := send_data $buffering 1// bits of buffering = 64. 
    $guard (send_to_4) core4_kp3 := send_data $buffering 1// bits of buffering = 64. 
    $guard (send_to_5) core5_kp3 := send_data $buffering 1// bits of buffering = 64. 
    $guard (send_to_6) core6_kp3 := send_data $buffering 1// bits of buffering = 64. 
    $guard (send_to_7) core7_kp3 := send_data $buffering 1// bits of buffering = 64. 
    $guard (send_to_8) core8_kp3 := send_data $buffering 1// bits of buffering = 64. 
    $volatile n_sent := ( $mux done ( $mux (sent == (ck - 1 )) 0   (sent + 1 ) )   sent )  $buffering 1
    $volatile n_head := ( $mux send 0   hns )  $buffering 1
    $volatile nxt_chl := ((n_sent == 0 ) & done) $buffering 1
    $volatile n_addr1 := (addr1 + ($bitcast ($uint<32>) ( $mux nxt_chl (count_update + ns)  ns )  )) $buffering 1
    $volatile n_chl_num := ( $mux nxt_chl (chl_num + 1 )  chl_num )  $buffering 1
    $volatile na3_1 := (n_addr1 >> 3 ) $buffering 1
    $volatile n_fn := (((sns == 0 ) | nxt_chl) | (done & (na3_1 != (addr1 >> 3 )))) $buffering 1
    $volatile nfv1 := val_in_use $buffering 1
    $volatile exit_cond := (nxt_chl & (chl_num == chl_out)) $buffering 1
    $while ( ~ exit_cond )
  }
}
$module [kernelModule]
$in ( chl_in : $uint<16>   chl_out : $uint<16>   rk : $uint<16>   ck : $uint<16>   index : $uint<8>  )
$out ()
$is
{
  row_size := (chl_in * ck) $buffering 1// bits of buffering = 16. 
  mode_3 := (rk == 3 ) $buffering 1// bits of buffering = 1. 
  addr1 := 0  $buffering 1// bits of buffering = 32. 
  addr2 := ($bitcast ($uint<32>) row_size ) $buffering 1// bits of buffering = 32. 
  addr3 := ($bitcast ($uint<32>) (row_size << 1 ) ) $buffering 1// bits of buffering = 32. 
  $parallelblock[k_block]
  {
    $call kernelModule_in1 (addr1 chl_in chl_out rk ck index ) () 
    $call kernelModule_in2 (addr2 chl_in chl_out rk ck index ) () 
    $guard (mode_3) $call kernelModule_in3 (addr3 chl_in chl_out rk ck index ) () 
  }
}
$pipeline $depth 15 $buffering 2 $fullrate $opaque $module [writeToPipe1]
$in ( index : $uint<2>   in_data1 : $uint<64>  )
$out ( done : $uint<1>  )
$is
{
  c1 := (index == 1 ) $buffering 1// bits of buffering = 1. 
  c2 := (index == 2 ) $buffering 1// bits of buffering = 1. 
  c3 := (index == 3 ) $buffering 1// bits of buffering = 1. 
  $guard (c1) core1_kp1 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c2) core1_kp2 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c3) core1_kp3 := in_data1 $buffering 1// bits of buffering = 64. 
  done := (in_data1 [] 0 ) $buffering 1// bits of buffering = 1. 
}
$pipeline $depth 15 $buffering 2 $fullrate $opaque $module [writeToPipe2]
$in ( index : $uint<2>   in_data1 : $uint<64>  )
$out ( done : $uint<1>  )
$is
{
  c1 := (index == 1 ) $buffering 1// bits of buffering = 1. 
  c2 := (index == 2 ) $buffering 1// bits of buffering = 1. 
  c3 := (index == 3 ) $buffering 1// bits of buffering = 1. 
  $guard (c1) core2_kp1 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c2) core2_kp2 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c3) core2_kp3 := in_data1 $buffering 1// bits of buffering = 64. 
  done := (in_data1 [] 0 ) $buffering 1// bits of buffering = 1. 
}
$pipeline $depth 15 $buffering 2 $fullrate $opaque $module [writeToPipe3]
$in ( index : $uint<2>   in_data1 : $uint<64>  )
$out ( done : $uint<1>  )
$is
{
  c1 := (index == 1 ) $buffering 1// bits of buffering = 1. 
  c2 := (index == 2 ) $buffering 1// bits of buffering = 1. 
  c3 := (index == 3 ) $buffering 1// bits of buffering = 1. 
  $guard (c1) core3_kp1 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c2) core3_kp2 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c3) core3_kp3 := in_data1 $buffering 1// bits of buffering = 64. 
  done := (in_data1 [] 0 ) $buffering 1// bits of buffering = 1. 
}
$pipeline $depth 15 $buffering 2 $fullrate $opaque $module [writeToPipe4]
$in ( index : $uint<2>   in_data1 : $uint<64>  )
$out ( done : $uint<1>  )
$is
{
  c1 := (index == 1 ) $buffering 1// bits of buffering = 1. 
  c2 := (index == 2 ) $buffering 1// bits of buffering = 1. 
  c3 := (index == 3 ) $buffering 1// bits of buffering = 1. 
  $guard (c1) core4_kp1 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c2) core4_kp2 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c3) core4_kp3 := in_data1 $buffering 1// bits of buffering = 64. 
  done := (in_data1 [] 0 ) $buffering 1// bits of buffering = 1. 
}
$pipeline $depth 15 $buffering 2 $fullrate $opaque $module [writeToPipe5]
$in ( index : $uint<2>   in_data1 : $uint<64>  )
$out ( done : $uint<1>  )
$is
{
  c1 := (index == 1 ) $buffering 1// bits of buffering = 1. 
  c2 := (index == 2 ) $buffering 1// bits of buffering = 1. 
  c3 := (index == 3 ) $buffering 1// bits of buffering = 1. 
  $guard (c1) core5_kp1 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c2) core5_kp2 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c3) core5_kp3 := in_data1 $buffering 1// bits of buffering = 64. 
  done := (in_data1 [] 0 ) $buffering 1// bits of buffering = 1. 
}
$pipeline $depth 15 $buffering 2 $fullrate $opaque $module [writeToPipe6]
$in ( index : $uint<2>   in_data1 : $uint<64>  )
$out ( done : $uint<1>  )
$is
{
  c1 := (index == 1 ) $buffering 1// bits of buffering = 1. 
  c2 := (index == 2 ) $buffering 1// bits of buffering = 1. 
  c3 := (index == 3 ) $buffering 1// bits of buffering = 1. 
  $guard (c1) core6_kp1 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c2) core6_kp2 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c3) core6_kp3 := in_data1 $buffering 1// bits of buffering = 64. 
  done := (in_data1 [] 0 ) $buffering 1// bits of buffering = 1. 
}
$pipeline $depth 15 $buffering 2 $fullrate $opaque $module [writeToPipe7]
$in ( index : $uint<2>   in_data1 : $uint<64>  )
$out ( done : $uint<1>  )
$is
{
  c1 := (index == 1 ) $buffering 1// bits of buffering = 1. 
  c2 := (index == 2 ) $buffering 1// bits of buffering = 1. 
  c3 := (index == 3 ) $buffering 1// bits of buffering = 1. 
  $guard (c1) core7_kp1 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c2) core7_kp2 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c3) core7_kp3 := in_data1 $buffering 1// bits of buffering = 64. 
  done := (in_data1 [] 0 ) $buffering 1// bits of buffering = 1. 
}
$pipeline $depth 15 $buffering 2 $fullrate $opaque $module [writeToPipe8]
$in ( index : $uint<2>   in_data1 : $uint<64>  )
$out ( done : $uint<1>  )
$is
{
  c1 := (index == 1 ) $buffering 1// bits of buffering = 1. 
  c2 := (index == 2 ) $buffering 1// bits of buffering = 1. 
  c3 := (index == 3 ) $buffering 1// bits of buffering = 1. 
  $guard (c1) core8_kp1 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c2) core8_kp2 := in_data1 $buffering 1// bits of buffering = 64. 
  $guard (c3) core8_kp3 := in_data1 $buffering 1// bits of buffering = 64. 
  done := (in_data1 [] 0 ) $buffering 1// bits of buffering = 1. 
}
$module [kernelModule8]
$in ( chl_in : $uint<16>   chl_out : $uint<16>   rk : $uint<16>   ck : $uint<16>   index : $uint<8>  )
$out ()
$is
{
  $branchblock [load_block]
  {
    row_size := (chl_in * ck) $buffering 1// bits of buffering = 16. 
    chl_size := ($bitcast ($uint<32>) (row_size * rk) ) $buffering 1// bits of buffering = 32. 
    chl_size2 := (chl_size << 1 ) $buffering 1// bits of buffering = 32. 
    chl_size3 := (chl_size2 + chl_size) $buffering 1// bits of buffering = 32. 
    chl_size4 := (chl_size << 2 ) $buffering 1// bits of buffering = 32. 
    chl_size5 := (chl_size4 + chl_size) $buffering 1// bits of buffering = 32. 
    chl_size6 := (chl_size4 + chl_size2) $buffering 1// bits of buffering = 32. 
    chl_size7 := (chl_size4 + chl_size3) $buffering 1// bits of buffering = 32. 
    chl_size8 := (chl_size << 3 ) $buffering 1// bits of buffering = 32. 
    count_update := (chl_size8 - ($bitcast ($uint<32>) row_size )) $buffering 1// bits of buffering = 32. 
    rk_s := ($bitcast ($uint<2>) rk ) $buffering 1// bits of buffering = 2. 
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi chl_num := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_chl_num $on   $loopback 
    // type of target is $uint<16>
    $phi ea := 			  ($bitcast ($uint<32>) (row_size - 1 ) ) $on   $entry 			  n_ea $on   $loopback 
    // type of target is $uint<32>
    $phi mycount := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nmycount $on   $loopback 
    // type of target is $uint<32>
    $phi ind := 			  ($bitcast ($uint<2>) 1  ) $on   $entry 			  n_ind $on   $loopback 
    // type of target is $uint<2>
    $endmerge
    $volatile next_row := (ind == rk_s) $buffering 1
    $volatile nxt_chl := ((mycount == ea) & next_row) $buffering 1
    $volatile nmycount := (mycount + ( $mux next_row (1  + ( $mux nxt_chl count_update  0  ) )  0  ) ) $buffering 1
    $volatile n_chl_num := ( $mux nxt_chl (chl_num + 1 )  chl_num )  $buffering 1
    $volatile n_ea := (ea + ( $mux nxt_chl chl_size8  0  ) ) $buffering 1
    $volatile n_ind := ( $mux next_row 1   (ind + 1 ) )  $buffering 1
    $volatile add_val := ($bitcast ($uint<32>) (( $mux (ind == 2 ) row_size  _b0  )  | ( $mux (ind == 3 ) (row_size << 1 )  _b0  ) ) ) $buffering 1
    $call readModule_convolutionk (index (mycount + add_val) ) (fetch_val1 ) 
    $call readModule_convolutionk (index ((mycount + add_val) + chl_size) ) (fetch_val2 ) 
    $call readModule_convolutionk (index ((mycount + add_val) + chl_size2) ) (fetch_val3 ) 
    $call readModule_convolutionk (index ((mycount + add_val) + chl_size3) ) (fetch_val4 ) 
    $call readModule_convolutionk (index ((mycount + add_val) + chl_size4) ) (fetch_val5 ) 
    $call readModule_convolutionk (index ((mycount + add_val) + chl_size5) ) (fetch_val6 ) 
    $call readModule_convolutionk (index ((mycount + add_val) + chl_size6) ) (fetch_val7 ) 
    $call readModule_convolutionk (index ((mycount + add_val) + chl_size7) ) (fetch_val8 ) 
    $call writeToPipe1 (ind fetch_val1 ) (a1 ) 
    $call writeToPipe2 (ind fetch_val2 ) (a2 ) 
    $call writeToPipe3 (ind fetch_val3 ) (a3 ) 
    $call writeToPipe4 (ind fetch_val4 ) (a4 ) 
    $call writeToPipe5 (ind fetch_val5 ) (a5 ) 
    $call writeToPipe6 (ind fetch_val6 ) (a6 ) 
    $call writeToPipe7 (ind fetch_val7 ) (a7 ) 
    $call writeToPipe8 (ind fetch_val8 ) (a8 ) 
    $volatile exit_cond := (nxt_chl & (chl_num == chl_out)) $buffering 1
    $while ( ~ exit_cond )
  }
}
$module [singleFetch]
$in ( rt : $uint<16>   ct : $uint<16>   pad : $uint<16>   chl_in : $uint<16>   max_parts : $uint<8>   mode_3 : $uint<1>  )
$out ()
$is
{
  $branchblock [block]
  {
    cnt_max := ((ct + (pad << 1 )) * chl_in) $buffering 1// bits of buffering = 16. 
    $dopipeline $depth 15 $buffering 1
    $fullrate 
    $merge $entry $loopback 
    $phi start := 			  n_start $on   $loopback 			  ($bitcast ($uint<1>) 1  ) $on   $entry 
    // type of target is $uint<1>
    $phi cnt := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_cnt $on   $loopback 
    // type of target is $uint<16>
    $phi row := 			  n_row $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    $phi parts := 			  0  $on   $entry 			  n_parts $on   $loopback 
    // type of target is $uint<8>
    $endmerge
    val_read1 := prev_core_ip1 $buffering 1// bits of buffering = 64. 
    val_read2 := prev_core_ip2 $buffering 1// bits of buffering = 64. 
    $volatile change := (cnt == cnt_max) $buffering 1
    n_cnt := ( $mux change 1   (cnt + 1 ) )  $buffering 1// bits of buffering = 16. 
    incr_row := (row + 2) $buffering 1// bits of buffering = 16. 
    update_row := ( $mux change incr_row  row )  $buffering 1// bits of buffering = 16. 
    chng_prt := (update_row > rt) $buffering 1// bits of buffering = 1. 
    n_row := ( $mux chng_prt 0   update_row )  $buffering 1// bits of buffering = 16. 
    n_parts := ( $mux chng_prt (parts + 1 )  parts )  $buffering 1// bits of buffering = 8. 
    n_start := (n_row == 0 ) $buffering 1// bits of buffering = 1. 
    do_4 := (mode_3 & ( ~ start )) $buffering 1// bits of buffering = 1. 
    $volatile end := (incr_row > rt) $buffering 1
    $guard (~end) core_ip1 := val_read1 $buffering 1// bits of buffering = 64. 
    $guard (~start) core_ip3 := val_read1 $buffering 1// bits of buffering = 64. 
    $guard (~end) core_ip2 := val_read2 $buffering 1// bits of buffering = 64. 
    $guard (do_4) core_ip4 := val_read2 $buffering 1// bits of buffering = 64. 
    $while (n_parts <= max_parts)
  }
}
$pipeline $depth 7 $buffering 1 $fullrate $opaque $module [readModule_convolution2]
$in ( addr : $uint<32>  )
$out ( done : $uint<1>  )
$is
{
  $call memoryModule (1  addr 0  255  ) (data ) 
  READ_T_RESP_QUEUE := data $buffering 1// bits of buffering = 64. 
  done := (data [] 0 ) $buffering 1// bits of buffering = 1. 
}
$pipeline $depth 7 $buffering 1 $fullrate $opaque $module [readModule_convolution]
$in ( index : $uint<8>   address : $uint<32>  )
$out ( data : $uint<64>  )
$is
{
  $volatile cnd1 := (index == 0 ) $buffering 1
  $volatile cnd2 := (index == 1 ) $buffering 1
  $volatile cnd3 := (index == 2 ) $buffering 1
  $volatile cnd4 := (index == 3 ) $buffering 1
  $volatile cnd5 := (index == 4 ) $buffering 1
  addr := (((( $mux cnd1 (0 + address)  _b0  )  | ( $mux cnd2 (65536 + address)  _b0  ) ) | ( $mux cnd3 (196608 + address)  _b0  ) ) | (( $mux cnd4 (262144 + address)  _b0  )  | ( $mux cnd5 (294912 + address)  _b0  ) )) $buffering 1// bits of buffering = 32. 
  $call readModule_convolution2 (addr ) (done ) 
  data := READ_T_RESP_QUEUE $buffering 1// bits of buffering = 64. 
}
$module [loadInput_in1]
$in ( addr_init : $uint<32>   row_in : $uint<16>   ct : $uint<16>   chl_in : $uint<16>   pad : $uint<16>   num_parts_1 : $uint<8>   index : $uint<8>  )
$out ()
$is
{
  $branchblock [access_block]
  {
    ct_new := (ct + (pad << 1 )) $buffering 1// bits of buffering = 16. 
    m_factor := ($bitcast ($uint<32>) (ct * chl_in) ) $buffering 1// bits of buffering = 32. 
    row_last := (row_in + 2 ) $buffering 1// bits of buffering = 16. 
    np := (num_parts_1 + 1 ) $buffering 1// bits of buffering = 8. 
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi row1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  n_row1 $on   $loopback 
    // type of target is $uint<16>
    $phi part_cnt := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  np_cnt $on   $loopback 
    // type of target is $uint<8>
    $phi sent := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  n_sent $on   $loopback 
    // type of target is $uint<16>
    $phi fv1 := 			  0  $on   $entry 			  nfv1 $on   $loopback 
    // type of target is $uint<64>
    $phi cv1 := 			  ($bitcast ($uint<64>) 0  ) $on   $entry 			  ncv1 $on   $loopback 
    // type of target is $uint<64>
    $phi left := 			  chl_in $on   $entry 			  n_left $on   $loopback 
    // type of target is $uint<16>
    $phi head := 			  ($bitcast ($uint<3>) 0  ) $on   $entry 			  n_head $on   $loopback 
    // type of target is $uint<3>
    $phi addr1 := 			  addr_init $on   $entry 			  n_addr1 $on   $loopback 
    // type of target is $uint<32>
    $phi fn := 			  ($bitcast ($uint<1>) 1  ) $on   $entry 			  n_fn $on   $loopback 
    // type of target is $uint<1>
    $endmerge
    $volatile mc_lt_p := ((sent < pad) | (sent >= (ct + pad))) $buffering 1
    $volatile r_lt_p := ((row1 < pad) | (row1 >= ((row_in + 2 ) - pad))) $buffering 1
    $volatile p1_zero := (mc_lt_p | r_lt_p) $buffering 1
    $volatile sp := ($bitcast ($uint<3>) addr1 ) $buffering 1
    $volatile min1 := ( $mux (sp > head) sp  head )  $buffering 1
    $volatile mi71 := (8  - ($bitcast ($uint<16>) min1 )) $buffering 1
    $volatile cmp_val := ( $mux p1_zero 8   mi71 )  $buffering 1
    $volatile ns := ( $mux (cmp_val < left) cmp_val  left )  $buffering 1
    $volatile hns := (head + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile sns := (sp + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile done := (left == ns) $buffering 1
    $volatile send := (done | (hns == 0 )) $buffering 1
    read_from_pipe := (fn & ( ~ p1_zero )) $buffering 1// bits of buffering = 1. 
    $guard (read_from_pipe) $call readModule_convolution (index (addr1 >> 3 ) ) (read_val ) 
    $volatile val_in_use := ( $mux read_from_pipe read_val  fv1 )  $buffering 1
    $volatile tmp1 := ((val_in_use << (($bitcast ($uint<64>) sp ) << 3 )) >> (($bitcast ($uint<64>) head ) << 3 )) $buffering 1
    $volatile bytemask := (($bitcast ($uint<64>) _hFFFFFFFFFFFFFFFF  ) << (($bitcast ($uint<64>) (8  - hns) ) << 3 )) $buffering 1
    $volatile send_data := ( $mux p1_zero 0   ((cv1 | tmp1) & bytemask) )  $buffering 1
    $guard (send) prev_core_ip1 := send_data $buffering 1// bits of buffering = 64. 
    $volatile ncv1 := ( $mux send 0   send_data )  $buffering 1
    $volatile next_row := ((sent == (ct_new - 1 )) & done) $buffering 1
    $volatile n_left := ( $mux done chl_in  (left - ns) )  $buffering 1
    $volatile n_sent := ( $mux done ( $mux next_row 0   (sent + 1 ) )   sent )  $buffering 1
    $volatile n_head := ( $mux send 0   hns )  $buffering 1
    $volatile update_row := ( $mux next_row (row1 + 2)  row1 )  $buffering 1
    $volatile continue_flag1 := (update_row < row_last) $buffering 1
    $volatile n_row1 := ( $mux continue_flag1 update_row  0  )  $buffering 1
    $volatile n_addr1 := ( $mux r_lt_p addr_init  (addr1 + (( $mux next_row m_factor  0  )  + ( $mux mc_lt_p 0   ($bitcast ($uint<32>) ns ) ) )) )  $buffering 1
    $volatile na3_1 := (n_addr1 >> 3 ) $buffering 1
    $volatile n_fn := (((sns == 0 ) | (done & (na3_1 != (addr1 >> 3 )))) | (next_row | (p1_zero & fn))) $buffering 1
    $volatile nfv1 := val_in_use $buffering 1
    $volatile np_cnt := (part_cnt + ( $mux continue_flag1 0   1  ) ) $buffering 1
    $while (continue_flag1 | (np_cnt != np))
  }
}
$module [loadInput_in2]
$in ( addr_init : $uint<32>   row_in : $uint<16>   ct : $uint<16>   chl_in : $uint<16>   pad : $uint<16>   num_parts_1 : $uint<8>   index : $uint<8>  )
$out ()
$is
{
  $branchblock [access_block]
  {
    ct_new := (ct + (pad << 1 )) $buffering 1// bits of buffering = 16. 
    m_factor := ($bitcast ($uint<32>) (ct * chl_in) ) $buffering 1// bits of buffering = 32. 
    row_last := (row_in + 3 ) $buffering 1// bits of buffering = 16. 
    np := (num_parts_1 + 1 ) $buffering 1// bits of buffering = 8. 
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi row1 := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_row1 $on   $loopback 
    // type of target is $uint<16>
    $phi part_cnt := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  np_cnt $on   $loopback 
    // type of target is $uint<8>
    $phi sent := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  n_sent $on   $loopback 
    // type of target is $uint<16>
    $phi fv1 := 			  0  $on   $entry 			  nfv1 $on   $loopback 
    // type of target is $uint<64>
    $phi cv1 := 			  ($bitcast ($uint<64>) 0  ) $on   $entry 			  ncv1 $on   $loopback 
    // type of target is $uint<64>
    $phi left := 			  chl_in $on   $entry 			  n_left $on   $loopback 
    // type of target is $uint<16>
    $phi head := 			  ($bitcast ($uint<3>) 0  ) $on   $entry 			  n_head $on   $loopback 
    // type of target is $uint<3>
    $phi addr1 := 			  addr_init $on   $entry 			  n_addr1 $on   $loopback 
    // type of target is $uint<32>
    $phi fn := 			  ($bitcast ($uint<1>) 1  ) $on   $entry 			  n_fn $on   $loopback 
    // type of target is $uint<1>
    $endmerge
    $volatile mc_lt_p := ((sent < pad) | (sent >= (ct + pad))) $buffering 1
    $volatile r_lt_p := ((row1 < pad) | (row1 >= ((row_in + 2 ) - pad))) $buffering 1
    $volatile p1_zero := (mc_lt_p | r_lt_p) $buffering 1
    $volatile sp := ($bitcast ($uint<3>) addr1 ) $buffering 1
    $volatile min1 := ( $mux (sp > head) sp  head )  $buffering 1
    $volatile mi71 := (8  - ($bitcast ($uint<16>) min1 )) $buffering 1
    $volatile cmp_val := ( $mux p1_zero 8   mi71 )  $buffering 1
    $volatile ns := ( $mux (cmp_val < left) cmp_val  left )  $buffering 1
    $volatile hns := (head + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile sns := (sp + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile done := (left == ns) $buffering 1
    $volatile send := (done | (hns == 0 )) $buffering 1
    read_from_pipe := (fn & ( ~ p1_zero )) $buffering 1// bits of buffering = 1. 
    $guard (read_from_pipe) $call readModule_convolution (index (addr1 >> 3 ) ) (read_val ) 
    $volatile val_in_use := ( $mux read_from_pipe read_val  fv1 )  $buffering 1
    $volatile tmp1 := ((val_in_use << (($bitcast ($uint<64>) sp ) << 3 )) >> (($bitcast ($uint<64>) head ) << 3 )) $buffering 1
    $volatile bytemask := (($bitcast ($uint<64>) _hFFFFFFFFFFFFFFFF  ) << (($bitcast ($uint<64>) (8  - hns) ) << 3 )) $buffering 1
    $volatile send_data := ( $mux p1_zero 0   ((cv1 | tmp1) & bytemask) )  $buffering 1
    $guard (send) prev_core_ip2 := send_data $buffering 1// bits of buffering = 64. 
    $volatile ncv1 := ( $mux send 0   send_data )  $buffering 1
    $volatile next_row := ((sent == (ct_new - 1 )) & done) $buffering 1
    $volatile n_left := ( $mux done chl_in  (left - ns) )  $buffering 1
    $volatile n_sent := ( $mux done ( $mux next_row 0   (sent + 1 ) )   sent )  $buffering 1
    $volatile n_head := ( $mux send 0   hns )  $buffering 1
    $volatile update_row := ( $mux next_row (row1 + 2)  row1 )  $buffering 1
    $volatile continue_flag1 := (update_row < row_last) $buffering 1
    $volatile n_row1 := ( $mux continue_flag1 update_row  1  )  $buffering 1
    $volatile n_addr1 := ( $mux r_lt_p addr_init  (addr1 + (( $mux next_row m_factor  0  )  + ( $mux mc_lt_p 0   ($bitcast ($uint<32>) ns ) ) )) )  $buffering 1
    $volatile na3_1 := (n_addr1 >> 3 ) $buffering 1
    $volatile n_fn := (((sns == 0 ) | (done & (na3_1 != (addr1 >> 3 )))) | (next_row | (p1_zero & fn))) $buffering 1
    $volatile nfv1 := val_in_use $buffering 1
    $volatile np_cnt := (part_cnt + ( $mux continue_flag1 0   1  ) ) $buffering 1
    $while (continue_flag1 | (np_cnt != np))
  }
}
$module [inputModule]
$in ( row_in : $uint<16>   rt : $uint<16>   ct : $uint<16>   chl_in : $uint<16>   rk : $uint<16>   pad : $uint<16>   num_parts_1 : $uint<8>   index : $uint<8>  )
$out ()
$is
{
  m_factor := ($bitcast ($uint<32>) (ct * chl_in) ) $buffering 1// bits of buffering = 32. 
  m2_factor := (m_factor << 1 ) $buffering 1// bits of buffering = 32.  Orphaned statement with target m2_factor ?? 
  bit0 := (pad [] 0 ) $buffering 1// bits of buffering = 1. 
  bit1 := (pad [] 1 ) $buffering 1// bits of buffering = 1.  Orphaned statement with target bit1 ?? 
  addr1 := ( $mux bit0 m_factor  0  )  $buffering 1// bits of buffering = 32. 
  addr2 := ( $mux bit0 0   m_factor )  $buffering 1// bits of buffering = 32. 
  mode_3 := (rk == 3 ) $buffering 1// bits of buffering = 1. 
  chl_in_ceil := ((chl_in + 7 ) >> 3 ) $buffering 1// bits of buffering = 16. 
  $parallelblock[access_block]
  {
    $call singleFetch (row_in ct pad chl_in_ceil num_parts_1 mode_3 ) () 
    $call loadInput_in1 (addr1 row_in ct chl_in pad num_parts_1 index ) () 
    $call loadInput_in2 (addr2 row_in ct chl_in pad num_parts_1 index ) () 
  }
}
$module [inputModule8]
$in ( row_in : $uint<16>   ct : $uint<16>   chl_in : $uint<16>   rk : $uint<16>   pad : $uint<16>   num_parts : $uint<8>   index : $uint<8>  )
$out ()
$is
{
  mode_3 := (rk == 3 ) $buffering 1// bits of buffering = 1. 
  $parallelblock[blk]
  {
    $call singleFetch (row_in ct pad chl_in num_parts mode_3 ) () 
    $branchblock [access_block]
    {
      ct_new := (ct + (pad << 1 )) $buffering 1// bits of buffering = 16. 
      row_size_total := ($bitcast ($uint<32>) (ct_new * chl_in) ) $buffering 1// bits of buffering = 32. 
      p_chl_in := ($bitcast ($uint<32>) (pad * chl_in) ) $buffering 1// bits of buffering = 32. 
      m_factor := ($bitcast ($uint<32>) (ct * chl_in) ) $buffering 1// bits of buffering = 32. 
      m2_factor := (m_factor << 1 ) $buffering 1// bits of buffering = 32. 
      m3_factor := (m2_factor + m_factor) $buffering 1// bits of buffering = 32.  Orphaned statement with target m3_factor ?? 
      addr_init := (-1  * (($bitcast ($uint<32>) pad ) * m_factor)) $buffering 1// bits of buffering = 32. 
      $dopipeline $depth 15 $buffering 2
      $fullrate 
      $merge $entry $loopback 
      $phi address := 				  addr_init $on   $entry 				  n_address $on   $loopback 
      // type of target is $uint<32>
      $phi row1 := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  n_row1 $on   $loopback 
      // type of target is $uint<16>
      $phi mycounter := 				  ($bitcast ($uint<32>) row_size_total ) $on   $entry 				  n_mycounter $on   $loopback 
      // type of target is $uint<32>
      $phi part_cnt := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  np_cnt $on   $loopback 
      // type of target is $uint<8>
      $endmerge
      $volatile next_row := (mycounter == 1 ) $buffering 1
      $volatile tmp_cnt := (mycounter - 1 ) $buffering 1
      $volatile n_mycounter := ( $mux next_row row_size_total  tmp_cnt )  $buffering 1
      $volatile update_row := ( $mux next_row (row1 + 2)  row1 )  $buffering 1
      $volatile continue_flag1 := (update_row < (row_in + 2 )) $buffering 1
      $volatile mc_lt_p := ((mycounter <= p_chl_in) | (mycounter > (row_size_total - p_chl_in))) $buffering 1
      $volatile n_row1 := ( $mux continue_flag1 update_row  0  )  $buffering 1
      $volatile n_address := ( $mux continue_flag1 (address + ( $mux next_row m_factor  ( $mux mc_lt_p 0   1  )  ) )  addr_init )  $buffering 1
      $volatile np_cnt := (part_cnt + ( $mux continue_flag1 0   1  ) ) $buffering 1
      $volatile p1_zero := (mc_lt_p | ((row1 < pad) | (row1 >= ((row_in + 3 ) - pad)))) $buffering 1
      $volatile p2_zero := (mc_lt_p | (((row1 + 1 ) < pad) | (row1 >= ((row_in + 2 ) - pad)))) $buffering 1
      $volatile addr2 := (address + m_factor) $buffering 1
      $guard (~p1_zero) $call readModule_convolution (index address ) (val1 ) 
      $guard (~p2_zero) $call readModule_convolution (index addr2 ) (val2 ) 
      prev_core_ip1 := ( $mux p1_zero 0   val1 )  $buffering 1// bits of buffering = 64. 
      prev_core_ip2 := ( $mux p2_zero 0   val2 )  $buffering 1// bits of buffering = 64. 
      $while (continue_flag1 | (part_cnt < num_parts))
    }
  }
}
$module [inputModuleCT]
$in ( row_in : $uint<16>   ct : $uint<16>   chl_in : $uint<16>   num_parts : $uint<8>   index : $uint<8>  )
$out ()
$is
{
  $branchblock [access_block]
  {
    ct_new := ((ct << 1 ) + 1 ) $buffering 1// bits of buffering = 16. 
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi address := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  n_address $on   $loopback 
    // type of target is $uint<32>
    $phi row1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  n_row1 $on   $loopback 
    // type of target is $uint<16>
    $phi chl := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_chl $on   $loopback 
    // type of target is $uint<16>
    $phi mycounter := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_mycounter $on   $loopback 
    // type of target is $uint<16>
    $phi part_cnt := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  np_cnt $on   $loopback 
    // type of target is $uint<8>
    $endmerge
    $volatile chl_done := (chl == chl_in) $buffering 1
    $volatile n_chl := ( $mux chl_done 1   (chl + 1 ) )  $buffering 1
    $volatile next_row := ((mycounter == ct_new) & chl_done) $buffering 1
    $volatile tmp_cnt := (mycounter + 1 ) $buffering 1
    $volatile n_mycounter := ( $mux chl_done ( $mux next_row 1   tmp_cnt )   mycounter )  $buffering 1
    $volatile update_row := ( $mux next_row (row1 + 2)  row1 )  $buffering 1
    $volatile continue_flag1 := (update_row < row_in) $buffering 1
    $volatile n_row1 := ( $mux continue_flag1 update_row  0  )  $buffering 1
    $volatile p2_zero := (mycounter [] 0 ) $buffering 1
    $volatile n_address := ( $mux continue_flag1 (address + ( $mux p2_zero 0   1  ) )  0  )  $buffering 1
    $volatile np_cnt := (part_cnt + ( $mux continue_flag1 0   1  ) ) $buffering 1
    $guard (~p2_zero) $call readModule_convolution (index address ) (val2 ) 
    core_ip1 := 0  $buffering 1// bits of buffering = 64. 
    core_ip2 := ( $mux p2_zero 0   val2 )  $buffering 1// bits of buffering = 64. 
    core_ip3 := 0  $buffering 1// bits of buffering = 64. 
    $while (continue_flag1 | (part_cnt < num_parts))
  }
}
$module [inputModuleConcat]
$in ( row_in : $uint<16>   ct : $uint<16>   chl_in : $uint<16>   rk : $uint<16>   pad : $uint<16>   num_parts : $uint<8>   index1 : $uint<8>   index2 : $uint<8>  )
$out ()
$is
{
  mode_3 := (rk == 3 ) $buffering 1// bits of buffering = 1. 
  $parallelblock[blk]
  {
    $call singleFetch (row_in ct pad chl_in num_parts mode_3 ) () 
    $branchblock [access_block]
    {
      $volatile ct_new := (ct + (pad << 1 )) $buffering 1
      row_size_total := ($bitcast ($uint<32>) (ct_new * chl_in) ) $buffering 1// bits of buffering = 32. 
      $volatile ct1 := (ct >> 1 ) $buffering 1
      rs1 := (row_size_total >> 1 ) $buffering 1// bits of buffering = 32. 
      p_chl_in := ($bitcast ($uint<32>) (pad * chl_in) ) $buffering 1// bits of buffering = 32. 
      m_factor := ($bitcast ($uint<32>) (ct1 * chl_in) ) $buffering 1// bits of buffering = 32. 
      m2_factor := (m_factor << 1 ) $buffering 1// bits of buffering = 32. 
      m3_factor := (m2_factor + m_factor) $buffering 1// bits of buffering = 32.  Orphaned statement with target m3_factor ?? 
      addr_init := (-1  * (($bitcast ($uint<32>) pad ) * m_factor)) $buffering 1// bits of buffering = 32. 
      $dopipeline $depth 15 $buffering 2
      $fullrate 
      $merge $entry $loopback 
      $phi address1 := 				  addr_init $on   $entry 				  n_address1 $on   $loopback 
      // type of target is $uint<32>
      $phi address2 := 				  addr_init $on   $entry 				  n_address2 $on   $loopback 
      // type of target is $uint<32>
      $phi row1 := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  n_row1 $on   $loopback 
      // type of target is $uint<16>
      $phi mycounter := 				  ($bitcast ($uint<32>) row_size_total ) $on   $entry 				  n_mycounter $on   $loopback 
      // type of target is $uint<32>
      $phi part_cnt := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  np_cnt $on   $loopback 
      // type of target is $uint<8>
      $endmerge
      $volatile next_row := (mycounter == 1 ) $buffering 1
      $volatile tmp_cnt := (mycounter - 1 ) $buffering 1
      $volatile inp1 := (mycounter > rs1) $buffering 1
      $volatile update_row := ( $mux next_row (row1 + 2)  row1 )  $buffering 1
      $volatile continue_flag1 := (update_row < (row_in + 2 )) $buffering 1
      $volatile mc_lt_p := ((mycounter <= p_chl_in) | (mycounter > (row_size_total - p_chl_in))) $buffering 1
      $volatile update_val := ( $mux next_row m_factor  ( $mux mc_lt_p 0   1  )  )  $buffering 1
      $volatile address := ( $mux inp1 address1  address2 )  $buffering 1
      $volatile p1_zero := (mc_lt_p | ((row1 < pad) | (row1 >= ((row_in + 3 ) - pad)))) $buffering 1
      $volatile p2_zero := (mc_lt_p | (((row1 + 1 ) < pad) | (row1 >= ((row_in + 2 ) - pad)))) $buffering 1
      $volatile addr2 := (address + m_factor) $buffering 1
      $volatile index := ( $mux inp1 index1  index2 )  $buffering 1
      $guard (~p1_zero) $call readModule_convolution (index address ) (val1 ) 
      $guard (~p2_zero) $call readModule_convolution (index addr2 ) (val2 ) 
      prev_core_ip1 := ( $mux p1_zero 0   val1 )  $buffering 1// bits of buffering = 64. 
      prev_core_ip2 := ( $mux p2_zero 0   val2 )  $buffering 1// bits of buffering = 64. 
      $volatile n_mycounter := ( $mux next_row row_size_total  tmp_cnt )  $buffering 1
      $volatile n_row1 := ( $mux continue_flag1 update_row  0  )  $buffering 1
      $volatile n_address1 := ( $mux inp1 ( $mux continue_flag1 (address1 + update_val)  addr_init )   address1 )  $buffering 1
      $volatile n_address2 := ( $mux inp1 address2  ( $mux continue_flag1 (address2 + update_val)  addr_init )  )  $buffering 1
      $volatile np_cnt := (part_cnt + ( $mux continue_flag1 0   1  ) ) $buffering 1
      $while (continue_flag1 | (part_cnt < num_parts))
    }
  }
}
$module [convolveCore]
$in ( rb : $uint<16>   cb : $uint<16>   chl_in_read : $uint<16>   chl_out : $uint<16>   rk : $uint<16>   ck : $uint<16>   num_parts : $uint<8>   max_chl : $uint<16>  )
$out ()
$is
{
  $branchblock [conv_block]
  {
    num_row := (rb - 2) $buffering 1// bits of buffering = 16. 
    num_col := (cb - 1 ) $buffering 1// bits of buffering = 16. 
    chl_in := (chl_in_read - 1 ) $buffering 1// bits of buffering = 16. 
    ck_s := (($bitcast ($uint<2>) ck ) - 1 ) $buffering 1// bits of buffering = 2. 
    mode_2 := (rk == 2 ) $buffering 1// bits of buffering = 1. 
    not_mode_2 := ( ~ mode_2 ) $buffering 1// bits of buffering = 1. 
    $merge $entry loopback 
    $phi p_cnt := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  np_cnt $on   loopback 
    // type of target is $uint<8>
    $phi chl_max_itr := 			  max_chl $on   $entry 			  n_cmi $on   loopback 
    // type of target is $uint<16>
    $phi chl_left := 			  (chl_out - max_chl) $on   $entry 			  n_chl_left $on   loopback 
    // type of target is $uint<16>
    $endmerge
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi chl := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux chl_done 0   (chl + 1 ) )  $on   $loopback 
    // type of target is $uint<16>
    $phi num := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  ( $mux chl_done ( $mux nd 0   (num + 1 ) )   num )  $on   $loopback 
    // type of target is $uint<2>
    $phi chl_out_var := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  ( $mux num_done ( $mux chl_done_flag 1   (chl_out_var + 8 ) )   chl_out_var )  $on   $loopback 
    // type of target is $uint<16>
    $phi col := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux chl_done_flag ( $mux col_done 0   (col + 1 ) )   col )  $on   $loopback 
    // type of target is $uint<16>
    $phi row := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux col_done (row + 2)  row )  $on   $loopback 
    // type of target is $uint<16>
    $endmerge
    $volatile nd := (num == ck_s) $buffering 1
    $volatile chl_done := (chl >= chl_in) $buffering 1
    $volatile num_done := (nd & chl_done) $buffering 1
    $volatile chl_done_flag := (((chl_out_var + 8 ) > chl_max_itr) & num_done) $buffering 1
    $volatile last_col := (col == num_col) $buffering 1
    $volatile col_done := (last_col & chl_done_flag) $buffering 1
    $volatile out_done_flag := (row >= num_row) $buffering 1
    $volatile all_done_flag := (out_done_flag & col_done) $buffering 1
    $volatile o_chl1_valid := (chl_out_var <= chl_max_itr) $buffering 1
    $volatile o_chl2_valid := ((chl_out_var + 1 ) <= chl_max_itr) $buffering 1
    $volatile o_chl3_valid := ((chl_out_var + 2 ) <= chl_max_itr) $buffering 1
    $volatile o_chl4_valid := ((chl_out_var + 3 ) <= chl_max_itr) $buffering 1
    $volatile o_chl5_valid := ((chl_out_var + 4 ) <= chl_max_itr) $buffering 1
    $volatile o_chl6_valid := ((chl_out_var + 5 ) <= chl_max_itr) $buffering 1
    $volatile o_chl7_valid := ((chl_out_var + 6 ) <= chl_max_itr) $buffering 1
    $volatile o_chl8_valid := ((chl_out_var + 7 ) <= chl_max_itr) $buffering 1
    $volatile read_ip := (((col == 0 ) | nd) & (chl_out_var == 1 )) $buffering 1
    $volatile not_read_ip := ( ~ read_ip ) $buffering 1
    $volatile write_input := (((chl_out_var + 8 ) < chl_max_itr) | ((col < num_col) & (num > 0 ))) $buffering 1
    $volatile read_k := ((col == 0 ) & (row == 0 )) $buffering 1
    $volatile not_read_k := ( ~ read_k ) $buffering 1
    $volatile store_kernel := (out_done_flag ~& last_col) $buffering 1
    $volatile read_ip3 := (not_mode_2 & read_ip) $buffering 1
    $volatile not_read_ip3 := (not_mode_2 & not_read_ip) $buffering 1
    $volatile write_input3 := (write_input & not_mode_2) $buffering 1
    $guard (read_ip) temp2_1 := core_ip1 $buffering 1// bits of buffering = 64. 
    $guard (not_read_ip) temp1_1 := conv_ip1 $buffering 1// bits of buffering = 64. 
    $volatile iread1 := ( $mux read_ip temp2_1  temp1_1 )  $buffering 1
    $guard (write_input) conv_ip1 := iread1 $buffering 1// bits of buffering = 64. 
    ir1_1 := ( $slice iread1 63 56 )  $buffering 1// bits of buffering = 8. 
    ir2_1 := ( $slice iread1 55 48 )  $buffering 1// bits of buffering = 8. 
    ir3_1 := ( $slice iread1 47 40 )  $buffering 1// bits of buffering = 8. 
    ir4_1 := ( $slice iread1 39 32 )  $buffering 1// bits of buffering = 8. 
    ir5_1 := ( $slice iread1 31 24 )  $buffering 1// bits of buffering = 8. 
    ir6_1 := ( $slice iread1 23 16 )  $buffering 1// bits of buffering = 8. 
    ir7_1 := ( $slice iread1 15 8 )  $buffering 1// bits of buffering = 8. 
    ir8_1 := ( $slice iread1 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile ival1_1 := ($bitcast ($int<8>) ir1_1 ) $buffering 1
    $volatile ival2_1 := ($bitcast ($int<8>) ir2_1 ) $buffering 1
    $volatile ival3_1 := ($bitcast ($int<8>) ir3_1 ) $buffering 1
    $volatile ival4_1 := ($bitcast ($int<8>) ir4_1 ) $buffering 1
    $volatile ival5_1 := ($bitcast ($int<8>) ir5_1 ) $buffering 1
    $volatile ival6_1 := ($bitcast ($int<8>) ir6_1 ) $buffering 1
    $volatile ival7_1 := ($bitcast ($int<8>) ir7_1 ) $buffering 1
    $volatile ival8_1 := ($bitcast ($int<8>) ir8_1 ) $buffering 1
    $guard (read_ip) temp2_2 := core_ip2 $buffering 1// bits of buffering = 64. 
    $guard (not_read_ip) temp1_2 := conv_ip2 $buffering 1// bits of buffering = 64. 
    $volatile iread2 := ( $mux read_ip temp2_2  temp1_2 )  $buffering 1
    $guard (write_input) conv_ip2 := iread2 $buffering 1// bits of buffering = 64. 
    ir1_2 := ( $slice iread2 63 56 )  $buffering 1// bits of buffering = 8. 
    ir2_2 := ( $slice iread2 55 48 )  $buffering 1// bits of buffering = 8. 
    ir3_2 := ( $slice iread2 47 40 )  $buffering 1// bits of buffering = 8. 
    ir4_2 := ( $slice iread2 39 32 )  $buffering 1// bits of buffering = 8. 
    ir5_2 := ( $slice iread2 31 24 )  $buffering 1// bits of buffering = 8. 
    ir6_2 := ( $slice iread2 23 16 )  $buffering 1// bits of buffering = 8. 
    ir7_2 := ( $slice iread2 15 8 )  $buffering 1// bits of buffering = 8. 
    ir8_2 := ( $slice iread2 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile ival1_2 := ($bitcast ($int<8>) ir1_2 ) $buffering 1
    $volatile ival2_2 := ($bitcast ($int<8>) ir2_2 ) $buffering 1
    $volatile ival3_2 := ($bitcast ($int<8>) ir3_2 ) $buffering 1
    $volatile ival4_2 := ($bitcast ($int<8>) ir4_2 ) $buffering 1
    $volatile ival5_2 := ($bitcast ($int<8>) ir5_2 ) $buffering 1
    $volatile ival6_2 := ($bitcast ($int<8>) ir6_2 ) $buffering 1
    $volatile ival7_2 := ($bitcast ($int<8>) ir7_2 ) $buffering 1
    $volatile ival8_2 := ($bitcast ($int<8>) ir8_2 ) $buffering 1
    $guard (read_ip) temp2_3 := core_ip3 $buffering 1// bits of buffering = 64. 
    $guard (not_read_ip) temp1_3 := conv_ip3 $buffering 1// bits of buffering = 64. 
    $volatile iread3 := ( $mux read_ip temp2_3  temp1_3 )  $buffering 1
    $guard (write_input) conv_ip3 := iread3 $buffering 1// bits of buffering = 64. 
    ir1_3 := ( $slice iread3 63 56 )  $buffering 1// bits of buffering = 8. 
    ir2_3 := ( $slice iread3 55 48 )  $buffering 1// bits of buffering = 8. 
    ir3_3 := ( $slice iread3 47 40 )  $buffering 1// bits of buffering = 8. 
    ir4_3 := ( $slice iread3 39 32 )  $buffering 1// bits of buffering = 8. 
    ir5_3 := ( $slice iread3 31 24 )  $buffering 1// bits of buffering = 8. 
    ir6_3 := ( $slice iread3 23 16 )  $buffering 1// bits of buffering = 8. 
    ir7_3 := ( $slice iread3 15 8 )  $buffering 1// bits of buffering = 8. 
    ir8_3 := ( $slice iread3 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile ival1_3 := ($bitcast ($int<8>) ir1_3 ) $buffering 1
    $volatile ival2_3 := ($bitcast ($int<8>) ir2_3 ) $buffering 1
    $volatile ival3_3 := ($bitcast ($int<8>) ir3_3 ) $buffering 1
    $volatile ival4_3 := ($bitcast ($int<8>) ir4_3 ) $buffering 1
    $volatile ival5_3 := ($bitcast ($int<8>) ir5_3 ) $buffering 1
    $volatile ival6_3 := ($bitcast ($int<8>) ir6_3 ) $buffering 1
    $volatile ival7_3 := ($bitcast ($int<8>) ir7_3 ) $buffering 1
    $volatile ival8_3 := ($bitcast ($int<8>) ir8_3 ) $buffering 1
    $guard (read_ip3) temp2_4 := core_ip4 $buffering 1// bits of buffering = 64. 
    $guard (not_read_ip3) temp1_4 := conv_ip4 $buffering 1// bits of buffering = 64. 
    $volatile iread4 := ( $mux mode_2 0   ( $mux read_ip temp2_4  temp1_4 )  )  $buffering 1
    $guard (write_input3) conv_ip4 := iread4 $buffering 1// bits of buffering = 64. 
    ir1_4 := ( $slice iread4 63 56 )  $buffering 1// bits of buffering = 8. 
    ir2_4 := ( $slice iread4 55 48 )  $buffering 1// bits of buffering = 8. 
    ir3_4 := ( $slice iread4 47 40 )  $buffering 1// bits of buffering = 8. 
    ir4_4 := ( $slice iread4 39 32 )  $buffering 1// bits of buffering = 8. 
    ir5_4 := ( $slice iread4 31 24 )  $buffering 1// bits of buffering = 8. 
    ir6_4 := ( $slice iread4 23 16 )  $buffering 1// bits of buffering = 8. 
    ir7_4 := ( $slice iread4 15 8 )  $buffering 1// bits of buffering = 8. 
    ir8_4 := ( $slice iread4 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile ival1_4 := ($bitcast ($int<8>) ir1_4 ) $buffering 1
    $volatile ival2_4 := ($bitcast ($int<8>) ir2_4 ) $buffering 1
    $volatile ival3_4 := ($bitcast ($int<8>) ir3_4 ) $buffering 1
    $volatile ival4_4 := ($bitcast ($int<8>) ir4_4 ) $buffering 1
    $volatile ival5_4 := ($bitcast ($int<8>) ir5_4 ) $buffering 1
    $volatile ival6_4 := ($bitcast ($int<8>) ir6_4 ) $buffering 1
    $volatile ival7_4 := ($bitcast ($int<8>) ir7_4 ) $buffering 1
    $volatile ival8_4 := ($bitcast ($int<8>) ir8_4 ) $buffering 1
    $volatile readk_3 := (read_k & not_mode_2) $buffering 1
    $volatile not_readk_3 := (not_read_k & not_mode_2) $buffering 1
    $volatile store_3 := (store_kernel & not_mode_2) $buffering 1
    $volatile rk_v1 := (read_k & o_chl1_valid) $buffering 1
    $volatile nrk_v1 := (not_read_k & o_chl1_valid) $buffering 1
    $guard (rk_v1) tempk1_1_1 := core1_kp1 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v1) tempk2_1_1 := conv1_kp1 $buffering 1// bits of buffering = 64. 
    kread_1_1 := ( $mux o_chl1_valid ( $mux read_k tempk1_1_1  tempk2_1_1 )   0  )  $buffering 1// bits of buffering = 64. 
    kr_1_1_1 := ( $slice kread_1_1 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_1_2_1 := ( $slice kread_1_1 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_1_3_1 := ( $slice kread_1_1 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_1_4_1 := ( $slice kread_1_1 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_1_5_1 := ( $slice kread_1_1 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_1_6_1 := ( $slice kread_1_1 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_1_7_1 := ( $slice kread_1_1 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_1_8_1 := ( $slice kread_1_1 7 0 )  $buffering 1// bits of buffering = 8. 
    kval_1_1_1 := ($bitcast ($int<8>) kr_1_1_1 ) $buffering 1// bits of buffering = 8. 
    kval_1_2_1 := ($bitcast ($int<8>) kr_1_2_1 ) $buffering 1// bits of buffering = 8. 
    kval_1_3_1 := ($bitcast ($int<8>) kr_1_3_1 ) $buffering 1// bits of buffering = 8. 
    kval_1_4_1 := ($bitcast ($int<8>) kr_1_4_1 ) $buffering 1// bits of buffering = 8. 
    kval_1_5_1 := ($bitcast ($int<8>) kr_1_5_1 ) $buffering 1// bits of buffering = 8. 
    kval_1_6_1 := ($bitcast ($int<8>) kr_1_6_1 ) $buffering 1// bits of buffering = 8. 
    kval_1_7_1 := ($bitcast ($int<8>) kr_1_7_1 ) $buffering 1// bits of buffering = 8. 
    kval_1_8_1 := ($bitcast ($int<8>) kr_1_8_1 ) $buffering 1// bits of buffering = 8. 
    mul_val_1_1_1 := ($cast ($int<16>) (kval_1_1_1 * ival1_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_2_1 := ($cast ($int<16>) (kval_1_2_1 * ival2_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_3_1 := ($cast ($int<16>) (kval_1_3_1 * ival3_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_4_1 := ($cast ($int<16>) (kval_1_4_1 * ival4_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_5_1 := ($cast ($int<16>) (kval_1_5_1 * ival5_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_6_1 := ($cast ($int<16>) (kval_1_6_1 * ival6_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_7_1 := ($cast ($int<16>) (kval_1_7_1 * ival7_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_8_1 := ($cast ($int<16>) (kval_1_8_1 * ival8_1) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_1_1 := (((mul_val_1_1_1 + mul_val_1_2_1) + (mul_val_1_3_1 + mul_val_1_4_1)) + ((mul_val_1_5_1 + mul_val_1_6_1) + (mul_val_1_7_1 + mul_val_1_8_1))) $buffering 1// bits of buffering = 16. 
    mul_val_1_1_4 := ($cast ($int<16>) (kval_1_1_1 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_2_4 := ($cast ($int<16>) (kval_1_2_1 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_3_4 := ($cast ($int<16>) (kval_1_3_1 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_4_4 := ($cast ($int<16>) (kval_1_4_1 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_5_4 := ($cast ($int<16>) (kval_1_5_1 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_6_4 := ($cast ($int<16>) (kval_1_6_1 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_7_4 := ($cast ($int<16>) (kval_1_7_1 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_8_4 := ($cast ($int<16>) (kval_1_8_1 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_1_4 := (((mul_val_1_1_4 + mul_val_1_2_4) + (mul_val_1_3_4 + mul_val_1_4_4)) + ((mul_val_1_5_4 + mul_val_1_6_4) + (mul_val_1_7_4 + mul_val_1_8_4))) $buffering 1// bits of buffering = 16. 
    $guard (rk_v1) tempk1_1_2 := core1_kp2 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v1) tempk2_1_2 := conv1_kp2 $buffering 1// bits of buffering = 64. 
    kread_1_2 := ( $mux o_chl1_valid ( $mux read_k tempk1_1_2  tempk2_1_2 )   0  )  $buffering 1// bits of buffering = 64. 
    kr_1_1_2 := ( $slice kread_1_2 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_1_2_2 := ( $slice kread_1_2 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_1_3_2 := ( $slice kread_1_2 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_1_4_2 := ( $slice kread_1_2 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_1_5_2 := ( $slice kread_1_2 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_1_6_2 := ( $slice kread_1_2 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_1_7_2 := ( $slice kread_1_2 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_1_8_2 := ( $slice kread_1_2 7 0 )  $buffering 1// bits of buffering = 8. 
    kval_1_1_2 := ($bitcast ($int<8>) kr_1_1_2 ) $buffering 1// bits of buffering = 8. 
    kval_1_2_2 := ($bitcast ($int<8>) kr_1_2_2 ) $buffering 1// bits of buffering = 8. 
    kval_1_3_2 := ($bitcast ($int<8>) kr_1_3_2 ) $buffering 1// bits of buffering = 8. 
    kval_1_4_2 := ($bitcast ($int<8>) kr_1_4_2 ) $buffering 1// bits of buffering = 8. 
    kval_1_5_2 := ($bitcast ($int<8>) kr_1_5_2 ) $buffering 1// bits of buffering = 8. 
    kval_1_6_2 := ($bitcast ($int<8>) kr_1_6_2 ) $buffering 1// bits of buffering = 8. 
    kval_1_7_2 := ($bitcast ($int<8>) kr_1_7_2 ) $buffering 1// bits of buffering = 8. 
    kval_1_8_2 := ($bitcast ($int<8>) kr_1_8_2 ) $buffering 1// bits of buffering = 8. 
    mul_val_1_1_2 := ($cast ($int<16>) (kval_1_1_2 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_2_2 := ($cast ($int<16>) (kval_1_2_2 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_3_2 := ($cast ($int<16>) (kval_1_3_2 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_4_2 := ($cast ($int<16>) (kval_1_4_2 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_5_2 := ($cast ($int<16>) (kval_1_5_2 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_6_2 := ($cast ($int<16>) (kval_1_6_2 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_7_2 := ($cast ($int<16>) (kval_1_7_2 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_8_2 := ($cast ($int<16>) (kval_1_8_2 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_1_2 := (((mul_val_1_1_2 + mul_val_1_2_2) + (mul_val_1_3_2 + mul_val_1_4_2)) + ((mul_val_1_5_2 + mul_val_1_6_2) + (mul_val_1_7_2 + mul_val_1_8_2))) $buffering 1// bits of buffering = 16. 
    mul_val_1_1_5 := ($cast ($int<16>) (kval_1_1_2 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_2_5 := ($cast ($int<16>) (kval_1_2_2 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_3_5 := ($cast ($int<16>) (kval_1_3_2 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_4_5 := ($cast ($int<16>) (kval_1_4_2 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_5_5 := ($cast ($int<16>) (kval_1_5_2 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_6_5 := ($cast ($int<16>) (kval_1_6_2 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_7_5 := ($cast ($int<16>) (kval_1_7_2 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_8_5 := ($cast ($int<16>) (kval_1_8_2 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_1_5 := (((mul_val_1_1_5 + mul_val_1_2_5) + (mul_val_1_3_5 + mul_val_1_4_5)) + ((mul_val_1_5_5 + mul_val_1_6_5) + (mul_val_1_7_5 + mul_val_1_8_5))) $buffering 1// bits of buffering = 16. 
    $volatile rk_3v1 := (readk_3 & o_chl1_valid) $buffering 1
    $volatile nrk_3v1 := (not_readk_3 & o_chl1_valid) $buffering 1
    $guard (rk_3v1) tempk1_1_3 := core1_kp3 $buffering 1// bits of buffering = 64. 
    $guard (nrk_3v1) tempk2_1_3 := conv1_kp3 $buffering 1// bits of buffering = 64. 
    kread_1_3 := ( $mux o_chl1_valid ( $mux mode_2 0   ( $mux read_k tempk1_1_3  tempk2_1_3 )  )   0  )  $buffering 1// bits of buffering = 64. 
    kr_1_1_3 := ( $slice kread_1_3 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_1_2_3 := ( $slice kread_1_3 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_1_3_3 := ( $slice kread_1_3 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_1_4_3 := ( $slice kread_1_3 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_1_5_3 := ( $slice kread_1_3 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_1_6_3 := ( $slice kread_1_3 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_1_7_3 := ( $slice kread_1_3 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_1_8_3 := ( $slice kread_1_3 7 0 )  $buffering 1// bits of buffering = 8. 
    kval_1_1_3 := ($bitcast ($int<8>) kr_1_1_3 ) $buffering 1// bits of buffering = 8. 
    kval_1_2_3 := ($bitcast ($int<8>) kr_1_2_3 ) $buffering 1// bits of buffering = 8. 
    kval_1_3_3 := ($bitcast ($int<8>) kr_1_3_3 ) $buffering 1// bits of buffering = 8. 
    kval_1_4_3 := ($bitcast ($int<8>) kr_1_4_3 ) $buffering 1// bits of buffering = 8. 
    kval_1_5_3 := ($bitcast ($int<8>) kr_1_5_3 ) $buffering 1// bits of buffering = 8. 
    kval_1_6_3 := ($bitcast ($int<8>) kr_1_6_3 ) $buffering 1// bits of buffering = 8. 
    kval_1_7_3 := ($bitcast ($int<8>) kr_1_7_3 ) $buffering 1// bits of buffering = 8. 
    kval_1_8_3 := ($bitcast ($int<8>) kr_1_8_3 ) $buffering 1// bits of buffering = 8. 
    mul_val_1_1_3 := ($cast ($int<16>) (kval_1_1_3 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_2_3 := ($cast ($int<16>) (kval_1_2_3 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_3_3 := ($cast ($int<16>) (kval_1_3_3 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_4_3 := ($cast ($int<16>) (kval_1_4_3 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_5_3 := ($cast ($int<16>) (kval_1_5_3 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_6_3 := ($cast ($int<16>) (kval_1_6_3 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_7_3 := ($cast ($int<16>) (kval_1_7_3 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_8_3 := ($cast ($int<16>) (kval_1_8_3 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_1_3 := (((mul_val_1_1_3 + mul_val_1_2_3) + (mul_val_1_3_3 + mul_val_1_4_3)) + ((mul_val_1_5_3 + mul_val_1_6_3) + (mul_val_1_7_3 + mul_val_1_8_3))) $buffering 1// bits of buffering = 16. 
    mul_val_1_1_6 := ($cast ($int<16>) (kval_1_1_3 * ival1_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_2_6 := ($cast ($int<16>) (kval_1_2_3 * ival2_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_3_6 := ($cast ($int<16>) (kval_1_3_3 * ival3_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_4_6 := ($cast ($int<16>) (kval_1_4_3 * ival4_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_5_6 := ($cast ($int<16>) (kval_1_5_3 * ival5_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_6_6 := ($cast ($int<16>) (kval_1_6_3 * ival6_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_7_6 := ($cast ($int<16>) (kval_1_7_3 * ival7_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_1_8_6 := ($cast ($int<16>) (kval_1_8_3 * ival8_4) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_1_6 := (((mul_val_1_1_6 + mul_val_1_2_6) + (mul_val_1_3_6 + mul_val_1_4_6)) + ((mul_val_1_5_6 + mul_val_1_6_6) + (mul_val_1_7_6 + mul_val_1_8_6))) $buffering 1// bits of buffering = 16. 
    acc_val1_1 := ((t_acc_val_1_1 + t_acc_val_1_2) + t_acc_val_1_3) $buffering 1// bits of buffering = 16. 
    acc_val1_2 := ((t_acc_val_1_4 + t_acc_val_1_5) + t_acc_val_1_6) $buffering 1// bits of buffering = 16. 
    $volatile store_kernel1 := (store_kernel & o_chl1_valid) $buffering 1
    $volatile store_31 := (store_3 & o_chl1_valid) $buffering 1
    $guard (store_kernel1) conv1_kp1 := kread_1_1 $buffering 1// bits of buffering = 64. 
    $guard (store_kernel1) conv1_kp2 := kread_1_2 $buffering 1// bits of buffering = 64. 
    $guard (store_31) conv1_kp3 := kread_1_3 $buffering 1// bits of buffering = 64. 
    $volatile rk_v2 := (read_k & o_chl2_valid) $buffering 1
    $volatile nrk_v2 := (not_read_k & o_chl2_valid) $buffering 1
    $guard (rk_v2) tempk1_2_1 := core2_kp1 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v2) tempk2_2_1 := conv2_kp1 $buffering 1// bits of buffering = 64. 
    kread_2_1 := ( $mux o_chl2_valid ( $mux read_k tempk1_2_1  tempk2_2_1 )   0  )  $buffering 1// bits of buffering = 64. 
    kr_2_1_1 := ( $slice kread_2_1 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_2_2_1 := ( $slice kread_2_1 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_2_3_1 := ( $slice kread_2_1 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_2_4_1 := ( $slice kread_2_1 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_2_5_1 := ( $slice kread_2_1 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_2_6_1 := ( $slice kread_2_1 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_2_7_1 := ( $slice kread_2_1 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_2_8_1 := ( $slice kread_2_1 7 0 )  $buffering 1// bits of buffering = 8. 
    kval_2_1_1 := ($bitcast ($int<8>) kr_2_1_1 ) $buffering 1// bits of buffering = 8. 
    kval_2_2_1 := ($bitcast ($int<8>) kr_2_2_1 ) $buffering 1// bits of buffering = 8. 
    kval_2_3_1 := ($bitcast ($int<8>) kr_2_3_1 ) $buffering 1// bits of buffering = 8. 
    kval_2_4_1 := ($bitcast ($int<8>) kr_2_4_1 ) $buffering 1// bits of buffering = 8. 
    kval_2_5_1 := ($bitcast ($int<8>) kr_2_5_1 ) $buffering 1// bits of buffering = 8. 
    kval_2_6_1 := ($bitcast ($int<8>) kr_2_6_1 ) $buffering 1// bits of buffering = 8. 
    kval_2_7_1 := ($bitcast ($int<8>) kr_2_7_1 ) $buffering 1// bits of buffering = 8. 
    kval_2_8_1 := ($bitcast ($int<8>) kr_2_8_1 ) $buffering 1// bits of buffering = 8. 
    mul_val_2_1_1 := ($cast ($int<16>) (kval_2_1_1 * ival1_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_2_1 := ($cast ($int<16>) (kval_2_2_1 * ival2_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_3_1 := ($cast ($int<16>) (kval_2_3_1 * ival3_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_4_1 := ($cast ($int<16>) (kval_2_4_1 * ival4_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_5_1 := ($cast ($int<16>) (kval_2_5_1 * ival5_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_6_1 := ($cast ($int<16>) (kval_2_6_1 * ival6_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_7_1 := ($cast ($int<16>) (kval_2_7_1 * ival7_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_8_1 := ($cast ($int<16>) (kval_2_8_1 * ival8_1) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_2_1 := (((mul_val_2_1_1 + mul_val_2_2_1) + (mul_val_2_3_1 + mul_val_2_4_1)) + ((mul_val_2_5_1 + mul_val_2_6_1) + (mul_val_2_7_1 + mul_val_2_8_1))) $buffering 1// bits of buffering = 16. 
    mul_val_2_1_4 := ($cast ($int<16>) (kval_2_1_1 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_2_4 := ($cast ($int<16>) (kval_2_2_1 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_3_4 := ($cast ($int<16>) (kval_2_3_1 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_4_4 := ($cast ($int<16>) (kval_2_4_1 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_5_4 := ($cast ($int<16>) (kval_2_5_1 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_6_4 := ($cast ($int<16>) (kval_2_6_1 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_7_4 := ($cast ($int<16>) (kval_2_7_1 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_8_4 := ($cast ($int<16>) (kval_2_8_1 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_2_4 := (((mul_val_2_1_4 + mul_val_2_2_4) + (mul_val_2_3_4 + mul_val_2_4_4)) + ((mul_val_2_5_4 + mul_val_2_6_4) + (mul_val_2_7_4 + mul_val_2_8_4))) $buffering 1// bits of buffering = 16. 
    $guard (rk_v2) tempk1_2_2 := core2_kp2 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v2) tempk2_2_2 := conv2_kp2 $buffering 1// bits of buffering = 64. 
    kread_2_2 := ( $mux o_chl2_valid ( $mux read_k tempk1_2_2  tempk2_2_2 )   0  )  $buffering 1// bits of buffering = 64. 
    kr_2_1_2 := ( $slice kread_2_2 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_2_2_2 := ( $slice kread_2_2 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_2_3_2 := ( $slice kread_2_2 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_2_4_2 := ( $slice kread_2_2 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_2_5_2 := ( $slice kread_2_2 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_2_6_2 := ( $slice kread_2_2 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_2_7_2 := ( $slice kread_2_2 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_2_8_2 := ( $slice kread_2_2 7 0 )  $buffering 1// bits of buffering = 8. 
    kval_2_1_2 := ($bitcast ($int<8>) kr_2_1_2 ) $buffering 1// bits of buffering = 8. 
    kval_2_2_2 := ($bitcast ($int<8>) kr_2_2_2 ) $buffering 1// bits of buffering = 8. 
    kval_2_3_2 := ($bitcast ($int<8>) kr_2_3_2 ) $buffering 1// bits of buffering = 8. 
    kval_2_4_2 := ($bitcast ($int<8>) kr_2_4_2 ) $buffering 1// bits of buffering = 8. 
    kval_2_5_2 := ($bitcast ($int<8>) kr_2_5_2 ) $buffering 1// bits of buffering = 8. 
    kval_2_6_2 := ($bitcast ($int<8>) kr_2_6_2 ) $buffering 1// bits of buffering = 8. 
    kval_2_7_2 := ($bitcast ($int<8>) kr_2_7_2 ) $buffering 1// bits of buffering = 8. 
    kval_2_8_2 := ($bitcast ($int<8>) kr_2_8_2 ) $buffering 1// bits of buffering = 8. 
    mul_val_2_1_2 := ($cast ($int<16>) (kval_2_1_2 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_2_2 := ($cast ($int<16>) (kval_2_2_2 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_3_2 := ($cast ($int<16>) (kval_2_3_2 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_4_2 := ($cast ($int<16>) (kval_2_4_2 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_5_2 := ($cast ($int<16>) (kval_2_5_2 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_6_2 := ($cast ($int<16>) (kval_2_6_2 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_7_2 := ($cast ($int<16>) (kval_2_7_2 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_8_2 := ($cast ($int<16>) (kval_2_8_2 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_2_2 := (((mul_val_2_1_2 + mul_val_2_2_2) + (mul_val_2_3_2 + mul_val_2_4_2)) + ((mul_val_2_5_2 + mul_val_2_6_2) + (mul_val_2_7_2 + mul_val_2_8_2))) $buffering 1// bits of buffering = 16. 
    mul_val_2_1_5 := ($cast ($int<16>) (kval_2_1_2 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_2_5 := ($cast ($int<16>) (kval_2_2_2 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_3_5 := ($cast ($int<16>) (kval_2_3_2 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_4_5 := ($cast ($int<16>) (kval_2_4_2 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_5_5 := ($cast ($int<16>) (kval_2_5_2 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_6_5 := ($cast ($int<16>) (kval_2_6_2 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_7_5 := ($cast ($int<16>) (kval_2_7_2 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_8_5 := ($cast ($int<16>) (kval_2_8_2 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_2_5 := (((mul_val_2_1_5 + mul_val_2_2_5) + (mul_val_2_3_5 + mul_val_2_4_5)) + ((mul_val_2_5_5 + mul_val_2_6_5) + (mul_val_2_7_5 + mul_val_2_8_5))) $buffering 1// bits of buffering = 16. 
    $volatile rk_3v2 := (readk_3 & o_chl2_valid) $buffering 1
    $volatile nrk_3v2 := (not_readk_3 & o_chl2_valid) $buffering 1
    $guard (rk_3v2) tempk1_2_3 := core2_kp3 $buffering 1// bits of buffering = 64. 
    $guard (nrk_3v2) tempk2_2_3 := conv2_kp3 $buffering 1// bits of buffering = 64. 
    kread_2_3 := ( $mux o_chl2_valid ( $mux mode_2 0   ( $mux read_k tempk1_2_3  tempk2_2_3 )  )   0  )  $buffering 1// bits of buffering = 64. 
    kr_2_1_3 := ( $slice kread_2_3 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_2_2_3 := ( $slice kread_2_3 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_2_3_3 := ( $slice kread_2_3 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_2_4_3 := ( $slice kread_2_3 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_2_5_3 := ( $slice kread_2_3 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_2_6_3 := ( $slice kread_2_3 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_2_7_3 := ( $slice kread_2_3 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_2_8_3 := ( $slice kread_2_3 7 0 )  $buffering 1// bits of buffering = 8. 
    kval_2_1_3 := ($bitcast ($int<8>) kr_2_1_3 ) $buffering 1// bits of buffering = 8. 
    kval_2_2_3 := ($bitcast ($int<8>) kr_2_2_3 ) $buffering 1// bits of buffering = 8. 
    kval_2_3_3 := ($bitcast ($int<8>) kr_2_3_3 ) $buffering 1// bits of buffering = 8. 
    kval_2_4_3 := ($bitcast ($int<8>) kr_2_4_3 ) $buffering 1// bits of buffering = 8. 
    kval_2_5_3 := ($bitcast ($int<8>) kr_2_5_3 ) $buffering 1// bits of buffering = 8. 
    kval_2_6_3 := ($bitcast ($int<8>) kr_2_6_3 ) $buffering 1// bits of buffering = 8. 
    kval_2_7_3 := ($bitcast ($int<8>) kr_2_7_3 ) $buffering 1// bits of buffering = 8. 
    kval_2_8_3 := ($bitcast ($int<8>) kr_2_8_3 ) $buffering 1// bits of buffering = 8. 
    mul_val_2_1_3 := ($cast ($int<16>) (kval_2_1_3 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_2_3 := ($cast ($int<16>) (kval_2_2_3 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_3_3 := ($cast ($int<16>) (kval_2_3_3 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_4_3 := ($cast ($int<16>) (kval_2_4_3 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_5_3 := ($cast ($int<16>) (kval_2_5_3 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_6_3 := ($cast ($int<16>) (kval_2_6_3 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_7_3 := ($cast ($int<16>) (kval_2_7_3 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_8_3 := ($cast ($int<16>) (kval_2_8_3 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_2_3 := (((mul_val_2_1_3 + mul_val_2_2_3) + (mul_val_2_3_3 + mul_val_2_4_3)) + ((mul_val_2_5_3 + mul_val_2_6_3) + (mul_val_2_7_3 + mul_val_2_8_3))) $buffering 1// bits of buffering = 16. 
    mul_val_2_1_6 := ($cast ($int<16>) (kval_2_1_3 * ival1_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_2_6 := ($cast ($int<16>) (kval_2_2_3 * ival2_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_3_6 := ($cast ($int<16>) (kval_2_3_3 * ival3_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_4_6 := ($cast ($int<16>) (kval_2_4_3 * ival4_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_5_6 := ($cast ($int<16>) (kval_2_5_3 * ival5_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_6_6 := ($cast ($int<16>) (kval_2_6_3 * ival6_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_7_6 := ($cast ($int<16>) (kval_2_7_3 * ival7_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_2_8_6 := ($cast ($int<16>) (kval_2_8_3 * ival8_4) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_2_6 := (((mul_val_2_1_6 + mul_val_2_2_6) + (mul_val_2_3_6 + mul_val_2_4_6)) + ((mul_val_2_5_6 + mul_val_2_6_6) + (mul_val_2_7_6 + mul_val_2_8_6))) $buffering 1// bits of buffering = 16. 
    acc_val2_1 := ((t_acc_val_2_1 + t_acc_val_2_2) + t_acc_val_2_3) $buffering 1// bits of buffering = 16. 
    acc_val2_2 := ((t_acc_val_2_4 + t_acc_val_2_5) + t_acc_val_2_6) $buffering 1// bits of buffering = 16. 
    $volatile store_kernel2 := (store_kernel & o_chl2_valid) $buffering 1
    $volatile store_32 := (store_3 & o_chl2_valid) $buffering 1
    $guard (store_kernel2) conv2_kp1 := kread_2_1 $buffering 1// bits of buffering = 64. 
    $guard (store_kernel2) conv2_kp2 := kread_2_2 $buffering 1// bits of buffering = 64. 
    $guard (store_32) conv2_kp3 := kread_2_3 $buffering 1// bits of buffering = 64. 
    $volatile rk_v3 := (read_k & o_chl3_valid) $buffering 1
    $volatile nrk_v3 := (not_read_k & o_chl3_valid) $buffering 1
    $guard (rk_v3) tempk1_3_1 := core3_kp1 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v3) tempk2_3_1 := conv3_kp1 $buffering 1// bits of buffering = 64. 
    kread_3_1 := ( $mux o_chl3_valid ( $mux read_k tempk1_3_1  tempk2_3_1 )   0  )  $buffering 1// bits of buffering = 64. 
    kr_3_1_1 := ( $slice kread_3_1 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_3_2_1 := ( $slice kread_3_1 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_3_3_1 := ( $slice kread_3_1 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_3_4_1 := ( $slice kread_3_1 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_3_5_1 := ( $slice kread_3_1 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_3_6_1 := ( $slice kread_3_1 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_3_7_1 := ( $slice kread_3_1 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_3_8_1 := ( $slice kread_3_1 7 0 )  $buffering 1// bits of buffering = 8. 
    kval_3_1_1 := ($bitcast ($int<8>) kr_3_1_1 ) $buffering 1// bits of buffering = 8. 
    kval_3_2_1 := ($bitcast ($int<8>) kr_3_2_1 ) $buffering 1// bits of buffering = 8. 
    kval_3_3_1 := ($bitcast ($int<8>) kr_3_3_1 ) $buffering 1// bits of buffering = 8. 
    kval_3_4_1 := ($bitcast ($int<8>) kr_3_4_1 ) $buffering 1// bits of buffering = 8. 
    kval_3_5_1 := ($bitcast ($int<8>) kr_3_5_1 ) $buffering 1// bits of buffering = 8. 
    kval_3_6_1 := ($bitcast ($int<8>) kr_3_6_1 ) $buffering 1// bits of buffering = 8. 
    kval_3_7_1 := ($bitcast ($int<8>) kr_3_7_1 ) $buffering 1// bits of buffering = 8. 
    kval_3_8_1 := ($bitcast ($int<8>) kr_3_8_1 ) $buffering 1// bits of buffering = 8. 
    mul_val_3_1_1 := ($cast ($int<16>) (kval_3_1_1 * ival1_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_2_1 := ($cast ($int<16>) (kval_3_2_1 * ival2_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_3_1 := ($cast ($int<16>) (kval_3_3_1 * ival3_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_4_1 := ($cast ($int<16>) (kval_3_4_1 * ival4_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_5_1 := ($cast ($int<16>) (kval_3_5_1 * ival5_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_6_1 := ($cast ($int<16>) (kval_3_6_1 * ival6_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_7_1 := ($cast ($int<16>) (kval_3_7_1 * ival7_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_8_1 := ($cast ($int<16>) (kval_3_8_1 * ival8_1) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_3_1 := (((mul_val_3_1_1 + mul_val_3_2_1) + (mul_val_3_3_1 + mul_val_3_4_1)) + ((mul_val_3_5_1 + mul_val_3_6_1) + (mul_val_3_7_1 + mul_val_3_8_1))) $buffering 1// bits of buffering = 16. 
    mul_val_3_1_4 := ($cast ($int<16>) (kval_3_1_1 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_2_4 := ($cast ($int<16>) (kval_3_2_1 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_3_4 := ($cast ($int<16>) (kval_3_3_1 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_4_4 := ($cast ($int<16>) (kval_3_4_1 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_5_4 := ($cast ($int<16>) (kval_3_5_1 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_6_4 := ($cast ($int<16>) (kval_3_6_1 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_7_4 := ($cast ($int<16>) (kval_3_7_1 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_8_4 := ($cast ($int<16>) (kval_3_8_1 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_3_4 := (((mul_val_3_1_4 + mul_val_3_2_4) + (mul_val_3_3_4 + mul_val_3_4_4)) + ((mul_val_3_5_4 + mul_val_3_6_4) + (mul_val_3_7_4 + mul_val_3_8_4))) $buffering 1// bits of buffering = 16. 
    $guard (rk_v3) tempk1_3_2 := core3_kp2 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v3) tempk2_3_2 := conv3_kp2 $buffering 1// bits of buffering = 64. 
    kread_3_2 := ( $mux o_chl3_valid ( $mux read_k tempk1_3_2  tempk2_3_2 )   0  )  $buffering 1// bits of buffering = 64. 
    kr_3_1_2 := ( $slice kread_3_2 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_3_2_2 := ( $slice kread_3_2 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_3_3_2 := ( $slice kread_3_2 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_3_4_2 := ( $slice kread_3_2 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_3_5_2 := ( $slice kread_3_2 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_3_6_2 := ( $slice kread_3_2 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_3_7_2 := ( $slice kread_3_2 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_3_8_2 := ( $slice kread_3_2 7 0 )  $buffering 1// bits of buffering = 8. 
    kval_3_1_2 := ($bitcast ($int<8>) kr_3_1_2 ) $buffering 1// bits of buffering = 8. 
    kval_3_2_2 := ($bitcast ($int<8>) kr_3_2_2 ) $buffering 1// bits of buffering = 8. 
    kval_3_3_2 := ($bitcast ($int<8>) kr_3_3_2 ) $buffering 1// bits of buffering = 8. 
    kval_3_4_2 := ($bitcast ($int<8>) kr_3_4_2 ) $buffering 1// bits of buffering = 8. 
    kval_3_5_2 := ($bitcast ($int<8>) kr_3_5_2 ) $buffering 1// bits of buffering = 8. 
    kval_3_6_2 := ($bitcast ($int<8>) kr_3_6_2 ) $buffering 1// bits of buffering = 8. 
    kval_3_7_2 := ($bitcast ($int<8>) kr_3_7_2 ) $buffering 1// bits of buffering = 8. 
    kval_3_8_2 := ($bitcast ($int<8>) kr_3_8_2 ) $buffering 1// bits of buffering = 8. 
    mul_val_3_1_2 := ($cast ($int<16>) (kval_3_1_2 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_2_2 := ($cast ($int<16>) (kval_3_2_2 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_3_2 := ($cast ($int<16>) (kval_3_3_2 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_4_2 := ($cast ($int<16>) (kval_3_4_2 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_5_2 := ($cast ($int<16>) (kval_3_5_2 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_6_2 := ($cast ($int<16>) (kval_3_6_2 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_7_2 := ($cast ($int<16>) (kval_3_7_2 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_8_2 := ($cast ($int<16>) (kval_3_8_2 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_3_2 := (((mul_val_3_1_2 + mul_val_3_2_2) + (mul_val_3_3_2 + mul_val_3_4_2)) + ((mul_val_3_5_2 + mul_val_3_6_2) + (mul_val_3_7_2 + mul_val_3_8_2))) $buffering 1// bits of buffering = 16. 
    mul_val_3_1_5 := ($cast ($int<16>) (kval_3_1_2 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_2_5 := ($cast ($int<16>) (kval_3_2_2 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_3_5 := ($cast ($int<16>) (kval_3_3_2 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_4_5 := ($cast ($int<16>) (kval_3_4_2 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_5_5 := ($cast ($int<16>) (kval_3_5_2 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_6_5 := ($cast ($int<16>) (kval_3_6_2 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_7_5 := ($cast ($int<16>) (kval_3_7_2 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_8_5 := ($cast ($int<16>) (kval_3_8_2 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_3_5 := (((mul_val_3_1_5 + mul_val_3_2_5) + (mul_val_3_3_5 + mul_val_3_4_5)) + ((mul_val_3_5_5 + mul_val_3_6_5) + (mul_val_3_7_5 + mul_val_3_8_5))) $buffering 1// bits of buffering = 16. 
    $volatile rk_3v3 := (readk_3 & o_chl3_valid) $buffering 1
    $volatile nrk_3v3 := (not_readk_3 & o_chl3_valid) $buffering 1
    $guard (rk_3v3) tempk1_3_3 := core3_kp3 $buffering 1// bits of buffering = 64. 
    $guard (nrk_3v3) tempk2_3_3 := conv3_kp3 $buffering 1// bits of buffering = 64. 
    kread_3_3 := ( $mux o_chl3_valid ( $mux mode_2 0   ( $mux read_k tempk1_3_3  tempk2_3_3 )  )   0  )  $buffering 1// bits of buffering = 64. 
    kr_3_1_3 := ( $slice kread_3_3 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_3_2_3 := ( $slice kread_3_3 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_3_3_3 := ( $slice kread_3_3 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_3_4_3 := ( $slice kread_3_3 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_3_5_3 := ( $slice kread_3_3 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_3_6_3 := ( $slice kread_3_3 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_3_7_3 := ( $slice kread_3_3 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_3_8_3 := ( $slice kread_3_3 7 0 )  $buffering 1// bits of buffering = 8. 
    kval_3_1_3 := ($bitcast ($int<8>) kr_3_1_3 ) $buffering 1// bits of buffering = 8. 
    kval_3_2_3 := ($bitcast ($int<8>) kr_3_2_3 ) $buffering 1// bits of buffering = 8. 
    kval_3_3_3 := ($bitcast ($int<8>) kr_3_3_3 ) $buffering 1// bits of buffering = 8. 
    kval_3_4_3 := ($bitcast ($int<8>) kr_3_4_3 ) $buffering 1// bits of buffering = 8. 
    kval_3_5_3 := ($bitcast ($int<8>) kr_3_5_3 ) $buffering 1// bits of buffering = 8. 
    kval_3_6_3 := ($bitcast ($int<8>) kr_3_6_3 ) $buffering 1// bits of buffering = 8. 
    kval_3_7_3 := ($bitcast ($int<8>) kr_3_7_3 ) $buffering 1// bits of buffering = 8. 
    kval_3_8_3 := ($bitcast ($int<8>) kr_3_8_3 ) $buffering 1// bits of buffering = 8. 
    mul_val_3_1_3 := ($cast ($int<16>) (kval_3_1_3 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_2_3 := ($cast ($int<16>) (kval_3_2_3 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_3_3 := ($cast ($int<16>) (kval_3_3_3 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_4_3 := ($cast ($int<16>) (kval_3_4_3 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_5_3 := ($cast ($int<16>) (kval_3_5_3 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_6_3 := ($cast ($int<16>) (kval_3_6_3 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_7_3 := ($cast ($int<16>) (kval_3_7_3 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_8_3 := ($cast ($int<16>) (kval_3_8_3 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_3_3 := (((mul_val_3_1_3 + mul_val_3_2_3) + (mul_val_3_3_3 + mul_val_3_4_3)) + ((mul_val_3_5_3 + mul_val_3_6_3) + (mul_val_3_7_3 + mul_val_3_8_3))) $buffering 1// bits of buffering = 16. 
    mul_val_3_1_6 := ($cast ($int<16>) (kval_3_1_3 * ival1_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_2_6 := ($cast ($int<16>) (kval_3_2_3 * ival2_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_3_6 := ($cast ($int<16>) (kval_3_3_3 * ival3_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_4_6 := ($cast ($int<16>) (kval_3_4_3 * ival4_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_5_6 := ($cast ($int<16>) (kval_3_5_3 * ival5_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_6_6 := ($cast ($int<16>) (kval_3_6_3 * ival6_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_7_6 := ($cast ($int<16>) (kval_3_7_3 * ival7_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_3_8_6 := ($cast ($int<16>) (kval_3_8_3 * ival8_4) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_3_6 := (((mul_val_3_1_6 + mul_val_3_2_6) + (mul_val_3_3_6 + mul_val_3_4_6)) + ((mul_val_3_5_6 + mul_val_3_6_6) + (mul_val_3_7_6 + mul_val_3_8_6))) $buffering 1// bits of buffering = 16. 
    acc_val3_1 := ((t_acc_val_3_1 + t_acc_val_3_2) + t_acc_val_3_3) $buffering 1// bits of buffering = 16. 
    acc_val3_2 := ((t_acc_val_3_4 + t_acc_val_3_5) + t_acc_val_3_6) $buffering 1// bits of buffering = 16. 
    $volatile store_kernel3 := (store_kernel & o_chl3_valid) $buffering 1
    $volatile store_33 := (store_3 & o_chl3_valid) $buffering 1
    $guard (store_kernel3) conv3_kp1 := kread_3_1 $buffering 1// bits of buffering = 64. 
    $guard (store_kernel3) conv3_kp2 := kread_3_2 $buffering 1// bits of buffering = 64. 
    $guard (store_33) conv3_kp3 := kread_3_3 $buffering 1// bits of buffering = 64. 
    $volatile rk_v4 := (read_k & o_chl4_valid) $buffering 1
    $volatile nrk_v4 := (not_read_k & o_chl4_valid) $buffering 1
    $guard (rk_v4) tempk1_4_1 := core4_kp1 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v4) tempk2_4_1 := conv4_kp1 $buffering 1// bits of buffering = 64. 
    kread_4_1 := ( $mux o_chl4_valid ( $mux read_k tempk1_4_1  tempk2_4_1 )   0  )  $buffering 1// bits of buffering = 64. 
    kr_4_1_1 := ( $slice kread_4_1 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_4_2_1 := ( $slice kread_4_1 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_4_3_1 := ( $slice kread_4_1 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_4_4_1 := ( $slice kread_4_1 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_4_5_1 := ( $slice kread_4_1 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_4_6_1 := ( $slice kread_4_1 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_4_7_1 := ( $slice kread_4_1 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_4_8_1 := ( $slice kread_4_1 7 0 )  $buffering 1// bits of buffering = 8. 
    kval_4_1_1 := ($bitcast ($int<8>) kr_4_1_1 ) $buffering 1// bits of buffering = 8. 
    kval_4_2_1 := ($bitcast ($int<8>) kr_4_2_1 ) $buffering 1// bits of buffering = 8. 
    kval_4_3_1 := ($bitcast ($int<8>) kr_4_3_1 ) $buffering 1// bits of buffering = 8. 
    kval_4_4_1 := ($bitcast ($int<8>) kr_4_4_1 ) $buffering 1// bits of buffering = 8. 
    kval_4_5_1 := ($bitcast ($int<8>) kr_4_5_1 ) $buffering 1// bits of buffering = 8. 
    kval_4_6_1 := ($bitcast ($int<8>) kr_4_6_1 ) $buffering 1// bits of buffering = 8. 
    kval_4_7_1 := ($bitcast ($int<8>) kr_4_7_1 ) $buffering 1// bits of buffering = 8. 
    kval_4_8_1 := ($bitcast ($int<8>) kr_4_8_1 ) $buffering 1// bits of buffering = 8. 
    mul_val_4_1_1 := ($cast ($int<16>) (kval_4_1_1 * ival1_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_2_1 := ($cast ($int<16>) (kval_4_2_1 * ival2_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_3_1 := ($cast ($int<16>) (kval_4_3_1 * ival3_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_4_1 := ($cast ($int<16>) (kval_4_4_1 * ival4_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_5_1 := ($cast ($int<16>) (kval_4_5_1 * ival5_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_6_1 := ($cast ($int<16>) (kval_4_6_1 * ival6_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_7_1 := ($cast ($int<16>) (kval_4_7_1 * ival7_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_8_1 := ($cast ($int<16>) (kval_4_8_1 * ival8_1) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_4_1 := (((mul_val_4_1_1 + mul_val_4_2_1) + (mul_val_4_3_1 + mul_val_4_4_1)) + ((mul_val_4_5_1 + mul_val_4_6_1) + (mul_val_4_7_1 + mul_val_4_8_1))) $buffering 1// bits of buffering = 16. 
    mul_val_4_1_4 := ($cast ($int<16>) (kval_4_1_1 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_2_4 := ($cast ($int<16>) (kval_4_2_1 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_3_4 := ($cast ($int<16>) (kval_4_3_1 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_4_4 := ($cast ($int<16>) (kval_4_4_1 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_5_4 := ($cast ($int<16>) (kval_4_5_1 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_6_4 := ($cast ($int<16>) (kval_4_6_1 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_7_4 := ($cast ($int<16>) (kval_4_7_1 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_8_4 := ($cast ($int<16>) (kval_4_8_1 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_4_4 := (((mul_val_4_1_4 + mul_val_4_2_4) + (mul_val_4_3_4 + mul_val_4_4_4)) + ((mul_val_4_5_4 + mul_val_4_6_4) + (mul_val_4_7_4 + mul_val_4_8_4))) $buffering 1// bits of buffering = 16. 
    $guard (rk_v4) tempk1_4_2 := core4_kp2 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v4) tempk2_4_2 := conv4_kp2 $buffering 1// bits of buffering = 64. 
    kread_4_2 := ( $mux o_chl4_valid ( $mux read_k tempk1_4_2  tempk2_4_2 )   0  )  $buffering 1// bits of buffering = 64. 
    kr_4_1_2 := ( $slice kread_4_2 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_4_2_2 := ( $slice kread_4_2 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_4_3_2 := ( $slice kread_4_2 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_4_4_2 := ( $slice kread_4_2 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_4_5_2 := ( $slice kread_4_2 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_4_6_2 := ( $slice kread_4_2 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_4_7_2 := ( $slice kread_4_2 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_4_8_2 := ( $slice kread_4_2 7 0 )  $buffering 1// bits of buffering = 8. 
    kval_4_1_2 := ($bitcast ($int<8>) kr_4_1_2 ) $buffering 1// bits of buffering = 8. 
    kval_4_2_2 := ($bitcast ($int<8>) kr_4_2_2 ) $buffering 1// bits of buffering = 8. 
    kval_4_3_2 := ($bitcast ($int<8>) kr_4_3_2 ) $buffering 1// bits of buffering = 8. 
    kval_4_4_2 := ($bitcast ($int<8>) kr_4_4_2 ) $buffering 1// bits of buffering = 8. 
    kval_4_5_2 := ($bitcast ($int<8>) kr_4_5_2 ) $buffering 1// bits of buffering = 8. 
    kval_4_6_2 := ($bitcast ($int<8>) kr_4_6_2 ) $buffering 1// bits of buffering = 8. 
    kval_4_7_2 := ($bitcast ($int<8>) kr_4_7_2 ) $buffering 1// bits of buffering = 8. 
    kval_4_8_2 := ($bitcast ($int<8>) kr_4_8_2 ) $buffering 1// bits of buffering = 8. 
    mul_val_4_1_2 := ($cast ($int<16>) (kval_4_1_2 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_2_2 := ($cast ($int<16>) (kval_4_2_2 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_3_2 := ($cast ($int<16>) (kval_4_3_2 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_4_2 := ($cast ($int<16>) (kval_4_4_2 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_5_2 := ($cast ($int<16>) (kval_4_5_2 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_6_2 := ($cast ($int<16>) (kval_4_6_2 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_7_2 := ($cast ($int<16>) (kval_4_7_2 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_8_2 := ($cast ($int<16>) (kval_4_8_2 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_4_2 := (((mul_val_4_1_2 + mul_val_4_2_2) + (mul_val_4_3_2 + mul_val_4_4_2)) + ((mul_val_4_5_2 + mul_val_4_6_2) + (mul_val_4_7_2 + mul_val_4_8_2))) $buffering 1// bits of buffering = 16. 
    mul_val_4_1_5 := ($cast ($int<16>) (kval_4_1_2 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_2_5 := ($cast ($int<16>) (kval_4_2_2 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_3_5 := ($cast ($int<16>) (kval_4_3_2 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_4_5 := ($cast ($int<16>) (kval_4_4_2 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_5_5 := ($cast ($int<16>) (kval_4_5_2 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_6_5 := ($cast ($int<16>) (kval_4_6_2 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_7_5 := ($cast ($int<16>) (kval_4_7_2 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_8_5 := ($cast ($int<16>) (kval_4_8_2 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_4_5 := (((mul_val_4_1_5 + mul_val_4_2_5) + (mul_val_4_3_5 + mul_val_4_4_5)) + ((mul_val_4_5_5 + mul_val_4_6_5) + (mul_val_4_7_5 + mul_val_4_8_5))) $buffering 1// bits of buffering = 16. 
    $volatile rk_3v4 := (readk_3 & o_chl4_valid) $buffering 1
    $volatile nrk_3v4 := (not_readk_3 & o_chl4_valid) $buffering 1
    $guard (rk_3v4) tempk1_4_3 := core4_kp3 $buffering 1// bits of buffering = 64. 
    $guard (nrk_3v4) tempk2_4_3 := conv4_kp3 $buffering 1// bits of buffering = 64. 
    kread_4_3 := ( $mux o_chl4_valid ( $mux mode_2 0   ( $mux read_k tempk1_4_3  tempk2_4_3 )  )   0  )  $buffering 1// bits of buffering = 64. 
    kr_4_1_3 := ( $slice kread_4_3 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_4_2_3 := ( $slice kread_4_3 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_4_3_3 := ( $slice kread_4_3 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_4_4_3 := ( $slice kread_4_3 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_4_5_3 := ( $slice kread_4_3 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_4_6_3 := ( $slice kread_4_3 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_4_7_3 := ( $slice kread_4_3 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_4_8_3 := ( $slice kread_4_3 7 0 )  $buffering 1// bits of buffering = 8. 
    kval_4_1_3 := ($bitcast ($int<8>) kr_4_1_3 ) $buffering 1// bits of buffering = 8. 
    kval_4_2_3 := ($bitcast ($int<8>) kr_4_2_3 ) $buffering 1// bits of buffering = 8. 
    kval_4_3_3 := ($bitcast ($int<8>) kr_4_3_3 ) $buffering 1// bits of buffering = 8. 
    kval_4_4_3 := ($bitcast ($int<8>) kr_4_4_3 ) $buffering 1// bits of buffering = 8. 
    kval_4_5_3 := ($bitcast ($int<8>) kr_4_5_3 ) $buffering 1// bits of buffering = 8. 
    kval_4_6_3 := ($bitcast ($int<8>) kr_4_6_3 ) $buffering 1// bits of buffering = 8. 
    kval_4_7_3 := ($bitcast ($int<8>) kr_4_7_3 ) $buffering 1// bits of buffering = 8. 
    kval_4_8_3 := ($bitcast ($int<8>) kr_4_8_3 ) $buffering 1// bits of buffering = 8. 
    mul_val_4_1_3 := ($cast ($int<16>) (kval_4_1_3 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_2_3 := ($cast ($int<16>) (kval_4_2_3 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_3_3 := ($cast ($int<16>) (kval_4_3_3 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_4_3 := ($cast ($int<16>) (kval_4_4_3 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_5_3 := ($cast ($int<16>) (kval_4_5_3 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_6_3 := ($cast ($int<16>) (kval_4_6_3 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_7_3 := ($cast ($int<16>) (kval_4_7_3 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_8_3 := ($cast ($int<16>) (kval_4_8_3 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_4_3 := (((mul_val_4_1_3 + mul_val_4_2_3) + (mul_val_4_3_3 + mul_val_4_4_3)) + ((mul_val_4_5_3 + mul_val_4_6_3) + (mul_val_4_7_3 + mul_val_4_8_3))) $buffering 1// bits of buffering = 16. 
    mul_val_4_1_6 := ($cast ($int<16>) (kval_4_1_3 * ival1_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_2_6 := ($cast ($int<16>) (kval_4_2_3 * ival2_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_3_6 := ($cast ($int<16>) (kval_4_3_3 * ival3_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_4_6 := ($cast ($int<16>) (kval_4_4_3 * ival4_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_5_6 := ($cast ($int<16>) (kval_4_5_3 * ival5_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_6_6 := ($cast ($int<16>) (kval_4_6_3 * ival6_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_7_6 := ($cast ($int<16>) (kval_4_7_3 * ival7_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_4_8_6 := ($cast ($int<16>) (kval_4_8_3 * ival8_4) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_4_6 := (((mul_val_4_1_6 + mul_val_4_2_6) + (mul_val_4_3_6 + mul_val_4_4_6)) + ((mul_val_4_5_6 + mul_val_4_6_6) + (mul_val_4_7_6 + mul_val_4_8_6))) $buffering 1// bits of buffering = 16. 
    acc_val4_1 := ((t_acc_val_4_1 + t_acc_val_4_2) + t_acc_val_4_3) $buffering 1// bits of buffering = 16. 
    acc_val4_2 := ((t_acc_val_4_4 + t_acc_val_4_5) + t_acc_val_4_6) $buffering 1// bits of buffering = 16. 
    $volatile store_kernel4 := (store_kernel & o_chl4_valid) $buffering 1
    $volatile store_34 := (store_3 & o_chl4_valid) $buffering 1
    $guard (store_kernel4) conv4_kp1 := kread_4_1 $buffering 1// bits of buffering = 64. 
    $guard (store_kernel4) conv4_kp2 := kread_4_2 $buffering 1// bits of buffering = 64. 
    $guard (store_34) conv4_kp3 := kread_4_3 $buffering 1// bits of buffering = 64. 
    $volatile rk_v5 := (read_k & o_chl5_valid) $buffering 1
    $volatile nrk_v5 := (not_read_k & o_chl5_valid) $buffering 1
    $guard (rk_v5) tempk1_5_1 := core5_kp1 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v5) tempk2_5_1 := conv5_kp1 $buffering 1// bits of buffering = 64. 
    kread_5_1 := ( $mux o_chl5_valid ( $mux read_k tempk1_5_1  tempk2_5_1 )   0  )  $buffering 1// bits of buffering = 64. 
    kr_5_1_1 := ( $slice kread_5_1 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_5_2_1 := ( $slice kread_5_1 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_5_3_1 := ( $slice kread_5_1 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_5_4_1 := ( $slice kread_5_1 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_5_5_1 := ( $slice kread_5_1 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_5_6_1 := ( $slice kread_5_1 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_5_7_1 := ( $slice kread_5_1 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_5_8_1 := ( $slice kread_5_1 7 0 )  $buffering 1// bits of buffering = 8. 
    kval_5_1_1 := ($bitcast ($int<8>) kr_5_1_1 ) $buffering 1// bits of buffering = 8. 
    kval_5_2_1 := ($bitcast ($int<8>) kr_5_2_1 ) $buffering 1// bits of buffering = 8. 
    kval_5_3_1 := ($bitcast ($int<8>) kr_5_3_1 ) $buffering 1// bits of buffering = 8. 
    kval_5_4_1 := ($bitcast ($int<8>) kr_5_4_1 ) $buffering 1// bits of buffering = 8. 
    kval_5_5_1 := ($bitcast ($int<8>) kr_5_5_1 ) $buffering 1// bits of buffering = 8. 
    kval_5_6_1 := ($bitcast ($int<8>) kr_5_6_1 ) $buffering 1// bits of buffering = 8. 
    kval_5_7_1 := ($bitcast ($int<8>) kr_5_7_1 ) $buffering 1// bits of buffering = 8. 
    kval_5_8_1 := ($bitcast ($int<8>) kr_5_8_1 ) $buffering 1// bits of buffering = 8. 
    mul_val_5_1_1 := ($cast ($int<16>) (kval_5_1_1 * ival1_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_2_1 := ($cast ($int<16>) (kval_5_2_1 * ival2_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_3_1 := ($cast ($int<16>) (kval_5_3_1 * ival3_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_4_1 := ($cast ($int<16>) (kval_5_4_1 * ival4_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_5_1 := ($cast ($int<16>) (kval_5_5_1 * ival5_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_6_1 := ($cast ($int<16>) (kval_5_6_1 * ival6_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_7_1 := ($cast ($int<16>) (kval_5_7_1 * ival7_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_8_1 := ($cast ($int<16>) (kval_5_8_1 * ival8_1) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_5_1 := (((mul_val_5_1_1 + mul_val_5_2_1) + (mul_val_5_3_1 + mul_val_5_4_1)) + ((mul_val_5_5_1 + mul_val_5_6_1) + (mul_val_5_7_1 + mul_val_5_8_1))) $buffering 1// bits of buffering = 16. 
    mul_val_5_1_4 := ($cast ($int<16>) (kval_5_1_1 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_2_4 := ($cast ($int<16>) (kval_5_2_1 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_3_4 := ($cast ($int<16>) (kval_5_3_1 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_4_4 := ($cast ($int<16>) (kval_5_4_1 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_5_4 := ($cast ($int<16>) (kval_5_5_1 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_6_4 := ($cast ($int<16>) (kval_5_6_1 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_7_4 := ($cast ($int<16>) (kval_5_7_1 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_8_4 := ($cast ($int<16>) (kval_5_8_1 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_5_4 := (((mul_val_5_1_4 + mul_val_5_2_4) + (mul_val_5_3_4 + mul_val_5_4_4)) + ((mul_val_5_5_4 + mul_val_5_6_4) + (mul_val_5_7_4 + mul_val_5_8_4))) $buffering 1// bits of buffering = 16. 
    $guard (rk_v5) tempk1_5_2 := core5_kp2 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v5) tempk2_5_2 := conv5_kp2 $buffering 1// bits of buffering = 64. 
    kread_5_2 := ( $mux o_chl5_valid ( $mux read_k tempk1_5_2  tempk2_5_2 )   0  )  $buffering 1// bits of buffering = 64. 
    kr_5_1_2 := ( $slice kread_5_2 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_5_2_2 := ( $slice kread_5_2 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_5_3_2 := ( $slice kread_5_2 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_5_4_2 := ( $slice kread_5_2 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_5_5_2 := ( $slice kread_5_2 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_5_6_2 := ( $slice kread_5_2 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_5_7_2 := ( $slice kread_5_2 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_5_8_2 := ( $slice kread_5_2 7 0 )  $buffering 1// bits of buffering = 8. 
    kval_5_1_2 := ($bitcast ($int<8>) kr_5_1_2 ) $buffering 1// bits of buffering = 8. 
    kval_5_2_2 := ($bitcast ($int<8>) kr_5_2_2 ) $buffering 1// bits of buffering = 8. 
    kval_5_3_2 := ($bitcast ($int<8>) kr_5_3_2 ) $buffering 1// bits of buffering = 8. 
    kval_5_4_2 := ($bitcast ($int<8>) kr_5_4_2 ) $buffering 1// bits of buffering = 8. 
    kval_5_5_2 := ($bitcast ($int<8>) kr_5_5_2 ) $buffering 1// bits of buffering = 8. 
    kval_5_6_2 := ($bitcast ($int<8>) kr_5_6_2 ) $buffering 1// bits of buffering = 8. 
    kval_5_7_2 := ($bitcast ($int<8>) kr_5_7_2 ) $buffering 1// bits of buffering = 8. 
    kval_5_8_2 := ($bitcast ($int<8>) kr_5_8_2 ) $buffering 1// bits of buffering = 8. 
    mul_val_5_1_2 := ($cast ($int<16>) (kval_5_1_2 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_2_2 := ($cast ($int<16>) (kval_5_2_2 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_3_2 := ($cast ($int<16>) (kval_5_3_2 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_4_2 := ($cast ($int<16>) (kval_5_4_2 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_5_2 := ($cast ($int<16>) (kval_5_5_2 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_6_2 := ($cast ($int<16>) (kval_5_6_2 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_7_2 := ($cast ($int<16>) (kval_5_7_2 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_8_2 := ($cast ($int<16>) (kval_5_8_2 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_5_2 := (((mul_val_5_1_2 + mul_val_5_2_2) + (mul_val_5_3_2 + mul_val_5_4_2)) + ((mul_val_5_5_2 + mul_val_5_6_2) + (mul_val_5_7_2 + mul_val_5_8_2))) $buffering 1// bits of buffering = 16. 
    mul_val_5_1_5 := ($cast ($int<16>) (kval_5_1_2 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_2_5 := ($cast ($int<16>) (kval_5_2_2 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_3_5 := ($cast ($int<16>) (kval_5_3_2 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_4_5 := ($cast ($int<16>) (kval_5_4_2 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_5_5 := ($cast ($int<16>) (kval_5_5_2 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_6_5 := ($cast ($int<16>) (kval_5_6_2 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_7_5 := ($cast ($int<16>) (kval_5_7_2 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_8_5 := ($cast ($int<16>) (kval_5_8_2 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_5_5 := (((mul_val_5_1_5 + mul_val_5_2_5) + (mul_val_5_3_5 + mul_val_5_4_5)) + ((mul_val_5_5_5 + mul_val_5_6_5) + (mul_val_5_7_5 + mul_val_5_8_5))) $buffering 1// bits of buffering = 16. 
    $volatile rk_3v5 := (readk_3 & o_chl5_valid) $buffering 1
    $volatile nrk_3v5 := (not_readk_3 & o_chl5_valid) $buffering 1
    $guard (rk_3v5) tempk1_5_3 := core5_kp3 $buffering 1// bits of buffering = 64. 
    $guard (nrk_3v5) tempk2_5_3 := conv5_kp3 $buffering 1// bits of buffering = 64. 
    kread_5_3 := ( $mux o_chl5_valid ( $mux mode_2 0   ( $mux read_k tempk1_5_3  tempk2_5_3 )  )   0  )  $buffering 1// bits of buffering = 64. 
    kr_5_1_3 := ( $slice kread_5_3 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_5_2_3 := ( $slice kread_5_3 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_5_3_3 := ( $slice kread_5_3 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_5_4_3 := ( $slice kread_5_3 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_5_5_3 := ( $slice kread_5_3 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_5_6_3 := ( $slice kread_5_3 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_5_7_3 := ( $slice kread_5_3 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_5_8_3 := ( $slice kread_5_3 7 0 )  $buffering 1// bits of buffering = 8. 
    kval_5_1_3 := ($bitcast ($int<8>) kr_5_1_3 ) $buffering 1// bits of buffering = 8. 
    kval_5_2_3 := ($bitcast ($int<8>) kr_5_2_3 ) $buffering 1// bits of buffering = 8. 
    kval_5_3_3 := ($bitcast ($int<8>) kr_5_3_3 ) $buffering 1// bits of buffering = 8. 
    kval_5_4_3 := ($bitcast ($int<8>) kr_5_4_3 ) $buffering 1// bits of buffering = 8. 
    kval_5_5_3 := ($bitcast ($int<8>) kr_5_5_3 ) $buffering 1// bits of buffering = 8. 
    kval_5_6_3 := ($bitcast ($int<8>) kr_5_6_3 ) $buffering 1// bits of buffering = 8. 
    kval_5_7_3 := ($bitcast ($int<8>) kr_5_7_3 ) $buffering 1// bits of buffering = 8. 
    kval_5_8_3 := ($bitcast ($int<8>) kr_5_8_3 ) $buffering 1// bits of buffering = 8. 
    mul_val_5_1_3 := ($cast ($int<16>) (kval_5_1_3 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_2_3 := ($cast ($int<16>) (kval_5_2_3 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_3_3 := ($cast ($int<16>) (kval_5_3_3 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_4_3 := ($cast ($int<16>) (kval_5_4_3 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_5_3 := ($cast ($int<16>) (kval_5_5_3 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_6_3 := ($cast ($int<16>) (kval_5_6_3 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_7_3 := ($cast ($int<16>) (kval_5_7_3 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_8_3 := ($cast ($int<16>) (kval_5_8_3 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_5_3 := (((mul_val_5_1_3 + mul_val_5_2_3) + (mul_val_5_3_3 + mul_val_5_4_3)) + ((mul_val_5_5_3 + mul_val_5_6_3) + (mul_val_5_7_3 + mul_val_5_8_3))) $buffering 1// bits of buffering = 16. 
    mul_val_5_1_6 := ($cast ($int<16>) (kval_5_1_3 * ival1_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_2_6 := ($cast ($int<16>) (kval_5_2_3 * ival2_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_3_6 := ($cast ($int<16>) (kval_5_3_3 * ival3_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_4_6 := ($cast ($int<16>) (kval_5_4_3 * ival4_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_5_6 := ($cast ($int<16>) (kval_5_5_3 * ival5_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_6_6 := ($cast ($int<16>) (kval_5_6_3 * ival6_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_7_6 := ($cast ($int<16>) (kval_5_7_3 * ival7_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_5_8_6 := ($cast ($int<16>) (kval_5_8_3 * ival8_4) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_5_6 := (((mul_val_5_1_6 + mul_val_5_2_6) + (mul_val_5_3_6 + mul_val_5_4_6)) + ((mul_val_5_5_6 + mul_val_5_6_6) + (mul_val_5_7_6 + mul_val_5_8_6))) $buffering 1// bits of buffering = 16. 
    acc_val5_1 := ((t_acc_val_5_1 + t_acc_val_5_2) + t_acc_val_5_3) $buffering 1// bits of buffering = 16. 
    acc_val5_2 := ((t_acc_val_5_4 + t_acc_val_5_5) + t_acc_val_5_6) $buffering 1// bits of buffering = 16. 
    $volatile store_kernel5 := (store_kernel & o_chl5_valid) $buffering 1
    $volatile store_35 := (store_3 & o_chl5_valid) $buffering 1
    $guard (store_kernel5) conv5_kp1 := kread_5_1 $buffering 1// bits of buffering = 64. 
    $guard (store_kernel5) conv5_kp2 := kread_5_2 $buffering 1// bits of buffering = 64. 
    $guard (store_35) conv5_kp3 := kread_5_3 $buffering 1// bits of buffering = 64. 
    $volatile rk_v6 := (read_k & o_chl6_valid) $buffering 1
    $volatile nrk_v6 := (not_read_k & o_chl6_valid) $buffering 1
    $guard (rk_v6) tempk1_6_1 := core6_kp1 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v6) tempk2_6_1 := conv6_kp1 $buffering 1// bits of buffering = 64. 
    kread_6_1 := ( $mux o_chl6_valid ( $mux read_k tempk1_6_1  tempk2_6_1 )   0  )  $buffering 1// bits of buffering = 64. 
    kr_6_1_1 := ( $slice kread_6_1 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_6_2_1 := ( $slice kread_6_1 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_6_3_1 := ( $slice kread_6_1 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_6_4_1 := ( $slice kread_6_1 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_6_5_1 := ( $slice kread_6_1 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_6_6_1 := ( $slice kread_6_1 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_6_7_1 := ( $slice kread_6_1 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_6_8_1 := ( $slice kread_6_1 7 0 )  $buffering 1// bits of buffering = 8. 
    kval_6_1_1 := ($bitcast ($int<8>) kr_6_1_1 ) $buffering 1// bits of buffering = 8. 
    kval_6_2_1 := ($bitcast ($int<8>) kr_6_2_1 ) $buffering 1// bits of buffering = 8. 
    kval_6_3_1 := ($bitcast ($int<8>) kr_6_3_1 ) $buffering 1// bits of buffering = 8. 
    kval_6_4_1 := ($bitcast ($int<8>) kr_6_4_1 ) $buffering 1// bits of buffering = 8. 
    kval_6_5_1 := ($bitcast ($int<8>) kr_6_5_1 ) $buffering 1// bits of buffering = 8. 
    kval_6_6_1 := ($bitcast ($int<8>) kr_6_6_1 ) $buffering 1// bits of buffering = 8. 
    kval_6_7_1 := ($bitcast ($int<8>) kr_6_7_1 ) $buffering 1// bits of buffering = 8. 
    kval_6_8_1 := ($bitcast ($int<8>) kr_6_8_1 ) $buffering 1// bits of buffering = 8. 
    mul_val_6_1_1 := ($cast ($int<16>) (kval_6_1_1 * ival1_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_2_1 := ($cast ($int<16>) (kval_6_2_1 * ival2_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_3_1 := ($cast ($int<16>) (kval_6_3_1 * ival3_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_4_1 := ($cast ($int<16>) (kval_6_4_1 * ival4_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_5_1 := ($cast ($int<16>) (kval_6_5_1 * ival5_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_6_1 := ($cast ($int<16>) (kval_6_6_1 * ival6_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_7_1 := ($cast ($int<16>) (kval_6_7_1 * ival7_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_8_1 := ($cast ($int<16>) (kval_6_8_1 * ival8_1) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_6_1 := (((mul_val_6_1_1 + mul_val_6_2_1) + (mul_val_6_3_1 + mul_val_6_4_1)) + ((mul_val_6_5_1 + mul_val_6_6_1) + (mul_val_6_7_1 + mul_val_6_8_1))) $buffering 1// bits of buffering = 16. 
    mul_val_6_1_4 := ($cast ($int<16>) (kval_6_1_1 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_2_4 := ($cast ($int<16>) (kval_6_2_1 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_3_4 := ($cast ($int<16>) (kval_6_3_1 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_4_4 := ($cast ($int<16>) (kval_6_4_1 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_5_4 := ($cast ($int<16>) (kval_6_5_1 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_6_4 := ($cast ($int<16>) (kval_6_6_1 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_7_4 := ($cast ($int<16>) (kval_6_7_1 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_8_4 := ($cast ($int<16>) (kval_6_8_1 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_6_4 := (((mul_val_6_1_4 + mul_val_6_2_4) + (mul_val_6_3_4 + mul_val_6_4_4)) + ((mul_val_6_5_4 + mul_val_6_6_4) + (mul_val_6_7_4 + mul_val_6_8_4))) $buffering 1// bits of buffering = 16. 
    $guard (rk_v6) tempk1_6_2 := core6_kp2 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v6) tempk2_6_2 := conv6_kp2 $buffering 1// bits of buffering = 64. 
    kread_6_2 := ( $mux o_chl6_valid ( $mux read_k tempk1_6_2  tempk2_6_2 )   0  )  $buffering 1// bits of buffering = 64. 
    kr_6_1_2 := ( $slice kread_6_2 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_6_2_2 := ( $slice kread_6_2 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_6_3_2 := ( $slice kread_6_2 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_6_4_2 := ( $slice kread_6_2 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_6_5_2 := ( $slice kread_6_2 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_6_6_2 := ( $slice kread_6_2 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_6_7_2 := ( $slice kread_6_2 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_6_8_2 := ( $slice kread_6_2 7 0 )  $buffering 1// bits of buffering = 8. 
    kval_6_1_2 := ($bitcast ($int<8>) kr_6_1_2 ) $buffering 1// bits of buffering = 8. 
    kval_6_2_2 := ($bitcast ($int<8>) kr_6_2_2 ) $buffering 1// bits of buffering = 8. 
    kval_6_3_2 := ($bitcast ($int<8>) kr_6_3_2 ) $buffering 1// bits of buffering = 8. 
    kval_6_4_2 := ($bitcast ($int<8>) kr_6_4_2 ) $buffering 1// bits of buffering = 8. 
    kval_6_5_2 := ($bitcast ($int<8>) kr_6_5_2 ) $buffering 1// bits of buffering = 8. 
    kval_6_6_2 := ($bitcast ($int<8>) kr_6_6_2 ) $buffering 1// bits of buffering = 8. 
    kval_6_7_2 := ($bitcast ($int<8>) kr_6_7_2 ) $buffering 1// bits of buffering = 8. 
    kval_6_8_2 := ($bitcast ($int<8>) kr_6_8_2 ) $buffering 1// bits of buffering = 8. 
    mul_val_6_1_2 := ($cast ($int<16>) (kval_6_1_2 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_2_2 := ($cast ($int<16>) (kval_6_2_2 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_3_2 := ($cast ($int<16>) (kval_6_3_2 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_4_2 := ($cast ($int<16>) (kval_6_4_2 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_5_2 := ($cast ($int<16>) (kval_6_5_2 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_6_2 := ($cast ($int<16>) (kval_6_6_2 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_7_2 := ($cast ($int<16>) (kval_6_7_2 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_8_2 := ($cast ($int<16>) (kval_6_8_2 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_6_2 := (((mul_val_6_1_2 + mul_val_6_2_2) + (mul_val_6_3_2 + mul_val_6_4_2)) + ((mul_val_6_5_2 + mul_val_6_6_2) + (mul_val_6_7_2 + mul_val_6_8_2))) $buffering 1// bits of buffering = 16. 
    mul_val_6_1_5 := ($cast ($int<16>) (kval_6_1_2 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_2_5 := ($cast ($int<16>) (kval_6_2_2 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_3_5 := ($cast ($int<16>) (kval_6_3_2 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_4_5 := ($cast ($int<16>) (kval_6_4_2 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_5_5 := ($cast ($int<16>) (kval_6_5_2 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_6_5 := ($cast ($int<16>) (kval_6_6_2 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_7_5 := ($cast ($int<16>) (kval_6_7_2 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_8_5 := ($cast ($int<16>) (kval_6_8_2 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_6_5 := (((mul_val_6_1_5 + mul_val_6_2_5) + (mul_val_6_3_5 + mul_val_6_4_5)) + ((mul_val_6_5_5 + mul_val_6_6_5) + (mul_val_6_7_5 + mul_val_6_8_5))) $buffering 1// bits of buffering = 16. 
    $volatile rk_3v6 := (readk_3 & o_chl6_valid) $buffering 1
    $volatile nrk_3v6 := (not_readk_3 & o_chl6_valid) $buffering 1
    $guard (rk_3v6) tempk1_6_3 := core6_kp3 $buffering 1// bits of buffering = 64. 
    $guard (nrk_3v6) tempk2_6_3 := conv6_kp3 $buffering 1// bits of buffering = 64. 
    kread_6_3 := ( $mux o_chl6_valid ( $mux mode_2 0   ( $mux read_k tempk1_6_3  tempk2_6_3 )  )   0  )  $buffering 1// bits of buffering = 64. 
    kr_6_1_3 := ( $slice kread_6_3 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_6_2_3 := ( $slice kread_6_3 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_6_3_3 := ( $slice kread_6_3 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_6_4_3 := ( $slice kread_6_3 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_6_5_3 := ( $slice kread_6_3 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_6_6_3 := ( $slice kread_6_3 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_6_7_3 := ( $slice kread_6_3 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_6_8_3 := ( $slice kread_6_3 7 0 )  $buffering 1// bits of buffering = 8. 
    kval_6_1_3 := ($bitcast ($int<8>) kr_6_1_3 ) $buffering 1// bits of buffering = 8. 
    kval_6_2_3 := ($bitcast ($int<8>) kr_6_2_3 ) $buffering 1// bits of buffering = 8. 
    kval_6_3_3 := ($bitcast ($int<8>) kr_6_3_3 ) $buffering 1// bits of buffering = 8. 
    kval_6_4_3 := ($bitcast ($int<8>) kr_6_4_3 ) $buffering 1// bits of buffering = 8. 
    kval_6_5_3 := ($bitcast ($int<8>) kr_6_5_3 ) $buffering 1// bits of buffering = 8. 
    kval_6_6_3 := ($bitcast ($int<8>) kr_6_6_3 ) $buffering 1// bits of buffering = 8. 
    kval_6_7_3 := ($bitcast ($int<8>) kr_6_7_3 ) $buffering 1// bits of buffering = 8. 
    kval_6_8_3 := ($bitcast ($int<8>) kr_6_8_3 ) $buffering 1// bits of buffering = 8. 
    mul_val_6_1_3 := ($cast ($int<16>) (kval_6_1_3 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_2_3 := ($cast ($int<16>) (kval_6_2_3 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_3_3 := ($cast ($int<16>) (kval_6_3_3 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_4_3 := ($cast ($int<16>) (kval_6_4_3 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_5_3 := ($cast ($int<16>) (kval_6_5_3 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_6_3 := ($cast ($int<16>) (kval_6_6_3 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_7_3 := ($cast ($int<16>) (kval_6_7_3 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_8_3 := ($cast ($int<16>) (kval_6_8_3 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_6_3 := (((mul_val_6_1_3 + mul_val_6_2_3) + (mul_val_6_3_3 + mul_val_6_4_3)) + ((mul_val_6_5_3 + mul_val_6_6_3) + (mul_val_6_7_3 + mul_val_6_8_3))) $buffering 1// bits of buffering = 16. 
    mul_val_6_1_6 := ($cast ($int<16>) (kval_6_1_3 * ival1_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_2_6 := ($cast ($int<16>) (kval_6_2_3 * ival2_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_3_6 := ($cast ($int<16>) (kval_6_3_3 * ival3_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_4_6 := ($cast ($int<16>) (kval_6_4_3 * ival4_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_5_6 := ($cast ($int<16>) (kval_6_5_3 * ival5_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_6_6 := ($cast ($int<16>) (kval_6_6_3 * ival6_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_7_6 := ($cast ($int<16>) (kval_6_7_3 * ival7_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_6_8_6 := ($cast ($int<16>) (kval_6_8_3 * ival8_4) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_6_6 := (((mul_val_6_1_6 + mul_val_6_2_6) + (mul_val_6_3_6 + mul_val_6_4_6)) + ((mul_val_6_5_6 + mul_val_6_6_6) + (mul_val_6_7_6 + mul_val_6_8_6))) $buffering 1// bits of buffering = 16. 
    acc_val6_1 := ((t_acc_val_6_1 + t_acc_val_6_2) + t_acc_val_6_3) $buffering 1// bits of buffering = 16. 
    acc_val6_2 := ((t_acc_val_6_4 + t_acc_val_6_5) + t_acc_val_6_6) $buffering 1// bits of buffering = 16. 
    $volatile store_kernel6 := (store_kernel & o_chl6_valid) $buffering 1
    $volatile store_36 := (store_3 & o_chl6_valid) $buffering 1
    $guard (store_kernel6) conv6_kp1 := kread_6_1 $buffering 1// bits of buffering = 64. 
    $guard (store_kernel6) conv6_kp2 := kread_6_2 $buffering 1// bits of buffering = 64. 
    $guard (store_36) conv6_kp3 := kread_6_3 $buffering 1// bits of buffering = 64. 
    $volatile rk_v7 := (read_k & o_chl7_valid) $buffering 1
    $volatile nrk_v7 := (not_read_k & o_chl7_valid) $buffering 1
    $guard (rk_v7) tempk1_7_1 := core7_kp1 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v7) tempk2_7_1 := conv7_kp1 $buffering 1// bits of buffering = 64. 
    kread_7_1 := ( $mux o_chl7_valid ( $mux read_k tempk1_7_1  tempk2_7_1 )   0  )  $buffering 1// bits of buffering = 64. 
    kr_7_1_1 := ( $slice kread_7_1 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_7_2_1 := ( $slice kread_7_1 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_7_3_1 := ( $slice kread_7_1 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_7_4_1 := ( $slice kread_7_1 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_7_5_1 := ( $slice kread_7_1 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_7_6_1 := ( $slice kread_7_1 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_7_7_1 := ( $slice kread_7_1 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_7_8_1 := ( $slice kread_7_1 7 0 )  $buffering 1// bits of buffering = 8. 
    kval_7_1_1 := ($bitcast ($int<8>) kr_7_1_1 ) $buffering 1// bits of buffering = 8. 
    kval_7_2_1 := ($bitcast ($int<8>) kr_7_2_1 ) $buffering 1// bits of buffering = 8. 
    kval_7_3_1 := ($bitcast ($int<8>) kr_7_3_1 ) $buffering 1// bits of buffering = 8. 
    kval_7_4_1 := ($bitcast ($int<8>) kr_7_4_1 ) $buffering 1// bits of buffering = 8. 
    kval_7_5_1 := ($bitcast ($int<8>) kr_7_5_1 ) $buffering 1// bits of buffering = 8. 
    kval_7_6_1 := ($bitcast ($int<8>) kr_7_6_1 ) $buffering 1// bits of buffering = 8. 
    kval_7_7_1 := ($bitcast ($int<8>) kr_7_7_1 ) $buffering 1// bits of buffering = 8. 
    kval_7_8_1 := ($bitcast ($int<8>) kr_7_8_1 ) $buffering 1// bits of buffering = 8. 
    mul_val_7_1_1 := ($cast ($int<16>) (kval_7_1_1 * ival1_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_2_1 := ($cast ($int<16>) (kval_7_2_1 * ival2_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_3_1 := ($cast ($int<16>) (kval_7_3_1 * ival3_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_4_1 := ($cast ($int<16>) (kval_7_4_1 * ival4_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_5_1 := ($cast ($int<16>) (kval_7_5_1 * ival5_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_6_1 := ($cast ($int<16>) (kval_7_6_1 * ival6_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_7_1 := ($cast ($int<16>) (kval_7_7_1 * ival7_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_8_1 := ($cast ($int<16>) (kval_7_8_1 * ival8_1) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_7_1 := (((mul_val_7_1_1 + mul_val_7_2_1) + (mul_val_7_3_1 + mul_val_7_4_1)) + ((mul_val_7_5_1 + mul_val_7_6_1) + (mul_val_7_7_1 + mul_val_7_8_1))) $buffering 1// bits of buffering = 16. 
    mul_val_7_1_4 := ($cast ($int<16>) (kval_7_1_1 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_2_4 := ($cast ($int<16>) (kval_7_2_1 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_3_4 := ($cast ($int<16>) (kval_7_3_1 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_4_4 := ($cast ($int<16>) (kval_7_4_1 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_5_4 := ($cast ($int<16>) (kval_7_5_1 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_6_4 := ($cast ($int<16>) (kval_7_6_1 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_7_4 := ($cast ($int<16>) (kval_7_7_1 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_8_4 := ($cast ($int<16>) (kval_7_8_1 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_7_4 := (((mul_val_7_1_4 + mul_val_7_2_4) + (mul_val_7_3_4 + mul_val_7_4_4)) + ((mul_val_7_5_4 + mul_val_7_6_4) + (mul_val_7_7_4 + mul_val_7_8_4))) $buffering 1// bits of buffering = 16. 
    $guard (rk_v7) tempk1_7_2 := core7_kp2 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v7) tempk2_7_2 := conv7_kp2 $buffering 1// bits of buffering = 64. 
    kread_7_2 := ( $mux o_chl7_valid ( $mux read_k tempk1_7_2  tempk2_7_2 )   0  )  $buffering 1// bits of buffering = 64. 
    kr_7_1_2 := ( $slice kread_7_2 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_7_2_2 := ( $slice kread_7_2 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_7_3_2 := ( $slice kread_7_2 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_7_4_2 := ( $slice kread_7_2 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_7_5_2 := ( $slice kread_7_2 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_7_6_2 := ( $slice kread_7_2 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_7_7_2 := ( $slice kread_7_2 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_7_8_2 := ( $slice kread_7_2 7 0 )  $buffering 1// bits of buffering = 8. 
    kval_7_1_2 := ($bitcast ($int<8>) kr_7_1_2 ) $buffering 1// bits of buffering = 8. 
    kval_7_2_2 := ($bitcast ($int<8>) kr_7_2_2 ) $buffering 1// bits of buffering = 8. 
    kval_7_3_2 := ($bitcast ($int<8>) kr_7_3_2 ) $buffering 1// bits of buffering = 8. 
    kval_7_4_2 := ($bitcast ($int<8>) kr_7_4_2 ) $buffering 1// bits of buffering = 8. 
    kval_7_5_2 := ($bitcast ($int<8>) kr_7_5_2 ) $buffering 1// bits of buffering = 8. 
    kval_7_6_2 := ($bitcast ($int<8>) kr_7_6_2 ) $buffering 1// bits of buffering = 8. 
    kval_7_7_2 := ($bitcast ($int<8>) kr_7_7_2 ) $buffering 1// bits of buffering = 8. 
    kval_7_8_2 := ($bitcast ($int<8>) kr_7_8_2 ) $buffering 1// bits of buffering = 8. 
    mul_val_7_1_2 := ($cast ($int<16>) (kval_7_1_2 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_2_2 := ($cast ($int<16>) (kval_7_2_2 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_3_2 := ($cast ($int<16>) (kval_7_3_2 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_4_2 := ($cast ($int<16>) (kval_7_4_2 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_5_2 := ($cast ($int<16>) (kval_7_5_2 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_6_2 := ($cast ($int<16>) (kval_7_6_2 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_7_2 := ($cast ($int<16>) (kval_7_7_2 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_8_2 := ($cast ($int<16>) (kval_7_8_2 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_7_2 := (((mul_val_7_1_2 + mul_val_7_2_2) + (mul_val_7_3_2 + mul_val_7_4_2)) + ((mul_val_7_5_2 + mul_val_7_6_2) + (mul_val_7_7_2 + mul_val_7_8_2))) $buffering 1// bits of buffering = 16. 
    mul_val_7_1_5 := ($cast ($int<16>) (kval_7_1_2 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_2_5 := ($cast ($int<16>) (kval_7_2_2 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_3_5 := ($cast ($int<16>) (kval_7_3_2 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_4_5 := ($cast ($int<16>) (kval_7_4_2 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_5_5 := ($cast ($int<16>) (kval_7_5_2 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_6_5 := ($cast ($int<16>) (kval_7_6_2 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_7_5 := ($cast ($int<16>) (kval_7_7_2 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_8_5 := ($cast ($int<16>) (kval_7_8_2 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_7_5 := (((mul_val_7_1_5 + mul_val_7_2_5) + (mul_val_7_3_5 + mul_val_7_4_5)) + ((mul_val_7_5_5 + mul_val_7_6_5) + (mul_val_7_7_5 + mul_val_7_8_5))) $buffering 1// bits of buffering = 16. 
    $volatile rk_3v7 := (readk_3 & o_chl7_valid) $buffering 1
    $volatile nrk_3v7 := (not_readk_3 & o_chl7_valid) $buffering 1
    $guard (rk_3v7) tempk1_7_3 := core7_kp3 $buffering 1// bits of buffering = 64. 
    $guard (nrk_3v7) tempk2_7_3 := conv7_kp3 $buffering 1// bits of buffering = 64. 
    kread_7_3 := ( $mux o_chl7_valid ( $mux mode_2 0   ( $mux read_k tempk1_7_3  tempk2_7_3 )  )   0  )  $buffering 1// bits of buffering = 64. 
    kr_7_1_3 := ( $slice kread_7_3 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_7_2_3 := ( $slice kread_7_3 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_7_3_3 := ( $slice kread_7_3 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_7_4_3 := ( $slice kread_7_3 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_7_5_3 := ( $slice kread_7_3 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_7_6_3 := ( $slice kread_7_3 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_7_7_3 := ( $slice kread_7_3 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_7_8_3 := ( $slice kread_7_3 7 0 )  $buffering 1// bits of buffering = 8. 
    kval_7_1_3 := ($bitcast ($int<8>) kr_7_1_3 ) $buffering 1// bits of buffering = 8. 
    kval_7_2_3 := ($bitcast ($int<8>) kr_7_2_3 ) $buffering 1// bits of buffering = 8. 
    kval_7_3_3 := ($bitcast ($int<8>) kr_7_3_3 ) $buffering 1// bits of buffering = 8. 
    kval_7_4_3 := ($bitcast ($int<8>) kr_7_4_3 ) $buffering 1// bits of buffering = 8. 
    kval_7_5_3 := ($bitcast ($int<8>) kr_7_5_3 ) $buffering 1// bits of buffering = 8. 
    kval_7_6_3 := ($bitcast ($int<8>) kr_7_6_3 ) $buffering 1// bits of buffering = 8. 
    kval_7_7_3 := ($bitcast ($int<8>) kr_7_7_3 ) $buffering 1// bits of buffering = 8. 
    kval_7_8_3 := ($bitcast ($int<8>) kr_7_8_3 ) $buffering 1// bits of buffering = 8. 
    mul_val_7_1_3 := ($cast ($int<16>) (kval_7_1_3 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_2_3 := ($cast ($int<16>) (kval_7_2_3 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_3_3 := ($cast ($int<16>) (kval_7_3_3 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_4_3 := ($cast ($int<16>) (kval_7_4_3 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_5_3 := ($cast ($int<16>) (kval_7_5_3 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_6_3 := ($cast ($int<16>) (kval_7_6_3 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_7_3 := ($cast ($int<16>) (kval_7_7_3 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_8_3 := ($cast ($int<16>) (kval_7_8_3 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_7_3 := (((mul_val_7_1_3 + mul_val_7_2_3) + (mul_val_7_3_3 + mul_val_7_4_3)) + ((mul_val_7_5_3 + mul_val_7_6_3) + (mul_val_7_7_3 + mul_val_7_8_3))) $buffering 1// bits of buffering = 16. 
    mul_val_7_1_6 := ($cast ($int<16>) (kval_7_1_3 * ival1_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_2_6 := ($cast ($int<16>) (kval_7_2_3 * ival2_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_3_6 := ($cast ($int<16>) (kval_7_3_3 * ival3_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_4_6 := ($cast ($int<16>) (kval_7_4_3 * ival4_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_5_6 := ($cast ($int<16>) (kval_7_5_3 * ival5_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_6_6 := ($cast ($int<16>) (kval_7_6_3 * ival6_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_7_6 := ($cast ($int<16>) (kval_7_7_3 * ival7_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_7_8_6 := ($cast ($int<16>) (kval_7_8_3 * ival8_4) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_7_6 := (((mul_val_7_1_6 + mul_val_7_2_6) + (mul_val_7_3_6 + mul_val_7_4_6)) + ((mul_val_7_5_6 + mul_val_7_6_6) + (mul_val_7_7_6 + mul_val_7_8_6))) $buffering 1// bits of buffering = 16. 
    acc_val7_1 := ((t_acc_val_7_1 + t_acc_val_7_2) + t_acc_val_7_3) $buffering 1// bits of buffering = 16. 
    acc_val7_2 := ((t_acc_val_7_4 + t_acc_val_7_5) + t_acc_val_7_6) $buffering 1// bits of buffering = 16. 
    $volatile store_kernel7 := (store_kernel & o_chl7_valid) $buffering 1
    $volatile store_37 := (store_3 & o_chl7_valid) $buffering 1
    $guard (store_kernel7) conv7_kp1 := kread_7_1 $buffering 1// bits of buffering = 64. 
    $guard (store_kernel7) conv7_kp2 := kread_7_2 $buffering 1// bits of buffering = 64. 
    $guard (store_37) conv7_kp3 := kread_7_3 $buffering 1// bits of buffering = 64. 
    $volatile rk_v8 := (read_k & o_chl8_valid) $buffering 1
    $volatile nrk_v8 := (not_read_k & o_chl8_valid) $buffering 1
    $guard (rk_v8) tempk1_8_1 := core8_kp1 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v8) tempk2_8_1 := conv8_kp1 $buffering 1// bits of buffering = 64. 
    kread_8_1 := ( $mux o_chl8_valid ( $mux read_k tempk1_8_1  tempk2_8_1 )   0  )  $buffering 1// bits of buffering = 64. 
    kr_8_1_1 := ( $slice kread_8_1 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_8_2_1 := ( $slice kread_8_1 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_8_3_1 := ( $slice kread_8_1 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_8_4_1 := ( $slice kread_8_1 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_8_5_1 := ( $slice kread_8_1 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_8_6_1 := ( $slice kread_8_1 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_8_7_1 := ( $slice kread_8_1 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_8_8_1 := ( $slice kread_8_1 7 0 )  $buffering 1// bits of buffering = 8. 
    kval_8_1_1 := ($bitcast ($int<8>) kr_8_1_1 ) $buffering 1// bits of buffering = 8. 
    kval_8_2_1 := ($bitcast ($int<8>) kr_8_2_1 ) $buffering 1// bits of buffering = 8. 
    kval_8_3_1 := ($bitcast ($int<8>) kr_8_3_1 ) $buffering 1// bits of buffering = 8. 
    kval_8_4_1 := ($bitcast ($int<8>) kr_8_4_1 ) $buffering 1// bits of buffering = 8. 
    kval_8_5_1 := ($bitcast ($int<8>) kr_8_5_1 ) $buffering 1// bits of buffering = 8. 
    kval_8_6_1 := ($bitcast ($int<8>) kr_8_6_1 ) $buffering 1// bits of buffering = 8. 
    kval_8_7_1 := ($bitcast ($int<8>) kr_8_7_1 ) $buffering 1// bits of buffering = 8. 
    kval_8_8_1 := ($bitcast ($int<8>) kr_8_8_1 ) $buffering 1// bits of buffering = 8. 
    mul_val_8_1_1 := ($cast ($int<16>) (kval_8_1_1 * ival1_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_2_1 := ($cast ($int<16>) (kval_8_2_1 * ival2_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_3_1 := ($cast ($int<16>) (kval_8_3_1 * ival3_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_4_1 := ($cast ($int<16>) (kval_8_4_1 * ival4_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_5_1 := ($cast ($int<16>) (kval_8_5_1 * ival5_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_6_1 := ($cast ($int<16>) (kval_8_6_1 * ival6_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_7_1 := ($cast ($int<16>) (kval_8_7_1 * ival7_1) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_8_1 := ($cast ($int<16>) (kval_8_8_1 * ival8_1) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_8_1 := (((mul_val_8_1_1 + mul_val_8_2_1) + (mul_val_8_3_1 + mul_val_8_4_1)) + ((mul_val_8_5_1 + mul_val_8_6_1) + (mul_val_8_7_1 + mul_val_8_8_1))) $buffering 1// bits of buffering = 16. 
    mul_val_8_1_4 := ($cast ($int<16>) (kval_8_1_1 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_2_4 := ($cast ($int<16>) (kval_8_2_1 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_3_4 := ($cast ($int<16>) (kval_8_3_1 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_4_4 := ($cast ($int<16>) (kval_8_4_1 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_5_4 := ($cast ($int<16>) (kval_8_5_1 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_6_4 := ($cast ($int<16>) (kval_8_6_1 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_7_4 := ($cast ($int<16>) (kval_8_7_1 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_8_4 := ($cast ($int<16>) (kval_8_8_1 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_8_4 := (((mul_val_8_1_4 + mul_val_8_2_4) + (mul_val_8_3_4 + mul_val_8_4_4)) + ((mul_val_8_5_4 + mul_val_8_6_4) + (mul_val_8_7_4 + mul_val_8_8_4))) $buffering 1// bits of buffering = 16. 
    $guard (rk_v8) tempk1_8_2 := core8_kp2 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v8) tempk2_8_2 := conv8_kp2 $buffering 1// bits of buffering = 64. 
    kread_8_2 := ( $mux o_chl8_valid ( $mux read_k tempk1_8_2  tempk2_8_2 )   0  )  $buffering 1// bits of buffering = 64. 
    kr_8_1_2 := ( $slice kread_8_2 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_8_2_2 := ( $slice kread_8_2 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_8_3_2 := ( $slice kread_8_2 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_8_4_2 := ( $slice kread_8_2 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_8_5_2 := ( $slice kread_8_2 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_8_6_2 := ( $slice kread_8_2 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_8_7_2 := ( $slice kread_8_2 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_8_8_2 := ( $slice kread_8_2 7 0 )  $buffering 1// bits of buffering = 8. 
    kval_8_1_2 := ($bitcast ($int<8>) kr_8_1_2 ) $buffering 1// bits of buffering = 8. 
    kval_8_2_2 := ($bitcast ($int<8>) kr_8_2_2 ) $buffering 1// bits of buffering = 8. 
    kval_8_3_2 := ($bitcast ($int<8>) kr_8_3_2 ) $buffering 1// bits of buffering = 8. 
    kval_8_4_2 := ($bitcast ($int<8>) kr_8_4_2 ) $buffering 1// bits of buffering = 8. 
    kval_8_5_2 := ($bitcast ($int<8>) kr_8_5_2 ) $buffering 1// bits of buffering = 8. 
    kval_8_6_2 := ($bitcast ($int<8>) kr_8_6_2 ) $buffering 1// bits of buffering = 8. 
    kval_8_7_2 := ($bitcast ($int<8>) kr_8_7_2 ) $buffering 1// bits of buffering = 8. 
    kval_8_8_2 := ($bitcast ($int<8>) kr_8_8_2 ) $buffering 1// bits of buffering = 8. 
    mul_val_8_1_2 := ($cast ($int<16>) (kval_8_1_2 * ival1_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_2_2 := ($cast ($int<16>) (kval_8_2_2 * ival2_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_3_2 := ($cast ($int<16>) (kval_8_3_2 * ival3_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_4_2 := ($cast ($int<16>) (kval_8_4_2 * ival4_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_5_2 := ($cast ($int<16>) (kval_8_5_2 * ival5_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_6_2 := ($cast ($int<16>) (kval_8_6_2 * ival6_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_7_2 := ($cast ($int<16>) (kval_8_7_2 * ival7_2) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_8_2 := ($cast ($int<16>) (kval_8_8_2 * ival8_2) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_8_2 := (((mul_val_8_1_2 + mul_val_8_2_2) + (mul_val_8_3_2 + mul_val_8_4_2)) + ((mul_val_8_5_2 + mul_val_8_6_2) + (mul_val_8_7_2 + mul_val_8_8_2))) $buffering 1// bits of buffering = 16. 
    mul_val_8_1_5 := ($cast ($int<16>) (kval_8_1_2 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_2_5 := ($cast ($int<16>) (kval_8_2_2 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_3_5 := ($cast ($int<16>) (kval_8_3_2 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_4_5 := ($cast ($int<16>) (kval_8_4_2 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_5_5 := ($cast ($int<16>) (kval_8_5_2 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_6_5 := ($cast ($int<16>) (kval_8_6_2 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_7_5 := ($cast ($int<16>) (kval_8_7_2 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_8_5 := ($cast ($int<16>) (kval_8_8_2 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_8_5 := (((mul_val_8_1_5 + mul_val_8_2_5) + (mul_val_8_3_5 + mul_val_8_4_5)) + ((mul_val_8_5_5 + mul_val_8_6_5) + (mul_val_8_7_5 + mul_val_8_8_5))) $buffering 1// bits of buffering = 16. 
    $volatile rk_3v8 := (readk_3 & o_chl8_valid) $buffering 1
    $volatile nrk_3v8 := (not_readk_3 & o_chl8_valid) $buffering 1
    $guard (rk_3v8) tempk1_8_3 := core8_kp3 $buffering 1// bits of buffering = 64. 
    $guard (nrk_3v8) tempk2_8_3 := conv8_kp3 $buffering 1// bits of buffering = 64. 
    kread_8_3 := ( $mux o_chl8_valid ( $mux mode_2 0   ( $mux read_k tempk1_8_3  tempk2_8_3 )  )   0  )  $buffering 1// bits of buffering = 64. 
    kr_8_1_3 := ( $slice kread_8_3 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_8_2_3 := ( $slice kread_8_3 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_8_3_3 := ( $slice kread_8_3 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_8_4_3 := ( $slice kread_8_3 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_8_5_3 := ( $slice kread_8_3 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_8_6_3 := ( $slice kread_8_3 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_8_7_3 := ( $slice kread_8_3 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_8_8_3 := ( $slice kread_8_3 7 0 )  $buffering 1// bits of buffering = 8. 
    kval_8_1_3 := ($bitcast ($int<8>) kr_8_1_3 ) $buffering 1// bits of buffering = 8. 
    kval_8_2_3 := ($bitcast ($int<8>) kr_8_2_3 ) $buffering 1// bits of buffering = 8. 
    kval_8_3_3 := ($bitcast ($int<8>) kr_8_3_3 ) $buffering 1// bits of buffering = 8. 
    kval_8_4_3 := ($bitcast ($int<8>) kr_8_4_3 ) $buffering 1// bits of buffering = 8. 
    kval_8_5_3 := ($bitcast ($int<8>) kr_8_5_3 ) $buffering 1// bits of buffering = 8. 
    kval_8_6_3 := ($bitcast ($int<8>) kr_8_6_3 ) $buffering 1// bits of buffering = 8. 
    kval_8_7_3 := ($bitcast ($int<8>) kr_8_7_3 ) $buffering 1// bits of buffering = 8. 
    kval_8_8_3 := ($bitcast ($int<8>) kr_8_8_3 ) $buffering 1// bits of buffering = 8. 
    mul_val_8_1_3 := ($cast ($int<16>) (kval_8_1_3 * ival1_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_2_3 := ($cast ($int<16>) (kval_8_2_3 * ival2_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_3_3 := ($cast ($int<16>) (kval_8_3_3 * ival3_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_4_3 := ($cast ($int<16>) (kval_8_4_3 * ival4_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_5_3 := ($cast ($int<16>) (kval_8_5_3 * ival5_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_6_3 := ($cast ($int<16>) (kval_8_6_3 * ival6_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_7_3 := ($cast ($int<16>) (kval_8_7_3 * ival7_3) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_8_3 := ($cast ($int<16>) (kval_8_8_3 * ival8_3) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_8_3 := (((mul_val_8_1_3 + mul_val_8_2_3) + (mul_val_8_3_3 + mul_val_8_4_3)) + ((mul_val_8_5_3 + mul_val_8_6_3) + (mul_val_8_7_3 + mul_val_8_8_3))) $buffering 1// bits of buffering = 16. 
    mul_val_8_1_6 := ($cast ($int<16>) (kval_8_1_3 * ival1_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_2_6 := ($cast ($int<16>) (kval_8_2_3 * ival2_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_3_6 := ($cast ($int<16>) (kval_8_3_3 * ival3_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_4_6 := ($cast ($int<16>) (kval_8_4_3 * ival4_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_5_6 := ($cast ($int<16>) (kval_8_5_3 * ival5_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_6_6 := ($cast ($int<16>) (kval_8_6_3 * ival6_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_7_6 := ($cast ($int<16>) (kval_8_7_3 * ival7_4) ) $buffering 1// bits of buffering = 16. 
    mul_val_8_8_6 := ($cast ($int<16>) (kval_8_8_3 * ival8_4) ) $buffering 1// bits of buffering = 16. 
    t_acc_val_8_6 := (((mul_val_8_1_6 + mul_val_8_2_6) + (mul_val_8_3_6 + mul_val_8_4_6)) + ((mul_val_8_5_6 + mul_val_8_6_6) + (mul_val_8_7_6 + mul_val_8_8_6))) $buffering 1// bits of buffering = 16. 
    acc_val8_1 := ((t_acc_val_8_1 + t_acc_val_8_2) + t_acc_val_8_3) $buffering 1// bits of buffering = 16. 
    acc_val8_2 := ((t_acc_val_8_4 + t_acc_val_8_5) + t_acc_val_8_6) $buffering 1// bits of buffering = 16. 
    $volatile store_kernel8 := (store_kernel & o_chl8_valid) $buffering 1
    $volatile store_38 := (store_3 & o_chl8_valid) $buffering 1
    $guard (store_kernel8) conv8_kp1 := kread_8_1 $buffering 1// bits of buffering = 64. 
    $guard (store_kernel8) conv8_kp2 := kread_8_2 $buffering 1// bits of buffering = 64. 
    $guard (store_38) conv8_kp3 := kread_8_3 $buffering 1// bits of buffering = 64. 
    acc_pipe1_1 := ($bitcast ($uint<16>) acc_val1_1 ) $buffering 1// bits of buffering = 16. 
    acc_pipe1_2 := ($bitcast ($uint<16>) acc_val2_1 ) $buffering 1// bits of buffering = 16. 
    acc_pipe1_3 := ($bitcast ($uint<16>) acc_val3_1 ) $buffering 1// bits of buffering = 16. 
    acc_pipe1_4 := ($bitcast ($uint<16>) acc_val4_1 ) $buffering 1// bits of buffering = 16. 
    acc_pipe1_5 := ($bitcast ($uint<16>) acc_val5_1 ) $buffering 1// bits of buffering = 16. 
    acc_pipe1_6 := ($bitcast ($uint<16>) acc_val6_1 ) $buffering 1// bits of buffering = 16. 
    acc_pipe1_7 := ($bitcast ($uint<16>) acc_val7_1 ) $buffering 1// bits of buffering = 16. 
    acc_pipe1_8 := ($bitcast ($uint<16>) acc_val8_1 ) $buffering 1// bits of buffering = 16. 
    acc_pipe2_1 := ($bitcast ($uint<16>) acc_val1_2 ) $buffering 1// bits of buffering = 16. 
    acc_pipe2_2 := ($bitcast ($uint<16>) acc_val2_2 ) $buffering 1// bits of buffering = 16. 
    acc_pipe2_3 := ($bitcast ($uint<16>) acc_val3_2 ) $buffering 1// bits of buffering = 16. 
    acc_pipe2_4 := ($bitcast ($uint<16>) acc_val4_2 ) $buffering 1// bits of buffering = 16. 
    acc_pipe2_5 := ($bitcast ($uint<16>) acc_val5_2 ) $buffering 1// bits of buffering = 16. 
    acc_pipe2_6 := ($bitcast ($uint<16>) acc_val6_2 ) $buffering 1// bits of buffering = 16. 
    acc_pipe2_7 := ($bitcast ($uint<16>) acc_val7_2 ) $buffering 1// bits of buffering = 16. 
    acc_pipe2_8 := ($bitcast ($uint<16>) acc_val8_2 ) $buffering 1// bits of buffering = 16. 
    $while ( ~ all_done_flag )
    $volatile np_cnt := (p_cnt + 1 ) $buffering 1
    $volatile n_cmi := ( $mux (chl_left > max_chl) max_chl  chl_left )  $buffering 1
    $volatile n_chl_left := (chl_left - n_cmi) $buffering 1
    $if (p_cnt < num_parts) $then 
    $place[loopback]
    $endif
  }
}
$pipeline $depth 7 $buffering 1 $fullrate $opaque $module [writeModule_convolution]
$in ( index : $uint<8>   address : $uint<32>   data : $uint<64>   bm : $uint<8>  )
$out ( done : $uint<1>  )
$is
{
  $volatile cnd1 := (index == 0 ) $buffering 1
  $volatile cnd2 := (index == 1 ) $buffering 1
  $volatile cnd3 := (index == 2 ) $buffering 1
  $volatile cnd4 := (index == 3 ) $buffering 1
  $volatile cnd5 := (index == 4 ) $buffering 1
  addr := (((( $mux cnd1 (0 + address)  _b0  )  | ( $mux cnd2 (65536 + address)  _b0  ) ) | ( $mux cnd3 (196608 + address)  _b0  ) ) | (( $mux cnd4 (262144 + address)  _b0  )  | ( $mux cnd5 (294912 + address)  _b0  ) )) $buffering 1// bits of buffering = 32. 
  $call memoryModule (0  addr data bm ) (out ) 
  done := (index [] 0 ) $buffering 1// bits of buffering = 1. 
}
$module [sendInner1]
$in ( init_addr : $uint<32>   rb : $uint<16>   cb : $uint<16>   chl_out : $uint<16>   shift_val : $uint<16>   num_parts : $uint<8>   max_chl : $uint<16>   activation : $uint<1>   index : $uint<8>  )
$out ()
$is
{
  $branchblock [SI_blk]
  {
    row_size := ($bitcast ($uint<32>) (chl_out * cb) ) $buffering 1// bits of buffering = 32. 
    apply_relu := (activation == 1 ) $buffering 1// bits of buffering = 1. 
    $merge $entry loopback 
    $phi p_cnt := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  np_cnt $on   loopback 
    // type of target is $uint<8>
    $phi chl_max_itr := 			  max_chl $on   $entry 			  n_cmi $on   loopback 
    // type of target is $uint<16>
    $phi chl_left := 			  (chl_out - max_chl) $on   $entry 			  n_chl_left $on   loopback 
    // type of target is $uint<16>
    $phi addr := 			  init_addr $on   $entry 			  n_addr $on   loopback 
    // type of target is $uint<32>
    $endmerge
    chl_change_inc := ($bitcast ($uint<32>) (chl_out - chl_max_itr) ) $buffering 1// bits of buffering = 32. 
    rs := (row_size + chl_change_inc) $buffering 1// bits of buffering = 32. 
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi row := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_row $on   $loopback 
    // type of target is $uint<16>
    $phi left := 			  chl_max_itr $on   $entry 			  n_left $on   $loopback 
    // type of target is $uint<16>
    $phi sent := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  n_sent $on   $loopback 
    // type of target is $uint<16>
    $phi fv1 := 			  ($bitcast ($uint<64>) 0  ) $on   $entry 			  nfv1 $on   $loopback 
    // type of target is $uint<64>
    $phi cv1 := 			  ($bitcast ($uint<64>) 0  ) $on   $entry 			  ncv1 $on   $loopback 
    // type of target is $uint<64>
    $phi head := 			  ($bitcast ($uint<3>) 0  ) $on   $entry 			  n_head $on   $loopback 
    // type of target is $uint<3>
    $phi addr1 := 			  addr $on   $entry 			  n_addr1 $on   $loopback 
    // type of target is $uint<32>
    $phi fn := 			  ($bitcast ($uint<1>) 1  ) $on   $entry 			  n_fn $on   $loopback 
    // type of target is $uint<1>
    $phi bm := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nbm $on   $loopback 
    // type of target is $uint<8>
    $endmerge
    $volatile sp := ($bitcast ($uint<3>) addr1 ) $buffering 1
    $volatile min1 := ( $mux (sp > head) sp  head )  $buffering 1
    $volatile mi71 := (8  - ($bitcast ($uint<16>) min1 )) $buffering 1
    $volatile ns := ( $mux (mi71 < left) mi71  left )  $buffering 1
    $volatile hns := (head + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile sns := (sp + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile done := (left == ns) $buffering 1
    $volatile n_fn := (done | (hns == 0 )) $buffering 1
    $volatile n_left := ( $mux done chl_max_itr  (left - ns) )  $buffering 1
    $guard (fn) read_val1 := output_pipe1_1 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val2 := output_pipe2_1 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val3 := output_pipe3_1 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val4 := output_pipe4_1 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val5 := output_pipe5_1 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val6 := output_pipe6_1 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val7 := output_pipe7_1 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val8 := output_pipe8_1 $buffering 1// bits of buffering = 16. 
    tmp1 := ( $mux (apply_relu & ((read_val1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val1 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp2 := ( $mux (apply_relu & ((read_val2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val2 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp3 := ( $mux (apply_relu & ((read_val3 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val3 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp4 := ( $mux (apply_relu & ((read_val4 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val4 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp5 := ( $mux (apply_relu & ((read_val5 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val5 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp6 := ( $mux (apply_relu & ((read_val6 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val6 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp7 := ( $mux (apply_relu & ((read_val7 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val7 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp8 := ( $mux (apply_relu & ((read_val8 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val8 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    $volatile rd1 := (((tmp1 && tmp2) && (tmp3 && tmp4)) && ((tmp5 && tmp6) && (tmp7 && tmp8))) $buffering 1
    $volatile val_in_use := ( $mux fn rd1  fv1 )  $buffering 1
    $volatile tmp := ((val_in_use << (($bitcast ($uint<64>) head ) << 3 )) >> (($bitcast ($uint<64>) sp ) << 3 )) $buffering 1
    $volatile bytemask := (bm | ((($bitcast ($uint<8>) _hFF  ) >> ($bitcast ($uint<8>) sp )) & (($bitcast ($uint<8>) _hFF  ) << ($bitcast ($uint<8>) (8  - sns) )))) $buffering 1
    $volatile send_data := (cv1 | tmp) $buffering 1
    $volatile n_sent := ( $mux done ( $mux (sent == (cb - 1 )) 0   (sent + 1 ) )   sent )  $buffering 1
    $volatile n_head := ( $mux n_fn 0   hns )  $buffering 1
    $volatile nxt_chl := ((n_sent == 0 ) & done) $buffering 1
    $volatile n_addr1 := ((addr1 + ($bitcast ($uint<32>) ns )) + ($bitcast ($uint<32>) ( $mux nxt_chl rs  ( $mux done chl_change_inc  0  )  )  )) $buffering 1
    $volatile na3 := (n_addr1 >> 3 ) $buffering 1
    $volatile send := (((sns == 0 ) | nxt_chl) | (done & (na3 != (addr1 >> 3 )))) $buffering 1
    $volatile nfv1 := val_in_use $buffering 1
    $volatile ncv1 := ( $mux send 0   send_data )  $buffering 1
    $volatile nbm := ( $mux send 0   bytemask )  $buffering 1
    $guard (send) $call writeModule_convolution (index (addr1 >> 3 ) send_data bytemask ) (a2 ) 
    $volatile n_row := ( $mux nxt_chl (row + 2)  row )  $buffering 1
    continue_flag := (n_row < rb) $buffering 1// bits of buffering = 1. 
    $while continue_flag
    $volatile np_cnt := (p_cnt + 1 ) $buffering 1
    $volatile n_cmi := ( $mux (chl_left > max_chl) max_chl  chl_left )  $buffering 1
    $volatile n_chl_left := (chl_left - n_cmi) $buffering 1
    $volatile n_addr := (addr + ($bitcast ($uint<32>) chl_max_itr )) $buffering 1
    $if (p_cnt < num_parts) $then 
    $place[loopback]
    $endif
  }
}
$module [sendInner2]
$in ( init_addr : $uint<32>   rb : $uint<16>   cb : $uint<16>   chl_out : $uint<16>   shift_val : $uint<16>   num_parts : $uint<8>   max_chl : $uint<16>   activation : $uint<1>   index : $uint<8>  )
$out ()
$is
{
  $branchblock [SI_blk]
  {
    row_size := ($bitcast ($uint<32>) (chl_out * cb) ) $buffering 1// bits of buffering = 32. 
    apply_relu := (activation == 1 ) $buffering 1// bits of buffering = 1. 
    $merge $entry loopback 
    $phi p_cnt := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  np_cnt $on   loopback 
    // type of target is $uint<8>
    $phi chl_max_itr := 			  max_chl $on   $entry 			  n_cmi $on   loopback 
    // type of target is $uint<16>
    $phi chl_left := 			  (chl_out - max_chl) $on   $entry 			  n_chl_left $on   loopback 
    // type of target is $uint<16>
    $phi addr := 			  init_addr $on   $entry 			  n_addr $on   loopback 
    // type of target is $uint<32>
    $endmerge
    chl_change_inc := ($bitcast ($uint<32>) (chl_out - chl_max_itr) ) $buffering 1// bits of buffering = 32. 
    rs := (row_size + chl_change_inc) $buffering 1// bits of buffering = 32. 
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi row := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_row $on   $loopback 
    // type of target is $uint<16>
    $phi left := 			  chl_max_itr $on   $entry 			  n_left $on   $loopback 
    // type of target is $uint<16>
    $phi sent := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  n_sent $on   $loopback 
    // type of target is $uint<16>
    $phi fv1 := 			  ($bitcast ($uint<64>) 0  ) $on   $entry 			  nfv1 $on   $loopback 
    // type of target is $uint<64>
    $phi cv1 := 			  ($bitcast ($uint<64>) 0  ) $on   $entry 			  ncv1 $on   $loopback 
    // type of target is $uint<64>
    $phi head := 			  ($bitcast ($uint<3>) 0  ) $on   $entry 			  n_head $on   $loopback 
    // type of target is $uint<3>
    $phi addr1 := 			  addr $on   $entry 			  n_addr1 $on   $loopback 
    // type of target is $uint<32>
    $phi fn := 			  ($bitcast ($uint<1>) 1  ) $on   $entry 			  n_fn $on   $loopback 
    // type of target is $uint<1>
    $phi bm := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nbm $on   $loopback 
    // type of target is $uint<8>
    $endmerge
    $volatile sp := ($bitcast ($uint<3>) addr1 ) $buffering 1
    $volatile min1 := ( $mux (sp > head) sp  head )  $buffering 1
    $volatile mi71 := (8  - ($bitcast ($uint<16>) min1 )) $buffering 1
    $volatile ns := ( $mux (mi71 < left) mi71  left )  $buffering 1
    $volatile hns := (head + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile sns := (sp + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile done := (left == ns) $buffering 1
    $volatile n_fn := (done | (hns == 0 )) $buffering 1
    $volatile n_left := ( $mux done chl_max_itr  (left - ns) )  $buffering 1
    $guard (fn) read_val1 := output_pipe1_2 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val2 := output_pipe2_2 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val3 := output_pipe3_2 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val4 := output_pipe4_2 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val5 := output_pipe5_2 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val6 := output_pipe6_2 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val7 := output_pipe7_2 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val8 := output_pipe8_2 $buffering 1// bits of buffering = 16. 
    tmp1 := ( $mux (apply_relu & ((read_val1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val1 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp2 := ( $mux (apply_relu & ((read_val2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val2 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp3 := ( $mux (apply_relu & ((read_val3 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val3 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp4 := ( $mux (apply_relu & ((read_val4 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val4 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp5 := ( $mux (apply_relu & ((read_val5 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val5 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp6 := ( $mux (apply_relu & ((read_val6 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val6 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp7 := ( $mux (apply_relu & ((read_val7 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val7 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp8 := ( $mux (apply_relu & ((read_val8 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val8 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    $volatile rd1 := (((tmp1 && tmp2) && (tmp3 && tmp4)) && ((tmp5 && tmp6) && (tmp7 && tmp8))) $buffering 1
    $volatile val_in_use := ( $mux fn rd1  fv1 )  $buffering 1
    $volatile tmp := ((val_in_use << (($bitcast ($uint<64>) head ) << 3 )) >> (($bitcast ($uint<64>) sp ) << 3 )) $buffering 1
    $volatile bytemask := (bm | ((($bitcast ($uint<8>) _hFF  ) >> ($bitcast ($uint<8>) sp )) & (($bitcast ($uint<8>) _hFF  ) << ($bitcast ($uint<8>) (8  - sns) )))) $buffering 1
    $volatile send_data := (cv1 | tmp) $buffering 1
    $volatile n_sent := ( $mux done ( $mux (sent == (cb - 1 )) 0   (sent + 1 ) )   sent )  $buffering 1
    $volatile n_head := ( $mux n_fn 0   hns )  $buffering 1
    $volatile nxt_chl := ((n_sent == 0 ) & done) $buffering 1
    $volatile n_addr1 := ((addr1 + ($bitcast ($uint<32>) ns )) + ($bitcast ($uint<32>) ( $mux nxt_chl rs  ( $mux done chl_change_inc  0  )  )  )) $buffering 1
    $volatile na3 := (n_addr1 >> 3 ) $buffering 1
    $volatile send := (((sns == 0 ) | nxt_chl) | (done & (na3 != (addr1 >> 3 )))) $buffering 1
    $volatile nfv1 := val_in_use $buffering 1
    $volatile ncv1 := ( $mux send 0   send_data )  $buffering 1
    $volatile nbm := ( $mux send 0   bytemask )  $buffering 1
    $guard (send) $call writeModule_convolution (index (addr1 >> 3 ) send_data bytemask ) (a2 ) 
    $volatile n_row := ( $mux nxt_chl (row + 2)  row )  $buffering 1
    continue_flag := (n_row < rb) $buffering 1// bits of buffering = 1. 
    $while continue_flag
    $volatile np_cnt := (p_cnt + 1 ) $buffering 1
    $volatile n_cmi := ( $mux (chl_left > max_chl) max_chl  chl_left )  $buffering 1
    $volatile n_chl_left := (chl_left - n_cmi) $buffering 1
    $volatile n_addr := (addr + ($bitcast ($uint<32>) chl_max_itr )) $buffering 1
    $if (p_cnt < num_parts) $then 
    $place[loopback]
    $endif
  }
}
$opaque $module [sendModule]
$in ( rb : $uint<16>   cb : $uint<16>   chl_out : $uint<16>   shift_val : $uint<16>   num_parts : $uint<8>   max_chl : $uint<16>   activation : $uint<1>   index : $uint<8>  )
$out ()
$is
{
  $parallelblock[sendBlock]
  {
    $call sendInner1 (0  rb cb chl_out shift_val num_parts max_chl activation index ) () 
    $call sendInner2 (($bitcast ($uint<32>) (chl_out * cb) ) rb cb chl_out shift_val num_parts max_chl activation index ) () 
  }
}
$opaque $module [sendModule8]
$in ( rb : $uint<16>   cb : $uint<16>   chl_out : $uint<16>   shift_val : $uint<16>   num_parts : $uint<8>   max_chl : $uint<16>   activation : $uint<8>   index : $uint<8>  )
$out ()
$is
{
  $branchblock [sendBlock]
  {
    row_size := ($bitcast ($uint<32>) (chl_out * cb) ) $buffering 1// bits of buffering = 32. 
    apply_relu := (activation == 1 ) $buffering 1// bits of buffering = 1. 
    $merge $entry loopback 
    $phi p_cnt := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  np_cnt $on   loopback 
    // type of target is $uint<8>
    $phi chl_max_itr := 			  n_cmi $on   loopback 			  max_chl $on   $entry 
    // type of target is $uint<16>
    $phi chl_left := 			  (chl_out - max_chl) $on   $entry 			  n_chl_left $on   loopback 
    // type of target is $uint<16>
    $phi addr := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  n_addr $on   loopback 
    // type of target is $uint<32>
    $endmerge
    chl_change_inc := ($bitcast ($uint<32>) (chl_out - chl_max_itr) ) $buffering 1// bits of buffering = 32. 
    rs_1 := (row_size + chl_change_inc) $buffering 1// bits of buffering = 32. 
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi address1 := 			  n_address1 $on   $loopback 			  ($bitcast ($uint<32>) addr ) $on   $entry 
    // type of target is $uint<32>
    $phi address2 := 			  n_address2 $on   $loopback 			  ($bitcast ($uint<32>) (row_size + addr) ) $on   $entry 
    // type of target is $uint<32>
    $phi chl := 			  n_chl $on   $loopback 			  ($bitcast ($uint<16>) 1  ) $on   $entry 
    // type of target is $uint<16>
    $phi col := 			  n_col $on   $loopback 			  ($bitcast ($uint<16>) 1  ) $on   $entry 
    // type of target is $uint<16>
    $phi row := 			  n_row $on   $loopback 			  ($bitcast ($uint<16>) 1  ) $on   $entry 
    // type of target is $uint<16>
    $endmerge
    $volatile chl_change := (chl == chl_max_itr) $buffering 1
    $volatile row_change := ((col == cb) & chl_change) $buffering 1
    $volatile n_chl := ( $mux chl_change 1   (chl + 1 ) )  $buffering 1
    $volatile n_col := ( $mux row_change 1   ( $mux chl_change (col + 1 )  col )  )  $buffering 1
    $volatile n_row := ( $mux row_change (row + 2)  row )  $buffering 1
    $volatile tmp_sum := (1  + ( $mux row_change rs_1  ( $mux chl_change chl_change_inc  0  )  ) ) $buffering 1
    $volatile n_address1 := (address1 + tmp_sum) $buffering 1
    $volatile n_address2 := (address2 + tmp_sum) $buffering 1
    read_val1_1 := output_pipe1_1 $buffering 1// bits of buffering = 16. 
    read_val2_1 := output_pipe2_1 $buffering 1// bits of buffering = 16. 
    read_val3_1 := output_pipe3_1 $buffering 1// bits of buffering = 16. 
    read_val4_1 := output_pipe4_1 $buffering 1// bits of buffering = 16. 
    read_val5_1 := output_pipe5_1 $buffering 1// bits of buffering = 16. 
    read_val6_1 := output_pipe6_1 $buffering 1// bits of buffering = 16. 
    read_val7_1 := output_pipe7_1 $buffering 1// bits of buffering = 16. 
    read_val8_1 := output_pipe8_1 $buffering 1// bits of buffering = 16. 
    read_val1_2 := output_pipe1_2 $buffering 1// bits of buffering = 16. 
    read_val2_2 := output_pipe2_2 $buffering 1// bits of buffering = 16. 
    read_val3_2 := output_pipe3_2 $buffering 1// bits of buffering = 16. 
    read_val4_2 := output_pipe4_2 $buffering 1// bits of buffering = 16. 
    read_val5_2 := output_pipe5_2 $buffering 1// bits of buffering = 16. 
    read_val6_2 := output_pipe6_2 $buffering 1// bits of buffering = 16. 
    read_val7_2 := output_pipe7_2 $buffering 1// bits of buffering = 16. 
    read_val8_2 := output_pipe8_2 $buffering 1// bits of buffering = 16. 
    tmp1_1 := ( $mux (apply_relu & ((read_val1_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val1_1 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp2_1 := ( $mux (apply_relu & ((read_val2_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val2_1 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp3_1 := ( $mux (apply_relu & ((read_val3_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val3_1 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp4_1 := ( $mux (apply_relu & ((read_val4_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val4_1 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp5_1 := ( $mux (apply_relu & ((read_val5_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val5_1 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp6_1 := ( $mux (apply_relu & ((read_val6_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val6_1 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp7_1 := ( $mux (apply_relu & ((read_val7_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val7_1 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp8_1 := ( $mux (apply_relu & ((read_val8_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val8_1 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp1_2 := ( $mux (apply_relu & ((read_val1_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val1_2 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp2_2 := ( $mux (apply_relu & ((read_val2_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val2_2 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp3_2 := ( $mux (apply_relu & ((read_val3_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val3_2 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp4_2 := ( $mux (apply_relu & ((read_val4_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val4_2 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp5_2 := ( $mux (apply_relu & ((read_val5_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val5_2 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp6_2 := ( $mux (apply_relu & ((read_val6_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val6_2 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp7_2 := ( $mux (apply_relu & ((read_val7_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val7_2 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp8_2 := ( $mux (apply_relu & ((read_val8_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val8_2 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    $volatile rd1 := (((tmp1_1 && tmp2_1) && (tmp3_1 && tmp4_1)) && ((tmp5_1 && tmp6_1) && (tmp7_1 && tmp8_1))) $buffering 1
    $volatile rd2 := (((tmp1_2 && tmp2_2) && (tmp3_2 && tmp4_2)) && ((tmp5_2 && tmp6_2) && (tmp7_2 && tmp8_2))) $buffering 1
    $call writeModule_convolution (index address1 rd1 255  ) (a1 ) 
    $call writeModule_convolution (index address2 rd2 255  ) (a2 ) 
    continue_flag := ((row >= (rb - 1 )) ~& row_change) $buffering 1// bits of buffering = 1. 
    $while continue_flag
    $volatile np_cnt := (p_cnt + 1 ) $buffering 1
    $volatile n_cmi := ( $mux (chl_left > max_chl) max_chl  chl_left )  $buffering 1
    $volatile n_chl_left := (chl_left - n_cmi) $buffering 1
    $volatile n_addr := (addr + ($bitcast ($uint<32>) chl_max_itr )) $buffering 1
    $if (p_cnt < num_parts) $then 
    $place[loopback]
    $endif
  }
}
$opaque $module [sendPool]
$in ( rb : $uint<16>   cb : $uint<16>   chl_out : $uint<16>   shift_val : $uint<16>   num_parts : $uint<8>   max_chl : $uint<16>   activation : $uint<1>   index : $uint<8>  )
$out ()
$is
{
  $branchblock [sendBlock]
  {
    row_size := ($bitcast ($uint<32>) (chl_out * cb) ) $buffering 1// bits of buffering = 32.  Orphaned statement with target row_size ?? 
    apply_relu := (activation == 1 ) $buffering 1// bits of buffering = 1. 
    $merge $entry loopback 
    $phi p_cnt := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  np_cnt $on   loopback 
    // type of target is $uint<8>
    $phi chl_max_itr := 			  max_chl $on   $entry 			  n_cmi $on   loopback 
    // type of target is $uint<16>
    $phi chl_left := 			  (chl_out - max_chl) $on   $entry 			  n_chl_left $on   loopback 
    // type of target is $uint<16>
    $phi addr := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  n_addr $on   loopback 
    // type of target is $uint<32>
    $endmerge
    chl_change_inc := ($bitcast ($uint<32>) (chl_out - chl_max_itr) ) $buffering 1// bits of buffering = 32. 
    rs_1 := chl_change_inc $buffering 1// bits of buffering = 32. 
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi address1 := 			  ($bitcast ($uint<32>) addr ) $on   $entry 			  n_address1 $on   $loopback 
    // type of target is $uint<32>
    $phi chl := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_chl $on   $loopback 
    // type of target is $uint<16>
    $phi col := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_col $on   $loopback 
    // type of target is $uint<16>
    $phi row := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_row $on   $loopback 
    // type of target is $uint<16>
    $endmerge
    $volatile chl_change := (chl == chl_max_itr) $buffering 1
    $volatile row_change := ((col == cb) & chl_change) $buffering 1
    $volatile n_chl := ( $mux chl_change 1   (chl + 1 ) )  $buffering 1
    $volatile n_col := ( $mux row_change 1   ( $mux chl_change (col + 1 )  col )  )  $buffering 1
    $volatile n_row := ( $mux row_change (row + 2)  row )  $buffering 1
    read_val1_1 := output_pipe1_1 $buffering 1// bits of buffering = 16. 
    read_val2_1 := output_pipe2_1 $buffering 1// bits of buffering = 16. 
    read_val3_1 := output_pipe3_1 $buffering 1// bits of buffering = 16. 
    read_val4_1 := output_pipe4_1 $buffering 1// bits of buffering = 16. 
    read_val5_1 := output_pipe5_1 $buffering 1// bits of buffering = 16. 
    read_val6_1 := output_pipe6_1 $buffering 1// bits of buffering = 16. 
    read_val7_1 := output_pipe7_1 $buffering 1// bits of buffering = 16. 
    read_val8_1 := output_pipe8_1 $buffering 1// bits of buffering = 16. 
    read_val1_2 := output_pipe1_2 $buffering 1// bits of buffering = 16. 
    read_val2_2 := output_pipe2_2 $buffering 1// bits of buffering = 16. 
    read_val3_2 := output_pipe3_2 $buffering 1// bits of buffering = 16. 
    read_val4_2 := output_pipe4_2 $buffering 1// bits of buffering = 16. 
    read_val5_2 := output_pipe5_2 $buffering 1// bits of buffering = 16. 
    read_val6_2 := output_pipe6_2 $buffering 1// bits of buffering = 16. 
    read_val7_2 := output_pipe7_2 $buffering 1// bits of buffering = 16. 
    read_val8_2 := output_pipe8_2 $buffering 1// bits of buffering = 16. 
    tmp1_1 := ( $mux (apply_relu & ((read_val1_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val1_1 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp2_1 := ( $mux (apply_relu & ((read_val2_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val2_1 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp3_1 := ( $mux (apply_relu & ((read_val3_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val3_1 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp4_1 := ( $mux (apply_relu & ((read_val4_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val4_1 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp5_1 := ( $mux (apply_relu & ((read_val5_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val5_1 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp6_1 := ( $mux (apply_relu & ((read_val6_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val6_1 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp7_1 := ( $mux (apply_relu & ((read_val7_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val7_1 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp8_1 := ( $mux (apply_relu & ((read_val8_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val8_1 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp1_2 := ( $mux (apply_relu & ((read_val1_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val1_2 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp2_2 := ( $mux (apply_relu & ((read_val2_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val2_2 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp3_2 := ( $mux (apply_relu & ((read_val3_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val3_2 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp4_2 := ( $mux (apply_relu & ((read_val4_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val4_2 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp5_2 := ( $mux (apply_relu & ((read_val5_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val5_2 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp6_2 := ( $mux (apply_relu & ((read_val6_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val6_2 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp7_2 := ( $mux (apply_relu & ((read_val7_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val7_2 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    tmp8_2 := ( $mux (apply_relu & ((read_val8_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val8_2 >> shift_val) ) )  $buffering 1// bits of buffering = 8. 
    mx1 := ( $mux (($bitcast ($int<8>) tmp1_1 ) > ($bitcast ($int<8>) tmp1_2 )) tmp1_1  tmp1_2 )  $buffering 1// bits of buffering = 8. 
    mx2 := ( $mux (($bitcast ($int<8>) tmp2_1 ) > ($bitcast ($int<8>) tmp2_2 )) tmp2_1  tmp2_2 )  $buffering 1// bits of buffering = 8. 
    mx3 := ( $mux (($bitcast ($int<8>) tmp3_1 ) > ($bitcast ($int<8>) tmp3_2 )) tmp3_1  tmp3_2 )  $buffering 1// bits of buffering = 8. 
    mx4 := ( $mux (($bitcast ($int<8>) tmp4_1 ) > ($bitcast ($int<8>) tmp4_2 )) tmp4_1  tmp4_2 )  $buffering 1// bits of buffering = 8. 
    mx5 := ( $mux (($bitcast ($int<8>) tmp5_1 ) > ($bitcast ($int<8>) tmp5_2 )) tmp5_1  tmp5_2 )  $buffering 1// bits of buffering = 8. 
    mx6 := ( $mux (($bitcast ($int<8>) tmp6_1 ) > ($bitcast ($int<8>) tmp6_2 )) tmp6_1  tmp6_2 )  $buffering 1// bits of buffering = 8. 
    mx7 := ( $mux (($bitcast ($int<8>) tmp7_1 ) > ($bitcast ($int<8>) tmp7_2 )) tmp7_1  tmp7_2 )  $buffering 1// bits of buffering = 8. 
    mx8 := ( $mux (($bitcast ($int<8>) tmp8_1 ) > ($bitcast ($int<8>) tmp8_2 )) tmp8_1  tmp8_2 )  $buffering 1// bits of buffering = 8. 
    $volatile rd1 := (((mx1 && mx2) && (mx3 && mx4)) && ((mx5 && mx6) && (mx7 && mx8))) $buffering 1
    $volatile pool_stage := (col [] 0 ) $buffering 1
    $volatile tmp_sum := (1  + ( $mux row_change rs_1  ( $mux chl_change chl_change_inc  0  )  ) ) $buffering 1
    $volatile n_address1 := ( $mux pool_stage address1  (address1 + tmp_sum) )  $buffering 1
    $guard (pool_stage) pool_buffer := rd1 $buffering 1// bits of buffering = 64. 
    $guard (~pool_stage) val := pool_buffer $buffering 1// bits of buffering = 64. 
    v1 := ( $slice val 63 56 )  $buffering 1// bits of buffering = 8. 
    v2 := ( $slice val 55 48 )  $buffering 1// bits of buffering = 8. 
    v3 := ( $slice val 47 40 )  $buffering 1// bits of buffering = 8. 
    v4 := ( $slice val 39 32 )  $buffering 1// bits of buffering = 8. 
    v5 := ( $slice val 31 24 )  $buffering 1// bits of buffering = 8. 
    v6 := ( $slice val 23 16 )  $buffering 1// bits of buffering = 8. 
    v7 := ( $slice val 15 8 )  $buffering 1// bits of buffering = 8. 
    v8 := ( $slice val 7 0 )  $buffering 1// bits of buffering = 8. 
    mv1 := ( $mux (($bitcast ($int<8>) mx1 ) > ($bitcast ($int<8>) v1 )) mx1  v1 )  $buffering 1// bits of buffering = 8. 
    mv2 := ( $mux (($bitcast ($int<8>) mx2 ) > ($bitcast ($int<8>) v2 )) mx2  v2 )  $buffering 1// bits of buffering = 8. 
    mv3 := ( $mux (($bitcast ($int<8>) mx3 ) > ($bitcast ($int<8>) v3 )) mx3  v3 )  $buffering 1// bits of buffering = 8. 
    mv4 := ( $mux (($bitcast ($int<8>) mx4 ) > ($bitcast ($int<8>) v4 )) mx4  v4 )  $buffering 1// bits of buffering = 8. 
    mv5 := ( $mux (($bitcast ($int<8>) mx5 ) > ($bitcast ($int<8>) v5 )) mx5  v5 )  $buffering 1// bits of buffering = 8. 
    mv6 := ( $mux (($bitcast ($int<8>) mx6 ) > ($bitcast ($int<8>) v6 )) mx6  v6 )  $buffering 1// bits of buffering = 8. 
    mv7 := ( $mux (($bitcast ($int<8>) mx7 ) > ($bitcast ($int<8>) v7 )) mx7  v7 )  $buffering 1// bits of buffering = 8. 
    mv8 := ( $mux (($bitcast ($int<8>) mx8 ) > ($bitcast ($int<8>) v8 )) mx8  v8 )  $buffering 1// bits of buffering = 8. 
    max_val := (((mv1 && mv2) && (mv3 && mv4)) && ((mv5 && mv6) && (mv7 && mv8))) $buffering 1// bits of buffering = 64. 
    data_to_send := max_val $buffering 1// bits of buffering = 64. 
    $guard (~pool_stage) $call writeModule_convolution (index address1 data_to_send 255  ) (a1 ) 
    continue_flag := ((row >= (rb - 1 )) ~& row_change) $buffering 1// bits of buffering = 1. 
    $while continue_flag
    $volatile np_cnt := (p_cnt + 1 ) $buffering 1
    $volatile n_cmi := ( $mux (chl_left > max_chl) max_chl  chl_left )  $buffering 1
    $volatile n_chl_left := (chl_left - n_cmi) $buffering 1
    $volatile n_addr := (addr + ($bitcast ($uint<32>) chl_max_itr )) $buffering 1
    $if (p_cnt < num_parts) $then 
    $place[loopback]
    $endif
  }
}
$module [convolutionAll]
$in ( rb : $uint<16>   cb : $uint<16>   rt : $uint<16>   ct : $uint<16>   chl_out : $uint<16>   chl_in : $uint<16>   rk : $uint<16>   ck : $uint<16>   index_in1 : $uint<8>   index_in2 : $uint<8>   index_k : $uint<8>   index_out : $uint<8>   shift_val : $uint<16>   pad : $uint<16>   pool : $uint<8>   activation : $uint<8>  )
$out ()
$is
{
  in_8 := (( $slice chl_in 2 0 )  == 0 ) $buffering 1// bits of buffering = 1. 
  out_8 := (( $slice chl_out 2 0 )  == 0 ) $buffering 1// bits of buffering = 1. 
  inout_8 := (in_8 & out_8) $buffering 1// bits of buffering = 1. 
  chl_out_ceil := ((chl_out + 7 ) >> 3 ) $buffering 1// bits of buffering = 16. 
  chl_in_ceil := ((chl_in + 7 ) >> 3 ) $buffering 1// bits of buffering = 16. 
  inCT := (rk == 2 ) $buffering 1// bits of buffering = 1. 
  inConcat := (((index_in2 [] 7 ) == 1 ) & ( ~ inCT )) $buffering 1// bits of buffering = 1. 
  in_nCT := ((( ~ inCT ) & ( ~ inConcat )) & ( ~ in_8 )) $buffering 1// bits of buffering = 1. 
  in_nCT8 := ((( ~ inCT ) & ( ~ inConcat )) & in_8) $buffering 1// bits of buffering = 1. 
  out_pool := (pool [] 0 ) $buffering 1// bits of buffering = 1. 
  out_np8 := (out_8 & ( ~ out_pool )) $buffering 1// bits of buffering = 1. 
  out_np := (out_8 ~| out_pool) $buffering 1// bits of buffering = 1. 
  $call Divider (4096 (chl_in_ceil * ck) ) (alpha ) 
  cnd_partition := (alpha < chl_out_ceil) $buffering 1// bits of buffering = 1. 
  $guard (cnd_partition) $call Divider ((chl_out_ceil - 1 ) alpha ) (tmp1 ) 
  parts := ($bitcast ($uint<8>) ( $mux cnd_partition tmp1  0  )  ) $buffering 1// bits of buffering = 8. 
  max_per_part := ( $mux cnd_partition (alpha << 3 )  chl_out )  $buffering 1// bits of buffering = 16. 
  mpp2 := ( $mux cnd_partition alpha  chl_out_ceil )  $buffering 1// bits of buffering = 16. 
  $call TopMult (($bitcast ($uint<32>) rb ) (($bitcast ($uint<32>) (cb * chl_out_ceil) ) >> 1 ) ) (op_size ) 
  $parallelblock[topBlocks]
  {
    $guard (~inout_8) $call kernelModule (chl_in chl_out rk ck index_k ) () 
    $guard (inout_8) $call kernelModule8 (chl_in_ceil chl_out_ceil rk ck index_k ) () 
    $guard (in_nCT) $call inputModule (rb rt ct chl_in rk pad parts index_in1 ) () 
    $guard (in_nCT8) $call inputModule8 (rb ct chl_in_ceil rk pad parts index_in1 ) () 
    $guard (inCT) $call inputModuleCT (rb ct chl_in_ceil parts index_in1 ) () 
    $guard (inConcat) $call inputModuleConcat (rb ct chl_in_ceil rk pad parts index_in1 (index_in2 & _b01111111 ) ) () 
    $call convolveCore (rb cb chl_in_ceil chl_out rk ck parts max_per_part ) () 
    $call accumulator (chl_in_ceil ck op_size ) () 
    $guard (out_np) $call sendModule (rb cb chl_out shift_val parts max_per_part 0 index_out ) () 
    $guard (out_np8) $call sendModule8 (rb cb chl_out_ceil shift_val parts mpp2 0 index_out ) () 
    $guard (out_pool) $call sendPool (rb cb chl_out_ceil shift_val parts mpp2 0 index_out ) () 
  }
}
$opaque $module [writeModule1]
$in ( index : $uint<8>   address : $uint<32>   data : $uint<64>  )
$out ()
$is
{
  $volatile cnd1 := (index == 0 ) $buffering 1
  $volatile cnd2 := (index == 1 ) $buffering 1
  addr := (( $mux cnd1 (311296 + address)  _b0  )  | ( $mux cnd2 (0 + address)  _b0  ) ) $buffering 1// bits of buffering = 32. 
  $call memoryModule (0  addr data 255  ) (out ) 
}
$module [readFromSystemPipe]
$in ( index : $uint<8>  )
$out ()
$is
{
  $branchblock [body]
  {
    call := system_input_pipe $buffering 1// bits of buffering = 8. 
    conv := ($cast ($uint<32>) call ) $buffering 1// bits of buffering = 32. 
    shl := (conv << ($bitcast ($uint<32>) _b00000000000000000000000000001000  )) $buffering 1// bits of buffering = 32. 
    call1 := system_input_pipe $buffering 1// bits of buffering = 8. 
    conv2 := ($cast ($uint<32>) call1 ) $buffering 1// bits of buffering = 32. 
    add := (shl | conv2) $buffering 1// bits of buffering = 32. 
    shl4 := (add << ($bitcast ($uint<32>) _b00000000000000000000000000001000  )) $buffering 1// bits of buffering = 32. 
    call5 := system_input_pipe $buffering 1// bits of buffering = 8. 
    conv6 := ($cast ($uint<32>) call5 ) $buffering 1// bits of buffering = 32. 
    add7 := (shl4 | conv6) $buffering 1// bits of buffering = 32. 
    cmp60 := (add7 == ($bitcast ($uint<32>) _b00000000000000000000000000000000  )) $buffering 1// bits of buffering = 1. 
    $if cmp60 $then 
    $place[entry_forx_xend]
    $else 
    $place[entry_forx_xbodyx_xpreheader]
    $endif
    $merge entry_forx_xbodyx_xpreheader 
    $endmerge
    $place[forx_xbodyx_xpreheader_forx_xbody]
    $merge forx_xbody_forx_xbody forx_xbodyx_xpreheader_forx_xbody 
    $phi iNsTr_6 := 			  ($cast ($uint<32>) inc ) $on   forx_xbody_forx_xbody 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   forx_xbodyx_xpreheader_forx_xbody 
    // type of target is $uint<32>
    $endmerge
    call12 := system_input_pipe $buffering 1// bits of buffering = 8. 
    conv13 := ($cast ($uint<64>) call12 ) $buffering 1// bits of buffering = 64. 
    shl15 := (conv13 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call16 := system_input_pipe $buffering 1// bits of buffering = 8. 
    conv18 := ($cast ($uint<64>) call16 ) $buffering 1// bits of buffering = 64. 
    add19 := (shl15 | conv18) $buffering 1// bits of buffering = 64. 
    shl21 := (add19 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call22 := system_input_pipe $buffering 1// bits of buffering = 8. 
    conv24 := ($cast ($uint<64>) call22 ) $buffering 1// bits of buffering = 64. 
    add25 := (shl21 | conv24) $buffering 1// bits of buffering = 64. 
    shl27 := (add25 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call28 := system_input_pipe $buffering 1// bits of buffering = 8. 
    conv30 := ($cast ($uint<64>) call28 ) $buffering 1// bits of buffering = 64. 
    add31 := (shl27 | conv30) $buffering 1// bits of buffering = 64. 
    shl33 := (add31 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call34 := system_input_pipe $buffering 1// bits of buffering = 8. 
    conv36 := ($cast ($uint<64>) call34 ) $buffering 1// bits of buffering = 64. 
    add37 := (shl33 | conv36) $buffering 1// bits of buffering = 64. 
    shl39 := (add37 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call40 := system_input_pipe $buffering 1// bits of buffering = 8. 
    conv42 := ($cast ($uint<64>) call40 ) $buffering 1// bits of buffering = 64. 
    add43 := (shl39 | conv42) $buffering 1// bits of buffering = 64. 
    shl45 := (add43 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call46 := system_input_pipe $buffering 1// bits of buffering = 8. 
    conv48 := ($cast ($uint<64>) call46 ) $buffering 1// bits of buffering = 64. 
    add49 := (shl45 | conv48) $buffering 1// bits of buffering = 64. 
    shl51 := (add49 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call52 := system_input_pipe $buffering 1// bits of buffering = 8. 
    conv54 := ($cast ($uint<64>) call52 ) $buffering 1// bits of buffering = 64. 
    add55 := (shl51 | conv54) $buffering 1// bits of buffering = 64. 
    $call writeModule1 (index iNsTr_6 add55 ) () 
    inc := (iNsTr_6 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1// bits of buffering = 32. 
    exitcond1 := (inc == add7) $buffering 1// bits of buffering = 1. 
    $if exitcond1 $then 
    $place[forx_xbody_forx_xendx_xloopexit]
    $else 
    $place[forx_xbody_forx_xbody]
    $endif
    $merge forx_xbody_forx_xendx_xloopexit 
    $endmerge
    $place[forx_xendx_xloopexit_forx_xend]
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend 
    $endmerge
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
$module [fill_input]
$in ()
$out ()
$is
{
  $branchblock [body]
  {
    $place[bbx_xnph_forx_xbody]
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody 
    $phi iNsTr_1 := 			  ($cast ($uint<8>) ($bitcast ($uint<8>) _b00000000  ) ) $on   bbx_xnph_forx_xbody 			  ($cast ($uint<8>) inc ) $on   forx_xbody_forx_xbody 
    // type of target is $uint<8>
    $endmerge
    $call readFromSystemPipe (iNsTr_1 ) () 
    inc := (iNsTr_1 + ($bitcast ($uint<8>) _b00000001  )) $buffering 1// bits of buffering = 8. 
    exitcond1 := (inc == ($bitcast ($uint<8>) _b00000010  )) $buffering 1// bits of buffering = 1. 
    $if exitcond1 $then 
    $place[forx_xbody_forx_xend]
    $else 
    $place[forx_xbody_forx_xbody]
    $endif
    $merge forx_xbody_forx_xend 
    $endmerge
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
$module [progx_xoptx_xo_storage_initializer_]
$in ()
$out ()
$is
{
  $null
  $attribute initializer 
}
$module [global_storage_initializer_]
$in ()
$out ()
$is
{
  $parallelblock[pb]
  {
    $call progx_xoptx_xo_storage_initializer_ () () 
  }
}
$opaque $module [readModule1]
$in ( address : $uint<32>  )
$out ( data : $uint<64>  )
$is
{
  $call memoryModule (1  (65536 + address) 0  255  ) (data ) 
}
$module [sendOutput]
$in ()
$out ()
$is
{
  $branchblock [body]
  {
    $place[bbx_xnph_forx_xbody]
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody 
    $phi iNsTr_1 := 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody 			  ($cast ($uint<32>) inc ) $on   forx_xbody_forx_xbody 
    // type of target is $uint<32>
    $endmerge
    $call readModule1 (iNsTr_1 ) (call ) 
    conv := ($cast ($uint<8>) call ) $buffering 1// bits of buffering = 8. 
    shr := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    conv8 := ($cast ($uint<8>) shr ) $buffering 1// bits of buffering = 8. 
    shr11 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  )) $buffering 1// bits of buffering = 64. 
    conv14 := ($cast ($uint<8>) shr11 ) $buffering 1// bits of buffering = 8. 
    shr17 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  )) $buffering 1// bits of buffering = 64. 
    conv20 := ($cast ($uint<8>) shr17 ) $buffering 1// bits of buffering = 8. 
    shr23 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  )) $buffering 1// bits of buffering = 64. 
    conv26 := ($cast ($uint<8>) shr23 ) $buffering 1// bits of buffering = 8. 
    shr29 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  )) $buffering 1// bits of buffering = 64. 
    conv32 := ($cast ($uint<8>) shr29 ) $buffering 1// bits of buffering = 8. 
    shr35 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  )) $buffering 1// bits of buffering = 64. 
    conv38 := ($cast ($uint<8>) shr35 ) $buffering 1// bits of buffering = 8. 
    shr41 := (call >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  )) $buffering 1// bits of buffering = 64. 
    conv44 := ($cast ($uint<8>) shr41 ) $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv44 $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv38 $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv32 $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv26 $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv20 $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv14 $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv8 $buffering 1// bits of buffering = 8. 
    system_output_pipe := conv $buffering 1// bits of buffering = 8. 
    inc := (iNsTr_1 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1// bits of buffering = 32. 
    exitcond1 := (inc == ($bitcast ($uint<32>) _b00000000000000000100100110000000  )) $buffering 1// bits of buffering = 1. 
    $if exitcond1 $then 
    $place[forx_xbody_forx_xend]
    $else 
    $place[forx_xbody_forx_xbody]
    $endif
    $merge forx_xbody_forx_xend 
    $endmerge
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
$module [timer]
$in ()
$out ( T : $uint<64>  )
$is
{
  timer_req := ($bitcast ($uint<1>) _b1 ) $buffering 1// bits of buffering = 1. 
  T := timer_resp $buffering 1// bits of buffering = 64. 
}
$module [writeTimeBack]
$in ()
$out ( ret_val__ : $uint<32>  )
$is
{
  $branchblock [body]
  {
    $place[bbx_xnph_forx_xbody]
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody 
    $phi ix_x066 := 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody 			  ($cast ($uint<32>) inc ) $on   forx_xbody_forx_xbody 
    // type of target is $uint<32>
    $endmerge
    arrayidx := @(global_time_val[ix_x066]) $buffering 1// bits of buffering = 32. 
    tmp3 := ->(arrayidx) $buffering 1// bits of buffering = 64. 
    conv := ($cast ($uint<8>) tmp3 ) $buffering 1// bits of buffering = 8. 
    shr := (tmp3 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    conv10 := ($cast ($uint<8>) shr ) $buffering 1// bits of buffering = 8. 
    shr13 := (tmp3 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  )) $buffering 1// bits of buffering = 64. 
    conv16 := ($cast ($uint<8>) shr13 ) $buffering 1// bits of buffering = 8. 
    shr19 := (tmp3 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  )) $buffering 1// bits of buffering = 64. 
    conv22 := ($cast ($uint<8>) shr19 ) $buffering 1// bits of buffering = 8. 
    shr25 := (tmp3 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  )) $buffering 1// bits of buffering = 64. 
    conv28 := ($cast ($uint<8>) shr25 ) $buffering 1// bits of buffering = 8. 
    shr31 := (tmp3 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  )) $buffering 1// bits of buffering = 64. 
    conv34 := ($cast ($uint<8>) shr31 ) $buffering 1// bits of buffering = 8. 
    shr37 := (tmp3 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  )) $buffering 1// bits of buffering = 64. 
    conv40 := ($cast ($uint<8>) shr37 ) $buffering 1// bits of buffering = 8. 
    shr43 := (tmp3 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  )) $buffering 1// bits of buffering = 64. 
    conv46 := ($cast ($uint<8>) shr43 ) $buffering 1// bits of buffering = 8. 
    $barrier
    debug_output_pipe := conv46 $buffering 1// bits of buffering = 8. 
    debug_output_pipe := conv40 $buffering 1// bits of buffering = 8. 
    debug_output_pipe := conv34 $buffering 1// bits of buffering = 8. 
    debug_output_pipe := conv28 $buffering 1// bits of buffering = 8. 
    debug_output_pipe := conv22 $buffering 1// bits of buffering = 8. 
    debug_output_pipe := conv16 $buffering 1// bits of buffering = 8. 
    debug_output_pipe := conv10 $buffering 1// bits of buffering = 8. 
    debug_output_pipe := conv $buffering 1// bits of buffering = 8. 
    inc := (ix_x066 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1// bits of buffering = 32. 
    exitcond1 := (inc == ($bitcast ($uint<32>) _b00000000000000000000000000010011  )) $buffering 1// bits of buffering = 1. 
    $if exitcond1 $then 
    $place[forx_xbody_forx_xend]
    $else 
    $place[forx_xbody_forx_xbody]
    $endif
    $merge forx_xbody_forx_xend 
    $endmerge
    ret_val__ := ($bitcast ($uint<32>) _b0  ) $buffering 1// bits of buffering = 32. 
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
$module [systemTOP]
$in ()
$out ()
$is
{
  $branchblock [body]
  {
    call := debug_input_pipe $buffering 1// bits of buffering = 8. 
    call1 := system_input_pipe $buffering 1// bits of buffering = 8. 
    $barrier
    $call timer () (callx_xi ) 
    convx_xi := ($bitcast ($uint<64>) ($cast ($int<64>) callx_xi ) ) $buffering 1// bits of buffering = 64. 
    iNsTr_3 := @(global_time_val[($bitcast ($uint<32>) _b00000000000000000000000000000000  )]) $buffering 1// bits of buffering = 32. 
    ->(iNsTr_3) := convx_xi $buffering 1// bits of buffering = 64. 
    $call convolutionAll (($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000001000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<16>) _b0000000000000001  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $barrier
    $call timer () (callx_xi3 ) 
    convx_xi4 := ($bitcast ($uint<64>) ($cast ($int<64>) callx_xi3 ) ) $buffering 1// bits of buffering = 64. 
    iNsTr_7 := @(global_time_val[($bitcast ($uint<32>) _b00000000000000000000000000000001  )]) $buffering 1// bits of buffering = 32. 
    ->(iNsTr_7) := convx_xi4 $buffering 1// bits of buffering = 64. 
    $barrier
    $call convolutionAll (($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000001000000  ) ($bitcast ($uint<16>) _b0000000001000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000010  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<16>) _b0000000000000001  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $barrier
    $call timer () (callx_xi5 ) 
    convx_xi6 := ($bitcast ($uint<64>) ($cast ($int<64>) callx_xi5 ) ) $buffering 1// bits of buffering = 64. 
    iNsTr_12 := @(global_time_val[($bitcast ($uint<32>) _b00000000000000000000000000000010  )]) $buffering 1// bits of buffering = 32. 
    ->(iNsTr_12) := convx_xi6 $buffering 1// bits of buffering = 64. 
    $barrier
    $call convolutionAll (($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000010000000  ) ($bitcast ($uint<16>) _b0000000001000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000010  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000010  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<16>) _b0000000000000001  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $barrier
    $call timer () (callx_xi7 ) 
    convx_xi8 := ($bitcast ($uint<64>) ($cast ($int<64>) callx_xi7 ) ) $buffering 1// bits of buffering = 64. 
    iNsTr_17 := @(global_time_val[($bitcast ($uint<32>) _b00000000000000000000000000000011  )]) $buffering 1// bits of buffering = 32. 
    ->(iNsTr_17) := convx_xi8 $buffering 1// bits of buffering = 64. 
    $barrier
    $call convolutionAll (($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000010000000  ) ($bitcast ($uint<16>) _b0000000010000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000011  ) ($bitcast ($uint<8>) _b00000011  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<16>) _b0000000000000001  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $barrier
    $call timer () (callx_xi9 ) 
    convx_xi10 := ($bitcast ($uint<64>) ($cast ($int<64>) callx_xi9 ) ) $buffering 1// bits of buffering = 64. 
    iNsTr_22 := @(global_time_val[($bitcast ($uint<32>) _b00000000000000000000000000000100  )]) $buffering 1// bits of buffering = 32. 
    ->(iNsTr_22) := convx_xi10 $buffering 1// bits of buffering = 64. 
    $barrier
    $call convolutionAll (($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000000010000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000100  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<16>) _b0000000000000001  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $barrier
    $call timer () (callx_xi11 ) 
    convx_xi12 := ($bitcast ($uint<64>) ($cast ($int<64>) callx_xi11 ) ) $buffering 1// bits of buffering = 64. 
    iNsTr_27 := @(global_time_val[($bitcast ($uint<32>) _b00000000000000000000000000000101  )]) $buffering 1// bits of buffering = 32. 
    ->(iNsTr_27) := convx_xi12 $buffering 1// bits of buffering = 64. 
    $barrier
    $call convolutionAll (($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000101  ) ($bitcast ($uint<8>) _b00000100  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<16>) _b0000000000000001  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $barrier
    $call timer () (callx_xi13 ) 
    convx_xi14 := ($bitcast ($uint<64>) ($cast ($int<64>) callx_xi13 ) ) $buffering 1// bits of buffering = 64. 
    iNsTr_32 := @(global_time_val[($bitcast ($uint<32>) _b00000000000000000000000000000110  )]) $buffering 1// bits of buffering = 32. 
    ->(iNsTr_32) := convx_xi14 $buffering 1// bits of buffering = 64. 
    $barrier
    $call convolutionAll (($bitcast ($uint<16>) _b0000000000011100  ) ($bitcast ($uint<16>) _b0000000000011100  ) ($bitcast ($uint<16>) _b0000000000011100  ) ($bitcast ($uint<16>) _b0000000000011100  ) ($bitcast ($uint<16>) _b0000001000000000  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000100  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000110  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<16>) _b0000000000000001  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $barrier
    $call timer () (callx_xi15 ) 
    convx_xi16 := ($bitcast ($uint<64>) ($cast ($int<64>) callx_xi15 ) ) $buffering 1// bits of buffering = 64. 
    iNsTr_37 := @(global_time_val[($bitcast ($uint<32>) _b00000000000000000000000000000111  )]) $buffering 1// bits of buffering = 32. 
    ->(iNsTr_37) := convx_xi16 $buffering 1// bits of buffering = 64. 
    $barrier
    $call convolutionAll (($bitcast ($uint<16>) _b0000000000011100  ) ($bitcast ($uint<16>) _b0000000000011100  ) ($bitcast ($uint<16>) _b0000000000011100  ) ($bitcast ($uint<16>) _b0000000000011100  ) ($bitcast ($uint<16>) _b0000001000000000  ) ($bitcast ($uint<16>) _b0000001000000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000111  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<16>) _b0000000000000001  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $barrier
    $call timer () (callx_xi17 ) 
    convx_xi18 := ($bitcast ($uint<64>) ($cast ($int<64>) callx_xi17 ) ) $buffering 1// bits of buffering = 64. 
    iNsTr_42 := @(global_time_val[($bitcast ($uint<32>) _b00000000000000000000000000001000  )]) $buffering 1// bits of buffering = 32. 
    ->(iNsTr_42) := convx_xi18 $buffering 1// bits of buffering = 64. 
    $barrier
    $call convolutionAll (($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000000011100  ) ($bitcast ($uint<16>) _b0000000000011100  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000001000000000  ) ($bitcast ($uint<16>) _b0000000000000010  ) ($bitcast ($uint<16>) _b0000000000000010  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00001000  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $barrier
    $call timer () (callx_xi19 ) 
    convx_xi20 := ($bitcast ($uint<64>) ($cast ($int<64>) callx_xi19 ) ) $buffering 1// bits of buffering = 64. 
    iNsTr_47 := @(global_time_val[($bitcast ($uint<32>) _b00000000000000000000000000001001  )]) $buffering 1// bits of buffering = 32. 
    ->(iNsTr_47) := convx_xi20 $buffering 1// bits of buffering = 64. 
    $barrier
    $call convolutionAll (($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000001000000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000100  ) ($bitcast ($uint<8>) _b10000001  ) ($bitcast ($uint<8>) _b00001001  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<16>) _b0000000000000001  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $barrier
    $call timer () (callx_xi21 ) 
    convx_xi22 := ($bitcast ($uint<64>) ($cast ($int<64>) callx_xi21 ) ) $buffering 1// bits of buffering = 64. 
    iNsTr_52 := @(global_time_val[($bitcast ($uint<32>) _b00000000000000000000000000001010  )]) $buffering 1// bits of buffering = 32. 
    ->(iNsTr_52) := convx_xi22 $buffering 1// bits of buffering = 64. 
    $barrier
    $call convolutionAll (($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00001010  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<16>) _b0000000000000001  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $barrier
    $call timer () (callx_xi23 ) 
    convx_xi24 := ($bitcast ($uint<64>) ($cast ($int<64>) callx_xi23 ) ) $buffering 1// bits of buffering = 64. 
    iNsTr_57 := @(global_time_val[($bitcast ($uint<32>) _b00000000000000000000000000001011  )]) $buffering 1// bits of buffering = 32. 
    ->(iNsTr_57) := convx_xi24 $buffering 1// bits of buffering = 64. 
    $barrier
    $call convolutionAll (($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000000111000  ) ($bitcast ($uint<16>) _b0000000010000000  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000000000000010  ) ($bitcast ($uint<16>) _b0000000000000010  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00001011  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $barrier
    $call timer () (callx_xi25 ) 
    convx_xi26 := ($bitcast ($uint<64>) ($cast ($int<64>) callx_xi25 ) ) $buffering 1// bits of buffering = 64. 
    iNsTr_62 := @(global_time_val[($bitcast ($uint<32>) _b00000000000000000000000000001100  )]) $buffering 1// bits of buffering = 32. 
    ->(iNsTr_62) := convx_xi26 $buffering 1// bits of buffering = 64. 
    $barrier
    $call convolutionAll (($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000010000000  ) ($bitcast ($uint<16>) _b0000000100000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000011  ) ($bitcast ($uint<8>) _b10000000  ) ($bitcast ($uint<8>) _b00001100  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<16>) _b0000000000000001  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $barrier
    $call timer () (callx_xi27 ) 
    convx_xi28 := ($bitcast ($uint<64>) ($cast ($int<64>) callx_xi27 ) ) $buffering 1// bits of buffering = 64. 
    iNsTr_67 := @(global_time_val[($bitcast ($uint<32>) _b00000000000000000000000000001101  )]) $buffering 1// bits of buffering = 32. 
    ->(iNsTr_67) := convx_xi28 $buffering 1// bits of buffering = 64. 
    $barrier
    $call convolutionAll (($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000010000000  ) ($bitcast ($uint<16>) _b0000000010000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00001101  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<16>) _b0000000000000001  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $barrier
    $call timer () (callx_xi29 ) 
    convx_xi30 := ($bitcast ($uint<64>) ($cast ($int<64>) callx_xi29 ) ) $buffering 1// bits of buffering = 64. 
    iNsTr_72 := @(global_time_val[($bitcast ($uint<32>) _b00000000000000000000000000001110  )]) $buffering 1// bits of buffering = 32. 
    ->(iNsTr_72) := convx_xi30 $buffering 1// bits of buffering = 64. 
    $barrier
    $call convolutionAll (($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000001110000  ) ($bitcast ($uint<16>) _b0000000001000000  ) ($bitcast ($uint<16>) _b0000000010000000  ) ($bitcast ($uint<16>) _b0000000000000010  ) ($bitcast ($uint<16>) _b0000000000000010  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00001110  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $barrier
    $call timer () (callx_xi31 ) 
    convx_xi32 := ($bitcast ($uint<64>) ($cast ($int<64>) callx_xi31 ) ) $buffering 1// bits of buffering = 64. 
    iNsTr_77 := @(global_time_val[($bitcast ($uint<32>) _b00000000000000000000000000001111  )]) $buffering 1// bits of buffering = 32. 
    ->(iNsTr_77) := convx_xi32 $buffering 1// bits of buffering = 64. 
    $barrier
    $call convolutionAll (($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000001000000  ) ($bitcast ($uint<16>) _b0000000010000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000010  ) ($bitcast ($uint<8>) _b10000001  ) ($bitcast ($uint<8>) _b00001111  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<16>) _b0000000000000001  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $barrier
    $call timer () (callx_xi33 ) 
    convx_xi34 := ($bitcast ($uint<64>) ($cast ($int<64>) callx_xi33 ) ) $buffering 1// bits of buffering = 64. 
    iNsTr_82 := @(global_time_val[($bitcast ($uint<32>) _b00000000000000000000000000010000  )]) $buffering 1// bits of buffering = 32. 
    ->(iNsTr_82) := convx_xi34 $buffering 1// bits of buffering = 64. 
    $barrier
    $call convolutionAll (($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000001000000  ) ($bitcast ($uint<16>) _b0000000001000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00010000  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<16>) _b0000000000000001  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000001  ) ) () 
    $barrier
    $call timer () (callx_xi35 ) 
    convx_xi36 := ($bitcast ($uint<64>) ($cast ($int<64>) callx_xi35 ) ) $buffering 1// bits of buffering = 64. 
    iNsTr_87 := @(global_time_val[($bitcast ($uint<32>) _b00000000000000000000000000010001  )]) $buffering 1// bits of buffering = 32. 
    ->(iNsTr_87) := convx_xi36 $buffering 1// bits of buffering = 64. 
    $barrier
    $call convolutionAll (($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000011100000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000001000000  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<16>) _b0000000000000011  ) ($bitcast ($uint<8>) _b00000001  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00010001  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<16>) _b0000000000000000  ) ($bitcast ($uint<16>) _b0000000000000001  ) ($bitcast ($uint<8>) _b00000000  ) ($bitcast ($uint<8>) _b00000010  ) ) () 
    $barrier
    $call timer () (callx_xi37 ) 
    convx_xi38 := ($bitcast ($uint<64>) ($cast ($int<64>) callx_xi37 ) ) $buffering 1// bits of buffering = 64. 
    iNsTr_92 := @(global_time_val[($bitcast ($uint<32>) _b00000000000000000000000000010010  )]) $buffering 1// bits of buffering = 32. 
    ->(iNsTr_92) := convx_xi38 $buffering 1// bits of buffering = 64. 
    $barrier
    $call writeTimeBack () (call2 ) 
    $call sendOutput () () 
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
$module [timerDaemon]
$in ()
$out ()
$is
{
  $branchblock [loop]
  {
    $dopipeline $depth 7 $buffering 1
    $fullrate 
    $merge $entry $loopback 
    $phi COUNTER := 			  ($bitcast ($uint<64>) _b0 ) $on   $entry 			  nCOUNTER $on   $loopback 
    // type of target is $uint<64>
    $phi req := 			  timer_req $on   $entry ,   $loopback 
    // type of target is $uint<1>
    $endmerge
    $volatile nCOUNTER := (COUNTER + 1 ) $buffering 1
    $guard (req) timer_resp := COUNTER $buffering 1// bits of buffering = 64. 
    $while 1 
  }
}
$module [writeTime]
$in ( ind : $uint<8>  )
$out ()
$is
{
  $branchblock [body]
  {
    $call timer () (call ) 
    conv := ($bitcast ($uint<64>) ($cast ($int<64>) call ) ) $buffering 1// bits of buffering = 64. 
    idxprom := ($cast ($uint<32>) ind ) $buffering 1// bits of buffering = 32. 
    arrayidx := @(global_time_val[idxprom]) $buffering 1// bits of buffering = 32. 
    ->(arrayidx) := conv $buffering 1// bits of buffering = 64. 
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
// Memory space 0: global_time_val 
// use of gated clocks in modules 
