// Access the input tensor and write to iput pipe
$module [inputModule8]
$in(row_in ct chl_in rk pad: $uint<16> num_parts index : $uint<8>)
$out()
$is
{
	mode_3 := (rk == 3)
	$parallelblock [blk]
	{
	$call singleFetch (row_in ct pad chl_in num_parts mode_3) ()
	$branchblock [access_block]
	{
	ct_new := (ct + (pad<<1))
	row_size_total := ($bitcast ($uint<32>) (ct_new * chl_in))
	p_chl_in := ($bitcast ($uint<32>) (pad*chl_in))
	m_factor := ($bitcast ($uint<32>) (ct*chl_in))
	m2_factor := (m_factor << 1)
	m3_factor := (m2_factor+m_factor)
	addr_init := (-1*(($bitcast ($uint<32>) pad)*m_factor))

		// Pipeline for sending inputs
		$dopipeline $depth 15 $buffering 2 $fullrate
		$merge $entry $loopback
		$phi address := addr_init $on $entry n_address $on $loopback
		$phi row1 := ($bitcast ($uint<16>) 0) $on $entry n_row1 $on $loopback
		$phi mycounter := ($bitcast ($uint<32>) row_size_total) $on $entry n_mycounter $on $loopback
		$phi part_cnt := ($bitcast ($uint<8>) 0) $on $entry np_cnt $on $loopback
		$endmerge

		// $call timer (4) (time_pipe)
		next_row :=  (mycounter == 1)
		tmp_cnt := (mycounter - 1)
		n_mycounter := ($mux next_row row_size_total tmp_cnt ) 

		update_row := ($mux next_row (row1 + N_ROWS_S) row1 )
		continue_flag1 := (update_row < (row_in+2))

		mc_lt_p := ((mycounter <= p_chl_in) | (mycounter > (row_size_total - p_chl_in))) 
		n_row1 := ($mux continue_flag1 update_row 0)
		n_address := ($mux continue_flag1 (address + ($mux next_row m_factor ($mux mc_lt_p 0 1))) addr_init)
		np_cnt := (part_cnt + ($mux continue_flag1 0 1))

		p1_zero := (mc_lt_p | ((row1 < pad) | (row1 >= ((row_in + 3) - pad))))
		p2_zero := (mc_lt_p | (((row1+1) < pad) | (row1 >= ((row_in + 2)- pad))))
		//p3_zero := (mc_lt_p | (((row1+2) < pad) | (row1 >= ((row_in + 1)- pad))))
		//p4_zero := (mc_lt_p | (((row1+3) < pad) | (row1 >= (row_in - pad))))
		addr2 := (address+ m_factor)
		//addr3 := (address+ m2_factor)
		//addr4 := (address+ m3_factor)

		$guard (~p1_zero) $call readModule_convolution (index address) (val1)
		$guard (~p2_zero) $call readModule_convolution (index addr2) (val2)
		//$guard (~p3_zero) $call readModule_convolution (index addr3) (val3)
		//$guard (~p4_zero) $call readModule_convolution (index addr4) (val4)
		prev_core_ip1 := ($mux p1_zero 0 val1)
		prev_core_ip2 := ($mux p2_zero 0 val2)
		//core_ip3 := ($mux p3_zero 0 val3)
		//$guard (mode_3) core_ip4 := ($mux p4_zero 0 val4)

		$while (continue_flag1 | (part_cnt < num_parts))

	}
	}
}

// Access the input tensor and write to iput pipe
$module [inputModuleCT]
$in(row_in ct chl_in: $uint<16> num_parts index : $uint<8>)
$out()
$is
{
	$branchblock [access_block]
	{
	ct_new := ((ct<<1) + 1)

		// Pipeline for sending inputs
		$dopipeline $depth 15 $buffering 2 $fullrate
		$merge $entry $loopback
		$phi address := ($bitcast ($uint<32>) 0) $on $entry n_address $on $loopback
		$phi row1 := ($bitcast ($uint<16>) 0) $on $entry n_row1 $on $loopback
		$phi chl := ($bitcast ($uint<16>) 1) $on $entry n_chl $on $loopback
		$phi mycounter := ($bitcast ($uint<16>) 1) $on $entry n_mycounter $on $loopback
		$phi part_cnt := ($bitcast ($uint<8>) 0) $on $entry np_cnt $on $loopback
		$endmerge

		chl_done := (chl == chl_in)
		n_chl := ($mux chl_done 1 (chl+1))
		next_row :=  ((mycounter == ct_new) & chl_done)
		tmp_cnt := (mycounter + 1)
		n_mycounter := ($mux chl_done ($mux next_row 1 tmp_cnt ) mycounter)

		update_row := ($mux next_row (row1 + N_ROWS_S) row1 )
		continue_flag1 := (update_row < row_in)
		n_row1 := ($mux continue_flag1 update_row 0)

		p2_zero := (mycounter [] 0)
		n_address := ($mux continue_flag1 (address + ($mux p2_zero 0 1)) 0)
		np_cnt := (part_cnt + ($mux continue_flag1 0 1))


		$guard (~p2_zero) $call readModule_convolution (index address) (val2)
		core_ip1 := 0
		core_ip2 := ($mux p2_zero 0 val2)
		core_ip3 := 0
		

		$while (continue_flag1 | (part_cnt < num_parts))

	}
}


// Access the input tensor and write to iput pipe
$module [inputModuleConcat]
$in(row_in ct chl_in rk pad: $uint<16> num_parts index1 index2 : $uint<8>)
$out()
$is
{
	mode_3 := (rk == 3)
	$parallelblock [blk]
	{
	$call singleFetch (row_in ct pad chl_in num_parts mode_3) ()

	$branchblock [access_block]
	{
	ct_new := (ct + (pad<<1))
	row_size_total := ($bitcast ($uint<32>) (ct_new * chl_in))
	ct1 := (ct >> 1)
	rs1 := (row_size_total >> 1)
	p_chl_in := ($bitcast ($uint<32>) (pad*chl_in))
	m_factor := ($bitcast ($uint<32>) (ct1*chl_in))
	m2_factor := (m_factor << 1)
	m3_factor := (m2_factor+m_factor)
	addr_init := (-1*(($bitcast ($uint<32>) pad)*m_factor))

		// Pipeline for sending inputs
		$dopipeline $depth 15 $buffering 2 $fullrate
		$merge $entry $loopback
		$phi address1 := addr_init $on $entry n_address1 $on $loopback
		$phi address2 := addr_init $on $entry n_address2 $on $loopback
		$phi row1 := ($bitcast ($uint<16>) 0) $on $entry n_row1 $on $loopback
		$phi mycounter := ($bitcast ($uint<32>) row_size_total) $on $entry n_mycounter $on $loopback
		$phi part_cnt := ($bitcast ($uint<8>) 0) $on $entry np_cnt $on $loopback
		$endmerge

		// $call timer (4) (time_pipe)
		next_row :=  (mycounter == 1)
		tmp_cnt := (mycounter - 1)

		inp1 := (mycounter > rs1)

		update_row := ($mux next_row (row1 + N_ROWS_S) row1 )
		continue_flag1 := (update_row < (row_in+2))

		mc_lt_p := ((mycounter <= p_chl_in) | (mycounter > (row_size_total - p_chl_in))) 
		update_val := ($mux next_row m_factor ($mux mc_lt_p 0 1))
		address := ($mux inp1 address1 address2)

		p1_zero := (mc_lt_p | ((row1 < pad) | (row1 >= ((row_in + 3) - pad))))
		p2_zero := (mc_lt_p | (((row1+1) < pad) | (row1 >= ((row_in + 2)- pad))))
		//p3_zero := (mc_lt_p | (((row1+2) < pad) | (row1 >= ((row_in + 1)- pad))))
		//p4_zero := (mc_lt_p | (((row1+3) < pad) | (row1 >= (row_in - pad))))
		addr2 := (address+ m_factor)
		//addr3 := (address+ m2_factor)
		//addr4 := (address+ m3_factor)
		index := ($mux inp1 index1 index2)

		$guard (~p1_zero) $call readModule_convolution (index address) (val1)
		$guard (~p2_zero) $call readModule_convolution (index addr2) (val2)
		//$guard (~p3_zero) $call readModule_convolution (index addr3) (val3)
		//$guard (~p4_zero) $call readModule_convolution (index addr4) (val4)
		prev_core_ip1 := ($mux p1_zero 0 val1)
		prev_core_ip2 := ($mux p2_zero 0 val2)
		//core_ip3 := ($mux p3_zero 0 val3)
		//$guard (mode_3) core_ip4 := ($mux p4_zero 0 val4)

		n_mycounter := ($mux next_row row_size_total tmp_cnt ) 
		n_row1 := ($mux continue_flag1 update_row 0)
		n_address1 := ($mux inp1 ($mux continue_flag1 (address1 + update_val) addr_init) address1)
		n_address2 := ($mux inp1 address2 ($mux continue_flag1 (address2 + update_val) addr_init))
		np_cnt := (part_cnt + ($mux continue_flag1 0 1))

		$while (continue_flag1 | (part_cnt < num_parts))

	}
	}
}
