%!PS-Adobe-3.0 EPSF-3.0
%%Title: NIC_MAC_ACCL_PROC.ps
%%Creator: XCircuit v3.8 rev78
%%CreationDate: Mon Jun 19 15:39:23 2023
%%Pages: 1
%%BoundingBox: 68 68 1096 568
%%DocumentNeededResources: font Helvetica 
%%EndComments
%%BeginProlog
%
%  PostScript prolog for output from xcircuit
%  Version: 3.8
%
%  Electrical circuit (and otherwise general) drawing program
%
%  Written by Tim Edwards 8/5/93--11/1/10  (tim.edwards@multigig.com)
%  The Johns Hopkins University (1993-2004)
%  MultiGiG, Inc. (2004-2012)
%
%%BeginResource: procset XCIRCproc 3.8 0
%
% supporting definitions --- these are the primary xcircuit types.

/XCIRCsave save def
/topmat matrix currentmatrix def

/fontslant { /slant exch def [1 0 slant 1 0 0] 
    exch findfont exch makefont dup length dict /ndict exch def
    { 1 index /FID ne { ndict 3 1 roll put } { pop pop } ifelse } forall
    ndict definefont pop} def
/ul { dup type /stringtype eq showflag 1 eq and { gsave 
   currentpoint topmat setmatrix 0 0 moveto 2 index stringwidth pop (_)
   false charpath flattenpath pathbbox grestore exch pop 1 index
   sub setlinewidth exch pop currentpoint 3 -1 roll add moveto 0
   rlineto stroke moveto } if } def
/ol { dup type /stringtype eq showflag 1 eq and { gsave gsave
   currentpoint topmat setmatrix 2 index stringwidth pop 3 index
   true charpath flattenpath pathbbox grestore exch pop
   exch pop topmat setmatrix (_) true charpath pathbbox grestore
   exch pop 1 index sub setlinewidth exch pop currentpoint
   exch 4 1 roll exch sub add moveto pop 0 rlineto stroke
   moveto } if } def
/stW { gsave currentpoint newpath moveto true charpath flattenpath
	pathbbox pop exch pop sub grestore } def
/Ts {mark Tabs aload pop counttomark 1 add array astore /Tabs exch def Tabs
	0 currentpoint pop put} def
/Tbn {mark Tabs aload pop counttomark dup 2 add 1 roll cleartomark 1 sub} def
/Tb { 0 1 Tbn {Tabs exch get dup currentpoint pop lt
	{currentpoint exch pop moveto exit} {pop} ifelse } for } def
/Tf { Tbn -1 0 {Tabs exch get dup currentpoint pop gt
	{currentpoint exch pop moveto exit} {pop} ifelse } for } def
/qS { (aa) stW (a a) stW sub 4 div 0 Kn } def
/hS { qS qS } def
/pspc 0 def
/cf0 { scalefont setfont } bind def
/Kn { dup kY add /kY exch def rmoveto } bind def
/ss { /fscale fscale 0.67 mul def currentfont 0.67 cf0 0 fscale0 fscale mul
	0.33 mul neg Kn} def
/Ss { /fscale fscale 0.67 mul def currentfont 0.67 cf0 0 fscale0 fscale mul
	0.67 mul Kn } def
/ns { 0 kY neg Kn /kY 0 def /fscale 1.0 def xfont0 1.0 cf0 } def
/MR { /twidth exch def } def
/CR { ns 0 /Bline Bline fscale0 neg add def Bline moveto } def
/cf { dup type /realtype ne {1.0} if exch findfont exch kY 0 eq
	{ 40 mul dup /fscale0 exch def cf0 /xfont0 currentfont def}
	{fscale0 mul fscale mul cf0} ifelse } def
/ctmk { counttomark dup 2 add -1 roll pop } bind def
/label { gsave translate 0 0 moveto dup scale neg
	/rotval exch def /twidth 100000 def /just exch def just 384 and
	0 gt {/mshow {pop} def} {/mshow {show} def} ifelse just 16 and 0
	gt {gsave rotval rotate 0 1 dtransform gsave pagemat setmatrix
	idtransform exch grestore 1 0 dtransform gsave pagemat setmatrix
	idtransform exch grestore dup abs 1e-9 lt {pop mul 0 gt} {3 1 roll
	pop pop 0 lt} ifelse grestore {-1 /rotval rotval neg def /just just
	dup 3 and 1 ne {3 xor} if def} {1} ifelse exch -1e-9 lt {-1 /rotval
	rotval neg def /just just dup 12 and 4 ne {12 xor} if def} {1}
	ifelse scale } if /showflag 0 def /fspc pspc def /Bline 0 def /Tabs
	0 array def /fscale 1.0 def /kY 0 def gsave dup 1 add copy dup
	1 0 dtransform exch atan rotate {exch dup type /stringtype eq {gsave
        dup gsave newpath 0 0 moveto true charpath flattenpath pathbbox pop
	exch pop exch pop grestore currentpoint pop add twidth
	ge {grestore CR exch 1 add dup 2 add {CR} exch 1 roll exch} {grestore}
	ifelse true charpath flattenpath} {dup type /arraytype eq {exec} {12
	string cvs true charpath flattenpath} ifelse} ifelse} repeat exch pop
	pathbbox grestore 3 -1 roll pop 3 1 roll just 1 and 0 gt {just 2 and
	0 gt {exch pop neg fspc sub} {exch sub 0.5 mul neg} ifelse} {pop neg
	fspc add} ifelse exch Bline exch just 4 and 0 gt {just 8 and 0 gt
	{exch pop neg fspc sub} {add 0.5 mul neg} ifelse} {pop neg fspc add}
	ifelse rotval rotate Kn currentpoint translate /showflag 1 def /Bline
	0 def /Tabs 0 array def /fscale 1.0 def /kY 0 def {dup type
	/stringtype eq {mshow} {dup type /arraytype eq {exec} {12 string cvs
	mshow} ifelse} ifelse} repeat grestore endclip} def
/pinlabel { 4 index 32 and 0 ne hlevel 0 eq or { /pspc 10 def label
	/pspc 0 def } { pop pop pop pop pop {pop} repeat } ifelse } def
/pinglobal { pinlabel } def
/infolabel { pinlabel } def
/graphic { gsave 4 index cvx exec /DataSource get resetfile translate 0 0
	moveto neg rotate dup scale cvx exec image grestore endclip} def

/scb { setrgbcolor } bind def  /sce { defColor aload pop scb } bind def
/cRedef {/defColor currentcolor 3 array astore def} def
/begingate {dup type /dicttype ne {1 dict} if begin	% default params
	dup type /dicttype ne {1 dict} if begin		% instanced params
	/hlevel hlevel 1 add def /defColor currentcolor sce 3 array astore
	def gsave sce translate 0 0 moveto neg rotate dup type /nametype
	eq not { dup abs currentlinewidth exch div setlinewidth } { pop }
	ifelse dup abs scale clipped 1 and 1 eq {/clipped clipped 1 add def}
	if} bind def
/endgate { /hlevel hlevel 1 sub def grestore defColor aload pop cRedef
	scb end end endclip} bind def

/hlevel 0 def
/endclip {clipped 1 and 1 eq {grestore /clipped clipped 1 sub def} if} def
/tmpa [1 0 0 1 0 0] def
/gar {8 8 true tmpa {<c0 c0 00 00 0c 0c 00 00>} imagemask} bind
{8 8 true tmpa {<30 70 60 02 03 07 06 20>} imagemask} bind
{8 8 true tmpa {<0c 1e 1e 0c c0 e1 e1 c0>} imagemask} bind
{8 8 true tmpa {<0f 0f 0f 0f f0 f0 f0 f0>} imagemask} bind
{8 8 true tmpa {<3f f3 e1 e1 f3 3f 1e 1e>} imagemask} bind
{8 8 true tmpa {<df cf 8f 9f fd fc f8 f9>} imagemask} bind
{8 8 true tmpa {<ff 3f 3f ff ff f3 f3 ff>} imagemask} bind 7 array astore def
/ppaint { gsave clip tmpa dup setmatrix pathbbox neg exch neg 4 2 roll
  neg 4 -1 roll 2 copy gt {exch} if 8 div ceiling 8 mul 4 2 roll neg 2 copy
  gt {exch} if 8 div ceiling 8 mul 3 -1 roll -8 5 -1 roll
  { 3 index exch 5 exch put dup -8 3 index { 3 index
  exch 4 exch put 3 index exec } for } for pop pop pop pop grestore } bind def
/setstyles {
  currentlinewidth mul setlinewidth /style exch def style 2048 and 0 gt
  clipped 1 and 0 eq and {clip newpath /clipped clipped 1 add def} {
  style 1 and 0 gt not {closepath} if
  style 1024 and 0 gt {2 setlinecap 0 setlinejoin} if
  style 2 and 0 gt {currentlinewidth 4 mul dup 2 array astore 0 setdash} if
  style 4 and 0 gt {0.5 currentlinewidth 4 mul 2 array astore 0 setdash} if
  gsave style 16 and 0 gt { style 224 and -5 bitshift style 256 and 0 gt {
  7 exch sub 8 div dup 1 exch sub currentrgbcolor 3 array astore
  {3 copy mul add 4 1 roll pop} forall pop pop setrgbcolor eofill}
  {dup 7 lt {gar exch get ppaint} {pop eofill} ifelse} ifelse}
  {style 256 and 0 gt {1 setgray eofill} if} ifelse grestore style 8 and 0 gt 
  style 512 eq or {newpath} {stroke} ifelse grestore endclip} ifelse} def     

/addtoy {exch dup dup 2 mul 3 add 1 roll -1 1 { 4 1 roll dup 4 1 roll add
	4 -1 roll 2 mul 1 add index 2 mul 2 add 2 roll} for pop} def
/addtoy1 {1 exch addtoy pop} def
/addtoy3 {3 exch addtoy pop} def
/addtoy4 {4 exch addtoy pop} def
/addtox {exch dup dup 2 mul 3 add 1 roll -1 1 { 4 1 roll dup 4 1 roll 3 -1 roll
	add exch 4 -1 roll 2 mul 1 add index 2 mul 2 add 2 roll} for pop} def
/addtox1 {1 exch addtox pop} def
/addtox3 {3 exch addtox pop} def
/addtox4 {4 exch addtox pop} def
/polygon { gsave /num exch def moveto num 1 sub {lineto} repeat setstyles } def
/xcarc   { gsave newpath arc setstyles } def
/elb { matrix currentmatrix 7 -1 roll 7 -1 roll translate 5 1 roll 4 -1 roll
	3 index div 1 scale } def
/ele { 0 4 1 roll 0 4 1 roll } bind def
/ellipse { gsave elb newpath ele arc setmatrix setstyles } def
/pellip  { elb ele arc setmatrix } def
/nellip  { elb ele arcn setmatrix } def
/spline  { gsave moveto curveto setstyles } def
/polyc   { {lineto} repeat } bind def
/beginpath { gsave moveto } bind def
/endpath { setstyles } bind def
/bop	 { 1 setlinecap 2 setlinejoin 6 setmiterlimit 0 0 0 scb cRedef
	/clipped 0 def} def
/psinsertion {/PSobj save def /showpage {} def /setpagedevice {pop} def bop
	rotate translate dup scale} def
/end_insert {PSobj restore} def
/setpagemat {/pagemat matrix currentmatrix def} def
/inchscale  {setpagemat 0.375 mul dup scale} def
/cmscale    {setpagemat 0.35433071 mul dup scale} def

%%EndResource
%%EndProlog

% XCircuit output starts here.

%%BeginSetup

/generic::arrowhead {
% nonetwork
begingate
8 -28 beginpath
3 -18 3 -15 0 0 curveto
-3 -15 -3 -18 -8 -28 curveto
-2 -26 2 -26 8 -28 curveto
249 
1.000 endpath
endgate
} def


%%EndSetup

%%Page: NIC_MAC_ACCL_PROC 1
%%PageOrientation: Portrait
/pgsave save def bop
1.0000 inchscale
2.6000 setlinewidth 2144 1088 translate

0 1.500 -1376 336 -1376 -816 704 -816 704 336 4 polygon
0 1.500 -1840 -112 -1840 -272 -1616 -272 -1616 -112 4 polygon
1 1.500 -1840 -272 -1872 -336 -1584 -336 -1616 -272 4 polygon
0 1.000 -512 304 -512 208 -256 208 -256 304 4 polygon
0 1.000 -512 192 -512 96 -256 96 -256 192 4 polygon
0 1.000 -128 304 -128 96 160 96 160 304 4 polygon
0 1.000 -192 -176 -192 -480 256 -480 256 -176 4 polygon
0 1.000 -432 -576 -432 -784 496 -784 496 -576 4 polygon
0 1.000 -800 16 -800 -256 -544 -256 -544 16 4 polygon
0 1.000 -1312 -128 -1312 -320 -1152 -320 -1152 -128 4 polygon
0 1.000 384 -64 384 -384 672 -384 672 -64 4 polygon
0 1.000 -800 -288 -800 -384 -544 -384 -544 -288 4 polygon
1 1.000 -928 -80 -1024 -144 -1024 -304 -928 -368 -928 -80 5 polygon
1 1.000 -416 -96 -416 -368 -320 -320 -320 -144 -416 -96 5 polygon
1 1.000 -928 -160 -912 -128 -912 -144 -816 -144 -816 -128 -800 -160 -816 -192 
-816 -176 -912 -176 -912 -192 -928 -160 11 polygon
1 1.000 -928 -336 -912 -304 -912 -320 -816 -320 -816 -304 -800 -336 -816 -368 
-816 -352 -912 -352 -912 -368 -928 -336 11 polygon
1 1.000 -1152 -224 -1136 -192 -1136 -208 -1040 -208 -1040 -192 -1024 -224 -1040 
-256 -1040 -240 -1136 -240 -1136 -256 -1152 -224 11 polygon
(Programmer) {/Helvetica cf} 2 16 0 1.000 -784 -368 label
(Network) {/Helvetica cf} 2 16 0 1.000 -784 -80 label
(Interface) {/Helvetica cf} 2 16 0 1.000 -768 -128 label
(Controller) {/Helvetica cf} 2 16 0 1.000 -752 -176 label
1 1.000 -368 -336 -368 -432 2 polygon
1 1.000 -976 -320 -976 -416 2 polygon
(Memory Switch) {/Helvetica cf} 2 16 0 1.000 -112 -368 label
(Debug) {/Helvetica cf} 2 16 0 1.000 -496 240 label
(UART) {/Helvetica cf} 2 16 0 1.000 -368 240 label
(Serial UART) {/Helvetica cf} 2 16 0 1.000 -496 112 label
(AJIT Processor) {/Helvetica cf} 2 16 0 1.000 -128 208 label
(1x1x32) {/Helvetica cf} 2 16 0 1.000 -48 128 label
(AI/ML) {/Helvetica cf} 2 16 0 1.000 432 -224 label
(Engine) {/Helvetica cf} 2 16 0 1.000 480 -272 label
(Memory) {/Helvetica cf} 2 16 0 1.000 -96 -656 label
(24MB) {/Helvetica cf} 2 16 0 1.000 -80 -720 label
(Xilinx's) {/Helvetica cf} 2 16 0 1.000 -1296 -160 label
(MAC) {/Helvetica cf} 2 16 0 1.000 -1296 -208 label
(Design) {/Helvetica cf} 2 16 0 1.000 -1296 -304 label
1 1.000 -368 -432 -976 -432 -976 -416 3 polygon
1 1.000 -976 -432 -1456 -432 2 polygon
(Prog) {/Helvetica cf} 2 16 0 1.000 -1520 -464 label
(1) {/Helvetica cf} 2 16 0 1.000 -960 -336 label
(0) {/Helvetica cf} 2 16 0 1.000 -960 -176 label
(0) {/Helvetica cf} 2 16 0 1.000 -400 -176 label
(1) {/Helvetica cf} 2 16 0 1.000 -416 -336 label
1.000 360 -976 -304 generic::arrowhead
1.000 360 -368 -320 generic::arrowhead
1 1.000 -256 256 -240 288 -240 272 -144 272 -144 288 -128 256 -144 224 -144 240 
-240 240 -240 224 -256 256 11 polygon
1 1.000 -256 144 -240 176 -240 160 -144 160 -144 176 -128 144 -144 112 -144 128 
-240 128 -240 112 -256 144 11 polygon
0.000 0.000 1.000 scb
1 1.000 272 -64 256 -96 272 -128 272 -112 368 -112 368 -128 384 -96 368 -64 368 
-80 272 -80 272 -64 11 polygon
1 1.000 -544 -32 -528 0 -528 -16 -208 -16 -208 0 -192 -32 -208 -64 -208 -48 
-528 -48 -528 -64 -544 -32 11 polygon
(AFB) {/Helvetica cf} 2 16 0 1.000 -448 -48 label
(AFB) {/Helvetica cf} 2 16 0 1.000 272 -112 label
sce
1 1.000 -1600 -288 -1440 208 -1312 208 3 polygon
1 1.000 -1232 256 -1184 256 -1184 256 -512 256 4 polygon
0 1.000 -1312 272 -1312 144 -1232 144 -1232 272 4 polygon
1 1.000 -1232 160 -1168 160 -1168 160 -512 160 4 polygon
1 1.000 -1584 -304 -1536 -224 -1312 -224 3 polygon
1.000 90 -512 256 generic::arrowhead
1.000 90 -512 160 generic::arrowhead
-1.000 270 -1232 256 generic::arrowhead
-1.000 270 -1232 160 generic::arrowhead
1.000 90 -1296 208 generic::arrowhead
1.000 195 -1600 -288 generic::arrowhead
1.000 210 -1584 -304 generic::arrowhead
1.000 90 -1312 -224 generic::arrowhead
(MMAP) {/Helvetica cf} 2 16 0 1.000 -720 -336 label
(VCU_128 FPGA) {/Helvetica cf} 2 16 0 1.500 -1328 -752 label
(Laptop) {/Helvetica cf} 2 16 0 1.500 -1856 -400 label
(Ethernet) {/Helvetica cf} 2 16 0 1.000 -1536 -288 label
(UART) {/Helvetica cf} 2 16 0 1.000 -1504 224 label
2 1.000 -1952 416 -1952 -896 768 -896 768 416 4 polygon
1.000 0.000 0.000 scb
1 1.000 -320 -224 -304 -192 -304 -208 -208 -208 -208 -192 -192 -224 -208 -256 
-208 -240 -304 -240 -304 -256 -320 -224 11 polygon
1 1.000 -544 -160 -528 -128 -528 -144 -432 -144 -432 -128 -416 -160 -432 -192 
-432 -176 -528 -176 -528 -192 -544 -160 11 polygon
1 1.000 -544 -336 -528 -304 -528 -320 -432 -320 -432 -304 -416 -336 -432 -368 
-432 -352 -528 -352 -528 -368 -544 -336 11 polygon
1 1.000 256 -336 272 -304 272 -320 368 -320 368 -304 384 -336 368 -368 368 -352 
272 -352 272 -368 256 -336 11 polygon
1 1.000 16 -480 -16 -496 0 -496 0 -560 -16 -560 16 -576 48 -560 32 -560 32 -496 
48 -496 16 -480 11 polygon
1 1.000 16 96 -16 80 0 80 0 16 -16 16 16 0 48 16 32 16 32 80 48 80 16 96 11 
polygon
(ACB) {/Helvetica cf} 2 16 0 1.000 -512 -176 label
(ACB) {/Helvetica cf} 2 16 0 1.000 -512 -352 label
(ACB) {/Helvetica cf} 2 16 0 1.000 -304 -240 label
(ACB) {/Helvetica cf} 2 16 0 1.000 272 -256 label
(ACB) {/Helvetica cf} 2 16 90 1.000 64 80 label
(ACB) {/Helvetica cf} 2 16 90 1.000 64 -496 label
sce
(IP) {/Helvetica cf} 2 16 0 1.000 -1248 -256 label
0 1.000 -160 0 -160 -128 256 -128 256 0 4 polygon
pgsave restore showpage

%%Trailer
XCIRCsave restore
%%EOF
