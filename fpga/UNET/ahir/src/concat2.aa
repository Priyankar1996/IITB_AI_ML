$pipe  Concat2_input_pipe : $uint<16>  $depth 2 

$module [concat2]
$in ()
$out ()
$is
{
  $branchblock [body]
  {
	input1_dim0 := Concat2_input_pipe
    input1_dim1 := Concat2_input_pipe
    input1_dim2 := Concat2_input_pipe

    input2_dim0 := Concat2_input_pipe
    input2_dim1 := Concat2_input_pipe
    input2_dim2 := Concat2_input_pipe
    out_dim0  := Concat2_input_pipe
    out_dim1 := Concat2_input_pipe
    out_dim2 := Concat2_input_pipe

    input1_count := (input1_dim2 >> 3)
	input2_count := (input2_dim2 >> 3)
    output_size := ($bitcast ($uint<32>) (out_dim0 * (out_dim1 *out_dim2)));
     
    $volatile out_concat := (output_size >> ($bitcast ($uint<32>) _b00000000000000000000000000000011  )) $buffering 1
    $volatile add_out_init := ($bitcast ($uint<32>) 0  ) $buffering 1
    $volatile add_inp1_init := ($bitcast ($uint<16>) 0  ) $buffering 1
    $volatile add_inp2_init := ($bitcast ($uint<16>) 0  ) $buffering 1
    $volatile count_inp1_init := ($bitcast ($uint<16>) 0  ) $buffering 1
    $volatile total_size := (input1_count + input2_count) $buffering 1
    $dopipeline $depth 15 $buffering 1
    $fullrate 
    $merge $entry $loopback 
    $phi add_out := 			  add_out_init $on   $entry 			  next_add_out $on   $loopback 
    // type of target is $uint<32>
    $phi add_inp1 := 			  add_inp1_init $on   $entry 			  next_add_inp1 $on   $loopback 
    // type of target is $uint<16>
    $phi add_inp2 := 			  add_inp2_init $on   $entry 			  next_add_inp2 $on   $loopback 
    // type of target is $uint<16>
    $phi count_inp1 := 			  count_inp1_init $on   $entry 			  next_count_inp1 $on   $loopback 
    // type of target is $uint<16>
    $endmerge
    $volatile cmp := (count_inp1 < input1_count) $buffering 1
    iv1 := @(CE2_2[($bitcast ($uint<32>) 0  )][($bitcast ($uint<64>) add_inp1 )]) $buffering 1// bits of buffering = 32. 
    cmp_816_delayed_6_0 := cmp $buffering 6 $cut_through // bits of buffering = 6. 
    $guard (cmp_816_delayed_6_0) i1 := ->(iv1) $buffering 1// bits of buffering = 64. 
    iv2 := @(T_2[($bitcast ($uint<32>) 0  )][($bitcast ($uint<64>) add_inp2 )]) $buffering 1// bits of buffering = 32. 
    cmp_829_delayed_6_0 := cmp $buffering 6 $cut_through // bits of buffering = 6. 
    $guard (~cmp_829_delayed_6_0) i2 := ->(iv2) $buffering 1// bits of buffering = 64. 
    ov := @(CO2[($bitcast ($uint<32>) 0  )][($bitcast ($uint<64>) add_out )]) $buffering 1// bits of buffering = 32. 
    ov_842_delayed_7_0 := ov $buffering 7 $cut_through // bits of buffering = 224. 
    cmp_844_delayed_12_0 := cmp $buffering 12 $cut_through // bits of buffering = 12. 
    ->(ov_842_delayed_7_0) := ( $mux cmp_844_delayed_12_0 i1  i2 )  $buffering 1// bits of buffering = 64. 
    SUB_u16_u16_853_853_delayed_1_0 := (total_size - 1 ) $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile my_flag := (count_inp1 == SUB_u16_u16_853_853_delayed_1_0) $buffering 1
    $volatile next_count_inp1 := ( $mux my_flag 0   (count_inp1 + 1 ) )  $buffering 1
    $volatile next_add_inp1 := ( $mux cmp (add_inp1 + 1 )  add_inp1 )  $buffering 1
    $volatile next_add_inp2 := ( $mux cmp add_inp2  (add_inp2 + 1 ) )  $buffering 1
    $volatile next_add_out := (add_out + 1 ) $buffering 1
    SUB_u32_u32_891_891_delayed_1_0 := (out_concat - 1 ) $buffering 1 $cut_through // bits of buffering = 32. 
    $volatile continue_flag := (( ~ my_flag ) | (add_out < SUB_u32_u32_891_891_delayed_1_0)) $buffering 1
    $while continue_flag
    $barrier
    $endmerge
  }
}

