$module [ct_core] $in(inp_d0:$uint<16> inp_d1:$uint<16> inp_d2:$uint<16> ker_d1:$uint<16> ker_d2:$uint<16> out_d0:$uint<16> out_d1:$uint<16> out_d2:$uint<16> stride:$uint<16> padding:$uint<16> index1:$uint<8> index3:$uint<8>) $out(done2:$uint<8>) $is
{
    $branchblock[body]
    {
    out_d232 := ($cast ($uint<32>) inp_d2)
    out_int := (out_d0 * out_d1)
    out_int1 := ($cast ($uint<32>) out_int)
    output_size := (out_int1 * out_d232)
    
    cmp264448 := (output_size > ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 )  )
    $if cmp264448 $then  $place [forx_xend250_bbx_xnph450] $else $place [forx_xend250_forx_xend273] $endif 
    //begin: basic-block bbx_xnph450
    $merge forx_xend250_bbx_xnph450
    $endmerge
    tmp476 := (output_size >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
    // compare instruction
    tmp477 := (tmp476 > ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  )
    tmp476x_xop := (tmp476 + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    iNsTr_52 := ($cast ($uint<32>) tmp476x_xop)
    xx_xop513 := (iNsTr_52 + ( $bitcast ($uint<32> ) 1 ) )
    tmp481 := ( $mux tmp477 xx_xop513 ( $bitcast ($uint<32> ) 1 ) )
    $place [bbx_xnph451_forx_xbody266]
    //begin: basic-block forx_xbody266
    $merge bbx_xnph451_forx_xbody266 forx_xbody266_forx_xbody266
    $phi indvar469 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) 0 ) ) $on bbx_xnph451_forx_xbody266 ( $cast ($uint<32>) indvarx_xnext470) $on forx_xbody266_forx_xbody266 
    $endmerge
    $call writeModule_convTranspose (index3 indvar469 ($bitcast ($uint<64>) 0)) (done) 
    indvarx_xnext470 := (indvar469 + ( $bitcast ($uint<32> ) 1 ) )
    // compare instruction
    exitcond := (indvarx_xnext470 == tmp481 )
    $if exitcond $then  $place [forx_xbody266_forx_xend273x_xloopexit] $else $place [forx_xbody266_forx_xbody266] $endif 
    //begin: basic-block forx_xend273x_xloopexit
    $merge forx_xbody266_forx_xend273x_xloopexit
    $endmerge
    $place [forx_xend273x_xloopexit_forx_xend273]
    //begin: basic-block forx_xend273
    $merge forx_xend250_forx_xend273 forx_xend273x_xloopexit_forx_xend273
    $endmerge


    //BEGINNING OF CONVTRANSPOSE MODULE
    $volatile input_dim0_init := ($bitcast ($uint<16>) 0)
    $volatile input_dim1_init := ($bitcast ($uint<16>) 0)
    $volatile input_dim2_init := ($bitcast ($uint<16>) 0)
    $volatile pad := (padding + 1)
    $volatile add_dest_dim0_init := (ker_d1 - pad)
    $volatile add_dest_dim1_init := (ker_d2 - pad)
    $volatile add_src_init := ($bitcast ($uint<32>) 0) 
    
    $dopipeline $depth 15 $buffering 1 $fullrate
    $merge $entry $loopback
    $phi input_dim0 := input_dim0_init $on $entry next_input_dim0 $on $loopback
    $phi input_dim1 := input_dim1_init $on $entry next_input_dim1 $on $loopback
    $phi input_dim2 := input_dim2_init $on $entry next_input_dim2 $on $loopback
    $phi add_dest_dim0 := add_dest_dim0_init $on $entry next_add_dest_dim0 $on $loopback
    $phi add_dest_dim1 := add_dest_dim1_init $on $entry next_add_dest_dim1 $on $loopback
    $phi add_src := add_src_init $on $entry next_add_src $on $loopback
    $endmerge
    
    $volatile nao := (out_d1 * add_dest_dim0)
    $volatile nao1 := (nao + add_dest_dim1)
    $volatile nao2 := (out_d2 * nao1)
    $volatile nao3 := (input_dim2 + nao2)
    $volatile add_out := (nao3 >> 3)

    $call readModule_convTranspose (index1 ($bitcast ($uint<32>)add_src)) (i1)
    $call writeModule_convTranspose (index3 ($bitcast ($uint<32>)add_out) i1) (done1)

    dim2_limit := (inp_d2 - 8)
    
    cmp_dim2 := (input_dim2 < dim2_limit)
    cmp_dim1 := (input_dim1 == (inp_d1-1))
    cmp_dim0 := ((~cmp_dim2) & cmp_dim1)
    
    nid2_true := (input_dim2 + 8)
    nid2_false := (input_dim1 + 1) 
    nid2_false1 := (add_dest_dim1 + stride)
    
    nid1_true := (input_dim0 + 1)
    nid1_true1 := (add_dest_dim0 + stride)
    nid1_true2 := (stride * inp_d1)
    nid1_true3 := (nid1_true2 - stride)
    nid1_true4 := (add_dest_dim1 - nid1_true3)
    
    next_add_src := (add_src + 1)
    next_add_dest_dim1 := ($mux (~cmp_dim2) ($mux cmp_dim1 nid1_true4 nid2_false1) add_dest_dim1)
    next_add_dest_dim0 := ($mux cmp_dim0 nid1_true1 add_dest_dim0)
    next_input_dim2 := ($mux cmp_dim2 nid2_true 0)
    next_input_dim1 := ($mux (~cmp_dim2) ($mux cmp_dim1 0 nid2_false) input_dim1)
    next_input_dim0 := ($mux cmp_dim0 nid1_true input_dim0)

    dim0_end := (input_dim0 < (inp_d0-1))
    continue_flag := (dim0_end | (~cmp_dim0))
    $while continue_flag
    done2 := index1
    //ENDING OF CONVTRANSPOSE MODULE
    }
} 

