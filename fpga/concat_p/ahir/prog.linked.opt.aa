$record [structx_x__SizedTensor_16K]  < $array[16384] $of $uint<64> > 
$pipe  Concat_input_pipe : $uint<8>  $depth 2 
// can point into 
$pipe  Concat_output_pipe : $uint<8>  $depth 2 
// can point into 
$storage  concat_output :  structx_x__SizedTensor_16K  // memory space index = 0  base address = 0  word size = 64
// can point into 
$storage  input_1 :  structx_x__SizedTensor_16K  // memory space index = 1  base address = 0  word size = 64
// can point into 
$storage  input_2 :  structx_x__SizedTensor_16K  // memory space index = 2  base address = 0  word size = 64
// can point into 
$noblock $pipe  timer_req : $uint<1>  $depth 1 
// can point into 
$pipe  timer_resp : $uint<64>  $depth 1 
// can point into 
$module [timer]
$in ()
$out ( T : $uint<64>  )
$is
{
  timer_req := ($bitcast ($uint<1>) _b1  ) $buffering 1// bits of buffering = 1. 
  T := timer_resp $buffering 1// bits of buffering = 64. 
}
$module [concat]
$in ()
$out ()
$is
{
  $branchblock [body]
  {
    call := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv1 := ($cast ($uint<16>) call ) $buffering 1// bits of buffering = 16. 
    $volatile shl := (conv1 << ($bitcast ($uint<16>) _b0000000000001000  )) $buffering 1
    call2 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv3 := ($cast ($uint<16>) call2 ) $buffering 1// bits of buffering = 16. 
    $volatile i0_d0 := (shl | conv3) $buffering 1
    call5 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv8 := ($cast ($uint<16>) call5 ) $buffering 1// bits of buffering = 16. 
    $volatile shl9 := (conv8 << ($bitcast ($uint<16>) _b0000000000001000  )) $buffering 1
    call10 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv11 := ($cast ($uint<16>) call10 ) $buffering 1// bits of buffering = 16. 
    $volatile i0_d1 := (shl9 | conv11) $buffering 1
    call14 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv17 := ($cast ($uint<16>) call14 ) $buffering 1// bits of buffering = 16. 
    $volatile shl18 := (conv17 << ($bitcast ($uint<16>) _b0000000000001000  )) $buffering 1
    call19 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv20 := ($cast ($uint<16>) call19 ) $buffering 1// bits of buffering = 16. 
    $volatile i0_d2 := (shl18 | conv20) $buffering 1
    call23 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv26 := ($cast ($uint<16>) call23 ) $buffering 1// bits of buffering = 16. 
    $volatile shl27 := (conv26 << ($bitcast ($uint<16>) _b0000000000001000  )) $buffering 1
    call28 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv29 := ($cast ($uint<16>) call28 ) $buffering 1// bits of buffering = 16. 
    $volatile i1_d0 := (shl27 | conv29) $buffering 1
    call32 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv35 := ($cast ($uint<16>) call32 ) $buffering 1// bits of buffering = 16. 
    $volatile shl36 := (conv35 << ($bitcast ($uint<16>) _b0000000000001000  )) $buffering 1
    call37 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv38 := ($cast ($uint<16>) call37 ) $buffering 1// bits of buffering = 16. 
    $volatile i1_d1 := (shl36 | conv38) $buffering 1
    call41 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv44 := ($cast ($uint<16>) call41 ) $buffering 1// bits of buffering = 16. 
    $volatile shl45 := (conv44 << ($bitcast ($uint<16>) _b0000000000001000  )) $buffering 1
    call46 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv47 := ($cast ($uint<16>) call46 ) $buffering 1// bits of buffering = 16. 
    $volatile i1_d2 := (shl45 | conv47) $buffering 1
    call50 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv53 := ($cast ($uint<32>) call50 ) $buffering 1// bits of buffering = 32. 
    $volatile shl54 := (conv53 << ($bitcast ($uint<32>) _b00000000000000000000000000001000  )) $buffering 1
    call55 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv56 := ($cast ($uint<32>) call55 ) $buffering 1// bits of buffering = 32. 
    $volatile o0 := (shl54 | conv56) $buffering 1
    call59 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv62 := ($cast ($uint<32>) call59 ) $buffering 1// bits of buffering = 32. 
    $volatile shl63 := (conv62 << ($bitcast ($uint<32>) _b00000000000000000000000000001000  )) $buffering 1
    call64 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv65 := ($cast ($uint<32>) call64 ) $buffering 1// bits of buffering = 32. 
    $volatile o1 := (shl63 | conv65) $buffering 1
    call68 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv71 := ($cast ($uint<32>) call68 ) $buffering 1// bits of buffering = 32. 
    $volatile shl72 := (conv71 << ($bitcast ($uint<32>) _b00000000000000000000000000001000  )) $buffering 1
    call73 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv74 := ($cast ($uint<32>) call73 ) $buffering 1// bits of buffering = 32. 
    $volatile o2 := (shl72 | conv74) $buffering 1
    $volatile count1 := (i0_d1 * i0_d2) $buffering 1
    inp1_mul := ($cast ($uint<32>) count1 ) $buffering 1// bits of buffering = 32. 
    inp0_d0 := ($cast ($uint<32>) i0_d0 ) $buffering 1// bits of buffering = 32. 
    $volatile input1_size := (inp1_mul * inp0_d0) $buffering 1
    $volatile count2 := (i1_d1 * i1_d2) $buffering 1
    inp2_mul := ($cast ($uint<32>) count2 ) $buffering 1// bits of buffering = 32. 
    inp1_d0 := ($cast ($uint<32>) i1_d0 ) $buffering 1// bits of buffering = 32. 
    $volatile input2_size := (inp2_mul * inp1_d0) $buffering 1
    $volatile mul100 := (o1 * o2) $buffering 1
    $volatile output_size := (mul100 * o0) $buffering 1
    $volatile input1_count := (count1 >> ($bitcast ($uint<16>) _b0000000000000011  )) $buffering 1
    $volatile input2_count := (count2 >> ($bitcast ($uint<16>) _b0000000000000011  )) $buffering 1
    $volatile cmp467 := (input1_size > ($bitcast ($uint<32>) _b00000000000000000000000000000111  )) $buffering 1
    $if cmp467 $then 
    $place[entry_bbx_xnph469]
    $else 
    $place[entry_forx_xcond171x_xpreheader]
    $endif
    $merge forx_xbody_forx_xcond171x_xpreheaderx_xloopexit 
    $endmerge
    $place[forx_xcond171x_xpreheaderx_xloopexit_forx_xcond171x_xpreheader]
    $merge entry_forx_xcond171x_xpreheader forx_xcond171x_xpreheaderx_xloopexit_forx_xcond171x_xpreheader 
    $endmerge
    $volatile cmp175463 := (input2_size > ($bitcast ($uint<32>) _b00000000000000000000000000000111  )) $buffering 1
    $if cmp175463 $then 
    $place[forx_xcond171x_xpreheader_bbx_xnph465]
    $else 
    $place[forx_xcond171x_xpreheader_forx_xend231]
    $endif
    $merge entry_bbx_xnph469 
    $endmerge
    $volatile tmp495 := (input1_size >> ($bitcast ($uint<32>) _b00000000000000000000000000000011  )) $buffering 1
    $volatile tmp496 := (tmp495 > ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
    $volatile tmp495x_xop := (tmp495 + ($bitcast ($uint<32>) _b11111111111111111111111111111111  )) $buffering 1
    iNsTr_19 := ($cast ($uint<64>) tmp495x_xop ) $buffering 1// bits of buffering = 64. 
    $volatile xx_xop503 := (iNsTr_19 + ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )) $buffering 1
    $volatile tmp500 := ( $mux tmp496 xx_xop503  ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  ) )  $buffering 1
    $place[bbx_xnph469_forx_xbody]
    $merge bbx_xnph469_forx_xbody forx_xbody_forx_xbody 
    $phi indvar489 := 			  ($cast ($uint<64>) ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ) ) $on   bbx_xnph469_forx_xbody 			  ($cast ($uint<64>) indvarx_xnext490 ) $on   forx_xbody_forx_xbody 
    // type of target is $uint<64>
    $endmerge
    arrayidx := @(input_1[($bitcast ($uint<32>) _b00000000000000000000000000000000  )][indvar489]) $buffering 1// bits of buffering = 32. 
    call124 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv125 := ($cast ($uint<64>) call124 ) $buffering 1// bits of buffering = 64. 
    $volatile shl127 := (conv125 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    call128 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv130 := ($cast ($uint<64>) call128 ) $buffering 1// bits of buffering = 64. 
    $volatile add131 := (shl127 | conv130) $buffering 1
    $volatile shl133 := (add131 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    call134 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv136 := ($cast ($uint<64>) call134 ) $buffering 1// bits of buffering = 64. 
    $volatile add137 := (shl133 | conv136) $buffering 1
    $volatile shl139 := (add137 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    call140 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv142 := ($cast ($uint<64>) call140 ) $buffering 1// bits of buffering = 64. 
    $volatile add143 := (shl139 | conv142) $buffering 1
    $volatile shl145 := (add143 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    call146 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv148 := ($cast ($uint<64>) call146 ) $buffering 1// bits of buffering = 64. 
    $volatile add149 := (shl145 | conv148) $buffering 1
    $volatile shl151 := (add149 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    call152 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv154 := ($cast ($uint<64>) call152 ) $buffering 1// bits of buffering = 64. 
    $volatile add155 := (shl151 | conv154) $buffering 1
    $volatile shl157 := (add155 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    call158 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv160 := ($cast ($uint<64>) call158 ) $buffering 1// bits of buffering = 64. 
    $volatile add161 := (shl157 | conv160) $buffering 1
    $volatile shl163 := (add161 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    call164 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv166 := ($cast ($uint<64>) call164 ) $buffering 1// bits of buffering = 64. 
    $volatile add167 := (shl163 | conv166) $buffering 1
    ->(arrayidx) := add167 $buffering 1// bits of buffering = 64. 
    $volatile indvarx_xnext490 := (indvar489 + ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )) $buffering 1
    $volatile exitcond2 := (indvarx_xnext490 == tmp500) $buffering 1
    $if exitcond2 $then 
    $place[forx_xbody_forx_xcond171x_xpreheaderx_xloopexit]
    $else 
    $place[forx_xbody_forx_xbody]
    $endif
    $merge forx_xcond171x_xpreheader_bbx_xnph465 
    $endmerge
    $volatile tmp482 := (input2_size >> ($bitcast ($uint<32>) _b00000000000000000000000000000011  )) $buffering 1
    $volatile tmp483 := (tmp482 > ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
    $volatile tmp482x_xop := (tmp482 + ($bitcast ($uint<32>) _b11111111111111111111111111111111  )) $buffering 1
    iNsTr_32 := ($cast ($uint<64>) tmp482x_xop ) $buffering 1// bits of buffering = 64. 
    $volatile xx_xop502 := (iNsTr_32 + ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )) $buffering 1
    $volatile tmp487 := ( $mux tmp483 xx_xop502  ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  ) )  $buffering 1
    $place[bbx_xnph465_forx_xbody177]
    $merge bbx_xnph465_forx_xbody177 forx_xbody177_forx_xbody177 
    $phi indvar476 := 			  ($cast ($uint<64>) ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ) ) $on   bbx_xnph465_forx_xbody177 			  ($cast ($uint<64>) indvarx_xnext477 ) $on   forx_xbody177_forx_xbody177 
    // type of target is $uint<64>
    $endmerge
    arrayidx227 := @(input_2[($bitcast ($uint<32>) _b00000000000000000000000000000000  )][indvar476]) $buffering 1// bits of buffering = 32. 
    call180 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv181 := ($cast ($uint<64>) call180 ) $buffering 1// bits of buffering = 64. 
    $volatile shl183 := (conv181 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    call184 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv186 := ($cast ($uint<64>) call184 ) $buffering 1// bits of buffering = 64. 
    $volatile add187 := (shl183 | conv186) $buffering 1
    $volatile shl189 := (add187 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    call190 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv192 := ($cast ($uint<64>) call190 ) $buffering 1// bits of buffering = 64. 
    $volatile add193 := (shl189 | conv192) $buffering 1
    $volatile shl195 := (add193 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    call196 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv198 := ($cast ($uint<64>) call196 ) $buffering 1// bits of buffering = 64. 
    $volatile add199 := (shl195 | conv198) $buffering 1
    $volatile shl201 := (add199 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    call202 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv204 := ($cast ($uint<64>) call202 ) $buffering 1// bits of buffering = 64. 
    $volatile add205 := (shl201 | conv204) $buffering 1
    $volatile shl207 := (add205 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    call208 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv210 := ($cast ($uint<64>) call208 ) $buffering 1// bits of buffering = 64. 
    $volatile add211 := (shl207 | conv210) $buffering 1
    $volatile shl213 := (add211 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    call214 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv216 := ($cast ($uint<64>) call214 ) $buffering 1// bits of buffering = 64. 
    $volatile add217 := (shl213 | conv216) $buffering 1
    $volatile shl219 := (add217 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    call220 := Concat_input_pipe $buffering 1// bits of buffering = 8. 
    conv222 := ($cast ($uint<64>) call220 ) $buffering 1// bits of buffering = 64. 
    $volatile add223 := (shl219 | conv222) $buffering 1
    ->(arrayidx227) := add223 $buffering 1// bits of buffering = 64. 
    $volatile indvarx_xnext477 := (indvar476 + ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )) $buffering 1
    $volatile exitcond := (indvarx_xnext477 == tmp487) $buffering 1
    $if exitcond $then 
    $place[forx_xbody177_forx_xend231x_xloopexit]
    $else 
    $place[forx_xbody177_forx_xbody177]
    $endif
    $merge forx_xbody177_forx_xend231x_xloopexit 
    $endmerge
    $place[forx_xend231x_xloopexit_forx_xend231]
    $merge forx_xcond171x_xpreheader_forx_xend231 forx_xend231x_xloopexit_forx_xend231 
    $endmerge
    $barrier
    $call timer () (call233 ) 
    $barrier
    $volatile out_concat := (output_size >> ($bitcast ($uint<32>) _b00000000000000000000000000000011  )) $buffering 1
    $volatile add_out_init := ($bitcast ($uint<32>) 0  ) $buffering 1
    $volatile add_inp1_init := ($bitcast ($uint<16>) 0  ) $buffering 1
    $volatile add_inp2_init := ($bitcast ($uint<16>) 0  ) $buffering 1
    $volatile count_inp1_init := ($bitcast ($uint<16>) 0  ) $buffering 1
    $volatile total_size := (input1_count + input2_count) $buffering 1
    $dopipeline $depth 15 $buffering 1
    $fullrate 
    $merge $entry $loopback 
    $phi add_out := 			  add_out_init $on   $entry 			  next_add_out $on   $loopback 
    // type of target is $uint<32>
    $phi add_inp1 := 			  add_inp1_init $on   $entry 			  next_add_inp1 $on   $loopback 
    // type of target is $uint<16>
    $phi add_inp2 := 			  add_inp2_init $on   $entry 			  next_add_inp2 $on   $loopback 
    // type of target is $uint<16>
    $phi count_inp1 := 			  count_inp1_init $on   $entry 			  next_count_inp1 $on   $loopback 
    // type of target is $uint<16>
    $endmerge
    $volatile cmp := (count_inp1 < input1_count) $buffering 1
    iv1 := @(input_1[($bitcast ($uint<32>) 0  )][($bitcast ($uint<64>) add_inp1 )]) $buffering 1// bits of buffering = 32. 
    cmp_816_delayed_6_0 := cmp $buffering 6 $cut_through // bits of buffering = 6. 
    $guard (cmp_816_delayed_6_0) i1 := ->(iv1) $buffering 1// bits of buffering = 64. 
    iv2 := @(input_2[($bitcast ($uint<32>) 0  )][($bitcast ($uint<64>) add_inp2 )]) $buffering 1// bits of buffering = 32. 
    cmp_829_delayed_6_0 := cmp $buffering 6 $cut_through // bits of buffering = 6. 
    $guard (~cmp_829_delayed_6_0) i2 := ->(iv2) $buffering 1// bits of buffering = 64. 
    ov := @(concat_output[($bitcast ($uint<32>) 0  )][($bitcast ($uint<64>) add_out )]) $buffering 1// bits of buffering = 32. 
    ov_842_delayed_7_0 := ov $buffering 7 $cut_through // bits of buffering = 224. 
    cmp_844_delayed_12_0 := cmp $buffering 12 $cut_through // bits of buffering = 12. 
    ->(ov_842_delayed_7_0) := ( $mux cmp_844_delayed_12_0 i1  i2 )  $buffering 1// bits of buffering = 64. 
    SUB_u16_u16_853_853_delayed_1_0 := (total_size - 1 ) $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile my_flag := (count_inp1 == SUB_u16_u16_853_853_delayed_1_0) $buffering 1
    $volatile next_count_inp1 := ( $mux my_flag 0   (count_inp1 + 1 ) )  $buffering 1
    $volatile next_add_inp1 := ( $mux cmp (add_inp1 + 1 )  add_inp1 )  $buffering 1
    $volatile next_add_inp2 := ( $mux cmp add_inp2  (add_inp2 + 1 ) )  $buffering 1
    $volatile next_add_out := (add_out + 1 ) $buffering 1
    SUB_u32_u32_891_891_delayed_1_0 := (out_concat - 1 ) $buffering 1 $cut_through // bits of buffering = 32. 
    $volatile continue_flag := (( ~ my_flag ) | (add_out < SUB_u32_u32_891_891_delayed_1_0)) $buffering 1
    $while continue_flag
    $barrier
    $call timer () (call310 ) 
    conv234 := ($bitcast ($uint<64>) ($cast ($int<64>) call233 ) ) $buffering 1// bits of buffering = 64. 
    conv311 := ($bitcast ($uint<64>) ($cast ($int<64>) call310 ) ) $buffering 1// bits of buffering = 64. 
    $volatile sub := (conv311 - conv234) $buffering 1
    conv317 := ($cast ($uint<8>) sub ) $buffering 1// bits of buffering = 8. 
    $volatile shr320 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    conv323 := ($cast ($uint<8>) shr320 ) $buffering 1// bits of buffering = 8. 
    $volatile shr326 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  )) $buffering 1
    conv329 := ($cast ($uint<8>) shr326 ) $buffering 1// bits of buffering = 8. 
    $volatile shr332 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  )) $buffering 1
    conv335 := ($cast ($uint<8>) shr332 ) $buffering 1// bits of buffering = 8. 
    $volatile shr338 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  )) $buffering 1
    conv341 := ($cast ($uint<8>) shr338 ) $buffering 1// bits of buffering = 8. 
    $volatile shr344 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  )) $buffering 1
    conv347 := ($cast ($uint<8>) shr344 ) $buffering 1// bits of buffering = 8. 
    $volatile shr350 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  )) $buffering 1
    conv353 := ($cast ($uint<8>) shr350 ) $buffering 1// bits of buffering = 8. 
    $volatile shr356 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  )) $buffering 1
    conv359 := ($cast ($uint<8>) shr356 ) $buffering 1// bits of buffering = 8. 
    Concat_output_pipe := conv359 $buffering 1// bits of buffering = 8. 
    Concat_output_pipe := conv353 $buffering 1// bits of buffering = 8. 
    Concat_output_pipe := conv347 $buffering 1// bits of buffering = 8. 
    Concat_output_pipe := conv341 $buffering 1// bits of buffering = 8. 
    Concat_output_pipe := conv335 $buffering 1// bits of buffering = 8. 
    Concat_output_pipe := conv329 $buffering 1// bits of buffering = 8. 
    Concat_output_pipe := conv323 $buffering 1// bits of buffering = 8. 
    Concat_output_pipe := conv317 $buffering 1// bits of buffering = 8. 
    $barrier
    $volatile cmp381460 := (output_size > ($bitcast ($uint<32>) _b00000000000000000000000000000111  )) $buffering 1
    $if cmp381460 $then 
    $place[whilex_xend_bbx_xnph]
    $else 
    $place[whilex_xend_forx_xend456]
    $endif
    $merge whilex_xend_bbx_xnph 
    $endmerge
    $volatile tmp472 := (out_concat > ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1
    $volatile tmp471x_xop := (out_concat + ($bitcast ($uint<32>) _b11111111111111111111111111111111  )) $buffering 1
    iNsTr_79 := ($cast ($uint<64>) tmp471x_xop ) $buffering 1// bits of buffering = 64. 
    $volatile xx_xop := (iNsTr_79 + ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )) $buffering 1
    $volatile tmp475 := ( $mux tmp472 xx_xop  ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  ) )  $buffering 1
    $place[bbx_xnph_forx_xbody383]
    $merge bbx_xnph_forx_xbody383 forx_xbody383_forx_xbody383 
    $phi indvar := 			  ($cast ($uint<64>) ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody383 			  ($cast ($uint<64>) indvarx_xnext ) $on   forx_xbody383_forx_xbody383 
    // type of target is $uint<64>
    $endmerge
    arrayidx388 := @(concat_output[($bitcast ($uint<32>) _b00000000000000000000000000000000  )][indvar]) $buffering 1// bits of buffering = 32. 
    tmp389 := ->(arrayidx388) $buffering 1// bits of buffering = 64. 
    conv393 := ($cast ($uint<8>) tmp389 ) $buffering 1// bits of buffering = 8. 
    $volatile shr396 := (tmp389 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1
    conv399 := ($cast ($uint<8>) shr396 ) $buffering 1// bits of buffering = 8. 
    $volatile shr402 := (tmp389 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  )) $buffering 1
    conv405 := ($cast ($uint<8>) shr402 ) $buffering 1// bits of buffering = 8. 
    $volatile shr408 := (tmp389 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  )) $buffering 1
    conv411 := ($cast ($uint<8>) shr408 ) $buffering 1// bits of buffering = 8. 
    $volatile shr414 := (tmp389 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  )) $buffering 1
    conv417 := ($cast ($uint<8>) shr414 ) $buffering 1// bits of buffering = 8. 
    $volatile shr420 := (tmp389 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  )) $buffering 1
    conv423 := ($cast ($uint<8>) shr420 ) $buffering 1// bits of buffering = 8. 
    $volatile shr426 := (tmp389 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  )) $buffering 1
    conv429 := ($cast ($uint<8>) shr426 ) $buffering 1// bits of buffering = 8. 
    $volatile shr432 := (tmp389 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  )) $buffering 1
    conv435 := ($cast ($uint<8>) shr432 ) $buffering 1// bits of buffering = 8. 
    Concat_output_pipe := conv435 $buffering 1// bits of buffering = 8. 
    Concat_output_pipe := conv429 $buffering 1// bits of buffering = 8. 
    Concat_output_pipe := conv423 $buffering 1// bits of buffering = 8. 
    Concat_output_pipe := conv417 $buffering 1// bits of buffering = 8. 
    Concat_output_pipe := conv411 $buffering 1// bits of buffering = 8. 
    Concat_output_pipe := conv405 $buffering 1// bits of buffering = 8. 
    Concat_output_pipe := conv399 $buffering 1// bits of buffering = 8. 
    Concat_output_pipe := conv393 $buffering 1// bits of buffering = 8. 
    $volatile indvarx_xnext := (indvar + ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )) $buffering 1
    $volatile exitcond1 := (indvarx_xnext == tmp475) $buffering 1
    $if exitcond1 $then 
    $place[forx_xbody383_forx_xend456x_xloopexit]
    $else 
    $place[forx_xbody383_forx_xbody383]
    $endif
    $merge forx_xbody383_forx_xend456x_xloopexit 
    $endmerge
    $place[forx_xend456x_xloopexit_forx_xend456]
    $merge forx_xend456x_xloopexit_forx_xend456 whilex_xend_forx_xend456 
    $endmerge
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
$module [global_storage_initializer_]
$in ()
$out ()
$is
{
  $null
}
$module [timerDaemon]
$in ()
$out ()
$is
{
  $branchblock [loop]
  {
    $dopipeline $depth 7 $buffering 1
    $fullrate 
    $merge $entry $loopback 
    $phi COUNTER := 			  ($bitcast ($uint<64>) _b0  ) $on   $entry 			  nCOUNTER $on   $loopback 
    // type of target is $uint<64>
    $phi req := 			  timer_req $on   $entry ,   $loopback 
    // type of target is $uint<1>
    $endmerge
    $volatile nCOUNTER := (COUNTER + 1 ) $buffering 1
    $guard (req) timer_resp := COUNTER $buffering 1// bits of buffering = 64. 
    $while 1 
  }
}
// Memory space 0: concat_output 
// Memory space 1: input_1 
// Memory space 2: input_2 
// use of gated clocks in modules 
