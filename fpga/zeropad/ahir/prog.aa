// Aa code produced by llvm2aa (version 1.0)
$record [structx_x__SizedTensor_16K] < $array [16384] $of $uint<64> > 
$pipe zeropad_input_pipe : $uint<8> $depth 2
$pipe zeropad_output_pipe : $uint<8> $depth 2
$storage R:structx_x__SizedTensor_16K
$storage T:structx_x__SizedTensor_16K
$module [progx_xoptx_xo_storage_initializer_] $in () $out () $is 
{
  $null
  $attribute initializer
}
$module [sendOutput] 
$in (size : $uint<32> )
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    // compare instruction
    cmp68 := (size > ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 )  )
    $if cmp68 $then  $place [entry_bbx_xnph] $else $place [entry_forx_xend] $endif 
    //begin: basic-block bbx_xnph
    $merge entry_bbx_xnph
    $endmerge
    shr := (size >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
    // compare instruction
    tmp := (shr > ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  )
    shrx_xop := (shr + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    iNsTr_1 := ($cast ($uint<64>) shrx_xop)
    xx_xop := (iNsTr_1 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    tmp72 := ( $mux tmp xx_xop ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody_forx_xbody 
    $endmerge
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][indvar])
    // load 
    tmp4 := ->(arrayidx) 
    conv := ($cast ($uint<8>) tmp4)
    shr9 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    conv12 := ($cast ($uint<8>) shr9)
    shr15 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    conv18 := ($cast ($uint<8>) shr15)
    shr21 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000011000 ) )
    conv24 := ($cast ($uint<8>) shr21)
    shr27 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000100000 ) )
    conv30 := ($cast ($uint<8>) shr27)
    shr33 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000101000 ) )
    conv36 := ($cast ($uint<8>) shr33)
    shr39 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 ) )
    conv42 := ($cast ($uint<8>) shr39)
    shr45 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000111000 ) )
    conv48 := ($cast ($uint<8>) shr45)
    zeropad_output_pipe := conv48
    zeropad_output_pipe := conv42
    zeropad_output_pipe := conv36
    zeropad_output_pipe := conv30
    zeropad_output_pipe := conv24
    zeropad_output_pipe := conv18
    zeropad_output_pipe := conv12
    zeropad_output_pipe := conv
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond1 := (indvarx_xnext == tmp72 )
    $if exitcond1 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := zeropad_input_pipe
    conv1 := ($cast ($uint<32>) call)
    shl := (conv1 << ( $bitcast ($uint<32> ) _b00000000000000000000000000001000 ) )
    call2 := zeropad_input_pipe
    conv3 := ($cast ($uint<32>) call2)
    add := (shl | conv3)
    call6 := zeropad_input_pipe
    conv9 := ($cast ($uint<16>) call6)
    shl10 := (conv9 << ( $bitcast ($uint<16> ) _b0000000000001000 ) )
    call11 := zeropad_input_pipe
    conv12 := ($cast ($uint<16>) call11)
    add13 := (shl10 | conv12)
    call16 := zeropad_input_pipe
    conv19 := ($cast ($uint<16>) call16)
    shl20 := (conv19 << ( $bitcast ($uint<16> ) _b0000000000001000 ) )
    call21 := zeropad_input_pipe
    conv22 := ($cast ($uint<16>) call21)
    add23 := (shl20 | conv22)
    call26 := zeropad_input_pipe
    conv29 := ($cast ($uint<16>) call26)
    shl30 := (conv29 << ( $bitcast ($uint<16> ) _b0000000000001000 ) )
    call31 := zeropad_input_pipe
    conv32 := ($cast ($uint<16>) call31)
    add33 := (shl30 | conv32)
    call36 := zeropad_input_pipe
    conv39 := ($cast ($uint<32>) call36)
    shl40 := (conv39 << ( $bitcast ($uint<32> ) _b00000000000000000000000000001000 ) )
    call41 := zeropad_input_pipe
    conv42 := ($cast ($uint<32>) call41)
    add43 := (shl40 | conv42)
    call46 := zeropad_input_pipe
    conv49 := ($cast ($uint<16>) call46)
    shl50 := (conv49 << ( $bitcast ($uint<16> ) _b0000000000001000 ) )
    call51 := zeropad_input_pipe
    conv52 := ($cast ($uint<16>) call51)
    add53 := (shl50 | conv52)
    call56 := zeropad_input_pipe
    conv59 := ($cast ($uint<16>) call56)
    shl60 := (conv59 << ( $bitcast ($uint<16> ) _b0000000000001000 ) )
    call61 := zeropad_input_pipe
    conv62 := ($cast ($uint<16>) call61)
    add63 := (shl60 | conv62)
    $barrier 
    conv69 := ($cast ($uint<32>) add13)
    conv71 := ($cast ($uint<32>) add23)
    mul := (conv69 * add)
    mul72 := (mul * conv71)
    // compare instruction
    cmp471 := (mul72 > ( $bitcast ($uint<32> ) _b00000000000000000000000000001111 )  )
    $if cmp471 $then  $place [entry_bbx_xnph] $else $place [entry_forx_xend] $endif 
    //begin: basic-block bbx_xnph
    $merge entry_bbx_xnph
    $endmerge
    tmp477 := (mul72 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    // compare instruction
    tmp478 := (tmp477 > ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  )
    tmp477x_xop := (tmp477 + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    iNsTr_16 := ($cast ($uint<64>) tmp477x_xop)
    xx_xop := (iNsTr_16 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    tmp481 := ( $mux tmp478 xx_xop ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody_forx_xbody 
    $endmerge
    tmp := (indvar * ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000100 ) )
    tmp2 := (tmp + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) )
    arrayidx274 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][tmp2])
    tmp3 := (tmp + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    arrayidx224 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][tmp3])
    tmp4 := (tmp + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    arrayidx174 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][tmp4])
    arrayidx := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][tmp])
    call78 := zeropad_input_pipe
    conv79 := ($cast ($uint<64>) call78)
    shl81 := (conv79 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call82 := zeropad_input_pipe
    conv84 := ($cast ($uint<64>) call82)
    add85 := (shl81 | conv84)
    shl87 := (add85 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call88 := zeropad_input_pipe
    conv90 := ($cast ($uint<64>) call88)
    add91 := (shl87 | conv90)
    shl93 := (add91 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call94 := zeropad_input_pipe
    conv96 := ($cast ($uint<64>) call94)
    add97 := (shl93 | conv96)
    shl99 := (add97 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call100 := zeropad_input_pipe
    conv102 := ($cast ($uint<64>) call100)
    add103 := (shl99 | conv102)
    shl105 := (add103 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call106 := zeropad_input_pipe
    conv108 := ($cast ($uint<64>) call106)
    add109 := (shl105 | conv108)
    shl111 := (add109 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call112 := zeropad_input_pipe
    conv114 := ($cast ($uint<64>) call112)
    add115 := (shl111 | conv114)
    shl117 := (add115 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call118 := zeropad_input_pipe
    conv120 := ($cast ($uint<64>) call118)
    add121 := (shl117 | conv120)
    ->(arrayidx) := add121
    call125 := zeropad_input_pipe
    conv126 := ($cast ($uint<64>) call125)
    shl128 := (conv126 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call129 := zeropad_input_pipe
    conv131 := ($cast ($uint<64>) call129)
    add132 := (shl128 | conv131)
    shl134 := (add132 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call135 := zeropad_input_pipe
    conv137 := ($cast ($uint<64>) call135)
    add138 := (shl134 | conv137)
    shl140 := (add138 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call141 := zeropad_input_pipe
    conv143 := ($cast ($uint<64>) call141)
    add144 := (shl140 | conv143)
    shl146 := (add144 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call147 := zeropad_input_pipe
    conv149 := ($cast ($uint<64>) call147)
    add150 := (shl146 | conv149)
    shl152 := (add150 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call153 := zeropad_input_pipe
    conv155 := ($cast ($uint<64>) call153)
    add156 := (shl152 | conv155)
    shl158 := (add156 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call159 := zeropad_input_pipe
    conv161 := ($cast ($uint<64>) call159)
    add162 := (shl158 | conv161)
    shl164 := (add162 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call165 := zeropad_input_pipe
    conv167 := ($cast ($uint<64>) call165)
    add168 := (shl164 | conv167)
    ->(arrayidx174) := add168
    call175 := zeropad_input_pipe
    conv176 := ($cast ($uint<64>) call175)
    shl178 := (conv176 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call179 := zeropad_input_pipe
    conv181 := ($cast ($uint<64>) call179)
    add182 := (shl178 | conv181)
    shl184 := (add182 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call185 := zeropad_input_pipe
    conv187 := ($cast ($uint<64>) call185)
    add188 := (shl184 | conv187)
    shl190 := (add188 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call191 := zeropad_input_pipe
    conv193 := ($cast ($uint<64>) call191)
    add194 := (shl190 | conv193)
    shl196 := (add194 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call197 := zeropad_input_pipe
    conv199 := ($cast ($uint<64>) call197)
    add200 := (shl196 | conv199)
    shl202 := (add200 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call203 := zeropad_input_pipe
    conv205 := ($cast ($uint<64>) call203)
    add206 := (shl202 | conv205)
    shl208 := (add206 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call209 := zeropad_input_pipe
    conv211 := ($cast ($uint<64>) call209)
    add212 := (shl208 | conv211)
    shl214 := (add212 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call215 := zeropad_input_pipe
    conv217 := ($cast ($uint<64>) call215)
    add218 := (shl214 | conv217)
    ->(arrayidx224) := add218
    call225 := zeropad_input_pipe
    conv226 := ($cast ($uint<64>) call225)
    shl228 := (conv226 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call229 := zeropad_input_pipe
    conv231 := ($cast ($uint<64>) call229)
    add232 := (shl228 | conv231)
    shl234 := (add232 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call235 := zeropad_input_pipe
    conv237 := ($cast ($uint<64>) call235)
    add238 := (shl234 | conv237)
    shl240 := (add238 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call241 := zeropad_input_pipe
    conv243 := ($cast ($uint<64>) call241)
    add244 := (shl240 | conv243)
    shl246 := (add244 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call247 := zeropad_input_pipe
    conv249 := ($cast ($uint<64>) call247)
    add250 := (shl246 | conv249)
    shl252 := (add250 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call253 := zeropad_input_pipe
    conv255 := ($cast ($uint<64>) call253)
    add256 := (shl252 | conv255)
    shl258 := (add256 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call259 := zeropad_input_pipe
    conv261 := ($cast ($uint<64>) call259)
    add262 := (shl258 | conv261)
    shl264 := (add262 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call265 := zeropad_input_pipe
    conv267 := ($cast ($uint<64>) call265)
    add268 := (shl264 | conv267)
    ->(arrayidx274) := add268
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond1 := (indvarx_xnext == tmp481 )
    $if exitcond1 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend
    $endmerge
    mul299 := (add23 * add13)
    mul306 := (add63 * add53)
    conv347 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) add63) )
    conv353 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) mul306) )
    conv412 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) add23) )
    conv428 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) add33) )
    shl429 := (conv428 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add430 := (shl429 + conv69)
    add445 := (shl429 + add)
    add323 := (conv428 + add)
    add340 := (conv428 + conv69)
    conv374 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) mul299) )
    $place [forx_xend_whilex_xbody]
    //begin: basic-block whilex_xbody
    $merge forx_xend_whilex_xbody ifx_xend454_whilex_xbody
    $phi i279x_x2 :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on forx_xend_whilex_xbody ( $cast ($uint<16>) i279x_x1x_xph) $on ifx_xend454_whilex_xbody 
    $phi kx_x1 :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on forx_xend_whilex_xbody ( $cast ($uint<16>) kx_x0x_xph) $on ifx_xend454_whilex_xbody 
    $phi jx_x1 :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on forx_xend_whilex_xbody ( $cast ($uint<16>) jx_x0x_xph) $on ifx_xend454_whilex_xbody 
    $endmerge
    // compare instruction
    cmp315 := ( ($bitcast ( $int<16>) i279x_x2) <   ($bitcast ( $int<16>) add33 ) )
    $if cmp315 $then  $place [whilex_xbody_ifx_xthen] $else $place [whilex_xbody_lorx_xlhsx_xfalse] $endif 
    //begin: basic-block lorx_xlhsx_xfalse
    $merge whilex_xbody_lorx_xlhsx_xfalse
    $endmerge
    conv318 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) i279x_x2) )
    // compare instruction
    cmp324x_xnot := ( ($bitcast ( $int<32>) conv318) >=   ($bitcast ( $int<32>) add323 ) )
    // compare instruction
    cmp331 := ( ($bitcast ( $int<16>) jx_x1) <   ($bitcast ( $int<16>) add33 ) )
    orx_xcond := (cmp324x_xnot | cmp331)
    $if orx_xcond $then  $place [lorx_xlhsx_xfalse_ifx_xthen] $else $place [lorx_xlhsx_xfalse_lorx_xlhsx_xfalse333] $endif 
    //begin: basic-block lorx_xlhsx_xfalse333
    $merge lorx_xlhsx_xfalse_lorx_xlhsx_xfalse333
    $endmerge
    conv335 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x1) )
    // compare instruction
    cmp341 := ( ($bitcast ( $int<32>) conv335) <   ($bitcast ( $int<32>) add340 ) )
    $if cmp341 $then  $place [lorx_xlhsx_xfalse333_ifx_xelse] $else $place [lorx_xlhsx_xfalse333_ifx_xthen] $endif 
    //begin: basic-block ifx_xthen
    $merge lorx_xlhsx_xfalse_ifx_xthen lorx_xlhsx_xfalse333_ifx_xthen whilex_xbody_ifx_xthen
    $endmerge
    conv345 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    conv349 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x1) )
    mul350 := (conv349 * conv347)
    conv355 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) i279x_x2) )
    mul356 := (conv355 * conv353)
    add351 := (conv345 + mul356)
    add357 := (add351 + mul350)
    shr359 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add357) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom360 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr359) )
    arrayidx361 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom360])
    ->(arrayidx361) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    $place [ifx_xthen_ifx_xend]
    //begin: basic-block ifx_xelse
    $merge lorx_xlhsx_xfalse333_ifx_xelse
    $endmerge
    conv364 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    sub := (conv335 - conv428)
    mul371 := (sub * conv412)
    sub379 := (conv318 - conv428)
    mul380 := (sub379 * conv374)
    add372 := (mul380 + conv364)
    add381 := (add372 + mul371)
    mul390 := (conv335 * conv347)
    mul396 := (conv318 * conv353)
    add391 := (conv364 + mul396)
    add397 := (add391 + mul390)
    shr399 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add381) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom400 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr399) )
    arrayidx401 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom400])
    // load 
    tmp402 := ->(arrayidx401) 
    shr404 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add397) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom405 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr404) )
    arrayidx406 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom405])
    ->(arrayidx406) := tmp402
    $place [ifx_xelse_ifx_xend]
    //begin: basic-block ifx_xend
    $merge ifx_xelse_ifx_xend ifx_xthen_ifx_xend
    $endmerge
    conv409 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    add410 := (conv409 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    // compare instruction
    cmp413 := ( ($bitcast ( $int<32>) add410) <   ($bitcast ( $int<32>) conv412 ) )
    $if cmp413 $then  $place [ifx_xend_ifx_xthen415] $else $place [ifx_xend_ifx_xelse420] $endif 
    //begin: basic-block ifx_xthen415
    $merge ifx_xend_ifx_xthen415
    $endmerge
    add418 := (kx_x1 + ( $bitcast ($uint<16> ) _b0000000000000100 ) )
    $place [ifx_xthen415_ifx_xend454]
    //begin: basic-block ifx_xelse420
    $merge ifx_xend_ifx_xelse420
    $endmerge
    inc422 := (jx_x1 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    conv424 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc422) )
    // compare instruction
    cmp431 := (conv424 == add430 )
    inc436 := ($cast ($uint<16>) cmp431)
    inc436x_xi279x_x2 := (inc436 + i279x_x2)
    jx_x2 := ( $mux cmp431 ( $bitcast ($uint<16> ) _b0000000000000000 )  inc422)
    conv439 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc436x_xi279x_x2) )
    // compare instruction
    cmp446 := (conv439 == add445 )
    $if cmp446 $then  $place [ifx_xelse420_whilex_xend] $else $place [ifx_xelse420_ifx_xend454] $endif 
    //begin: basic-block ifx_xend454
    $merge ifx_xelse420_ifx_xend454 ifx_xthen415_ifx_xend454
    $phi i279x_x1x_xph :=  ( $cast ($uint<16>) i279x_x2) $on ifx_xthen415_ifx_xend454 ( $cast ($uint<16>) inc436x_xi279x_x2) $on ifx_xelse420_ifx_xend454 
    $phi kx_x0x_xph :=  ( $cast ($uint<16>) add418) $on ifx_xthen415_ifx_xend454 ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on ifx_xelse420_ifx_xend454 
    $phi jx_x0x_xph :=  ( $cast ($uint<16>) jx_x1) $on ifx_xthen415_ifx_xend454 ( $cast ($uint<16>) jx_x2) $on ifx_xelse420_ifx_xend454 
    $endmerge
    $place [ifx_xend454_whilex_xbody]
    //begin: basic-block whilex_xend
    $merge ifx_xelse420_whilex_xend
    $endmerge
    $barrier 
    conv458 := ($cast ($uint<32>) add53)
    conv461 := ($cast ($uint<32>) add63)
    mul459 := (conv458 * add43)
    mul462 := (mul459 * conv461)
    $call sendOutput (mul462 )  ()
    $place [return__]
    $merge return__ $endmerge
  }
}
