// Aa code produced by llvm2aa (version 1.0)
$record [structx_x__SizedTensor_16K] < $array [16384] $of $uint<64> > 
$record [structx_x__TensorDescriptor] < $uint<32> > < $uint<32> > < $uint<32> > < $array [64] $of $uint<32> > 
$pipe Block0_complete : $uint<8> $depth 1
$pipe Block0_starting : $uint<8> $depth 1
$pipe zeropad_input_pipe : $uint<8> $depth 2
$pipe zeropad_output_pipe : $uint<8> $depth 2
$storage R:structx_x__SizedTensor_16K
$storage T:structx_x__SizedTensor_16K
$module [progx_xoptx_xo_storage_initializer_] $in () $out () $is 
{
  $null
  $attribute initializer
}
$module [sendOutput] 
$in (size : $uint<32> )
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    shr67 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) size) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    // compare instruction
    cmp68 := ( ($bitcast ( $int<32>) shr67) >  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  ) )
    $if cmp68 $then  $place [entry_bbx_xnph] $else $place [entry_forx_xend] $endif 
    //begin: basic-block bbx_xnph
    $merge entry_bbx_xnph
    $endmerge
    tmp1 := ($cast ($uint<64>) shr67)
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody_forx_xbody 
    $endmerge
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][indvar])
    // load 
    tmp4 := ->(arrayidx) 
    conv := ($cast ($uint<8>) tmp4)
    shr9 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    conv12 := ($cast ($uint<8>) shr9)
    shr15 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    conv18 := ($cast ($uint<8>) shr15)
    shr21 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000011000 ) )
    conv24 := ($cast ($uint<8>) shr21)
    shr27 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000100000 ) )
    conv30 := ($cast ($uint<8>) shr27)
    shr33 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000101000 ) )
    conv36 := ($cast ($uint<8>) shr33)
    shr39 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 ) )
    conv42 := ($cast ($uint<8>) shr39)
    shr45 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000111000 ) )
    conv48 := ($cast ($uint<8>) shr45)
    zeropad_output_pipe := conv48
    zeropad_output_pipe := conv42
    zeropad_output_pipe := conv36
    zeropad_output_pipe := conv30
    zeropad_output_pipe := conv24
    zeropad_output_pipe := conv18
    zeropad_output_pipe := conv12
    zeropad_output_pipe := conv
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond2 := (indvarx_xnext == tmp1 )
    $if exitcond2 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_A] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block0_starting
    call1 := Block0_starting
    call2 := Block0_starting
    call3 := Block0_starting
    call4 := Block0_starting
    call5 := Block0_starting
    call6 := Block0_starting
    $barrier 
    conv27 := ($cast ($uint<16>) call2)
    conv29 := ($cast ($uint<16>) call1)
    conv33 := ($cast ($uint<16>) call5)
    conv35 := ($cast ($uint<16>) call4)
    conv44 := ($cast ($uint<32>) call2)
    sub := (conv44 + ( $bitcast ($uint<32> ) _b11111111111111111111111111111000 ) )
    conv58 := ($cast ($uint<32>) call1)
    conv60 := ($cast ($uint<32>) call6)
    shl := (conv60 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add61 := (shl + conv58)
    conv71 := ($cast ($uint<32>) call)
    add75 := (shl + conv71)
    mul36 := (conv33 * conv35)
    conv106 := ($cast ($uint<16>) call6)
    mul := (conv27 * conv29)
    add132 := (conv60 + conv71)
    add149 := (conv60 + conv58)
    $place [entry_whilex_xbody]
    //begin: basic-block whilex_xbody
    //   this is a do-while loop.
    $merge entry_whilex_xbody
    $phi kx_x1_at_entry :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody 
    $phi ix_x2_at_entry :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody 
    $phi jx_x1_at_entry :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody 
    $endmerge
    $dopipeline $depth 15 $buffering 1 
    $fullrate
    $merge $entry $loopback
    $phi kx_x1 :=  ( $cast ($uint<16>) kx_x0) $on $loopback kx_x1_at_entry $on $entry
    $phi ix_x2 :=  ( $cast ($uint<16>) ix_x1) $on $loopback ix_x2_at_entry $on $entry
    $phi jx_x1 :=  ( $cast ($uint<16>) jx_x0) $on $loopback jx_x1_at_entry $on $entry
    $endmerge
    conv47 := ($cast ($uint<32>) kx_x1)
    // compare instruction
    cmp := ( ($bitcast ( $int<32>) conv47) >  ($bitcast ( $int<32>) sub ) )
    whilex_xbody_ifx_xelse_taken := cmp
    whilex_xbody_ifx_xthen_taken := ( ~cmp)
    ifx_xthen_exec_guard := whilex_xbody_ifx_xthen_taken
    //begin: basic-block ifx_xthen
    $guard (ifx_xthen_exec_guard) add := (kx_x1 + ( $bitcast ($uint<16> ) _b0000000000001000 ) )
    ifx_xthen_ifx_xend80_taken := ifx_xthen_exec_guard
    ifx_xelse_exec_guard := whilex_xbody_ifx_xelse_taken
    //begin: basic-block ifx_xelse
    $guard (ifx_xelse_exec_guard) inc := (jx_x1 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    $guard (ifx_xelse_exec_guard) conv56 := ($cast ($uint<32>) inc)
    // compare instruction
    $guard (ifx_xelse_exec_guard) cmp62 := (conv56 == add61 )
    $guard (ifx_xelse_exec_guard) inc67 := ($cast ($uint<16>) cmp62)
    $guard (ifx_xelse_exec_guard) inc67x_xix_x2 := (inc67 + ix_x2)
    $guard (ifx_xelse_exec_guard) jx_x2 := ( $mux cmp62 ( $bitcast ($uint<16> ) _b0000000000000000 )  inc)
    $guard (ifx_xelse_exec_guard) conv69 := ($cast ($uint<32>) inc67x_xix_x2)
    // compare instruction
    $guard (ifx_xelse_exec_guard) cmp76 := (conv69 == add75 )
    ifx_xelse_ifx_xthen78_taken := (ifx_xelse_exec_guard & cmp76)
    ifx_xelse_ifx_xend80_taken := (ifx_xelse_exec_guard & (~cmp76))
    ifx_xthen78_exec_guard := ifx_xelse_ifx_xthen78_taken
    //begin: basic-block ifx_xthen78
    ifx_xthen78_ifx_xend80_taken := ifx_xthen78_exec_guard
    ifx_xend80_exec_guard := (ifx_xelse_ifx_xend80_taken | ( ifx_xthen_ifx_xend80_taken | ifx_xthen78_ifx_xend80_taken ) )
    //begin: basic-block ifx_xend80
    kx_x0 := ($mux ifx_xthen_ifx_xend80_taken ( $bitcast ($uint<16>) add) ($mux ifx_xthen78_ifx_xend80_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($mux ifx_xelse_ifx_xend80_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($bitcast ($uint<16>) 0))))
    ix_x1 := ($mux ifx_xthen_ifx_xend80_taken ( $bitcast ($uint<16>) ix_x2) ($mux ifx_xthen78_ifx_xend80_taken ( $bitcast ($uint<16>) inc67x_xix_x2) ($mux ifx_xelse_ifx_xend80_taken ( $bitcast ($uint<16>) inc67x_xix_x2) ($bitcast ($uint<16>) 0))))
    jx_x0 := ($mux ifx_xthen_ifx_xend80_taken ( $bitcast ($uint<16>) jx_x1) ($mux ifx_xthen78_ifx_xend80_taken ( $bitcast ($uint<16>) jx_x2) ($mux ifx_xelse_ifx_xend80_taken ( $bitcast ($uint<16>) jx_x2) ($bitcast ($uint<16>) 0))))
    flagx_x0 := ($mux ifx_xthen_ifx_xend80_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($mux ifx_xthen78_ifx_xend80_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000001 ) ) ($mux ifx_xelse_ifx_xend80_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($bitcast ($uint<16>) 0))))
    $guard (ifx_xend80_exec_guard) mul89 := (jx_x0 * conv33)
    $guard (ifx_xend80_exec_guard) mul95 := (mul36 * ix_x1)
    $guard (ifx_xend80_exec_guard) add90 := (mul95 + kx_x0)
    $guard (ifx_xend80_exec_guard) add96 := (add90 + mul89)
    $guard (ifx_xend80_exec_guard) sub107 := (jx_x0 - conv106)
    $guard (ifx_xend80_exec_guard) mul108 := (sub107 * conv27)
    $guard (ifx_xend80_exec_guard) sub116 := (ix_x1 - conv106)
    $guard (ifx_xend80_exec_guard) mul117 := (mul * sub116)
    $guard (ifx_xend80_exec_guard) add109 := (mul117 + kx_x0)
    $guard (ifx_xend80_exec_guard) add118 := (add109 + mul108)
    $guard (ifx_xend80_exec_guard) conv121 := ($cast ($uint<32>) ix_x1)
    // compare instruction
    $guard (ifx_xend80_exec_guard) cmp124 := (conv121 < conv60 )
    $guard (ifx_xend80_exec_guard) cmp124x_xnot := (cmp124 ^ ( $bitcast ($uint<1> ) _b1 ) )
    // compare instruction
    $guard (ifx_xend80_exec_guard) cmp133 := ( ($bitcast ( $int<32>) conv121) <   ($bitcast ( $int<32>) add132 ) )
    $guard (ifx_xend80_exec_guard) orx_xcond := (cmp124x_xnot & cmp133)
    ifx_xend80_lorx_xlhsx_xfalse135_taken := (ifx_xend80_exec_guard & orx_xcond)
    ifx_xend80_ifx_xthen152_taken := (ifx_xend80_exec_guard & (~orx_xcond))
    lorx_xlhsx_xfalse135_exec_guard := ifx_xend80_lorx_xlhsx_xfalse135_taken
    //begin: basic-block lorx_xlhsx_xfalse135
    $guard (lorx_xlhsx_xfalse135_exec_guard) conv137 := ($cast ($uint<32>) jx_x0)
    // compare instruction
    $guard (lorx_xlhsx_xfalse135_exec_guard) cmp140 := (conv137 < conv60 )
    $guard (lorx_xlhsx_xfalse135_exec_guard) cmp140x_xnot := (cmp140 ^ ( $bitcast ($uint<1> ) _b1 ) )
    // compare instruction
    $guard (lorx_xlhsx_xfalse135_exec_guard) cmp150 := ( ($bitcast ( $int<32>) conv137) <   ($bitcast ( $int<32>) add149 ) )
    $guard (lorx_xlhsx_xfalse135_exec_guard) orx_xcond171 := (cmp140x_xnot & cmp150)
    lorx_xlhsx_xfalse135_ifx_xelse155_taken := (lorx_xlhsx_xfalse135_exec_guard & orx_xcond171)
    lorx_xlhsx_xfalse135_ifx_xthen152_taken := (lorx_xlhsx_xfalse135_exec_guard & (~orx_xcond171))
    ifx_xthen152_exec_guard := (ifx_xend80_ifx_xthen152_taken | lorx_xlhsx_xfalse135_ifx_xthen152_taken )
    //begin: basic-block ifx_xthen152
    $guard (ifx_xthen152_exec_guard) conv154 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) add96) )
    $guard (ifx_xthen152_exec_guard) shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) conv154) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 )  )))
    $guard (ifx_xthen152_exec_guard) idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom])
    $guard (ifx_xthen152_exec_guard) ->(arrayidx) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    ifx_xthen152_ifx_xend167_taken := ifx_xthen152_exec_guard
    ifx_xelse155_exec_guard := lorx_xlhsx_xfalse135_ifx_xelse155_taken
    //begin: basic-block ifx_xelse155
    $guard (ifx_xelse155_exec_guard) conv157 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) add118) )
    $guard (ifx_xelse155_exec_guard) shr158 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) conv157) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 )  )))
    $guard (ifx_xelse155_exec_guard) idxprom159 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr158) )
    arrayidx160 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom159])
    // load 
    $guard (ifx_xelse155_exec_guard) tmp161 := ->(arrayidx160) 
    $guard (ifx_xelse155_exec_guard) conv163 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) add96) )
    $guard (ifx_xelse155_exec_guard) shr164 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) conv163) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 )  )))
    $guard (ifx_xelse155_exec_guard) idxprom165 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr164) )
    arrayidx166 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom165])
    $guard (ifx_xelse155_exec_guard) ->(arrayidx166) := tmp161
    ifx_xelse155_ifx_xend167_taken := ifx_xelse155_exec_guard
    //begin: basic-block ifx_xend167
    // compare instruction
    tobool := (flagx_x0 == ( $bitcast ($uint<16> ) _b0000000000000000 )  )
    ifx_xend167_whilex_xend_taken := ( ~tobool)
    $while tobool
    $if ifx_xend167_whilex_xend_taken $then 
    $place [ifx_xend167_whilex_xend]
    $endif
    //begin: basic-block whilex_xend
    $merge ifx_xend167_whilex_xend
    $endmerge
    $barrier 
    Block0_complete := ( $bitcast ($uint<8> ) _b00000001 ) 
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := zeropad_input_pipe
    call2 := zeropad_input_pipe
    call6 := zeropad_input_pipe
    call11 := zeropad_input_pipe
    call16 := zeropad_input_pipe
    conv19 := ($cast ($uint<64>) call16)
    shl20 := (conv19 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call21 := zeropad_input_pipe
    conv22 := ($cast ($uint<64>) call21)
    add23 := (shl20 | conv22)
    call25 := zeropad_input_pipe
    conv28 := ($cast ($uint<64>) call25)
    shl29 := (conv28 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call30 := zeropad_input_pipe
    conv31 := ($cast ($uint<64>) call30)
    add32 := (shl29 | conv31)
    call34 := zeropad_input_pipe
    conv37 := ($cast ($uint<64>) call34)
    shl38 := (conv37 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call39 := zeropad_input_pipe
    conv40 := ($cast ($uint<64>) call39)
    add41 := (shl38 | conv40)
    call43 := zeropad_input_pipe
    call44 := zeropad_input_pipe
    conv47 := ($cast ($uint<32>) call44)
    shl48 := (conv47 << ( $bitcast ($uint<32> ) _b00000000000000000000000000001000 ) )
    call49 := zeropad_input_pipe
    conv50 := ($cast ($uint<32>) call49)
    add51 := (shl48 | conv50)
    call53 := zeropad_input_pipe
    conv56 := ($cast ($uint<32>) call53)
    shl57 := (conv56 << ( $bitcast ($uint<32> ) _b00000000000000000000000000001000 ) )
    call58 := zeropad_input_pipe
    conv59 := ($cast ($uint<32>) call58)
    add60 := (shl57 | conv59)
    call62 := zeropad_input_pipe
    conv65 := ($cast ($uint<32>) call62)
    shl66 := (conv65 << ( $bitcast ($uint<32> ) _b00000000000000000000000000001000 ) )
    call67 := zeropad_input_pipe
    conv68 := ($cast ($uint<32>) call67)
    add69 := (shl66 | conv68)
    mul := (add23 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000100000 ) )
    mul78 := (mul * add32)
    sext := (mul78 * add41)
    conv79 :=  ($bitcast ($uint<64>) ( ($bitcast ( $int<64>) sext) >>  ($bitcast ( $int<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000100000 )  )))
    // compare instruction
    cmp229 := (conv79 > ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000111 )  )
    $if cmp229 $then  $place [entry_bbx_xnph] $else $place [entry_forx_xend] $endif 
    //begin: basic-block bbx_xnph
    $merge entry_bbx_xnph
    $endmerge
    shr := (conv79 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) )
    // compare instruction
    tmp1 := (shr > ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
    umax2 := ( $mux tmp1 shr ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody_forx_xbody 
    $endmerge
    arrayidx := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][indvar])
    call85 := zeropad_input_pipe
    conv86 := ($cast ($uint<64>) call85)
    shl88 := (conv86 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call89 := zeropad_input_pipe
    conv91 := ($cast ($uint<64>) call89)
    add92 := (shl88 | conv91)
    shl94 := (add92 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call95 := zeropad_input_pipe
    conv97 := ($cast ($uint<64>) call95)
    add98 := (shl94 | conv97)
    shl100 := (add98 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call101 := zeropad_input_pipe
    conv103 := ($cast ($uint<64>) call101)
    add104 := (shl100 | conv103)
    shl106 := (add104 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call107 := zeropad_input_pipe
    conv109 := ($cast ($uint<64>) call107)
    add110 := (shl106 | conv109)
    shl112 := (add110 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call113 := zeropad_input_pipe
    conv115 := ($cast ($uint<64>) call113)
    add116 := (shl112 | conv115)
    shl118 := (add116 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call119 := zeropad_input_pipe
    conv121 := ($cast ($uint<64>) call119)
    add122 := (shl118 | conv121)
    shl124 := (add122 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call125 := zeropad_input_pipe
    conv127 := ($cast ($uint<64>) call125)
    add128 := (shl124 | conv127)
    ->(arrayidx) := add128
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond3 := (indvarx_xnext == umax2 )
    $if exitcond3 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend
    $endmerge
    $barrier 
    $call timer ()  (call133)
    conv134 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) call133) )
    Block0_starting := call21
    Block0_starting := call30
    Block0_starting := call39
    Block0_starting := call49
    Block0_starting := call58
    Block0_starting := call67
    Block0_starting := call43
    call149 := Block0_complete
    $barrier 
    $call timer ()  (call152)
    conv153 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) call152) )
    sub := (conv153 - conv134)
    conv159 := ($cast ($uint<8>) sub)
    shr162 := (sub >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    conv165 := ($cast ($uint<8>) shr162)
    shr168 := (sub >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    conv171 := ($cast ($uint<8>) shr168)
    shr174 := (sub >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000011000 ) )
    conv177 := ($cast ($uint<8>) shr174)
    shr180 := (sub >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000100000 ) )
    conv183 := ($cast ($uint<8>) shr180)
    shr186 := (sub >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000101000 ) )
    conv189 := ($cast ($uint<8>) shr186)
    shr192 := (sub >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 ) )
    conv195 := ($cast ($uint<8>) shr192)
    shr198 := (sub >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000111000 ) )
    conv201 := ($cast ($uint<8>) shr198)
    zeropad_output_pipe := conv201
    zeropad_output_pipe := conv195
    zeropad_output_pipe := conv189
    zeropad_output_pipe := conv183
    zeropad_output_pipe := conv177
    zeropad_output_pipe := conv171
    zeropad_output_pipe := conv165
    zeropad_output_pipe := conv159
    $barrier 
    mul223 := (add60 * add51)
    mul226 := (mul223 * add69)
    $call sendOutput (mul226 )  ()
    $place [return__]
    $merge return__ $endmerge
  }
}
