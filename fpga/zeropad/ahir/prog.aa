// Aa code produced by llvm2aa (version 1.0)
$record [structx_x__SizedTensor_16K] < $array [16384] $of $uint<64> > 
$record [structx_x__TensorDescriptor] < $uint<32> > < $uint<32> > < $uint<32> > < $array [64] $of $uint<32> > 
$pipe zeropad_input_pipe : $uint<8> $depth 2
$pipe zeropad_output_pipe : $uint<8> $depth 2
$storage R:structx_x__SizedTensor_16K
$storage T:structx_x__SizedTensor_16K
$module [progx_xoptx_xo_storage_initializer_] $in () $out () $is 
{
  $null
  $attribute initializer
}
$module [sendOutput] 
$in (size : $uint<32> )
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    shr67 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) size) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    // compare instruction
    cmp68 := ( ($bitcast ( $int<32>) shr67) >  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  ) )
    $if cmp68 $then  $place [entry_bbx_xnph] $else $place [entry_forx_xend] $endif 
    //begin: basic-block bbx_xnph
    $merge entry_bbx_xnph
    $endmerge
    tmp1 := ($cast ($uint<64>) shr67)
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody_forx_xbody 
    $endmerge
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][indvar])
    // load 
    tmp4 := ->(arrayidx) 
    conv := ($cast ($uint<8>) tmp4)
    shr9 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    conv12 := ($cast ($uint<8>) shr9)
    shr15 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    conv18 := ($cast ($uint<8>) shr15)
    shr21 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000011000 ) )
    conv24 := ($cast ($uint<8>) shr21)
    shr27 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000100000 ) )
    conv30 := ($cast ($uint<8>) shr27)
    shr33 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000101000 ) )
    conv36 := ($cast ($uint<8>) shr33)
    shr39 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 ) )
    conv42 := ($cast ($uint<8>) shr39)
    shr45 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000111000 ) )
    conv48 := ($cast ($uint<8>) shr45)
    zeropad_output_pipe := conv48
    zeropad_output_pipe := conv42
    zeropad_output_pipe := conv36
    zeropad_output_pipe := conv30
    zeropad_output_pipe := conv24
    zeropad_output_pipe := conv18
    zeropad_output_pipe := conv12
    zeropad_output_pipe := conv
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond2 := (indvarx_xnext == tmp1 )
    $if exitcond2 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := zeropad_input_pipe
    call2 := zeropad_input_pipe
    call6 := zeropad_input_pipe
    call11 := zeropad_input_pipe
    call16 := zeropad_input_pipe
    conv19 := ($cast ($uint<16>) call16)
    shl20 := (conv19 << ( $bitcast ($uint<16> ) _b0000000000001000 ) )
    call21 := zeropad_input_pipe
    conv22 := ($cast ($uint<16>) call21)
    add23 := (shl20 | conv22)
    call25 := zeropad_input_pipe
    conv28 := ($cast ($uint<16>) call25)
    shl29 := (conv28 << ( $bitcast ($uint<16> ) _b0000000000001000 ) )
    call30 := zeropad_input_pipe
    conv31 := ($cast ($uint<16>) call30)
    add32 := (shl29 | conv31)
    call34 := zeropad_input_pipe
    conv37 := ($cast ($uint<16>) call34)
    shl38 := (conv37 << ( $bitcast ($uint<16> ) _b0000000000001000 ) )
    call39 := zeropad_input_pipe
    conv40 := ($cast ($uint<16>) call39)
    add41 := (shl38 | conv40)
    call43 := zeropad_input_pipe
    call44 := zeropad_input_pipe
    conv47 := ($cast ($uint<32>) call44)
    shl48 := (conv47 << ( $bitcast ($uint<32> ) _b00000000000000000000000000001000 ) )
    call49 := zeropad_input_pipe
    conv50 := ($cast ($uint<32>) call49)
    add51 := (shl48 | conv50)
    call53 := zeropad_input_pipe
    conv56 := ($cast ($uint<16>) call53)
    shl57 := (conv56 << ( $bitcast ($uint<16> ) _b0000000000001000 ) )
    call58 := zeropad_input_pipe
    conv59 := ($cast ($uint<16>) call58)
    add60 := (shl57 | conv59)
    call62 := zeropad_input_pipe
    conv65 := ($cast ($uint<16>) call62)
    shl66 := (conv65 << ( $bitcast ($uint<16> ) _b0000000000001000 ) )
    call67 := zeropad_input_pipe
    conv68 := ($cast ($uint<16>) call67)
    add69 := (shl66 | conv68)
    conv73 := ($cast ($uint<64>) add23)
    conv75 := ($cast ($uint<64>) add32)
    conv77 := ($cast ($uint<64>) add41)
    mul := (conv73 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000100000 ) )
    mul78 := (mul * conv75)
    sext := (mul78 * conv77)
    conv79 :=  ($bitcast ($uint<64>) ( ($bitcast ( $int<64>) sext) >>  ($bitcast ( $int<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000100000 )  )))
    // compare instruction
    cmp390 := (conv79 > ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000111 )  )
    $if cmp390 $then  $place [entry_bbx_xnph] $else $place [entry_forx_xend] $endif 
    //begin: basic-block bbx_xnph
    $merge entry_bbx_xnph
    $endmerge
    shr := (conv79 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) )
    // compare instruction
    tmp1 := (shr > ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
    umax2 := ( $mux tmp1 shr ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody_forx_xbody 
    $endmerge
    arrayidx := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][indvar])
    call85 := zeropad_input_pipe
    conv86 := ($cast ($uint<64>) call85)
    shl88 := (conv86 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call89 := zeropad_input_pipe
    conv91 := ($cast ($uint<64>) call89)
    add92 := (shl88 | conv91)
    shl94 := (add92 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call95 := zeropad_input_pipe
    conv97 := ($cast ($uint<64>) call95)
    add98 := (shl94 | conv97)
    shl100 := (add98 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call101 := zeropad_input_pipe
    conv103 := ($cast ($uint<64>) call101)
    add104 := (shl100 | conv103)
    shl106 := (add104 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call107 := zeropad_input_pipe
    conv109 := ($cast ($uint<64>) call107)
    add110 := (shl106 | conv109)
    shl112 := (add110 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call113 := zeropad_input_pipe
    conv115 := ($cast ($uint<64>) call113)
    add116 := (shl112 | conv115)
    shl118 := (add116 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call119 := zeropad_input_pipe
    conv121 := ($cast ($uint<64>) call119)
    add122 := (shl118 | conv121)
    shl124 := (add122 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call125 := zeropad_input_pipe
    conv127 := ($cast ($uint<64>) call125)
    add128 := (shl124 | conv127)
    ->(arrayidx) := add128
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond3 := (indvarx_xnext == umax2 )
    $if exitcond3 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend
    $endmerge
    $barrier 
    $call timer ()  (call133)
    sub := (add41 + ( $bitcast ($uint<16> ) _b1111111111111000 ) )
    conv179 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) sub) )
    conv191 := ($cast ($uint<32>) add32)
    conv193 := ($cast ($uint<32>) call43)
    shl194 := (conv193 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add195 := (shl194 + conv191)
    conv205 := ($cast ($uint<32>) add23)
    add209 := (shl194 + conv205)
    conv240 := ($cast ($uint<16>) call43)
    add266 := (conv193 + conv205)
    add283 := (conv193 + conv191)
    $place [forx_xend_whilex_xbody]
    //begin: basic-block whilex_xbody
    //   this is a do-while loop.
    $merge forx_xend_whilex_xbody
    $phi kx_x1_at_entry :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on forx_xend_whilex_xbody 
    $phi i138x_x2_at_entry :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on forx_xend_whilex_xbody 
    $phi jx_x1_at_entry :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on forx_xend_whilex_xbody 
    $endmerge
    $dopipeline $depth 15 $buffering 1 
    $fullrate
    $merge $entry $loopback
    $phi kx_x1 :=  ( $cast ($uint<16>) kx_x0) $on $loopback kx_x1_at_entry $on $entry
    $phi i138x_x2 :=  ( $cast ($uint<16>) i138x_x1) $on $loopback i138x_x2_at_entry $on $entry
    $phi jx_x1 :=  ( $cast ($uint<16>) jx_x0) $on $loopback jx_x1_at_entry $on $entry
    $endmerge
    conv177 := ($cast ($uint<32>) kx_x1)
    // compare instruction
    cmp180 := ( ($bitcast ( $int<32>) conv177) >  ($bitcast ( $int<32>) conv179 ) )
    whilex_xbody_ifx_xelse_taken := cmp180
    whilex_xbody_ifx_xthen_taken := ( ~cmp180)
    ifx_xthen_exec_guard := whilex_xbody_ifx_xthen_taken
    //begin: basic-block ifx_xthen
    $guard (ifx_xthen_exec_guard) add184 := (kx_x1 + ( $bitcast ($uint<16> ) _b0000000000001000 ) )
    ifx_xthen_ifx_xend214_taken := ifx_xthen_exec_guard
    ifx_xelse_exec_guard := whilex_xbody_ifx_xelse_taken
    //begin: basic-block ifx_xelse
    $guard (ifx_xelse_exec_guard) inc187 := (jx_x1 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    $guard (ifx_xelse_exec_guard) conv189 := ($cast ($uint<32>) inc187)
    // compare instruction
    $guard (ifx_xelse_exec_guard) cmp196 := (conv189 == add195 )
    $guard (ifx_xelse_exec_guard) inc201 := ($cast ($uint<16>) cmp196)
    $guard (ifx_xelse_exec_guard) inc201x_xi138x_x2 := (inc201 + i138x_x2)
    $guard (ifx_xelse_exec_guard) jx_x2 := ( $mux cmp196 ( $bitcast ($uint<16> ) _b0000000000000000 )  inc187)
    $guard (ifx_xelse_exec_guard) conv203 := ($cast ($uint<32>) inc201x_xi138x_x2)
    // compare instruction
    $guard (ifx_xelse_exec_guard) cmp210 := (conv203 == add209 )
    ifx_xelse_ifx_xthen212_taken := (ifx_xelse_exec_guard & cmp210)
    ifx_xelse_ifx_xend214_taken := (ifx_xelse_exec_guard & (~cmp210))
    ifx_xthen212_exec_guard := ifx_xelse_ifx_xthen212_taken
    //begin: basic-block ifx_xthen212
    ifx_xthen212_ifx_xend214_taken := ifx_xthen212_exec_guard
    ifx_xend214_exec_guard := (ifx_xelse_ifx_xend214_taken | ( ifx_xthen_ifx_xend214_taken | ifx_xthen212_ifx_xend214_taken ) )
    //begin: basic-block ifx_xend214
    kx_x0 := ($mux ifx_xthen_ifx_xend214_taken ( $bitcast ($uint<16>) add184) ($mux ifx_xthen212_ifx_xend214_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($mux ifx_xelse_ifx_xend214_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($bitcast ($uint<16>) 0))))
    i138x_x1 := ($mux ifx_xthen_ifx_xend214_taken ( $bitcast ($uint<16>) i138x_x2) ($mux ifx_xthen212_ifx_xend214_taken ( $bitcast ($uint<16>) inc201x_xi138x_x2) ($mux ifx_xelse_ifx_xend214_taken ( $bitcast ($uint<16>) inc201x_xi138x_x2) ($bitcast ($uint<16>) 0))))
    jx_x0 := ($mux ifx_xthen_ifx_xend214_taken ( $bitcast ($uint<16>) jx_x1) ($mux ifx_xthen212_ifx_xend214_taken ( $bitcast ($uint<16>) jx_x2) ($mux ifx_xelse_ifx_xend214_taken ( $bitcast ($uint<16>) jx_x2) ($bitcast ($uint<16>) 0))))
    flagx_x0 := ($mux ifx_xthen_ifx_xend214_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($mux ifx_xthen212_ifx_xend214_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000001 ) ) ($mux ifx_xelse_ifx_xend214_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($bitcast ($uint<16>) 0))))
    $guard (ifx_xend214_exec_guard) mul229 := (add60 * i138x_x1)
    $guard (ifx_xend214_exec_guard) tmp := (jx_x0 + mul229)
    $guard (ifx_xend214_exec_guard) tmp385 := (tmp * add69)
    $guard (ifx_xend214_exec_guard) add230 := (tmp385 + kx_x0)
    $guard (ifx_xend214_exec_guard) sub241 := (jx_x0 - conv240)
    $guard (ifx_xend214_exec_guard) sub250 := (i138x_x1 - conv240)
    $guard (ifx_xend214_exec_guard) mul251 := (add32 * sub250)
    $guard (ifx_xend214_exec_guard) tmp386 := (sub241 + mul251)
    $guard (ifx_xend214_exec_guard) tmp387 := (tmp386 * add41)
    $guard (ifx_xend214_exec_guard) add252 := (tmp387 + kx_x0)
    $guard (ifx_xend214_exec_guard) conv255 := ($cast ($uint<32>) i138x_x1)
    // compare instruction
    $guard (ifx_xend214_exec_guard) cmp258 := (conv255 < conv193 )
    $guard (ifx_xend214_exec_guard) cmp258x_xnot := (cmp258 ^ ( $bitcast ($uint<1> ) _b1 ) )
    // compare instruction
    $guard (ifx_xend214_exec_guard) cmp267 := ( ($bitcast ( $int<32>) conv255) <   ($bitcast ( $int<32>) add266 ) )
    $guard (ifx_xend214_exec_guard) orx_xcond := (cmp258x_xnot & cmp267)
    ifx_xend214_lorx_xlhsx_xfalse269_taken := (ifx_xend214_exec_guard & orx_xcond)
    ifx_xend214_ifx_xthen286_taken := (ifx_xend214_exec_guard & (~orx_xcond))
    lorx_xlhsx_xfalse269_exec_guard := ifx_xend214_lorx_xlhsx_xfalse269_taken
    //begin: basic-block lorx_xlhsx_xfalse269
    $guard (lorx_xlhsx_xfalse269_exec_guard) conv271 := ($cast ($uint<32>) jx_x0)
    // compare instruction
    $guard (lorx_xlhsx_xfalse269_exec_guard) cmp274 := (conv271 < conv193 )
    $guard (lorx_xlhsx_xfalse269_exec_guard) cmp274x_xnot := (cmp274 ^ ( $bitcast ($uint<1> ) _b1 ) )
    // compare instruction
    $guard (lorx_xlhsx_xfalse269_exec_guard) cmp284 := ( ($bitcast ( $int<32>) conv271) <   ($bitcast ( $int<32>) add283 ) )
    $guard (lorx_xlhsx_xfalse269_exec_guard) orx_xcond393 := (cmp274x_xnot & cmp284)
    lorx_xlhsx_xfalse269_ifx_xelse292_taken := (lorx_xlhsx_xfalse269_exec_guard & orx_xcond393)
    lorx_xlhsx_xfalse269_ifx_xthen286_taken := (lorx_xlhsx_xfalse269_exec_guard & (~orx_xcond393))
    ifx_xthen286_exec_guard := (ifx_xend214_ifx_xthen286_taken | lorx_xlhsx_xfalse269_ifx_xthen286_taken )
    //begin: basic-block ifx_xthen286
    $guard (ifx_xthen286_exec_guard) conv288 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) add230) )
    $guard (ifx_xthen286_exec_guard) shr289 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) conv288) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 )  )))
    $guard (ifx_xthen286_exec_guard) idxprom290 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr289) )
    arrayidx291 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom290])
    $guard (ifx_xthen286_exec_guard) ->(arrayidx291) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    ifx_xthen286_ifx_xend304_taken := ifx_xthen286_exec_guard
    ifx_xelse292_exec_guard := lorx_xlhsx_xfalse269_ifx_xelse292_taken
    //begin: basic-block ifx_xelse292
    $guard (ifx_xelse292_exec_guard) conv294 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) add252) )
    $guard (ifx_xelse292_exec_guard) shr295 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) conv294) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 )  )))
    $guard (ifx_xelse292_exec_guard) idxprom296 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr295) )
    arrayidx297 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom296])
    // load 
    $guard (ifx_xelse292_exec_guard) tmp298 := ->(arrayidx297) 
    $guard (ifx_xelse292_exec_guard) conv300 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) add230) )
    $guard (ifx_xelse292_exec_guard) shr301 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) conv300) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 )  )))
    $guard (ifx_xelse292_exec_guard) idxprom302 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr301) )
    arrayidx303 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom302])
    $guard (ifx_xelse292_exec_guard) ->(arrayidx303) := tmp298
    ifx_xelse292_ifx_xend304_taken := ifx_xelse292_exec_guard
    //begin: basic-block ifx_xend304
    // compare instruction
    tobool := (flagx_x0 == ( $bitcast ($uint<16> ) _b0000000000000000 )  )
    ifx_xend304_whilex_xend_taken := ( ~tobool)
    $while tobool
    $if ifx_xend304_whilex_xend_taken $then 
    $place [ifx_xend304_whilex_xend]
    $endif
    //begin: basic-block whilex_xend
    $merge ifx_xend304_whilex_xend
    $endmerge
    conv134 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) call133) )
    $barrier 
    $call timer ()  (call309)
    conv310 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) call309) )
    sub314 := (conv310 - conv134)
    conv317 := ($cast ($uint<8>) sub314)
    shr320 := (sub314 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    conv323 := ($cast ($uint<8>) shr320)
    shr326 := (sub314 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    conv329 := ($cast ($uint<8>) shr326)
    shr332 := (sub314 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000011000 ) )
    conv335 := ($cast ($uint<8>) shr332)
    shr338 := (sub314 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000100000 ) )
    conv341 := ($cast ($uint<8>) shr338)
    shr344 := (sub314 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000101000 ) )
    conv347 := ($cast ($uint<8>) shr344)
    shr350 := (sub314 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 ) )
    conv353 := ($cast ($uint<8>) shr350)
    shr356 := (sub314 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000111000 ) )
    conv359 := ($cast ($uint<8>) shr356)
    zeropad_output_pipe := conv359
    zeropad_output_pipe := conv353
    zeropad_output_pipe := conv347
    zeropad_output_pipe := conv341
    zeropad_output_pipe := conv335
    zeropad_output_pipe := conv329
    zeropad_output_pipe := conv323
    zeropad_output_pipe := conv317
    $barrier 
    conv380 := ($cast ($uint<32>) add60)
    conv383 := ($cast ($uint<32>) add69)
    mul381 := (conv380 * add51)
    mul384 := (mul381 * conv383)
    $call sendOutput (mul384 )  ()
    $place [return__]
    $merge return__ $endmerge
  }
}
