// Aa code produced by llvm2aa (version 1.0)
$record [structx_x__SizedTensor_16K] < $array [16384] $of $uint<64> > 
$record [structx_x__TensorDescriptor] < $uint<32> > < $uint<32> > < $uint<32> > < $array [64] $of $uint<32> > 
$pipe Block0_complete : $uint<16> $depth 1
$pipe Block0_starting : $uint<16> $depth 1
$pipe Block1_complete : $uint<16> $depth 1
$pipe Block1_starting : $uint<16> $depth 1
$pipe Block2_complete : $uint<16> $depth 1
$pipe Block2_starting : $uint<16> $depth 1
$pipe Block3_complete : $uint<16> $depth 1
$pipe Block3_starting : $uint<16> $depth 1
$pipe Block4_complete : $uint<16> $depth 1
$pipe Block4_starting : $uint<16> $depth 1
$pipe Block5_complete : $uint<16> $depth 1
$pipe Block5_starting : $uint<16> $depth 1
$pipe Block6_complete : $uint<16> $depth 1
$pipe Block6_starting : $uint<16> $depth 1
$pipe Block7_complete : $uint<16> $depth 1
$pipe Block7_starting : $uint<16> $depth 1
$pipe zeropad_input_pipe : $uint<8> $depth 2
$pipe zeropad_output_pipe : $uint<8> $depth 2
$storage des_inp:structx_x__TensorDescriptor
$storage pad:$uint<8>
$storage des_out:structx_x__TensorDescriptor
$storage T:structx_x__SizedTensor_16K
$storage R:structx_x__SizedTensor_16K
$storage depth_high:$uint<32>
$storage col_high:$uint<32>
$storage row_high:$uint<32>
$module [progx_xoptx_xo_storage_initializer_] $in () $out () $is 
{
  $null
  $attribute initializer
}
$module [testConfigure] 
$in ()
$out (ret_val__ : $uint<16>)
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    iNsTr_0 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ])
    ->(iNsTr_0) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000101 ) 
    call := zeropad_input_pipe
    conv := ($cast ($uint<32>) call)
    iNsTr_3 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    ->(iNsTr_3) := conv
    call1 := zeropad_input_pipe
    conv2 := ($cast ($uint<32>) call1)
    iNsTr_6 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    ->(iNsTr_6) := conv2
    // compare instruction
    cmp87 := (call1 == ( $bitcast ($uint<8> ) _b00000000 )  )
    call588 := zeropad_input_pipe
    $if cmp87 $then  $place [entry_forx_xend] $else $place [entry_forx_xbodyx_xpreheader] $endif 
    //begin: basic-block forx_xbodyx_xpreheader
    $merge entry_forx_xbodyx_xpreheader
    $endmerge
    $place [forx_xbodyx_xpreheader_forx_xbody]
    //begin: basic-block forx_xbody
    $merge forx_xbody_forx_xbody forx_xbodyx_xpreheader_forx_xbody
    $phi indvar97 :=  ( $cast ($uint<64>) tmp99) $on forx_xbody_forx_xbody ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on forx_xbodyx_xpreheader_forx_xbody 
    $phi call590 :=  ( $cast ($uint<8>) call5) $on forx_xbody_forx_xbody ( $cast ($uint<8>) call588) $on forx_xbodyx_xpreheader_forx_xbody 
    $endmerge
    tmp := (indvar97 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    inc := ($cast ($uint<32>) tmp)
    arrayidx := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvar97])
    conv6 := ($cast ($uint<32>) call590)
    ->(arrayidx) := conv6
    tmp99 := (indvar97 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    iNsTr_28 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp3 := ->(iNsTr_28) 
    // compare instruction
    cmp := (inc < tmp3 )
    call5 := zeropad_input_pipe
    $if cmp $then  $place [forx_xbody_forx_xbody] $else $place [forx_xbody_forx_xendx_xloopexit] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $phi call5x_xlcssa1 :=  ( $cast ($uint<8>) call5) $on forx_xbody_forx_xendx_xloopexit 
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend
    $phi call5x_xlcssa :=  ( $cast ($uint<8>) call588) $on entry_forx_xend ( $cast ($uint<8>) call5x_xlcssa1) $on forx_xendx_xloopexit_forx_xend 
    $endmerge
    pad := call5x_xlcssa
    call10 := zeropad_input_pipe
    conv11 := ($cast ($uint<32>) call10)
    iNsTr_12 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    ->(iNsTr_12) := conv11
    call12 := zeropad_input_pipe
    conv13 := ($cast ($uint<32>) call12)
    iNsTr_15 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    ->(iNsTr_15) := conv13
    call14 := zeropad_input_pipe
    conv15 := ($cast ($uint<32>) call14)
    iNsTr_18 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    ->(iNsTr_18) := conv15
    iNsTr_20 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp17 := ->(iNsTr_20) 
    iNsTr_21 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp18 := ->(iNsTr_21) 
    iNsTr_22 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp19 := ->(iNsTr_22) 
    mul := (tmp18 * tmp17)
    mul20 := (mul * tmp19)
    conv21 := ($cast ($uint<64>) mul20)
    shr83x_xmask := (conv21 & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000011111111111111111111111111111100 ) )
    // compare instruction
    cmp2684 := (shr83x_xmask == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
    $if cmp2684 $then  $place [forx_xend_forx_xend79] $else $place [forx_xend_bbx_xnph] $endif 
    //begin: basic-block bbx_xnph
    $merge forx_xend_bbx_xnph
    $endmerge
    tmp4 := (tmp18 * tmp17)
    tmp5 := (tmp4 * tmp19)
    tmp6 := ($cast ($uint<64>) tmp5)
    tmp7 := (tmp6 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    // compare instruction
    tmp8 := (tmp7 > ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
    umax9 := ( $mux tmp8 tmp7 ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph_forx_xbody28]
    //begin: basic-block forx_xbody28
    $merge bbx_xnph_forx_xbody28 forx_xbody28_forx_xbody28
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody28 ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody28_forx_xbody28 
    $endmerge
    arrayidx75 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][indvar])
    call30 := zeropad_input_pipe
    conv31 := ($cast ($uint<64>) call30)
    shl := (conv31 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call33 := zeropad_input_pipe
    conv35 := ($cast ($uint<64>) call33)
    add := (shl | conv35)
    shl37 := (add << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call38 := zeropad_input_pipe
    conv40 := ($cast ($uint<64>) call38)
    add41 := (shl37 | conv40)
    shl43 := (add41 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call44 := zeropad_input_pipe
    conv46 := ($cast ($uint<64>) call44)
    add47 := (shl43 | conv46)
    shl49 := (add47 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call50 := zeropad_input_pipe
    conv52 := ($cast ($uint<64>) call50)
    add53 := (shl49 | conv52)
    shl55 := (add53 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call56 := zeropad_input_pipe
    conv58 := ($cast ($uint<64>) call56)
    add59 := (shl55 | conv58)
    shl61 := (add59 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call62 := zeropad_input_pipe
    conv64 := ($cast ($uint<64>) call62)
    add65 := (shl61 | conv64)
    shl67 := (add65 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call68 := zeropad_input_pipe
    conv70 := ($cast ($uint<64>) call68)
    add71 := (shl67 | conv70)
    ->(arrayidx75) := add71
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond10 := (indvarx_xnext == umax9 )
    $if exitcond10 $then  $place [forx_xbody28_forx_xend79x_xloopexit] $else $place [forx_xbody28_forx_xbody28] $endif 
    //begin: basic-block forx_xend79x_xloopexit
    $merge forx_xbody28_forx_xend79x_xloopexit
    $endmerge
    $place [forx_xend79x_xloopexit_forx_xend79]
    //begin: basic-block forx_xend79
    $merge forx_xend_forx_xend79 forx_xend79x_xloopexit_forx_xend79
    $endmerge
    ret_val__ := ($cast ($uint<16>) mul20)
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [sendOutput] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    iNsTr_0 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp := ->(iNsTr_0) 
    iNsTr_1 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp1 := ->(iNsTr_1) 
    iNsTr_2 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp2 := ->(iNsTr_2) 
    mul := (tmp1 * tmp)
    mul3 := (mul * tmp2)
    conv := ($cast ($uint<64>) mul3)
    shr76x_xmask := (conv & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000011111111111111111111111111111100 ) )
    // compare instruction
    cmp77 := (shr76x_xmask == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
    $if cmp77 $then  $place [entry_forx_xend] $else $place [entry_bbx_xnph] $endif 
    //begin: basic-block bbx_xnph
    $merge entry_bbx_xnph
    $endmerge
    tmp3 := (tmp1 * tmp)
    tmp4 := (tmp3 * tmp2)
    tmp5 := ($cast ($uint<64>) tmp4)
    tmp6 := (tmp5 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    // compare instruction
    tmp7 := (tmp6 > ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
    umax8 := ( $mux tmp7 tmp6 ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody_forx_xbody 
    $endmerge
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][indvar])
    // load 
    tmp11 := ->(arrayidx) 
    conv14 := ($cast ($uint<8>) tmp11)
    shr17 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    conv20 := ($cast ($uint<8>) shr17)
    shr23 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    conv26 := ($cast ($uint<8>) shr23)
    shr29 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000011000 ) )
    conv32 := ($cast ($uint<8>) shr29)
    shr35 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000100000 ) )
    conv38 := ($cast ($uint<8>) shr35)
    shr41 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000101000 ) )
    conv44 := ($cast ($uint<8>) shr41)
    shr47 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 ) )
    conv50 := ($cast ($uint<8>) shr47)
    shr53 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000111000 ) )
    conv56 := ($cast ($uint<8>) shr53)
    zeropad_output_pipe := conv56
    zeropad_output_pipe := conv50
    zeropad_output_pipe := conv44
    zeropad_output_pipe := conv38
    zeropad_output_pipe := conv32
    zeropad_output_pipe := conv26
    zeropad_output_pipe := conv20
    zeropad_output_pipe := conv14
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond9 := (indvarx_xnext == umax8 )
    $if exitcond9 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_A] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block0_starting
    $barrier 
    // load 
    tmp := pad
    // load 
    tmp2 := depth_high
    // load 
    tmp5 := col_high
    iNsTr_2 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp11 := ->(iNsTr_2) 
    iNsTr_3 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp14 := ->(iNsTr_3) 
    sext := (tmp5 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv23 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext179 := (tmp11 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv27 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext179) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext172 := (tmp14 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv29 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext172) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    mul30 := (conv29 * conv27)
    conv38 := ($cast ($uint<32>) tmp)
    sext180 := (mul30 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv74 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext180) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext181 := (tmp2 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv130 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext181) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    shl := (conv38 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    mul := (tmp2 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    sext173 := (mul * conv23)
    conv92 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext173) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    $place [entry_whilex_xbody]
    //begin: basic-block whilex_xbody
    $merge entry_whilex_xbody ifx_xend170_whilex_xbody
    $phi ix_x2 :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody ( $cast ($uint<16>) ix_x1x_xph) $on ifx_xend170_whilex_xbody 
    $phi jx_x1 :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody ( $cast ($uint<16>) jx_x0x_xph) $on ifx_xend170_whilex_xbody 
    $phi kx_x1 :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody ( $cast ($uint<16>) kx_x0x_xph) $on ifx_xend170_whilex_xbody 
    $endmerge
    conv36 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) ix_x2) )
    // compare instruction
    cmp := ( ($bitcast ( $int<32>) conv36) <   ($bitcast ( $int<32>) conv38 ) )
    $if cmp $then  $place [whilex_xbody_ifx_xthen] $else $place [whilex_xbody_lorx_xlhsx_xfalse] $endif 
    //begin: basic-block lorx_xlhsx_xfalse
    $merge whilex_xbody_lorx_xlhsx_xfalse
    $endmerge
    // load 
    tmp42 := row_high
    div := (tmp42 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
    add := (div + conv38)
    // compare instruction
    cmp45 := (conv36 < add )
    $if cmp45 $then  $place [lorx_xlhsx_xfalse_lorx_xlhsx_xfalse47] $else $place [lorx_xlhsx_xfalse_ifx_xthen] $endif 
    //begin: basic-block lorx_xlhsx_xfalse47
    $merge lorx_xlhsx_xfalse_lorx_xlhsx_xfalse47
    $endmerge
    conv49 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x1) )
    // compare instruction
    cmp52 := ( ($bitcast ( $int<32>) conv49) <   ($bitcast ( $int<32>) conv38 ) )
    $if cmp52 $then  $place [lorx_xlhsx_xfalse47_ifx_xthen] $else $place [lorx_xlhsx_xfalse47_lorx_xlhsx_xfalse54] $endif 
    //begin: basic-block lorx_xlhsx_xfalse54
    $merge lorx_xlhsx_xfalse47_lorx_xlhsx_xfalse54
    $endmerge
    // load 
    tmp57 := col_high
    div58 := (tmp57 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add61 := (div58 + conv38)
    // compare instruction
    cmp62 := (conv49 < add61 )
    $if cmp62 $then  $place [lorx_xlhsx_xfalse54_ifx_xelse] $else $place [lorx_xlhsx_xfalse54_ifx_xthen] $endif 
    //begin: basic-block ifx_xthen
    $merge lorx_xlhsx_xfalse_ifx_xthen lorx_xlhsx_xfalse47_ifx_xthen lorx_xlhsx_xfalse54_ifx_xthen whilex_xbody_ifx_xthen
    $endmerge
    conv66 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    conv70 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x1) )
    mul71 := (conv70 * conv27)
    mul77 := (conv36 * conv74)
    add72 := (mul71 + mul77)
    add78 := (add72 + conv66)
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add78) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom])
    ->(arrayidx) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    $place [ifx_xthen_ifx_xend]
    //begin: basic-block ifx_xelse
    $merge lorx_xlhsx_xfalse54_ifx_xelse
    $endmerge
    conv82 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    sub := (conv49 - conv38)
    mul89 := (sub * conv130)
    sub97 := (conv36 - conv38)
    mul98 := (sub97 * conv92)
    add90 := (conv82 + mul98)
    add99 := (add90 + mul89)
    mul108 := (conv49 * conv27)
    mul114 := (conv36 * conv74)
    add109 := (mul108 + mul114)
    add115 := (add109 + conv82)
    shr117 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add99) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom118 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr117) )
    arrayidx119 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom118])
    // load 
    tmp120 := ->(arrayidx119) 
    shr122 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add115) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom123 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr122) )
    arrayidx124 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom123])
    ->(arrayidx124) := tmp120
    $place [ifx_xelse_ifx_xend]
    //begin: basic-block ifx_xend
    $merge ifx_xelse_ifx_xend ifx_xthen_ifx_xend
    $endmerge
    conv127 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    add128 := (conv127 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    // compare instruction
    cmp131 := ( ($bitcast ( $int<32>) add128) <   ($bitcast ( $int<32>) conv130 ) )
    $if cmp131 $then  $place [ifx_xend_ifx_xthen133] $else $place [ifx_xend_ifx_xelse138] $endif 
    //begin: basic-block ifx_xthen133
    $merge ifx_xend_ifx_xthen133
    $endmerge
    add136 := (kx_x1 + ( $bitcast ($uint<16> ) _b0000000000000100 ) )
    $place [ifx_xthen133_ifx_xend170]
    //begin: basic-block ifx_xelse138
    $merge ifx_xend_ifx_xelse138
    $endmerge
    inc := (jx_x1 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    conv141 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc) )
    // load 
    tmp142 := col_high
    div143 := (tmp142 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add146 := (div143 + shl)
    // compare instruction
    cmp147 := (conv141 == add146 )
    inc152 := ($cast ($uint<16>) cmp147)
    inc152x_xix_x2 := (inc152 + ix_x2)
    jx_x2 := ( $mux cmp147 ( $bitcast ($uint<16> ) _b0000000000000000 )  inc)
    conv155 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc152x_xix_x2) )
    // load 
    tmp156 := row_high
    div157 := (tmp156 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
    add161 := (div157 + shl)
    // compare instruction
    cmp162 := (conv155 == add161 )
    $if cmp162 $then  $place [ifx_xelse138_whilex_xend] $else $place [ifx_xelse138_ifx_xend170] $endif 
    //begin: basic-block ifx_xend170
    $merge ifx_xelse138_ifx_xend170 ifx_xthen133_ifx_xend170
    $phi ix_x1x_xph :=  ( $cast ($uint<16>) ix_x2) $on ifx_xthen133_ifx_xend170 ( $cast ($uint<16>) inc152x_xix_x2) $on ifx_xelse138_ifx_xend170 
    $phi jx_x0x_xph :=  ( $cast ($uint<16>) jx_x1) $on ifx_xthen133_ifx_xend170 ( $cast ($uint<16>) jx_x2) $on ifx_xelse138_ifx_xend170 
    $phi kx_x0x_xph :=  ( $cast ($uint<16>) add136) $on ifx_xthen133_ifx_xend170 ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on ifx_xelse138_ifx_xend170 
    $endmerge
    $place [ifx_xend170_whilex_xbody]
    //begin: basic-block whilex_xend
    $merge ifx_xelse138_whilex_xend
    $endmerge
    $barrier 
    Block0_complete := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_B] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block1_starting
    $barrier 
    // load 
    tmp := col_high
    div := (tmp >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    conv := ($cast ($uint<16>) div)
    // load 
    tmp3 := pad
    // load 
    tmp6 := depth_high
    iNsTr_2 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp15 := ->(iNsTr_2) 
    iNsTr_3 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp18 := ->(iNsTr_3) 
    sext182 := (tmp6 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv25 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext182) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext := (tmp << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    sext183 := (tmp15 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv31 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext183) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext175 := (tmp18 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv33 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext175) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    mul34 := (conv33 * conv31)
    conv42 := ($cast ($uint<32>) tmp3)
    sext184 := (mul34 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv78 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext184) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    shl := (conv42 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    sext176 := (sext * conv25)
    conv96 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext176) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    $place [entry_whilex_xbody]
    //begin: basic-block whilex_xbody
    $merge entry_whilex_xbody ifx_xend173_whilex_xbody
    $phi ix_x2 :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody ( $cast ($uint<16>) ix_x1x_xph) $on ifx_xend173_whilex_xbody 
    $phi jx_x1 :=  ( $cast ($uint<16>) conv) $on entry_whilex_xbody ( $cast ($uint<16>) jx_x0x_xph) $on ifx_xend173_whilex_xbody 
    $phi kx_x1 :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody ( $cast ($uint<16>) kx_x0x_xph) $on ifx_xend173_whilex_xbody 
    $endmerge
    conv40 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) ix_x2) )
    // compare instruction
    cmp := ( ($bitcast ( $int<32>) conv40) <   ($bitcast ( $int<32>) conv42 ) )
    $if cmp $then  $place [whilex_xbody_ifx_xthen] $else $place [whilex_xbody_lorx_xlhsx_xfalse] $endif 
    //begin: basic-block lorx_xlhsx_xfalse
    $merge whilex_xbody_lorx_xlhsx_xfalse
    $endmerge
    // load 
    tmp46 := row_high
    div47 := (tmp46 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
    add := (div47 + conv42)
    // compare instruction
    cmp50 := (conv40 < add )
    $if cmp50 $then  $place [lorx_xlhsx_xfalse_lorx_xlhsx_xfalse52] $else $place [lorx_xlhsx_xfalse_ifx_xthen] $endif 
    //begin: basic-block lorx_xlhsx_xfalse52
    $merge lorx_xlhsx_xfalse_lorx_xlhsx_xfalse52
    $endmerge
    conv54 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x1) )
    // compare instruction
    cmp57 := ( ($bitcast ( $int<32>) conv54) <   ($bitcast ( $int<32>) conv42 ) )
    $if cmp57 $then  $place [lorx_xlhsx_xfalse52_ifx_xthen] $else $place [lorx_xlhsx_xfalse52_lorx_xlhsx_xfalse59] $endif 
    //begin: basic-block lorx_xlhsx_xfalse59
    $merge lorx_xlhsx_xfalse52_lorx_xlhsx_xfalse59
    $endmerge
    // load 
    tmp62 := col_high
    add65 := (tmp62 + conv42)
    // compare instruction
    cmp66 := (conv54 < add65 )
    $if cmp66 $then  $place [lorx_xlhsx_xfalse59_ifx_xelse] $else $place [lorx_xlhsx_xfalse59_ifx_xthen] $endif 
    //begin: basic-block ifx_xthen
    $merge lorx_xlhsx_xfalse_ifx_xthen lorx_xlhsx_xfalse52_ifx_xthen lorx_xlhsx_xfalse59_ifx_xthen whilex_xbody_ifx_xthen
    $endmerge
    conv70 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    conv74 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x1) )
    mul75 := (conv74 * conv31)
    mul81 := (conv40 * conv78)
    add76 := (mul75 + mul81)
    add82 := (add76 + conv70)
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add82) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom])
    ->(arrayidx) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    $place [ifx_xthen_ifx_xend]
    //begin: basic-block ifx_xelse
    $merge lorx_xlhsx_xfalse59_ifx_xelse
    $endmerge
    conv86 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    sub := (conv54 - conv42)
    mul93 := (sub * conv25)
    sub101 := (conv40 - conv42)
    mul102 := (sub101 * conv96)
    add94 := (conv86 + mul102)
    add103 := (add94 + mul93)
    mul112 := (conv54 * conv31)
    mul118 := (conv40 * conv78)
    add113 := (mul112 + mul118)
    add119 := (add113 + conv86)
    shr121 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add103) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom122 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr121) )
    arrayidx123 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom122])
    // load 
    tmp124 := ->(arrayidx123) 
    shr126 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add119) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom127 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr126) )
    arrayidx128 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom127])
    ->(arrayidx128) := tmp124
    $place [ifx_xelse_ifx_xend]
    //begin: basic-block ifx_xend
    $merge ifx_xelse_ifx_xend ifx_xthen_ifx_xend
    $endmerge
    conv131 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    add132 := (conv131 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    // compare instruction
    cmp135 := ( ($bitcast ( $int<32>) add132) <   ($bitcast ( $int<32>) conv25 ) )
    $if cmp135 $then  $place [ifx_xend_ifx_xthen137] $else $place [ifx_xend_ifx_xelse142] $endif 
    //begin: basic-block ifx_xthen137
    $merge ifx_xend_ifx_xthen137
    $endmerge
    add140 := (kx_x1 + ( $bitcast ($uint<16> ) _b0000000000000100 ) )
    $place [ifx_xthen137_ifx_xend173]
    //begin: basic-block ifx_xelse142
    $merge ifx_xend_ifx_xelse142
    $endmerge
    inc := (jx_x1 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    conv145 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc) )
    // load 
    tmp146 := col_high
    add149 := (tmp146 + shl)
    // compare instruction
    cmp150 := (conv145 == add149 )
    inc155 := ($cast ($uint<16>) cmp150)
    inc155x_xix_x2 := (inc155 + ix_x2)
    jx_x2 := ( $mux cmp150 conv inc)
    conv158 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc155x_xix_x2) )
    // load 
    tmp159 := row_high
    div160 := (tmp159 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
    add164 := (div160 + shl)
    // compare instruction
    cmp165 := (conv158 == add164 )
    $if cmp165 $then  $place [ifx_xelse142_whilex_xend] $else $place [ifx_xelse142_ifx_xend173] $endif 
    //begin: basic-block ifx_xend173
    $merge ifx_xelse142_ifx_xend173 ifx_xthen137_ifx_xend173
    $phi ix_x1x_xph :=  ( $cast ($uint<16>) ix_x2) $on ifx_xthen137_ifx_xend173 ( $cast ($uint<16>) inc155x_xix_x2) $on ifx_xelse142_ifx_xend173 
    $phi jx_x0x_xph :=  ( $cast ($uint<16>) jx_x1) $on ifx_xthen137_ifx_xend173 ( $cast ($uint<16>) jx_x2) $on ifx_xelse142_ifx_xend173 
    $phi kx_x0x_xph :=  ( $cast ($uint<16>) add140) $on ifx_xthen137_ifx_xend173 ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on ifx_xelse142_ifx_xend173 
    $endmerge
    $place [ifx_xend173_whilex_xbody]
    //begin: basic-block whilex_xend
    $merge ifx_xelse142_whilex_xend
    $endmerge
    $barrier 
    Block1_complete := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_C] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block2_starting
    $barrier 
    // load 
    tmp := row_high
    div := (tmp >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
    conv := ($cast ($uint<16>) div)
    // load 
    tmp2 := pad
    // load 
    tmp5 := depth_high
    // load 
    tmp8 := col_high
    iNsTr_2 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp14 := ->(iNsTr_2) 
    iNsTr_3 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp17 := ->(iNsTr_3) 
    sext := (tmp8 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv26 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext183 := (tmp14 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv30 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext183) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext176 := (tmp17 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv32 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext176) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    mul33 := (conv32 * conv30)
    conv41 := ($cast ($uint<32>) tmp2)
    sext184 := (mul33 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv78 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext184) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext185 := (tmp5 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv134 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext185) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    shl := (conv41 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    mul := (tmp5 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    sext177 := (mul * conv26)
    conv96 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext177) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    $place [entry_whilex_xbody]
    //begin: basic-block whilex_xbody
    $merge entry_whilex_xbody ifx_xend174_whilex_xbody
    $phi ix_x2 :=  ( $cast ($uint<16>) conv) $on entry_whilex_xbody ( $cast ($uint<16>) ix_x1x_xph) $on ifx_xend174_whilex_xbody 
    $phi jx_x1 :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody ( $cast ($uint<16>) jx_x0x_xph) $on ifx_xend174_whilex_xbody 
    $phi kx_x1 :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody ( $cast ($uint<16>) kx_x0x_xph) $on ifx_xend174_whilex_xbody 
    $endmerge
    conv39 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) ix_x2) )
    // compare instruction
    cmp := ( ($bitcast ( $int<32>) conv39) <   ($bitcast ( $int<32>) conv41 ) )
    $if cmp $then  $place [whilex_xbody_ifx_xthen] $else $place [whilex_xbody_lorx_xlhsx_xfalse] $endif 
    //begin: basic-block lorx_xlhsx_xfalse
    $merge whilex_xbody_lorx_xlhsx_xfalse
    $endmerge
    // load 
    tmp45 := row_high
    div46 := (tmp45 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add := (div46 + conv41)
    // compare instruction
    cmp49 := (conv39 < add )
    $if cmp49 $then  $place [lorx_xlhsx_xfalse_lorx_xlhsx_xfalse51] $else $place [lorx_xlhsx_xfalse_ifx_xthen] $endif 
    //begin: basic-block lorx_xlhsx_xfalse51
    $merge lorx_xlhsx_xfalse_lorx_xlhsx_xfalse51
    $endmerge
    conv53 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x1) )
    // compare instruction
    cmp56 := ( ($bitcast ( $int<32>) conv53) <   ($bitcast ( $int<32>) conv41 ) )
    $if cmp56 $then  $place [lorx_xlhsx_xfalse51_ifx_xthen] $else $place [lorx_xlhsx_xfalse51_lorx_xlhsx_xfalse58] $endif 
    //begin: basic-block lorx_xlhsx_xfalse58
    $merge lorx_xlhsx_xfalse51_lorx_xlhsx_xfalse58
    $endmerge
    // load 
    tmp61 := col_high
    div62 := (tmp61 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add65 := (div62 + conv41)
    // compare instruction
    cmp66 := (conv53 < add65 )
    $if cmp66 $then  $place [lorx_xlhsx_xfalse58_ifx_xelse] $else $place [lorx_xlhsx_xfalse58_ifx_xthen] $endif 
    //begin: basic-block ifx_xthen
    $merge lorx_xlhsx_xfalse_ifx_xthen lorx_xlhsx_xfalse51_ifx_xthen lorx_xlhsx_xfalse58_ifx_xthen whilex_xbody_ifx_xthen
    $endmerge
    conv70 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    conv74 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x1) )
    mul75 := (conv74 * conv30)
    mul81 := (conv39 * conv78)
    add76 := (mul75 + mul81)
    add82 := (add76 + conv70)
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add82) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom])
    ->(arrayidx) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    $place [ifx_xthen_ifx_xend]
    //begin: basic-block ifx_xelse
    $merge lorx_xlhsx_xfalse58_ifx_xelse
    $endmerge
    conv86 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    sub := (conv53 - conv41)
    mul93 := (sub * conv134)
    sub101 := (conv39 - conv41)
    mul102 := (sub101 * conv96)
    add94 := (conv86 + mul102)
    add103 := (add94 + mul93)
    mul112 := (conv53 * conv30)
    mul118 := (conv39 * conv78)
    add113 := (mul112 + mul118)
    add119 := (add113 + conv86)
    shr121 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add103) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom122 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr121) )
    arrayidx123 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom122])
    // load 
    tmp124 := ->(arrayidx123) 
    shr126 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add119) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom127 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr126) )
    arrayidx128 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom127])
    ->(arrayidx128) := tmp124
    $place [ifx_xelse_ifx_xend]
    //begin: basic-block ifx_xend
    $merge ifx_xelse_ifx_xend ifx_xthen_ifx_xend
    $endmerge
    conv131 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    add132 := (conv131 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    // compare instruction
    cmp135 := ( ($bitcast ( $int<32>) add132) <   ($bitcast ( $int<32>) conv134 ) )
    $if cmp135 $then  $place [ifx_xend_ifx_xthen137] $else $place [ifx_xend_ifx_xelse142] $endif 
    //begin: basic-block ifx_xthen137
    $merge ifx_xend_ifx_xthen137
    $endmerge
    add140 := (kx_x1 + ( $bitcast ($uint<16> ) _b0000000000000100 ) )
    $place [ifx_xthen137_ifx_xend174]
    //begin: basic-block ifx_xelse142
    $merge ifx_xend_ifx_xelse142
    $endmerge
    inc := (jx_x1 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    conv145 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc) )
    // load 
    tmp146 := col_high
    div147 := (tmp146 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add150 := (div147 + shl)
    // compare instruction
    cmp151 := (conv145 == add150 )
    inc156 := ($cast ($uint<16>) cmp151)
    inc156x_xix_x2 := (inc156 + ix_x2)
    jx_x2 := ( $mux cmp151 ( $bitcast ($uint<16> ) _b0000000000000000 )  inc)
    conv159 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc156x_xix_x2) )
    // load 
    tmp160 := row_high
    div161 := (tmp160 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add165 := (div161 + shl)
    // compare instruction
    cmp166 := (conv159 == add165 )
    $if cmp166 $then  $place [ifx_xelse142_whilex_xend] $else $place [ifx_xelse142_ifx_xend174] $endif 
    //begin: basic-block ifx_xend174
    $merge ifx_xelse142_ifx_xend174 ifx_xthen137_ifx_xend174
    $phi ix_x1x_xph :=  ( $cast ($uint<16>) ix_x2) $on ifx_xthen137_ifx_xend174 ( $cast ($uint<16>) inc156x_xix_x2) $on ifx_xelse142_ifx_xend174 
    $phi jx_x0x_xph :=  ( $cast ($uint<16>) jx_x1) $on ifx_xthen137_ifx_xend174 ( $cast ($uint<16>) jx_x2) $on ifx_xelse142_ifx_xend174 
    $phi kx_x0x_xph :=  ( $cast ($uint<16>) add140) $on ifx_xthen137_ifx_xend174 ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on ifx_xelse142_ifx_xend174 
    $endmerge
    $place [ifx_xend174_whilex_xbody]
    //begin: basic-block whilex_xend
    $merge ifx_xelse142_whilex_xend
    $endmerge
    $barrier 
    Block2_complete := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_D] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block3_starting
    $barrier 
    // load 
    tmp := col_high
    div := (tmp >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    conv := ($cast ($uint<16>) div)
    // load 
    tmp2 := row_high
    div3 := (tmp2 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
    conv4 := ($cast ($uint<16>) div3)
    // load 
    tmp6 := pad
    // load 
    tmp9 := depth_high
    iNsTr_2 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp18 := ->(iNsTr_2) 
    iNsTr_3 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp21 := ->(iNsTr_3) 
    sext := (tmp << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv30 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext185 := (tmp18 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv34 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext185) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext178 := (tmp21 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv36 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext178) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    mul37 := (conv36 * conv34)
    conv45 := ($cast ($uint<32>) tmp6)
    sext186 := (mul37 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv81 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext186) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext187 := (tmp9 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv137 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext187) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    shl := (conv45 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    mul := (tmp9 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    sext179 := (mul * conv30)
    conv99 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext179) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    $place [entry_whilex_xbody]
    //begin: basic-block whilex_xbody
    $merge entry_whilex_xbody ifx_xend176_whilex_xbody
    $phi ix_x2 :=  ( $cast ($uint<16>) conv4) $on entry_whilex_xbody ( $cast ($uint<16>) ix_x1x_xph) $on ifx_xend176_whilex_xbody 
    $phi jx_x1 :=  ( $cast ($uint<16>) conv) $on entry_whilex_xbody ( $cast ($uint<16>) jx_x0x_xph) $on ifx_xend176_whilex_xbody 
    $phi kx_x1 :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody ( $cast ($uint<16>) kx_x0x_xph) $on ifx_xend176_whilex_xbody 
    $endmerge
    conv43 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) ix_x2) )
    // compare instruction
    cmp := ( ($bitcast ( $int<32>) conv43) <   ($bitcast ( $int<32>) conv45 ) )
    $if cmp $then  $place [whilex_xbody_ifx_xthen] $else $place [whilex_xbody_lorx_xlhsx_xfalse] $endif 
    //begin: basic-block lorx_xlhsx_xfalse
    $merge whilex_xbody_lorx_xlhsx_xfalse
    $endmerge
    // load 
    tmp49 := row_high
    div50 := (tmp49 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add := (div50 + conv45)
    // compare instruction
    cmp53 := (conv43 < add )
    $if cmp53 $then  $place [lorx_xlhsx_xfalse_lorx_xlhsx_xfalse55] $else $place [lorx_xlhsx_xfalse_ifx_xthen] $endif 
    //begin: basic-block lorx_xlhsx_xfalse55
    $merge lorx_xlhsx_xfalse_lorx_xlhsx_xfalse55
    $endmerge
    conv57 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x1) )
    // compare instruction
    cmp60 := ( ($bitcast ( $int<32>) conv57) <   ($bitcast ( $int<32>) conv45 ) )
    $if cmp60 $then  $place [lorx_xlhsx_xfalse55_ifx_xthen] $else $place [lorx_xlhsx_xfalse55_lorx_xlhsx_xfalse62] $endif 
    //begin: basic-block lorx_xlhsx_xfalse62
    $merge lorx_xlhsx_xfalse55_lorx_xlhsx_xfalse62
    $endmerge
    // load 
    tmp65 := col_high
    add68 := (tmp65 + conv45)
    // compare instruction
    cmp69 := (conv57 < add68 )
    $if cmp69 $then  $place [lorx_xlhsx_xfalse62_ifx_xelse] $else $place [lorx_xlhsx_xfalse62_ifx_xthen] $endif 
    //begin: basic-block ifx_xthen
    $merge lorx_xlhsx_xfalse_ifx_xthen lorx_xlhsx_xfalse55_ifx_xthen lorx_xlhsx_xfalse62_ifx_xthen whilex_xbody_ifx_xthen
    $endmerge
    conv73 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    conv77 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x1) )
    mul78 := (conv77 * conv34)
    mul84 := (conv43 * conv81)
    add79 := (mul78 + mul84)
    add85 := (add79 + conv73)
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add85) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom])
    ->(arrayidx) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    $place [ifx_xthen_ifx_xend]
    //begin: basic-block ifx_xelse
    $merge lorx_xlhsx_xfalse62_ifx_xelse
    $endmerge
    conv89 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    sub := (conv57 - conv45)
    mul96 := (sub * conv137)
    sub104 := (conv43 - conv45)
    mul105 := (sub104 * conv99)
    add97 := (conv89 + mul105)
    add106 := (add97 + mul96)
    mul115 := (conv57 * conv34)
    mul121 := (conv43 * conv81)
    add116 := (mul115 + mul121)
    add122 := (add116 + conv89)
    shr124 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add106) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom125 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr124) )
    arrayidx126 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom125])
    // load 
    tmp127 := ->(arrayidx126) 
    shr129 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add122) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom130 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr129) )
    arrayidx131 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom130])
    ->(arrayidx131) := tmp127
    $place [ifx_xelse_ifx_xend]
    //begin: basic-block ifx_xend
    $merge ifx_xelse_ifx_xend ifx_xthen_ifx_xend
    $endmerge
    conv134 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    add135 := (conv134 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    // compare instruction
    cmp138 := ( ($bitcast ( $int<32>) add135) <   ($bitcast ( $int<32>) conv137 ) )
    $if cmp138 $then  $place [ifx_xend_ifx_xthen140] $else $place [ifx_xend_ifx_xelse145] $endif 
    //begin: basic-block ifx_xthen140
    $merge ifx_xend_ifx_xthen140
    $endmerge
    add143 := (kx_x1 + ( $bitcast ($uint<16> ) _b0000000000000100 ) )
    $place [ifx_xthen140_ifx_xend176]
    //begin: basic-block ifx_xelse145
    $merge ifx_xend_ifx_xelse145
    $endmerge
    inc := (jx_x1 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    conv148 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc) )
    // load 
    tmp149 := col_high
    add152 := (tmp149 + shl)
    // compare instruction
    cmp153 := (conv148 == add152 )
    inc158 := ($cast ($uint<16>) cmp153)
    inc158x_xix_x2 := (inc158 + ix_x2)
    jx_x2 := ( $mux cmp153 conv inc)
    conv161 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc158x_xix_x2) )
    // load 
    tmp162 := row_high
    div163 := (tmp162 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add167 := (div163 + shl)
    // compare instruction
    cmp168 := (conv161 == add167 )
    $if cmp168 $then  $place [ifx_xelse145_whilex_xend] $else $place [ifx_xelse145_ifx_xend176] $endif 
    //begin: basic-block ifx_xend176
    $merge ifx_xelse145_ifx_xend176 ifx_xthen140_ifx_xend176
    $phi ix_x1x_xph :=  ( $cast ($uint<16>) ix_x2) $on ifx_xthen140_ifx_xend176 ( $cast ($uint<16>) inc158x_xix_x2) $on ifx_xelse145_ifx_xend176 
    $phi jx_x0x_xph :=  ( $cast ($uint<16>) jx_x1) $on ifx_xthen140_ifx_xend176 ( $cast ($uint<16>) jx_x2) $on ifx_xelse145_ifx_xend176 
    $phi kx_x0x_xph :=  ( $cast ($uint<16>) add143) $on ifx_xthen140_ifx_xend176 ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on ifx_xelse145_ifx_xend176 
    $endmerge
    $place [ifx_xend176_whilex_xbody]
    //begin: basic-block whilex_xend
    $merge ifx_xelse145_whilex_xend
    $endmerge
    $barrier 
    Block3_complete := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_E] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block4_starting
    $barrier 
    // load 
    tmp := row_high
    div := (tmp >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    conv := ($cast ($uint<16>) div)
    // load 
    tmp2 := pad
    // load 
    tmp5 := depth_high
    // load 
    tmp8 := col_high
    iNsTr_2 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp14 := ->(iNsTr_2) 
    iNsTr_3 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp17 := ->(iNsTr_3) 
    sext := (tmp8 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv26 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext185 := (tmp14 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv30 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext185) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext178 := (tmp17 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv32 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext178) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    mul33 := (conv32 * conv30)
    conv41 := ($cast ($uint<32>) tmp2)
    sext186 := (mul33 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv79 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext186) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext187 := (tmp5 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv135 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext187) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    shl := (conv41 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    mul := (tmp5 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    sext179 := (mul * conv26)
    conv97 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext179) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    $place [entry_whilex_xbody]
    //begin: basic-block whilex_xbody
    $merge entry_whilex_xbody ifx_xend176_whilex_xbody
    $phi ix_x2 :=  ( $cast ($uint<16>) conv) $on entry_whilex_xbody ( $cast ($uint<16>) ix_x1x_xph) $on ifx_xend176_whilex_xbody 
    $phi jx_x1 :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody ( $cast ($uint<16>) jx_x0x_xph) $on ifx_xend176_whilex_xbody 
    $phi kx_x1 :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody ( $cast ($uint<16>) kx_x0x_xph) $on ifx_xend176_whilex_xbody 
    $endmerge
    conv39 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) ix_x2) )
    // compare instruction
    cmp := ( ($bitcast ( $int<32>) conv39) <   ($bitcast ( $int<32>) conv41 ) )
    $if cmp $then  $place [whilex_xbody_ifx_xthen] $else $place [whilex_xbody_lorx_xlhsx_xfalse] $endif 
    //begin: basic-block lorx_xlhsx_xfalse
    $merge whilex_xbody_lorx_xlhsx_xfalse
    $endmerge
    // load 
    tmp45 := row_high
    mul46 := (tmp45 * ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
    div47 := (mul46 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
    add := (div47 + conv41)
    // compare instruction
    cmp50 := (conv39 < add )
    $if cmp50 $then  $place [lorx_xlhsx_xfalse_lorx_xlhsx_xfalse52] $else $place [lorx_xlhsx_xfalse_ifx_xthen] $endif 
    //begin: basic-block lorx_xlhsx_xfalse52
    $merge lorx_xlhsx_xfalse_lorx_xlhsx_xfalse52
    $endmerge
    conv54 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x1) )
    // compare instruction
    cmp57 := ( ($bitcast ( $int<32>) conv54) <   ($bitcast ( $int<32>) conv41 ) )
    $if cmp57 $then  $place [lorx_xlhsx_xfalse52_ifx_xthen] $else $place [lorx_xlhsx_xfalse52_lorx_xlhsx_xfalse59] $endif 
    //begin: basic-block lorx_xlhsx_xfalse59
    $merge lorx_xlhsx_xfalse52_lorx_xlhsx_xfalse59
    $endmerge
    // load 
    tmp62 := col_high
    div63 := (tmp62 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add66 := (div63 + conv41)
    // compare instruction
    cmp67 := (conv54 < add66 )
    $if cmp67 $then  $place [lorx_xlhsx_xfalse59_ifx_xelse] $else $place [lorx_xlhsx_xfalse59_ifx_xthen] $endif 
    //begin: basic-block ifx_xthen
    $merge lorx_xlhsx_xfalse_ifx_xthen lorx_xlhsx_xfalse52_ifx_xthen lorx_xlhsx_xfalse59_ifx_xthen whilex_xbody_ifx_xthen
    $endmerge
    conv71 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    conv75 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x1) )
    mul76 := (conv75 * conv30)
    mul82 := (conv39 * conv79)
    add77 := (mul76 + mul82)
    add83 := (add77 + conv71)
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add83) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom])
    ->(arrayidx) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    $place [ifx_xthen_ifx_xend]
    //begin: basic-block ifx_xelse
    $merge lorx_xlhsx_xfalse59_ifx_xelse
    $endmerge
    conv87 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    sub := (conv54 - conv41)
    mul94 := (sub * conv135)
    sub102 := (conv39 - conv41)
    mul103 := (sub102 * conv97)
    add95 := (conv87 + mul103)
    add104 := (add95 + mul94)
    mul113 := (conv54 * conv30)
    mul119 := (conv39 * conv79)
    add114 := (mul113 + mul119)
    add120 := (add114 + conv87)
    shr122 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add104) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom123 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr122) )
    arrayidx124 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom123])
    // load 
    tmp125 := ->(arrayidx124) 
    shr127 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add120) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom128 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr127) )
    arrayidx129 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom128])
    ->(arrayidx129) := tmp125
    $place [ifx_xelse_ifx_xend]
    //begin: basic-block ifx_xend
    $merge ifx_xelse_ifx_xend ifx_xthen_ifx_xend
    $endmerge
    conv132 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    add133 := (conv132 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    // compare instruction
    cmp136 := ( ($bitcast ( $int<32>) add133) <   ($bitcast ( $int<32>) conv135 ) )
    $if cmp136 $then  $place [ifx_xend_ifx_xthen138] $else $place [ifx_xend_ifx_xelse143] $endif 
    //begin: basic-block ifx_xthen138
    $merge ifx_xend_ifx_xthen138
    $endmerge
    add141 := (kx_x1 + ( $bitcast ($uint<16> ) _b0000000000000100 ) )
    $place [ifx_xthen138_ifx_xend176]
    //begin: basic-block ifx_xelse143
    $merge ifx_xend_ifx_xelse143
    $endmerge
    inc := (jx_x1 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    conv146 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc) )
    // load 
    tmp147 := col_high
    div148 := (tmp147 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add151 := (div148 + shl)
    // compare instruction
    cmp152 := (conv146 == add151 )
    inc157 := ($cast ($uint<16>) cmp152)
    inc157x_xix_x2 := (inc157 + ix_x2)
    jx_x2 := ( $mux cmp152 ( $bitcast ($uint<16> ) _b0000000000000000 )  inc)
    conv160 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc157x_xix_x2) )
    // load 
    tmp161 := row_high
    mul162 := (tmp161 * ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
    div163 := (mul162 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
    add167 := (div163 + shl)
    // compare instruction
    cmp168 := (conv160 == add167 )
    $if cmp168 $then  $place [ifx_xelse143_whilex_xend] $else $place [ifx_xelse143_ifx_xend176] $endif 
    //begin: basic-block ifx_xend176
    $merge ifx_xelse143_ifx_xend176 ifx_xthen138_ifx_xend176
    $phi ix_x1x_xph :=  ( $cast ($uint<16>) ix_x2) $on ifx_xthen138_ifx_xend176 ( $cast ($uint<16>) inc157x_xix_x2) $on ifx_xelse143_ifx_xend176 
    $phi jx_x0x_xph :=  ( $cast ($uint<16>) jx_x1) $on ifx_xthen138_ifx_xend176 ( $cast ($uint<16>) jx_x2) $on ifx_xelse143_ifx_xend176 
    $phi kx_x0x_xph :=  ( $cast ($uint<16>) add141) $on ifx_xthen138_ifx_xend176 ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on ifx_xelse143_ifx_xend176 
    $endmerge
    $place [ifx_xend176_whilex_xbody]
    //begin: basic-block whilex_xend
    $merge ifx_xelse143_whilex_xend
    $endmerge
    $barrier 
    Block4_complete := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_F] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block5_starting
    $barrier 
    // load 
    tmp := col_high
    div := (tmp >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    conv := ($cast ($uint<16>) div)
    // load 
    tmp2 := row_high
    div3 := (tmp2 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    conv4 := ($cast ($uint<16>) div3)
    // load 
    tmp6 := pad
    // load 
    tmp9 := depth_high
    iNsTr_2 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp18 := ->(iNsTr_2) 
    iNsTr_3 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp21 := ->(iNsTr_3) 
    sext := (tmp << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv30 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext187 := (tmp18 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv34 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext187) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext180 := (tmp21 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv36 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext180) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    mul37 := (conv36 * conv34)
    conv45 := ($cast ($uint<32>) tmp6)
    sext188 := (mul37 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv82 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext188) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext189 := (tmp9 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv138 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext189) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    shl := (conv45 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    mul := (tmp9 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    sext181 := (mul * conv30)
    conv100 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext181) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    $place [entry_whilex_xbody]
    //begin: basic-block whilex_xbody
    $merge entry_whilex_xbody ifx_xend178_whilex_xbody
    $phi ix_x2 :=  ( $cast ($uint<16>) conv4) $on entry_whilex_xbody ( $cast ($uint<16>) ix_x1x_xph) $on ifx_xend178_whilex_xbody 
    $phi jx_x1 :=  ( $cast ($uint<16>) conv) $on entry_whilex_xbody ( $cast ($uint<16>) jx_x0x_xph) $on ifx_xend178_whilex_xbody 
    $phi kx_x1 :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody ( $cast ($uint<16>) kx_x0x_xph) $on ifx_xend178_whilex_xbody 
    $endmerge
    conv43 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) ix_x2) )
    // compare instruction
    cmp := ( ($bitcast ( $int<32>) conv43) <   ($bitcast ( $int<32>) conv45 ) )
    $if cmp $then  $place [whilex_xbody_ifx_xthen] $else $place [whilex_xbody_lorx_xlhsx_xfalse] $endif 
    //begin: basic-block lorx_xlhsx_xfalse
    $merge whilex_xbody_lorx_xlhsx_xfalse
    $endmerge
    // load 
    tmp49 := row_high
    mul50 := (tmp49 * ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
    div51 := (mul50 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
    add := (div51 + conv45)
    // compare instruction
    cmp54 := (conv43 < add )
    $if cmp54 $then  $place [lorx_xlhsx_xfalse_lorx_xlhsx_xfalse56] $else $place [lorx_xlhsx_xfalse_ifx_xthen] $endif 
    //begin: basic-block lorx_xlhsx_xfalse56
    $merge lorx_xlhsx_xfalse_lorx_xlhsx_xfalse56
    $endmerge
    conv58 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x1) )
    // compare instruction
    cmp61 := ( ($bitcast ( $int<32>) conv58) <   ($bitcast ( $int<32>) conv45 ) )
    $if cmp61 $then  $place [lorx_xlhsx_xfalse56_ifx_xthen] $else $place [lorx_xlhsx_xfalse56_lorx_xlhsx_xfalse63] $endif 
    //begin: basic-block lorx_xlhsx_xfalse63
    $merge lorx_xlhsx_xfalse56_lorx_xlhsx_xfalse63
    $endmerge
    // load 
    tmp66 := col_high
    add69 := (tmp66 + conv45)
    // compare instruction
    cmp70 := (conv58 < add69 )
    $if cmp70 $then  $place [lorx_xlhsx_xfalse63_ifx_xelse] $else $place [lorx_xlhsx_xfalse63_ifx_xthen] $endif 
    //begin: basic-block ifx_xthen
    $merge lorx_xlhsx_xfalse_ifx_xthen lorx_xlhsx_xfalse56_ifx_xthen lorx_xlhsx_xfalse63_ifx_xthen whilex_xbody_ifx_xthen
    $endmerge
    conv74 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    conv78 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x1) )
    mul79 := (conv78 * conv34)
    mul85 := (conv43 * conv82)
    add80 := (mul79 + mul85)
    add86 := (add80 + conv74)
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add86) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom])
    ->(arrayidx) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    $place [ifx_xthen_ifx_xend]
    //begin: basic-block ifx_xelse
    $merge lorx_xlhsx_xfalse63_ifx_xelse
    $endmerge
    conv90 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    sub := (conv58 - conv45)
    mul97 := (sub * conv138)
    sub105 := (conv43 - conv45)
    mul106 := (sub105 * conv100)
    add98 := (conv90 + mul106)
    add107 := (add98 + mul97)
    mul116 := (conv58 * conv34)
    mul122 := (conv43 * conv82)
    add117 := (mul116 + mul122)
    add123 := (add117 + conv90)
    shr125 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add107) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom126 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr125) )
    arrayidx127 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom126])
    // load 
    tmp128 := ->(arrayidx127) 
    shr130 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add123) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom131 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr130) )
    arrayidx132 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom131])
    ->(arrayidx132) := tmp128
    $place [ifx_xelse_ifx_xend]
    //begin: basic-block ifx_xend
    $merge ifx_xelse_ifx_xend ifx_xthen_ifx_xend
    $endmerge
    conv135 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    add136 := (conv135 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    // compare instruction
    cmp139 := ( ($bitcast ( $int<32>) add136) <   ($bitcast ( $int<32>) conv138 ) )
    $if cmp139 $then  $place [ifx_xend_ifx_xthen141] $else $place [ifx_xend_ifx_xelse146] $endif 
    //begin: basic-block ifx_xthen141
    $merge ifx_xend_ifx_xthen141
    $endmerge
    add144 := (kx_x1 + ( $bitcast ($uint<16> ) _b0000000000000100 ) )
    $place [ifx_xthen141_ifx_xend178]
    //begin: basic-block ifx_xelse146
    $merge ifx_xend_ifx_xelse146
    $endmerge
    inc := (jx_x1 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    conv149 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc) )
    // load 
    tmp150 := col_high
    add153 := (tmp150 + shl)
    // compare instruction
    cmp154 := (conv149 == add153 )
    inc159 := ($cast ($uint<16>) cmp154)
    inc159x_xix_x2 := (inc159 + ix_x2)
    jx_x2 := ( $mux cmp154 conv inc)
    conv162 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc159x_xix_x2) )
    // load 
    tmp163 := row_high
    mul164 := (tmp163 * ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
    div165 := (mul164 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
    add169 := (div165 + shl)
    // compare instruction
    cmp170 := (conv162 == add169 )
    $if cmp170 $then  $place [ifx_xelse146_whilex_xend] $else $place [ifx_xelse146_ifx_xend178] $endif 
    //begin: basic-block ifx_xend178
    $merge ifx_xelse146_ifx_xend178 ifx_xthen141_ifx_xend178
    $phi ix_x1x_xph :=  ( $cast ($uint<16>) ix_x2) $on ifx_xthen141_ifx_xend178 ( $cast ($uint<16>) inc159x_xix_x2) $on ifx_xelse146_ifx_xend178 
    $phi jx_x0x_xph :=  ( $cast ($uint<16>) jx_x1) $on ifx_xthen141_ifx_xend178 ( $cast ($uint<16>) jx_x2) $on ifx_xelse146_ifx_xend178 
    $phi kx_x0x_xph :=  ( $cast ($uint<16>) add144) $on ifx_xthen141_ifx_xend178 ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on ifx_xelse146_ifx_xend178 
    $endmerge
    $place [ifx_xend178_whilex_xbody]
    //begin: basic-block whilex_xend
    $merge ifx_xelse146_whilex_xend
    $endmerge
    $barrier 
    Block5_complete := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_G] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block6_starting
    $barrier 
    // load 
    tmp := row_high
    div := (tmp >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
    mul := (div * ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
    conv := ($cast ($uint<16>) mul)
    // load 
    tmp2 := pad
    // load 
    tmp5 := depth_high
    // load 
    tmp8 := col_high
    iNsTr_2 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp14 := ->(iNsTr_2) 
    iNsTr_3 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp17 := ->(iNsTr_3) 
    sext := (tmp8 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv26 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext182 := (tmp14 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv31 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext182) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext175 := (tmp17 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv33 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext175) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    mul34 := (conv33 * conv31)
    conv42 := ($cast ($uint<32>) tmp2)
    sext183 := (mul34 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv78 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext183) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext184 := (tmp5 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv134 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext184) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    shl := (conv42 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    mul27 := (tmp5 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    sext176 := (mul27 * conv26)
    conv96 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext176) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    $place [entry_whilex_xbody]
    //begin: basic-block whilex_xbody
    $merge entry_whilex_xbody ifx_xend173_whilex_xbody
    $phi ix_x2 :=  ( $cast ($uint<16>) conv) $on entry_whilex_xbody ( $cast ($uint<16>) ix_x1x_xph) $on ifx_xend173_whilex_xbody 
    $phi jx_x1 :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody ( $cast ($uint<16>) jx_x0x_xph) $on ifx_xend173_whilex_xbody 
    $phi kx_x1 :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody ( $cast ($uint<16>) kx_x0x_xph) $on ifx_xend173_whilex_xbody 
    $endmerge
    conv40 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) ix_x2) )
    // compare instruction
    cmp := ( ($bitcast ( $int<32>) conv40) <   ($bitcast ( $int<32>) conv42 ) )
    $if cmp $then  $place [whilex_xbody_ifx_xthen] $else $place [whilex_xbody_lorx_xlhsx_xfalse] $endif 
    //begin: basic-block lorx_xlhsx_xfalse
    $merge whilex_xbody_lorx_xlhsx_xfalse
    $endmerge
    // load 
    tmp46 := row_high
    add := (tmp46 + conv42)
    // compare instruction
    cmp49 := (conv40 < add )
    $if cmp49 $then  $place [lorx_xlhsx_xfalse_lorx_xlhsx_xfalse51] $else $place [lorx_xlhsx_xfalse_ifx_xthen] $endif 
    //begin: basic-block lorx_xlhsx_xfalse51
    $merge lorx_xlhsx_xfalse_lorx_xlhsx_xfalse51
    $endmerge
    conv53 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x1) )
    // compare instruction
    cmp56 := ( ($bitcast ( $int<32>) conv53) <   ($bitcast ( $int<32>) conv42 ) )
    $if cmp56 $then  $place [lorx_xlhsx_xfalse51_ifx_xthen] $else $place [lorx_xlhsx_xfalse51_lorx_xlhsx_xfalse58] $endif 
    //begin: basic-block lorx_xlhsx_xfalse58
    $merge lorx_xlhsx_xfalse51_lorx_xlhsx_xfalse58
    $endmerge
    // load 
    tmp61 := col_high
    div62 := (tmp61 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add65 := (div62 + conv42)
    // compare instruction
    cmp66 := (conv53 < add65 )
    $if cmp66 $then  $place [lorx_xlhsx_xfalse58_ifx_xelse] $else $place [lorx_xlhsx_xfalse58_ifx_xthen] $endif 
    //begin: basic-block ifx_xthen
    $merge lorx_xlhsx_xfalse_ifx_xthen lorx_xlhsx_xfalse51_ifx_xthen lorx_xlhsx_xfalse58_ifx_xthen whilex_xbody_ifx_xthen
    $endmerge
    conv70 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    conv74 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x1) )
    mul75 := (conv74 * conv31)
    mul81 := (conv40 * conv78)
    add76 := (mul75 + mul81)
    add82 := (add76 + conv70)
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add82) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom])
    ->(arrayidx) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    $place [ifx_xthen_ifx_xend]
    //begin: basic-block ifx_xelse
    $merge lorx_xlhsx_xfalse58_ifx_xelse
    $endmerge
    conv86 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    sub := (conv53 - conv42)
    mul93 := (sub * conv134)
    sub101 := (conv40 - conv42)
    mul102 := (sub101 * conv96)
    add94 := (conv86 + mul102)
    add103 := (add94 + mul93)
    mul112 := (conv53 * conv31)
    mul118 := (conv40 * conv78)
    add113 := (mul112 + mul118)
    add119 := (add113 + conv86)
    shr121 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add103) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom122 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr121) )
    arrayidx123 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom122])
    // load 
    tmp124 := ->(arrayidx123) 
    shr126 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add119) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom127 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr126) )
    arrayidx128 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom127])
    ->(arrayidx128) := tmp124
    $place [ifx_xelse_ifx_xend]
    //begin: basic-block ifx_xend
    $merge ifx_xelse_ifx_xend ifx_xthen_ifx_xend
    $endmerge
    conv131 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    add132 := (conv131 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    // compare instruction
    cmp135 := ( ($bitcast ( $int<32>) add132) <   ($bitcast ( $int<32>) conv134 ) )
    $if cmp135 $then  $place [ifx_xend_ifx_xthen137] $else $place [ifx_xend_ifx_xelse142] $endif 
    //begin: basic-block ifx_xthen137
    $merge ifx_xend_ifx_xthen137
    $endmerge
    add140 := (kx_x1 + ( $bitcast ($uint<16> ) _b0000000000000100 ) )
    $place [ifx_xthen137_ifx_xend173]
    //begin: basic-block ifx_xelse142
    $merge ifx_xend_ifx_xelse142
    $endmerge
    inc := (jx_x1 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    conv145 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc) )
    // load 
    tmp146 := col_high
    div147 := (tmp146 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add150 := (div147 + shl)
    // compare instruction
    cmp151 := (conv145 == add150 )
    inc156 := ($cast ($uint<16>) cmp151)
    inc156x_xix_x2 := (inc156 + ix_x2)
    jx_x2 := ( $mux cmp151 ( $bitcast ($uint<16> ) _b0000000000000000 )  inc)
    conv159 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc156x_xix_x2) )
    // load 
    tmp160 := row_high
    add164 := (tmp160 + shl)
    // compare instruction
    cmp165 := (conv159 == add164 )
    $if cmp165 $then  $place [ifx_xelse142_whilex_xend] $else $place [ifx_xelse142_ifx_xend173] $endif 
    //begin: basic-block ifx_xend173
    $merge ifx_xelse142_ifx_xend173 ifx_xthen137_ifx_xend173
    $phi ix_x1x_xph :=  ( $cast ($uint<16>) ix_x2) $on ifx_xthen137_ifx_xend173 ( $cast ($uint<16>) inc156x_xix_x2) $on ifx_xelse142_ifx_xend173 
    $phi jx_x0x_xph :=  ( $cast ($uint<16>) jx_x1) $on ifx_xthen137_ifx_xend173 ( $cast ($uint<16>) jx_x2) $on ifx_xelse142_ifx_xend173 
    $phi kx_x0x_xph :=  ( $cast ($uint<16>) add140) $on ifx_xthen137_ifx_xend173 ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on ifx_xelse142_ifx_xend173 
    $endmerge
    $place [ifx_xend173_whilex_xbody]
    //begin: basic-block whilex_xend
    $merge ifx_xelse142_whilex_xend
    $endmerge
    $barrier 
    Block6_complete := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_H] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block7_starting
    $barrier 
    // load 
    tmp := col_high
    div := (tmp >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    conv := ($cast ($uint<16>) div)
    // load 
    tmp2 := row_high
    mul := (tmp2 * ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
    div3 := (mul >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
    conv4 := ($cast ($uint<16>) div3)
    // load 
    tmp6 := pad
    // load 
    tmp9 := depth_high
    iNsTr_2 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp18 := ->(iNsTr_2) 
    iNsTr_3 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp21 := ->(iNsTr_3) 
    sext := (tmp << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv30 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext184 := (tmp18 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv35 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext184) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext177 := (tmp21 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv37 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext177) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    mul38 := (conv37 * conv35)
    conv46 := ($cast ($uint<32>) tmp6)
    sext185 := (mul38 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv81 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext185) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext186 := (tmp9 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv137 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext186) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    shl := (conv46 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    mul31 := (tmp9 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    sext178 := (mul31 * conv30)
    conv99 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext178) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    $place [entry_whilex_xbody]
    //begin: basic-block whilex_xbody
    $merge entry_whilex_xbody ifx_xend175_whilex_xbody
    $phi ix_x2 :=  ( $cast ($uint<16>) conv4) $on entry_whilex_xbody ( $cast ($uint<16>) ix_x1x_xph) $on ifx_xend175_whilex_xbody 
    $phi jx_x1 :=  ( $cast ($uint<16>) conv) $on entry_whilex_xbody ( $cast ($uint<16>) jx_x0x_xph) $on ifx_xend175_whilex_xbody 
    $phi kx_x1 :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody ( $cast ($uint<16>) kx_x0x_xph) $on ifx_xend175_whilex_xbody 
    $endmerge
    conv44 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) ix_x2) )
    // compare instruction
    cmp := ( ($bitcast ( $int<32>) conv44) <   ($bitcast ( $int<32>) conv46 ) )
    $if cmp $then  $place [whilex_xbody_ifx_xthen] $else $place [whilex_xbody_lorx_xlhsx_xfalse] $endif 
    //begin: basic-block lorx_xlhsx_xfalse
    $merge whilex_xbody_lorx_xlhsx_xfalse
    $endmerge
    // load 
    tmp50 := row_high
    add := (tmp50 + conv46)
    // compare instruction
    cmp53 := (conv44 < add )
    $if cmp53 $then  $place [lorx_xlhsx_xfalse_lorx_xlhsx_xfalse55] $else $place [lorx_xlhsx_xfalse_ifx_xthen] $endif 
    //begin: basic-block lorx_xlhsx_xfalse55
    $merge lorx_xlhsx_xfalse_lorx_xlhsx_xfalse55
    $endmerge
    conv57 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x1) )
    // compare instruction
    cmp60 := ( ($bitcast ( $int<32>) conv57) <   ($bitcast ( $int<32>) conv46 ) )
    $if cmp60 $then  $place [lorx_xlhsx_xfalse55_ifx_xthen] $else $place [lorx_xlhsx_xfalse55_lorx_xlhsx_xfalse62] $endif 
    //begin: basic-block lorx_xlhsx_xfalse62
    $merge lorx_xlhsx_xfalse55_lorx_xlhsx_xfalse62
    $endmerge
    // load 
    tmp65 := col_high
    add68 := (tmp65 + conv46)
    // compare instruction
    cmp69 := (conv57 < add68 )
    $if cmp69 $then  $place [lorx_xlhsx_xfalse62_ifx_xelse] $else $place [lorx_xlhsx_xfalse62_ifx_xthen] $endif 
    //begin: basic-block ifx_xthen
    $merge lorx_xlhsx_xfalse_ifx_xthen lorx_xlhsx_xfalse55_ifx_xthen lorx_xlhsx_xfalse62_ifx_xthen whilex_xbody_ifx_xthen
    $endmerge
    conv73 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    conv77 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x1) )
    mul78 := (conv77 * conv35)
    mul84 := (conv44 * conv81)
    add79 := (mul78 + mul84)
    add85 := (add79 + conv73)
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add85) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom])
    ->(arrayidx) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    $place [ifx_xthen_ifx_xend]
    //begin: basic-block ifx_xelse
    $merge lorx_xlhsx_xfalse62_ifx_xelse
    $endmerge
    conv89 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    sub := (conv57 - conv46)
    mul96 := (sub * conv137)
    sub104 := (conv44 - conv46)
    mul105 := (sub104 * conv99)
    add97 := (conv89 + mul105)
    add106 := (add97 + mul96)
    mul115 := (conv57 * conv35)
    mul121 := (conv44 * conv81)
    add116 := (mul115 + mul121)
    add122 := (add116 + conv89)
    shr124 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add106) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom125 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr124) )
    arrayidx126 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom125])
    // load 
    tmp127 := ->(arrayidx126) 
    shr129 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add122) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom130 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr129) )
    arrayidx131 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom130])
    ->(arrayidx131) := tmp127
    $place [ifx_xelse_ifx_xend]
    //begin: basic-block ifx_xend
    $merge ifx_xelse_ifx_xend ifx_xthen_ifx_xend
    $endmerge
    conv134 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    add135 := (conv134 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    // compare instruction
    cmp138 := ( ($bitcast ( $int<32>) add135) <   ($bitcast ( $int<32>) conv137 ) )
    $if cmp138 $then  $place [ifx_xend_ifx_xthen140] $else $place [ifx_xend_ifx_xelse145] $endif 
    //begin: basic-block ifx_xthen140
    $merge ifx_xend_ifx_xthen140
    $endmerge
    add143 := (kx_x1 + ( $bitcast ($uint<16> ) _b0000000000000100 ) )
    $place [ifx_xthen140_ifx_xend175]
    //begin: basic-block ifx_xelse145
    $merge ifx_xend_ifx_xelse145
    $endmerge
    inc := (jx_x1 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    conv148 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc) )
    // load 
    tmp149 := col_high
    add152 := (tmp149 + shl)
    // compare instruction
    cmp153 := (conv148 == add152 )
    inc158 := ($cast ($uint<16>) cmp153)
    inc158x_xix_x2 := (inc158 + ix_x2)
    jx_x2 := ( $mux cmp153 conv inc)
    conv161 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc158x_xix_x2) )
    // load 
    tmp162 := row_high
    add166 := (tmp162 + shl)
    // compare instruction
    cmp167 := (conv161 == add166 )
    $if cmp167 $then  $place [ifx_xelse145_whilex_xend] $else $place [ifx_xelse145_ifx_xend175] $endif 
    //begin: basic-block ifx_xend175
    $merge ifx_xelse145_ifx_xend175 ifx_xthen140_ifx_xend175
    $phi ix_x1x_xph :=  ( $cast ($uint<16>) ix_x2) $on ifx_xthen140_ifx_xend175 ( $cast ($uint<16>) inc158x_xix_x2) $on ifx_xelse145_ifx_xend175 
    $phi jx_x0x_xph :=  ( $cast ($uint<16>) jx_x1) $on ifx_xthen140_ifx_xend175 ( $cast ($uint<16>) jx_x2) $on ifx_xelse145_ifx_xend175 
    $phi kx_x0x_xph :=  ( $cast ($uint<16>) add143) $on ifx_xthen140_ifx_xend175 ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on ifx_xelse145_ifx_xend175 
    $endmerge
    $place [ifx_xend175_whilex_xbody]
    //begin: basic-block whilex_xend
    $merge ifx_xelse145_whilex_xend
    $endmerge
    $barrier 
    Block7_complete := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    $call testConfigure ()  (call)
    iNsTr_0 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp := ->(iNsTr_0) 
    row_high := tmp
    iNsTr_2 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp1 := ->(iNsTr_2) 
    col_high := tmp1
    iNsTr_4 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp2 := ->(iNsTr_4) 
    depth_high := tmp2
    $barrier 
    Block0_starting := call
    Block1_starting := call
    Block2_starting := call
    Block3_starting := call
    Block4_starting := call
    Block5_starting := call
    Block6_starting := call
    Block7_starting := call
    call12 := Block0_complete
    call14 := Block1_complete
    call16 := Block2_complete
    call18 := Block3_complete
    call20 := Block4_complete
    call22 := Block5_complete
    call24 := Block6_complete
    call26 := Block7_complete
    $barrier 
    $call sendOutput ()  ()
    $place [return__]
    $merge return__ $endmerge
  }
}
