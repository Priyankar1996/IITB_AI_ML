$record [structx_x__SizedTensor_16K]  < $array[16384] $of $uint<64> > 
$record [structx_x__TensorDescriptor]  < $uint<32> >  < $uint<32> >  < $uint<32> >  < $array[64] $of $uint<32> > 
$pipe  Block0_complete : $uint<16>  $depth 1 
// can point into 
$pipe  Block0_starting : $uint<16>  $depth 1 
// can point into 
$storage  R :  structx_x__SizedTensor_16K  // memory space index = 1  base address = 0  word size = 64
// can point into 
$storage  T :  structx_x__SizedTensor_16K  // memory space index = 2  base address = 0  word size = 64
// can point into 
$storage  count : $uint<64> // memory space index = 0  base address = 0  word size = 64
// can point into 
$pipe  zeropad_input_pipe : $uint<8>  $depth 2 
// can point into 
$pipe  zeropad_output_pipe : $uint<8>  $depth 2 
// can point into 
$module [progx_xoptx_xo_storage_initializer_]
$in ()
$out ()
$is
{
  $null
  $attribute initializer 
}
$module [global_storage_initializer_]
$in ()
$out ()
$is
{
  $parallelblock[pb]
  {
    $call progx_xoptx_xo_storage_initializer_ () () 
  }
}
$module [timer]
$in ()
$out ( c : $uint<64>  )
$is
{
  c := count $buffering 1// bits of buffering = 64. 
}
$module [timerDaemon]
$in ()
$out ()
$is
{
  $branchblock [body]
  {
    $dopipeline $depth 3 $buffering 1
    $fullrate 
    $merge $entry $loopback 
    $phi ncount := 			  ($bitcast ($uint<64>) 0  ) $on   $entry 			  (ncount + 1 ) $on   $loopback 
    // type of target is $uint<64>
    $endmerge
    count := ncount $buffering 1// bits of buffering = 64. 
    $while 1 
  }
}
$module [zeropad3D]
$in ()
$out ()
$is
{
  $branchblock [body]
  {
    call := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    call2 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    call6 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    call11 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    call16 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv19 := ($cast ($uint<16>) call16 ) $buffering 1// bits of buffering = 16. 
    shl20 := (conv19 << ($bitcast ($uint<16>) _b0000000000001000  )) $buffering 1// bits of buffering = 16. 
    call21 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv22 := ($cast ($uint<16>) call21 ) $buffering 1// bits of buffering = 16. 
    add23 := (shl20 | conv22) $buffering 1// bits of buffering = 16. 
    call25 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv28 := ($cast ($uint<16>) call25 ) $buffering 1// bits of buffering = 16. 
    shl29 := (conv28 << ($bitcast ($uint<16>) _b0000000000001000  )) $buffering 1// bits of buffering = 16. 
    call30 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv31 := ($cast ($uint<16>) call30 ) $buffering 1// bits of buffering = 16. 
    add32 := (shl29 | conv31) $buffering 1// bits of buffering = 16. 
    call34 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv37 := ($cast ($uint<16>) call34 ) $buffering 1// bits of buffering = 16. 
    shl38 := (conv37 << ($bitcast ($uint<16>) _b0000000000001000  )) $buffering 1// bits of buffering = 16. 
    call39 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv40 := ($cast ($uint<16>) call39 ) $buffering 1// bits of buffering = 16. 
    add41 := (shl38 | conv40) $buffering 1// bits of buffering = 16. 
    call43 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv46 := ($cast ($uint<16>) call43 ) $buffering 1// bits of buffering = 16. 
    shl47 := (conv46 << ($bitcast ($uint<16>) _b0000000000001000  )) $buffering 1// bits of buffering = 16. 
    call48 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv49 := ($cast ($uint<16>) call48 ) $buffering 1// bits of buffering = 16. 
    add50 := (shl47 | conv49) $buffering 1// bits of buffering = 16. 
    call52 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv55 := ($cast ($uint<16>) call52 ) $buffering 1// bits of buffering = 16. 
    shl56 := (conv55 << ($bitcast ($uint<16>) _b0000000000001000  )) $buffering 1// bits of buffering = 16. 
    call57 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv58 := ($cast ($uint<16>) call57 ) $buffering 1// bits of buffering = 16. 
    add59 := (shl56 | conv58) $buffering 1// bits of buffering = 16. 
    call61 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv64 := ($cast ($uint<16>) call61 ) $buffering 1// bits of buffering = 16. 
    shl65 := (conv64 << ($bitcast ($uint<16>) _b0000000000001000  )) $buffering 1// bits of buffering = 16. 
    call66 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv67 := ($cast ($uint<16>) call66 ) $buffering 1// bits of buffering = 16. 
    add68 := (shl65 | conv67) $buffering 1// bits of buffering = 16. 
    call70 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv73 := ($cast ($uint<16>) call70 ) $buffering 1// bits of buffering = 16. 
    shl74 := (conv73 << ($bitcast ($uint<16>) _b0000000000001000  )) $buffering 1// bits of buffering = 16. 
    call75 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv76 := ($cast ($uint<16>) call75 ) $buffering 1// bits of buffering = 16. 
    add77 := (shl74 | conv76) $buffering 1// bits of buffering = 16. 
    conv81 := ($cast ($uint<64>) add23 ) $buffering 1// bits of buffering = 64. 
    conv83 := ($cast ($uint<64>) add32 ) $buffering 1// bits of buffering = 64. 
    conv85 := ($cast ($uint<64>) add41 ) $buffering 1// bits of buffering = 64. 
    mul := (conv81 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  )) $buffering 1// bits of buffering = 64. 
    mul86 := (mul * conv83) $buffering 1// bits of buffering = 64. 
    sext := (mul86 * conv85) $buffering 1// bits of buffering = 64. 
    conv87 := ($bitcast ($uint<64>) (($bitcast ($int<64>) sext ) >> ($bitcast ($int<64>) ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  ) )) ) $buffering 1// bits of buffering = 64. 
    cmp314 := (conv87 > ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000111  )) $buffering 1// bits of buffering = 1. 
    $if cmp314 $then 
    $place[entry_bbx_xnph316]
    $else 
    $place[entry_forx_xend]
    $endif
    $merge entry_bbx_xnph316 
    $endmerge
    shr := (conv87 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000011  )) $buffering 1// bits of buffering = 64. 
    tmp := (shr > ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )) $buffering 1// bits of buffering = 1. 
    umax3 := ( $mux tmp shr  ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  ) )  $buffering 1// bits of buffering = 64. 
    $place[bbx_xnph316_forx_xbody]
    $merge bbx_xnph316_forx_xbody forx_xbody_forx_xbody 
    $phi indvar317 := 			  ($cast ($uint<64>) ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ) ) $on   bbx_xnph316_forx_xbody 			  ($cast ($uint<64>) indvarx_xnext318 ) $on   forx_xbody_forx_xbody 
    // type of target is $uint<64>
    $endmerge
    arrayidx := @(T[($bitcast ($uint<32>) _b00000000000000000000000000000000  )][indvar317]) $buffering 1// bits of buffering = 32. 
    call93 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv94 := ($cast ($uint<64>) call93 ) $buffering 1// bits of buffering = 64. 
    shl96 := (conv94 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call97 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv99 := ($cast ($uint<64>) call97 ) $buffering 1// bits of buffering = 64. 
    add100 := (shl96 | conv99) $buffering 1// bits of buffering = 64. 
    shl102 := (add100 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call103 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv105 := ($cast ($uint<64>) call103 ) $buffering 1// bits of buffering = 64. 
    add106 := (shl102 | conv105) $buffering 1// bits of buffering = 64. 
    shl108 := (add106 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call109 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv111 := ($cast ($uint<64>) call109 ) $buffering 1// bits of buffering = 64. 
    add112 := (shl108 | conv111) $buffering 1// bits of buffering = 64. 
    shl114 := (add112 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call115 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv117 := ($cast ($uint<64>) call115 ) $buffering 1// bits of buffering = 64. 
    add118 := (shl114 | conv117) $buffering 1// bits of buffering = 64. 
    shl120 := (add118 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call121 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv123 := ($cast ($uint<64>) call121 ) $buffering 1// bits of buffering = 64. 
    add124 := (shl120 | conv123) $buffering 1// bits of buffering = 64. 
    shl126 := (add124 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call127 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv129 := ($cast ($uint<64>) call127 ) $buffering 1// bits of buffering = 64. 
    add130 := (shl126 | conv129) $buffering 1// bits of buffering = 64. 
    shl132 := (add130 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call133 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv135 := ($cast ($uint<64>) call133 ) $buffering 1// bits of buffering = 64. 
    add136 := (shl132 | conv135) $buffering 1// bits of buffering = 64. 
    ->(arrayidx) := add136 $buffering 1// bits of buffering = 64. 
    indvarx_xnext318 := (indvar317 + ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )) $buffering 1// bits of buffering = 64. 
    exitcond := (indvarx_xnext318 == umax3) $buffering 1// bits of buffering = 1. 
    $if exitcond $then 
    $place[forx_xbody_forx_xendx_xloopexit]
    $else 
    $place[forx_xbody_forx_xbody]
    $endif
    $merge forx_xbody_forx_xendx_xloopexit 
    $endmerge
    $place[forx_xendx_xloopexit_forx_xend]
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend 
    $endmerge
    $barrier
    $call timer () (call141 ) 
    conv142 := ($bitcast ($uint<64>) ($cast ($int<64>) call141 ) ) $buffering 1// bits of buffering = 64. 
    $barrier
    inp_d0 := add23 $buffering 1// bits of buffering = 16. 
    inp_d1 := add32 $buffering 1// bits of buffering = 16. 
    inp_d2 := add41 $buffering 1// bits of buffering = 16. 
    out_d0 := add59 $buffering 1// bits of buffering = 16. 
    out_d1 := add68 $buffering 1// bits of buffering = 16. 
    out_d2 := add77 $buffering 1// bits of buffering = 16. 
    padding := add50 $buffering 1// bits of buffering = 16. 
    $barrier
    $volatile i_loop_init := ($bitcast ($uint<16>) 0  ) $buffering 1
    $volatile j_loop_init := ($bitcast ($uint<16>) 0  ) $buffering 1
    $volatile k_loop_init := ($bitcast ($uint<16>) 0  ) $buffering 1
    $volatile src_add_init := ($bitcast ($uint<16>) 0  ) $buffering 1
    $volatile dest_add_init := ($bitcast ($uint<16>) 0  ) $buffering 1
    $volatile j1 := ($bitcast ($uint<16>) 0  ) $buffering 1
    $volatile dim0T := ($cast ($uint<16>) inp_d0 ) $buffering 1
    $volatile dim1T := ($cast ($uint<16>) inp_d1 ) $buffering 1
    $volatile dim2T := ($cast ($uint<16>) inp_d2 ) $buffering 1
    $volatile dim0R := ($cast ($uint<16>) out_d0 ) $buffering 1
    $volatile dim1R := ($cast ($uint<16>) out_d1 ) $buffering 1
    $volatile dim2R := ($cast ($uint<16>) out_d2 ) $buffering 1
    $volatile dim21T := (dim2T * dim1T) $buffering 1
    $volatile dim21R := (dim2R * dim1R) $buffering 1
    $volatile pad := padding $buffering 1
    $dopipeline $depth 15 $buffering 1
    $fullrate 
    $merge $entry $loopback 
    $phi k_loop := 			  k_loop_init $on   $entry 			  next_k_loop $on   $loopback 
    // type of target is $uint<16>
    $phi j_loop := 			  j_loop_init $on   $entry 			  next_j_loop $on   $loopback 
    // type of target is $uint<16>
    $phi i_loop := 			  i_loop_init $on   $entry 			  next_i_loop $on   $loopback 
    // type of target is $uint<16>
    $phi dest_add := 			  dest_add_init $on   $entry 			  next_dest_add $on   $loopback 
    // type of target is $uint<16>
    $phi src_add := 			  src_add_init $on   $entry 			  next_src_add $on   $loopback 
    // type of target is $uint<16>
    $endmerge
    $volatile dest_data_array_idx_1 := (dim2R * j_loop) $buffering 1
    $volatile dest_data_array_idx_2 := (dim21R * i_loop) $buffering 1
    $volatile dest_data_array_idx_3 := (dest_data_array_idx_1 + dest_data_array_idx_2) $buffering 1
    $volatile dest_data_array_idx_4 := (dest_data_array_idx_3 + k_loop) $buffering 1
    $volatile img_data_array_idx_1 := (j_loop - pad) $buffering 1
    $volatile img_data_array_idx_2 := (i_loop - pad) $buffering 1
    $volatile img_data_array_idx_3 := (dim2T * img_data_array_idx_1) $buffering 1
    $volatile img_data_array_idx_4 := (dim21T * img_data_array_idx_2) $buffering 1
    $volatile img_data_array_idx_5 := (img_data_array_idx_3 + img_data_array_idx_4) $buffering 1
    $volatile img_data_array_idx_6 := (img_data_array_idx_5 + k_loop) $buffering 1
    $volatile i_small_check := (i_loop < pad) $buffering 1
    $volatile j_small_check := (j_loop < pad) $buffering 1
    $volatile i_large_check := (i_loop >= (inp_d0 + pad)) $buffering 1
    $volatile j_large_check := (j_loop >= (inp_d1 + pad)) $buffering 1
    $volatile data_check1 := (i_small_check | j_small_check) $buffering 1
    $volatile data_check2 := (data_check1 | i_large_check) $buffering 1
    $volatile data_check := (data_check2 | j_large_check) $buffering 1
    $volatile next_dest_add := (dest_data_array_idx_4 >> 3 ) $buffering 1
    $volatile next_src_add := (img_data_array_idx_6 >> 3 ) $buffering 1
    iv1 := @(T[($bitcast ($uint<32>) 0  )][($bitcast ($uint<64>) src_add )]) $buffering 1// bits of buffering = 32. 
    i1 := ->(iv1) $buffering 1// bits of buffering = 64. 
    ov := @(R[($bitcast ($uint<32>) 0  )][($bitcast ($uint<64>) dest_add )]) $buffering 1// bits of buffering = 32. 
    ->(ov) := ( $mux data_check ($bitcast ($uint<64>) 0  )  i1 )  $buffering 1// bits of buffering = 64. 
    dim2T_dif := (dim2T - 8 ) $buffering 1// bits of buffering = 16. 
    cmp_dim2 := (k_loop <= dim2T_dif) $buffering 1// bits of buffering = 1. 
    dim1T_check_1 := (pad << 1 ) $buffering 1// bits of buffering = 16. 
    dim1T_check_2 := (dim1T + dim1T_check_1) $buffering 1// bits of buffering = 16. 
    dim1T_check_3 := (j_loop == dim1T_check_2) $buffering 1// bits of buffering = 1. 
    cmp_dim1 := (( ~ cmp_dim2 ) & dim1T_check_3) $buffering 1// bits of buffering = 1. 
    dim0T_check_1 := (pad << 1 ) $buffering 1// bits of buffering = 16. 
    dim0T_check_2 := (dim0T + dim0T_check_1) $buffering 1// bits of buffering = 16. 
    dim0T_check_3 := (i_loop == dim0T_check_2) $buffering 1// bits of buffering = 1. 
    cmp_dim0 := (( ~ cmp_dim2 ) & dim0T_check_3) $buffering 1// bits of buffering = 1. 
    next_k_loop := ( $mux cmp_dim2 (k_loop + 8 )  0  )  $buffering 1// bits of buffering = 16. 
    next_j_loop := ( $mux cmp_dim2 j_loop  ( $mux cmp_dim1 j1  (j_loop + 1 ) )  )  $buffering 1// bits of buffering = 16. 
    next_i_loop := ( $mux cmp_dim1 (i_loop + 1 )  i_loop )  $buffering 1// bits of buffering = 16. 
    flag := ( ~ cmp_dim0 ) $buffering 1// bits of buffering = 1. 
    $while flag
    $barrier
    $call timer () (call153 ) 
    conv154 := ($bitcast ($uint<64>) ($cast ($int<64>) call153 ) ) $buffering 1// bits of buffering = 64. 
    sub := (conv154 - conv142) $buffering 1// bits of buffering = 64. 
    $barrier
    conv160 := ($cast ($uint<8>) sub ) $buffering 1// bits of buffering = 8. 
    shr163 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    conv166 := ($cast ($uint<8>) shr163 ) $buffering 1// bits of buffering = 8. 
    shr169 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  )) $buffering 1// bits of buffering = 64. 
    conv172 := ($cast ($uint<8>) shr169 ) $buffering 1// bits of buffering = 8. 
    shr175 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  )) $buffering 1// bits of buffering = 64. 
    conv178 := ($cast ($uint<8>) shr175 ) $buffering 1// bits of buffering = 8. 
    shr181 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  )) $buffering 1// bits of buffering = 64. 
    conv184 := ($cast ($uint<8>) shr181 ) $buffering 1// bits of buffering = 8. 
    shr187 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  )) $buffering 1// bits of buffering = 64. 
    conv190 := ($cast ($uint<8>) shr187 ) $buffering 1// bits of buffering = 8. 
    shr193 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  )) $buffering 1// bits of buffering = 64. 
    conv196 := ($cast ($uint<8>) shr193 ) $buffering 1// bits of buffering = 8. 
    shr199 := (sub >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  )) $buffering 1// bits of buffering = 64. 
    conv202 := ($cast ($uint<8>) shr199 ) $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv202 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv196 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv190 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv184 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv178 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv172 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv166 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv160 $buffering 1// bits of buffering = 8. 
    $barrier
    conv222 := ($cast ($uint<32>) add59 ) $buffering 1// bits of buffering = 32. 
    conv224 := ($cast ($uint<32>) add68 ) $buffering 1// bits of buffering = 32. 
    conv227 := ($cast ($uint<32>) add77 ) $buffering 1// bits of buffering = 32. 
    mul225 := (conv224 * conv222) $buffering 1// bits of buffering = 32. 
    mul228 := (mul225 * conv227) $buffering 1// bits of buffering = 32. 
    shr232309 := ($bitcast ($uint<32>) (($bitcast ($int<32>) mul228 ) >> ($bitcast ($int<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000010  ) )) ) $buffering 1// bits of buffering = 32. 
    cmp233310 := (($bitcast ($int<32>) shr232309 ) > ($bitcast ($int<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) )) $buffering 1// bits of buffering = 1. 
    $if cmp233310 $then 
    $place[forx_xend_bbx_xnph]
    $else 
    $place[forx_xend_forx_xend308]
    $endif
    $merge forx_xend_bbx_xnph 
    $endmerge
    tmp1 := ($cast ($uint<64>) shr232309 ) $buffering 1// bits of buffering = 64. 
    $place[bbx_xnph_forx_xbody235]
    $merge bbx_xnph_forx_xbody235 forx_xbody235_forx_xbody235 
    $phi indvar := 			  ($cast ($uint<64>) ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody235 			  ($cast ($uint<64>) indvarx_xnext ) $on   forx_xbody235_forx_xbody235 
    // type of target is $uint<64>
    $endmerge
    arrayidx240 := @(R[($bitcast ($uint<32>) _b00000000000000000000000000000000  )][indvar]) $buffering 1// bits of buffering = 32. 
    tmp241 := ->(arrayidx240) $buffering 1// bits of buffering = 64. 
    conv245 := ($cast ($uint<8>) tmp241 ) $buffering 1// bits of buffering = 8. 
    shr248 := (tmp241 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    conv251 := ($cast ($uint<8>) shr248 ) $buffering 1// bits of buffering = 8. 
    shr254 := (tmp241 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  )) $buffering 1// bits of buffering = 64. 
    conv257 := ($cast ($uint<8>) shr254 ) $buffering 1// bits of buffering = 8. 
    shr260 := (tmp241 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  )) $buffering 1// bits of buffering = 64. 
    conv263 := ($cast ($uint<8>) shr260 ) $buffering 1// bits of buffering = 8. 
    shr266 := (tmp241 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  )) $buffering 1// bits of buffering = 64. 
    conv269 := ($cast ($uint<8>) shr266 ) $buffering 1// bits of buffering = 8. 
    shr272 := (tmp241 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  )) $buffering 1// bits of buffering = 64. 
    conv275 := ($cast ($uint<8>) shr272 ) $buffering 1// bits of buffering = 8. 
    shr278 := (tmp241 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  )) $buffering 1// bits of buffering = 64. 
    conv281 := ($cast ($uint<8>) shr278 ) $buffering 1// bits of buffering = 8. 
    shr284 := (tmp241 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  )) $buffering 1// bits of buffering = 64. 
    conv287 := ($cast ($uint<8>) shr284 ) $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv287 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv281 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv275 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv269 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv263 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv257 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv251 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv245 $buffering 1// bits of buffering = 8. 
    indvarx_xnext := (indvar + ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )) $buffering 1// bits of buffering = 64. 
    exitcond2 := (indvarx_xnext == tmp1) $buffering 1// bits of buffering = 1. 
    $if exitcond2 $then 
    $place[forx_xbody235_forx_xend308x_xloopexit]
    $else 
    $place[forx_xbody235_forx_xbody235]
    $endif
    $merge forx_xbody235_forx_xend308x_xloopexit 
    $endmerge
    $place[forx_xend308x_xloopexit_forx_xend308]
    $merge forx_xend_forx_xend308 forx_xend308x_xloopexit_forx_xend308 
    $endmerge
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
// Memory space 0: count 
// Memory space 1: R 
// Memory space 2: T 
// use of gated clocks in modules 
