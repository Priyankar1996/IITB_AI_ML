// Aa code produced by llvm2aa (version 1.0)
$record [structx_x__SizedTensor_16K] < $array [16384] $of $uint<64> > 
$pipe elapsed_time_pipe : $uint<64> $depth 1
$pipe zeropad_input_pipe : $uint<8> $depth 2
$pipe zeropad_output_pipe : $uint<8> $depth 2
$storage R:structx_x__SizedTensor_16K
$storage T:structx_x__SizedTensor_16K
$module [progx_xoptx_xo_storage_initializer_] $in () $out () $is 
{
  $null
  $attribute initializer
}
$module [sendOutput] 
$in (size : $uint<32> )
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    // compare instruction
    cmp68 := (size > ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 )  )
    $if cmp68 $then  $place [entry_bbx_xnph] $else $place [entry_forx_xend] $endif 
    //begin: basic-block bbx_xnph
    $merge entry_bbx_xnph
    $endmerge
    shr := (size >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
    // compare instruction
    tmp := (shr > ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  )
    shrx_xop := (shr + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    iNsTr_1 := ($cast ($uint<64>) shrx_xop)
    xx_xop := (iNsTr_1 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    tmp72 := ( $mux tmp xx_xop ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody_forx_xbody 
    $endmerge
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][indvar])
    // load 
    tmp4 := ->(arrayidx) 
    conv := ($cast ($uint<8>) tmp4)
    shr9 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    conv12 := ($cast ($uint<8>) shr9)
    shr15 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    conv18 := ($cast ($uint<8>) shr15)
    shr21 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000011000 ) )
    conv24 := ($cast ($uint<8>) shr21)
    shr27 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000100000 ) )
    conv30 := ($cast ($uint<8>) shr27)
    shr33 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000101000 ) )
    conv36 := ($cast ($uint<8>) shr33)
    shr39 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 ) )
    conv42 := ($cast ($uint<8>) shr39)
    shr45 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000111000 ) )
    conv48 := ($cast ($uint<8>) shr45)
    zeropad_output_pipe := conv48
    zeropad_output_pipe := conv42
    zeropad_output_pipe := conv36
    zeropad_output_pipe := conv30
    zeropad_output_pipe := conv24
    zeropad_output_pipe := conv18
    zeropad_output_pipe := conv12
    zeropad_output_pipe := conv
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond1 := (indvarx_xnext == tmp72 )
    $if exitcond1 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := zeropad_input_pipe
    conv1 := ($cast ($uint<32>) call)
    shl := (conv1 << ( $bitcast ($uint<32> ) _b00000000000000000000000000001000 ) )
    call2 := zeropad_input_pipe
    conv3 := ($cast ($uint<32>) call2)
    add := (shl | conv3)
    call6 := zeropad_input_pipe
    conv9 := ($cast ($uint<16>) call6)
    shl10 := (conv9 << ( $bitcast ($uint<16> ) _b0000000000001000 ) )
    call11 := zeropad_input_pipe
    conv12 := ($cast ($uint<16>) call11)
    add13 := (shl10 | conv12)
    call16 := zeropad_input_pipe
    conv19 := ($cast ($uint<16>) call16)
    shl20 := (conv19 << ( $bitcast ($uint<16> ) _b0000000000001000 ) )
    call21 := zeropad_input_pipe
    conv22 := ($cast ($uint<16>) call21)
    add23 := (shl20 | conv22)
    call26 := zeropad_input_pipe
    conv29 := ($cast ($uint<16>) call26)
    shl30 := (conv29 << ( $bitcast ($uint<16> ) _b0000000000001000 ) )
    call31 := zeropad_input_pipe
    conv32 := ($cast ($uint<16>) call31)
    add33 := (shl30 | conv32)
    call36 := zeropad_input_pipe
    conv39 := ($cast ($uint<32>) call36)
    shl40 := (conv39 << ( $bitcast ($uint<32> ) _b00000000000000000000000000001000 ) )
    call41 := zeropad_input_pipe
    conv42 := ($cast ($uint<32>) call41)
    add43 := (shl40 | conv42)
    call46 := zeropad_input_pipe
    conv49 := ($cast ($uint<16>) call46)
    shl50 := (conv49 << ( $bitcast ($uint<16> ) _b0000000000001000 ) )
    call51 := zeropad_input_pipe
    conv52 := ($cast ($uint<16>) call51)
    add53 := (shl50 | conv52)
    call56 := zeropad_input_pipe
    conv59 := ($cast ($uint<16>) call56)
    shl60 := (conv59 << ( $bitcast ($uint<16> ) _b0000000000001000 ) )
    call61 := zeropad_input_pipe
    conv62 := ($cast ($uint<16>) call61)
    add63 := (shl60 | conv62)
    $barrier 
    conv69 := ($cast ($uint<32>) add13)
    conv71 := ($cast ($uint<32>) add23)
    mul := (conv69 * add)
    mul72 := (mul * conv71)
    // compare instruction
    cmp473 := (mul72 > ( $bitcast ($uint<32> ) _b00000000000000000000000000001111 )  )
    $if cmp473 $then  $place [entry_bbx_xnph] $else $place [entry_forx_xend] $endif 
    //begin: basic-block bbx_xnph
    $merge entry_bbx_xnph
    $endmerge
    tmp480 := (mul72 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    // compare instruction
    tmp481 := (tmp480 > ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  )
    tmp480x_xop := (tmp480 + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    iNsTr_16 := ($cast ($uint<64>) tmp480x_xop)
    xx_xop := (iNsTr_16 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    tmp484 := ( $mux tmp481 xx_xop ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody_forx_xbody 
    $endmerge
    tmp2 := (indvar * ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000100 ) )
    tmp3 := (tmp2 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) )
    arrayidx274 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][tmp3])
    tmp4 := (tmp2 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    arrayidx224 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][tmp4])
    tmp5 := (tmp2 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    arrayidx174 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][tmp5])
    arrayidx := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][tmp2])
    call78 := zeropad_input_pipe
    conv79 := ($cast ($uint<64>) call78)
    shl81 := (conv79 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call82 := zeropad_input_pipe
    conv84 := ($cast ($uint<64>) call82)
    add85 := (shl81 | conv84)
    shl87 := (add85 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call88 := zeropad_input_pipe
    conv90 := ($cast ($uint<64>) call88)
    add91 := (shl87 | conv90)
    shl93 := (add91 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call94 := zeropad_input_pipe
    conv96 := ($cast ($uint<64>) call94)
    add97 := (shl93 | conv96)
    shl99 := (add97 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call100 := zeropad_input_pipe
    conv102 := ($cast ($uint<64>) call100)
    add103 := (shl99 | conv102)
    shl105 := (add103 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call106 := zeropad_input_pipe
    conv108 := ($cast ($uint<64>) call106)
    add109 := (shl105 | conv108)
    shl111 := (add109 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call112 := zeropad_input_pipe
    conv114 := ($cast ($uint<64>) call112)
    add115 := (shl111 | conv114)
    shl117 := (add115 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call118 := zeropad_input_pipe
    conv120 := ($cast ($uint<64>) call118)
    add121 := (shl117 | conv120)
    ->(arrayidx) := add121
    call125 := zeropad_input_pipe
    conv126 := ($cast ($uint<64>) call125)
    shl128 := (conv126 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call129 := zeropad_input_pipe
    conv131 := ($cast ($uint<64>) call129)
    add132 := (shl128 | conv131)
    shl134 := (add132 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call135 := zeropad_input_pipe
    conv137 := ($cast ($uint<64>) call135)
    add138 := (shl134 | conv137)
    shl140 := (add138 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call141 := zeropad_input_pipe
    conv143 := ($cast ($uint<64>) call141)
    add144 := (shl140 | conv143)
    shl146 := (add144 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call147 := zeropad_input_pipe
    conv149 := ($cast ($uint<64>) call147)
    add150 := (shl146 | conv149)
    shl152 := (add150 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call153 := zeropad_input_pipe
    conv155 := ($cast ($uint<64>) call153)
    add156 := (shl152 | conv155)
    shl158 := (add156 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call159 := zeropad_input_pipe
    conv161 := ($cast ($uint<64>) call159)
    add162 := (shl158 | conv161)
    shl164 := (add162 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call165 := zeropad_input_pipe
    conv167 := ($cast ($uint<64>) call165)
    add168 := (shl164 | conv167)
    ->(arrayidx174) := add168
    call175 := zeropad_input_pipe
    conv176 := ($cast ($uint<64>) call175)
    shl178 := (conv176 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call179 := zeropad_input_pipe
    conv181 := ($cast ($uint<64>) call179)
    add182 := (shl178 | conv181)
    shl184 := (add182 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call185 := zeropad_input_pipe
    conv187 := ($cast ($uint<64>) call185)
    add188 := (shl184 | conv187)
    shl190 := (add188 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call191 := zeropad_input_pipe
    conv193 := ($cast ($uint<64>) call191)
    add194 := (shl190 | conv193)
    shl196 := (add194 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call197 := zeropad_input_pipe
    conv199 := ($cast ($uint<64>) call197)
    add200 := (shl196 | conv199)
    shl202 := (add200 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call203 := zeropad_input_pipe
    conv205 := ($cast ($uint<64>) call203)
    add206 := (shl202 | conv205)
    shl208 := (add206 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call209 := zeropad_input_pipe
    conv211 := ($cast ($uint<64>) call209)
    add212 := (shl208 | conv211)
    shl214 := (add212 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call215 := zeropad_input_pipe
    conv217 := ($cast ($uint<64>) call215)
    add218 := (shl214 | conv217)
    ->(arrayidx224) := add218
    call225 := zeropad_input_pipe
    conv226 := ($cast ($uint<64>) call225)
    shl228 := (conv226 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call229 := zeropad_input_pipe
    conv231 := ($cast ($uint<64>) call229)
    add232 := (shl228 | conv231)
    shl234 := (add232 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call235 := zeropad_input_pipe
    conv237 := ($cast ($uint<64>) call235)
    add238 := (shl234 | conv237)
    shl240 := (add238 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call241 := zeropad_input_pipe
    conv243 := ($cast ($uint<64>) call241)
    add244 := (shl240 | conv243)
    shl246 := (add244 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call247 := zeropad_input_pipe
    conv249 := ($cast ($uint<64>) call247)
    add250 := (shl246 | conv249)
    shl252 := (add250 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call253 := zeropad_input_pipe
    conv255 := ($cast ($uint<64>) call253)
    add256 := (shl252 | conv255)
    shl258 := (add256 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call259 := zeropad_input_pipe
    conv261 := ($cast ($uint<64>) call259)
    add262 := (shl258 | conv261)
    shl264 := (add262 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call265 := zeropad_input_pipe
    conv267 := ($cast ($uint<64>) call265)
    add268 := (shl264 | conv267)
    ->(arrayidx274) := add268
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond1 := (indvarx_xnext == tmp484 )
    $if exitcond1 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend
    $endmerge
    $call timer ()  (call277)
    conv319 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) add23) )
    conv404 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) add33) )
    add405 := (conv404 + add)
    add422 := (conv404 + conv69)
    shl334 := (conv404 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add335 := (shl334 + conv69)
    add349 := (shl334 + add)
    $place [forx_xend_whilex_xbody]
    //begin: basic-block whilex_xbody
    //   this is a do-while loop.
    $merge forx_xend_whilex_xbody
    $phi kx_x1_at_entry :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on forx_xend_whilex_xbody 
    $phi i282x_x2_at_entry :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on forx_xend_whilex_xbody 
    $phi jx_x1_at_entry :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on forx_xend_whilex_xbody 
    $endmerge
    $dopipeline $depth 15 $buffering 1 
    $fullrate
    $merge $entry $loopback
    $phi kx_x1 :=  ( $cast ($uint<16>) kx_x0) $on $loopback kx_x1_at_entry $on $entry
    $phi i282x_x2 :=  ( $cast ($uint<16>) i282x_x1) $on $loopback i282x_x2_at_entry $on $entry
    $phi jx_x1 :=  ( $cast ($uint<16>) jx_x0) $on $loopback jx_x1_at_entry $on $entry
    $endmerge
    conv316 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    add317 := (conv316 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    // compare instruction
    cmp320 := ( ($bitcast ( $int<32>) add317) <   ($bitcast ( $int<32>) conv319 ) )
    whilex_xbody_ifx_xthen_taken := cmp320
    whilex_xbody_ifx_xelse_taken := ( ~cmp320)
    ifx_xelse_exec_guard := whilex_xbody_ifx_xelse_taken
    //begin: basic-block ifx_xelse
    $guard (ifx_xelse_exec_guard) inc327 := (jx_x1 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    $guard (ifx_xelse_exec_guard) conv329 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc327) )
    // compare instruction
    $guard (ifx_xelse_exec_guard) cmp336 := (conv329 == add335 )
    $guard (ifx_xelse_exec_guard) inc341 := ($cast ($uint<16>) cmp336)
    $guard (ifx_xelse_exec_guard) inc341x_xi282x_x2 := (inc341 + i282x_x2)
    $guard (ifx_xelse_exec_guard) jx_x2 := ( $mux cmp336 ( $bitcast ($uint<16> ) _b0000000000000000 )  inc327)
    $guard (ifx_xelse_exec_guard) conv343 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc341x_xi282x_x2) )
    // compare instruction
    $guard (ifx_xelse_exec_guard) cmp350 := (conv343 == add349 )
    ifx_xelse_ifx_xthen352_taken := (ifx_xelse_exec_guard & cmp350)
    ifx_xelse_ifx_xend354_taken := (ifx_xelse_exec_guard & (~cmp350))
    ifx_xthen352_exec_guard := ifx_xelse_ifx_xthen352_taken
    //begin: basic-block ifx_xthen352
    ifx_xthen352_ifx_xend354_taken := ifx_xthen352_exec_guard
    ifx_xthen_exec_guard := whilex_xbody_ifx_xthen_taken
    //begin: basic-block ifx_xthen
    $guard (ifx_xthen_exec_guard) add324 := (kx_x1 + ( $bitcast ($uint<16> ) _b0000000000000100 ) )
    ifx_xthen_ifx_xend354_taken := ifx_xthen_exec_guard
    ifx_xend354_exec_guard := (ifx_xelse_ifx_xend354_taken | ( ifx_xthen_ifx_xend354_taken | ifx_xthen352_ifx_xend354_taken ) )
    //begin: basic-block ifx_xend354
    kx_x0 := ($mux ifx_xthen_ifx_xend354_taken ( $bitcast ($uint<16>) add324) ($mux ifx_xthen352_ifx_xend354_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($mux ifx_xelse_ifx_xend354_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($bitcast ($uint<16>) 0))))
    i282x_x1 := ($mux ifx_xthen_ifx_xend354_taken ( $bitcast ($uint<16>) i282x_x2) ($mux ifx_xthen352_ifx_xend354_taken ( $bitcast ($uint<16>) inc341x_xi282x_x2) ($mux ifx_xelse_ifx_xend354_taken ( $bitcast ($uint<16>) inc341x_xi282x_x2) ($bitcast ($uint<16>) 0))))
    jx_x0 := ($mux ifx_xthen_ifx_xend354_taken ( $bitcast ($uint<16>) jx_x1) ($mux ifx_xthen352_ifx_xend354_taken ( $bitcast ($uint<16>) jx_x2) ($mux ifx_xelse_ifx_xend354_taken ( $bitcast ($uint<16>) jx_x2) ($bitcast ($uint<16>) 0))))
    flagx_x0 := ($mux ifx_xthen_ifx_xend354_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($mux ifx_xthen352_ifx_xend354_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000001 ) ) ($mux ifx_xelse_ifx_xend354_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($bitcast ($uint<16>) 0))))
    $guard (ifx_xend354_exec_guard) mul369 := (add53 * i282x_x1)
    $guard (ifx_xend354_exec_guard) tmp := (jx_x0 + mul369)
    $guard (ifx_xend354_exec_guard) tmp469 := (tmp * add63)
    $guard (ifx_xend354_exec_guard) add370 := (tmp469 + kx_x0)
    $guard (ifx_xend354_exec_guard) sub := (jx_x0 - add33)
    $guard (ifx_xend354_exec_guard) sub389 := (i282x_x1 - add33)
    $guard (ifx_xend354_exec_guard) mul390 := (add13 * sub389)
    $guard (ifx_xend354_exec_guard) tmp470 := (sub + mul390)
    $guard (ifx_xend354_exec_guard) tmp471 := (tmp470 * add23)
    $guard (ifx_xend354_exec_guard) add391 := (tmp471 + kx_x0)
    // compare instruction
    $guard (ifx_xend354_exec_guard) cmp397 := ( ($bitcast ( $int<16>) i282x_x1) <   ($bitcast ( $int<16>) add33 ) )
    ifx_xend354_ifx_xthen425_taken := (ifx_xend354_exec_guard & cmp397)
    ifx_xend354_lorx_xlhsx_xfalse_taken := (ifx_xend354_exec_guard & (~cmp397))
    lorx_xlhsx_xfalse_exec_guard := ifx_xend354_lorx_xlhsx_xfalse_taken
    //begin: basic-block lorx_xlhsx_xfalse
    $guard (lorx_xlhsx_xfalse_exec_guard) conv400 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) i282x_x1) )
    // compare instruction
    $guard (lorx_xlhsx_xfalse_exec_guard) cmp406x_xnot := ( ($bitcast ( $int<32>) conv400) >=   ($bitcast ( $int<32>) add405 ) )
    // compare instruction
    $guard (lorx_xlhsx_xfalse_exec_guard) cmp413 := ( ($bitcast ( $int<16>) jx_x0) <   ($bitcast ( $int<16>) add33 ) )
    $guard (lorx_xlhsx_xfalse_exec_guard) orx_xcond := (cmp406x_xnot | cmp413)
    $guard (lorx_xlhsx_xfalse_exec_guard) orx_xcondx_xnot := (orx_xcond ^ ( $bitcast ($uint<1> ) _b1 ) )
    $guard (lorx_xlhsx_xfalse_exec_guard) conv417 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x0) )
    // compare instruction
    $guard (lorx_xlhsx_xfalse_exec_guard) cmp423 := ( ($bitcast ( $int<32>) conv417) <   ($bitcast ( $int<32>) add422 ) )
    $guard (lorx_xlhsx_xfalse_exec_guard) orx_xcond492 := (orx_xcondx_xnot & cmp423)
    lorx_xlhsx_xfalse_ifx_xelse431_taken := (lorx_xlhsx_xfalse_exec_guard & orx_xcond492)
    lorx_xlhsx_xfalse_ifx_xthen425_taken := (lorx_xlhsx_xfalse_exec_guard & (~orx_xcond492))
    ifx_xelse431_exec_guard := lorx_xlhsx_xfalse_ifx_xelse431_taken
    //begin: basic-block ifx_xelse431
    $guard (ifx_xelse431_exec_guard) conv433 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) add391) )
    $guard (ifx_xelse431_exec_guard) shr434 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) conv433) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    $guard (ifx_xelse431_exec_guard) idxprom435 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr434) )
    arrayidx436 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom435])
    // load 
    $guard (ifx_xelse431_exec_guard) tmp437 := ->(arrayidx436) 
    $guard (ifx_xelse431_exec_guard) conv439 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) add370) )
    $guard (ifx_xelse431_exec_guard) shr440 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) conv439) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    $guard (ifx_xelse431_exec_guard) idxprom441 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr440) )
    arrayidx442 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom441])
    $guard (ifx_xelse431_exec_guard) ->(arrayidx442) := tmp437
    ifx_xelse431_ifx_xend443_taken := ifx_xelse431_exec_guard
    ifx_xthen425_exec_guard := (ifx_xend354_ifx_xthen425_taken | lorx_xlhsx_xfalse_ifx_xthen425_taken )
    //begin: basic-block ifx_xthen425
    $guard (ifx_xthen425_exec_guard) conv427 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) add370) )
    $guard (ifx_xthen425_exec_guard) shr428 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) conv427) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    $guard (ifx_xthen425_exec_guard) idxprom429 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr428) )
    arrayidx430 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom429])
    $guard (ifx_xthen425_exec_guard) ->(arrayidx430) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    ifx_xthen425_ifx_xend443_taken := ifx_xthen425_exec_guard
    //begin: basic-block ifx_xend443
    // compare instruction
    tobool := (flagx_x0 == ( $bitcast ($uint<16> ) _b0000000000000000 )  )
    ifx_xend443_whilex_xend_taken := ( ~tobool)
    $while tobool
    $if ifx_xend443_whilex_xend_taken $then 
    $place [ifx_xend443_whilex_xend]
    $endif
    //begin: basic-block whilex_xend
    $merge ifx_xend443_whilex_xend
    $endmerge
    conv278 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) call277) )
    $barrier 
    $call timer ()  (call448)
    conv449 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) call448) )
    sub453 := (conv449 - conv278)
    elapsed_time_pipe := sub453
    $barrier 
    conv458 := ($cast ($uint<32>) add53)
    conv461 := ($cast ($uint<32>) add63)
    mul459 := (conv458 * add43)
    mul462 := (mul459 * conv461)
    $call sendOutput (mul462 )  ()
    $place [return__]
    $merge return__ $endmerge
  }
}
