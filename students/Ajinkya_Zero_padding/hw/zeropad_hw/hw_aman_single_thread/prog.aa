// Aa code produced by llvm2aa (version 1.0)
$record [structx_x__SizedTensor_16K] < $array [16384] $of $uint<64> > 
$record [structx_x__TensorDescriptor] < $uint<32> > < $uint<32> > < $uint<32> > < $array [64] $of $uint<32> > 
$pipe Block0_complete : $uint<8> $depth 1
$pipe Block0_starting : $uint<8> $depth 1
$pipe elapsed_time_pipe : $uint<64> $depth 1
$pipe zeropad_input_pipe : $uint<8> $depth 2
$pipe zeropad_output_pipe : $uint<8> $depth 2
$storage R:structx_x__SizedTensor_16K
$storage T:structx_x__SizedTensor_16K
$module [progx_xoptx_xo_storage_initializer_] $in () $out () $is 
{
  $null
  $attribute initializer
}
$module [sendOutput] 
$in (size : $uint<32> )
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    shr67 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) size) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    // compare instruction
    cmp68 := ( ($bitcast ( $int<32>) shr67) >  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  ) )
    $if cmp68 $then  $place [entry_bbx_xnph] $else $place [entry_forx_xend] $endif 
    //begin: basic-block bbx_xnph
    $merge entry_bbx_xnph
    $endmerge
    tmp1 := ($cast ($uint<64>) shr67)
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody_forx_xbody 
    $endmerge
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][indvar])
    // load 
    tmp4 := ->(arrayidx) 
    conv := ($cast ($uint<8>) tmp4)
    shr9 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    conv12 := ($cast ($uint<8>) shr9)
    shr15 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    conv18 := ($cast ($uint<8>) shr15)
    shr21 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000011000 ) )
    conv24 := ($cast ($uint<8>) shr21)
    shr27 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000100000 ) )
    conv30 := ($cast ($uint<8>) shr27)
    shr33 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000101000 ) )
    conv36 := ($cast ($uint<8>) shr33)
    shr39 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 ) )
    conv42 := ($cast ($uint<8>) shr39)
    shr45 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000111000 ) )
    conv48 := ($cast ($uint<8>) shr45)
    zeropad_output_pipe := conv48
    zeropad_output_pipe := conv42
    zeropad_output_pipe := conv36
    zeropad_output_pipe := conv30
    zeropad_output_pipe := conv24
    zeropad_output_pipe := conv18
    zeropad_output_pipe := conv12
    zeropad_output_pipe := conv
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond2 := (indvarx_xnext == tmp1 )
    $if exitcond2 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_A] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block0_starting
    call1 := Block0_starting
    call2 := Block0_starting
    call3 := Block0_starting
    call4 := Block0_starting
    call5 := Block0_starting
    call6 := Block0_starting
    $barrier 
    conv27 := ($cast ($uint<32>) call2)
    conv29 := ($cast ($uint<32>) call1)
    conv33 := ($cast ($uint<32>) call5)
    conv35 := ($cast ($uint<32>) call4)
    mul36 := (conv35 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    sext := (mul36 * conv33)
    conv89 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    conv103 := ($cast ($uint<32>) call6)
    mul := (conv29 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    sext168 := (mul * conv27)
    conv107 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext168) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    conv125 := ($cast ($uint<32>) call)
    add128 := (conv103 + conv125)
    add145 := (conv103 + conv29)
    shl := (conv103 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add58 := (shl + conv29)
    add72 := (shl + conv125)
    $place [entry_whilex_xbody]
    //begin: basic-block whilex_xbody
    //   this is a do-while loop.
    $merge entry_whilex_xbody
    $phi kx_x1_at_entry :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody 
    $phi ix_x2_at_entry :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody 
    $phi jx_x1_at_entry :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody 
    $endmerge
    $dopipeline $depth 15 $buffering 1 
    $fullrate
    $merge $entry $loopback
    $phi kx_x1 :=  ( $cast ($uint<16>) kx_x0) $on $loopback kx_x1_at_entry $on $entry
    $phi ix_x2 :=  ( $cast ($uint<16>) ix_x1) $on $loopback ix_x2_at_entry $on $entry
    $phi jx_x1 :=  ( $cast ($uint<16>) jx_x0) $on $loopback jx_x1_at_entry $on $entry
    $endmerge
    conv43 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    add := (conv43 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    // compare instruction
    cmp := ( ($bitcast ( $int<32>) add) <   ($bitcast ( $int<32>) conv27 ) )
    whilex_xbody_ifx_xthen_taken := cmp
    whilex_xbody_ifx_xelse_taken := ( ~cmp)
    ifx_xelse_exec_guard := whilex_xbody_ifx_xelse_taken
    //begin: basic-block ifx_xelse
    $guard (ifx_xelse_exec_guard) inc := (jx_x1 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    $guard (ifx_xelse_exec_guard) conv53 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc) )
    // compare instruction
    $guard (ifx_xelse_exec_guard) cmp59 := (conv53 == add58 )
    $guard (ifx_xelse_exec_guard) inc64 := ($cast ($uint<16>) cmp59)
    $guard (ifx_xelse_exec_guard) inc64x_xix_x2 := (inc64 + ix_x2)
    $guard (ifx_xelse_exec_guard) jx_x2 := ( $mux cmp59 ( $bitcast ($uint<16> ) _b0000000000000000 )  inc)
    $guard (ifx_xelse_exec_guard) conv66 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc64x_xix_x2) )
    // compare instruction
    $guard (ifx_xelse_exec_guard) cmp73 := (conv66 == add72 )
    ifx_xelse_ifx_xthen75_taken := (ifx_xelse_exec_guard & cmp73)
    ifx_xelse_ifx_xend77_taken := (ifx_xelse_exec_guard & (~cmp73))
    ifx_xthen75_exec_guard := ifx_xelse_ifx_xthen75_taken
    //begin: basic-block ifx_xthen75
    ifx_xthen75_ifx_xend77_taken := ifx_xthen75_exec_guard
    ifx_xthen_exec_guard := whilex_xbody_ifx_xthen_taken
    //begin: basic-block ifx_xthen
    $guard (ifx_xthen_exec_guard) add49 := (kx_x1 + ( $bitcast ($uint<16> ) _b0000000000000100 ) )
    ifx_xthen_ifx_xend77_taken := ifx_xthen_exec_guard
    ifx_xend77_exec_guard := (ifx_xelse_ifx_xend77_taken | ( ifx_xthen_ifx_xend77_taken | ifx_xthen75_ifx_xend77_taken ) )
    //begin: basic-block ifx_xend77
    kx_x0 := ($mux ifx_xthen_ifx_xend77_taken ( $bitcast ($uint<16>) add49) ($mux ifx_xthen75_ifx_xend77_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($mux ifx_xelse_ifx_xend77_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($bitcast ($uint<16>) 0))))
    ix_x1 := ($mux ifx_xthen_ifx_xend77_taken ( $bitcast ($uint<16>) ix_x2) ($mux ifx_xthen75_ifx_xend77_taken ( $bitcast ($uint<16>) inc64x_xix_x2) ($mux ifx_xelse_ifx_xend77_taken ( $bitcast ($uint<16>) inc64x_xix_x2) ($bitcast ($uint<16>) 0))))
    jx_x0 := ($mux ifx_xthen_ifx_xend77_taken ( $bitcast ($uint<16>) jx_x1) ($mux ifx_xthen75_ifx_xend77_taken ( $bitcast ($uint<16>) jx_x2) ($mux ifx_xelse_ifx_xend77_taken ( $bitcast ($uint<16>) jx_x2) ($bitcast ($uint<16>) 0))))
    flagx_x0 := ($mux ifx_xthen_ifx_xend77_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($mux ifx_xthen75_ifx_xend77_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000001 ) ) ($mux ifx_xelse_ifx_xend77_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($bitcast ($uint<16>) 0))))
    $guard (ifx_xend77_exec_guard) conv81167 := ($cast ($uint<32>) kx_x0)
    $guard (ifx_xend77_exec_guard) conv85 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x0) )
    $guard (ifx_xend77_exec_guard) mul86 := (conv85 * conv33)
    $guard (ifx_xend77_exec_guard) conv91 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) ix_x1) )
    $guard (ifx_xend77_exec_guard) mul92 := (conv91 * conv89)
    $guard (ifx_xend77_exec_guard) add87 := (mul92 + conv81167)
    $guard (ifx_xend77_exec_guard) add93 := (add87 + mul86)
    $guard (ifx_xend77_exec_guard) conv94 := ($cast ($uint<16>) add93)
    $guard (ifx_xend77_exec_guard) sub := (conv85 - conv103)
    $guard (ifx_xend77_exec_guard) mul104 := (sub * conv27)
    $guard (ifx_xend77_exec_guard) sub112 := (conv91 - conv103)
    $guard (ifx_xend77_exec_guard) mul113 := (sub112 * conv107)
    $guard (ifx_xend77_exec_guard) add105 := (mul113 + conv81167)
    $guard (ifx_xend77_exec_guard) add114 := (add105 + mul104)
    // compare instruction
    $guard (ifx_xend77_exec_guard) cmp120 := ( ($bitcast ( $int<32>) conv91) <   ($bitcast ( $int<32>) conv103 ) )
    $guard (ifx_xend77_exec_guard) cmp120x_xnot := (cmp120 ^ ( $bitcast ($uint<1> ) _b1 ) )
    // compare instruction
    $guard (ifx_xend77_exec_guard) cmp129 := ( ($bitcast ( $int<32>) conv91) <   ($bitcast ( $int<32>) add128 ) )
    $guard (ifx_xend77_exec_guard) orx_xcond := (cmp120x_xnot & cmp129)
    $guard (ifx_xend77_exec_guard) orx_xcondx_xnot := (orx_xcond ^ ( $bitcast ($uint<1> ) _b1 ) )
    // compare instruction
    $guard (ifx_xend77_exec_guard) cmp136 := ( ($bitcast ( $int<32>) conv85) <   ($bitcast ( $int<32>) conv103 ) )
    $guard (ifx_xend77_exec_guard) orx_xcond172 := (orx_xcondx_xnot | cmp136)
    $guard (ifx_xend77_exec_guard) orx_xcond172x_xnot := (orx_xcond172 ^ ( $bitcast ($uint<1> ) _b1 ) )
    // compare instruction
    $guard (ifx_xend77_exec_guard) cmp146 := ( ($bitcast ( $int<32>) conv85) <   ($bitcast ( $int<32>) add145 ) )
    $guard (ifx_xend77_exec_guard) orx_xcond173 := (orx_xcond172x_xnot & cmp146)
    ifx_xend77_ifx_xelse151_taken := (ifx_xend77_exec_guard & orx_xcond173)
    ifx_xend77_ifx_xthen148_taken := (ifx_xend77_exec_guard & (~orx_xcond173))
    ifx_xthen148_exec_guard := ifx_xend77_ifx_xthen148_taken
    //begin: basic-block ifx_xthen148
    $guard (ifx_xthen148_exec_guard) conv150 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) conv94) )
    $guard (ifx_xthen148_exec_guard) shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) conv150) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    $guard (ifx_xthen148_exec_guard) idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom])
    $guard (ifx_xthen148_exec_guard) ->(arrayidx) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    ifx_xthen148_ifx_xend163_taken := ifx_xthen148_exec_guard
    ifx_xelse151_exec_guard := ifx_xend77_ifx_xelse151_taken
    //begin: basic-block ifx_xelse151
    $guard (ifx_xelse151_exec_guard) sext170 := (add114 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    $guard (ifx_xelse151_exec_guard) shr154 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext170) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010010 )  )))
    $guard (ifx_xelse151_exec_guard) idxprom155 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr154) )
    arrayidx156 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom155])
    // load 
    $guard (ifx_xelse151_exec_guard) tmp157 := ->(arrayidx156) 
    $guard (ifx_xelse151_exec_guard) conv159 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) conv94) )
    $guard (ifx_xelse151_exec_guard) shr160 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) conv159) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    $guard (ifx_xelse151_exec_guard) idxprom161 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr160) )
    arrayidx162 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom161])
    $guard (ifx_xelse151_exec_guard) ->(arrayidx162) := tmp157
    ifx_xelse151_ifx_xend163_taken := ifx_xelse151_exec_guard
    //begin: basic-block ifx_xend163
    // compare instruction
    tobool := (flagx_x0 == ( $bitcast ($uint<16> ) _b0000000000000000 )  )
    ifx_xend163_whilex_xend_taken := ( ~tobool)
    $while tobool
    $if ifx_xend163_whilex_xend_taken $then 
    $place [ifx_xend163_whilex_xend]
    $endif
    //begin: basic-block whilex_xend
    $merge ifx_xend163_whilex_xend
    $endmerge
    $barrier 
    Block0_complete := ( $bitcast ($uint<8> ) _b00000001 ) 
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := zeropad_input_pipe
    call1 := zeropad_input_pipe
    call2 := zeropad_input_pipe
    call3 := zeropad_input_pipe
    call4 := zeropad_input_pipe
    call5 := zeropad_input_pipe
    call6 := zeropad_input_pipe
    call7 := zeropad_input_pipe
    call8 := zeropad_input_pipe
    conv := ($cast ($uint<64>) call2)
    conv10 := ($cast ($uint<64>) call3)
    conv12 := ($cast ($uint<64>) call4)
    mul := (conv10 * conv)
    mul13 := (mul * conv12)
    shr95x_xmask := (mul13 & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000111111111111111111111100 ) )
    // compare instruction
    cmp96 := (shr95x_xmask == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
    $if cmp96 $then  $place [entry_forx_xend] $else $place [entry_bbx_xnph] $endif 
    //begin: basic-block bbx_xnph
    $merge entry_bbx_xnph
    $endmerge
    tmp := ($cast ($uint<64>) call3)
    tmp1 := ($cast ($uint<64>) call2)
    tmp2 := (tmp * tmp1)
    tmp3 := ($cast ($uint<64>) call4)
    tmp4 := (tmp2 * tmp3)
    tmp5 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    // compare instruction
    tmp6 := (tmp5 > ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
    umax7 := ( $mux tmp6 tmp5 ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody_forx_xbody 
    $endmerge
    arrayidx := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][indvar])
    call20 := zeropad_input_pipe
    conv21 := ($cast ($uint<64>) call20)
    shl := (conv21 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call23 := zeropad_input_pipe
    conv25 := ($cast ($uint<64>) call23)
    add := (shl | conv25)
    shl27 := (add << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call28 := zeropad_input_pipe
    conv30 := ($cast ($uint<64>) call28)
    add31 := (shl27 | conv30)
    shl33 := (add31 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call34 := zeropad_input_pipe
    conv36 := ($cast ($uint<64>) call34)
    add37 := (shl33 | conv36)
    shl39 := (add37 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call40 := zeropad_input_pipe
    conv42 := ($cast ($uint<64>) call40)
    add43 := (shl39 | conv42)
    shl45 := (add43 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call46 := zeropad_input_pipe
    conv48 := ($cast ($uint<64>) call46)
    add49 := (shl45 | conv48)
    shl51 := (add49 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call52 := zeropad_input_pipe
    conv54 := ($cast ($uint<64>) call52)
    add55 := (shl51 | conv54)
    shl57 := (add55 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call58 := zeropad_input_pipe
    conv60 := ($cast ($uint<64>) call58)
    add61 := (shl57 | conv60)
    ->(arrayidx) := add61
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond8 := (indvarx_xnext == umax7 )
    $if exitcond8 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend
    $endmerge
    $barrier 
    $call timer ()  (call66)
    conv67 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) call66) )
    Block0_starting := call2
    Block0_starting := call3
    Block0_starting := call4
    Block0_starting := call6
    Block0_starting := call7
    Block0_starting := call8
    Block0_starting := call5
    call76 := Block0_complete
    $barrier 
    $call timer ()  (call79)
    conv80 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) call79) )
    sub := (conv80 - conv67)
    elapsed_time_pipe := sub
    $barrier 
    conv86 := ($cast ($uint<32>) call6)
    conv88 := ($cast ($uint<32>) call7)
    conv91 := ($cast ($uint<32>) call8)
    mul89 := (conv88 * conv86)
    mul92 := (mul89 * conv91)
    $call sendOutput (mul92 )  ()
    $place [return__]
    $merge return__ $endmerge
  }
}
