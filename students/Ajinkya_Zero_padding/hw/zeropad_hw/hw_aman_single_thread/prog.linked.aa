$record [structx_x__SizedTensor_16K]  < $array[16384] $of $uint<64> > 
$record [structx_x__TensorDescriptor]  < $uint<32> >  < $uint<32> >  < $uint<32> >  < $array[64] $of $uint<32> > 
$pipe  Block0_complete : $uint<8>  $depth 1 
// can point into 
$pipe  Block0_starting : $uint<8>  $depth 1 
// can point into 
$storage  R :  structx_x__SizedTensor_16K  // memory space index = 0  base address = 0  word size = 64
// can point into 
$storage  T :  structx_x__SizedTensor_16K  // memory space index = 1  base address = 0  word size = 64
// can point into 
$storage  count : $uint<64> // memory space index = 2  base address = 0  word size = 64
// can point into 
$pipe  elapsed_time_pipe : $uint<64>  $depth 1 
// can point into 
$pipe  zeropad_input_pipe : $uint<8>  $depth 2 
// can point into 
$pipe  zeropad_output_pipe : $uint<8>  $depth 2 
// can point into 
$module [progx_xoptx_xo_storage_initializer_]
$in ()
$out ()
$is
{
  $null
  $attribute initializer 
}
$module [global_storage_initializer_]
$in ()
$out ()
$is
{
  $parallelblock[pb]
  {
    $call progx_xoptx_xo_storage_initializer_ () () 
  }
}
$module [sendOutput]
$in ( size : $uint<32>  )
$out ()
$is
{
  $branchblock [body]
  {
    shr67 := ($bitcast ($uint<32>) (($bitcast ($int<32>) size ) >> ($bitcast ($int<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000010  ) )) ) $buffering 1// bits of buffering = 32. 
    cmp68 := (($bitcast ($int<32>) shr67 ) > ($bitcast ($int<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) )) $buffering 1// bits of buffering = 1. 
    $if cmp68 $then 
    $place[entry_bbx_xnph]
    $else 
    $place[entry_forx_xend]
    $endif
    $merge entry_bbx_xnph 
    $endmerge
    tmp1 := ($cast ($uint<64>) shr67 ) $buffering 1// bits of buffering = 64. 
    $place[bbx_xnph_forx_xbody]
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody 
    $phi indvar := 			  ($cast ($uint<64>) ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody 			  ($cast ($uint<64>) indvarx_xnext ) $on   forx_xbody_forx_xbody 
    // type of target is $uint<64>
    $endmerge
    arrayidx := @(R[($bitcast ($uint<32>) _b00000000000000000000000000000000  )][indvar]) $buffering 1// bits of buffering = 32. 
    tmp4 := ->(arrayidx) $buffering 1// bits of buffering = 64. 
    conv := ($cast ($uint<8>) tmp4 ) $buffering 1// bits of buffering = 8. 
    shr9 := (tmp4 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    conv12 := ($cast ($uint<8>) shr9 ) $buffering 1// bits of buffering = 8. 
    shr15 := (tmp4 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  )) $buffering 1// bits of buffering = 64. 
    conv18 := ($cast ($uint<8>) shr15 ) $buffering 1// bits of buffering = 8. 
    shr21 := (tmp4 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  )) $buffering 1// bits of buffering = 64. 
    conv24 := ($cast ($uint<8>) shr21 ) $buffering 1// bits of buffering = 8. 
    shr27 := (tmp4 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  )) $buffering 1// bits of buffering = 64. 
    conv30 := ($cast ($uint<8>) shr27 ) $buffering 1// bits of buffering = 8. 
    shr33 := (tmp4 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  )) $buffering 1// bits of buffering = 64. 
    conv36 := ($cast ($uint<8>) shr33 ) $buffering 1// bits of buffering = 8. 
    shr39 := (tmp4 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  )) $buffering 1// bits of buffering = 64. 
    conv42 := ($cast ($uint<8>) shr39 ) $buffering 1// bits of buffering = 8. 
    shr45 := (tmp4 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  )) $buffering 1// bits of buffering = 64. 
    conv48 := ($cast ($uint<8>) shr45 ) $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv48 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv42 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv36 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv30 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv24 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv18 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv12 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv $buffering 1// bits of buffering = 8. 
    indvarx_xnext := (indvar + ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )) $buffering 1// bits of buffering = 64. 
    exitcond2 := (indvarx_xnext == tmp1) $buffering 1// bits of buffering = 1. 
    $if exitcond2 $then 
    $place[forx_xbody_forx_xendx_xloopexit]
    $else 
    $place[forx_xbody_forx_xbody]
    $endif
    $merge forx_xbody_forx_xendx_xloopexit 
    $endmerge
    $place[forx_xendx_xloopexit_forx_xend]
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend 
    $endmerge
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
$module [timer]
$in ()
$out ( c : $uint<64>  )
$is
{
  c := count $buffering 1// bits of buffering = 64. 
}
$module [timerDaemon]
$in ()
$out ()
$is
{
  $branchblock [body]
  {
    $dopipeline $depth 3 $buffering 1
    $fullrate 
    $merge $entry $loopback 
    $phi ncount := 			  (ncount + 1 ) $on   $loopback 			  ($bitcast ($uint<64>) 0  ) $on   $entry 
    // type of target is $uint<64>
    $endmerge
    count := ncount $buffering 1// bits of buffering = 64. 
    $while 1 
  }
}
$module [zeropad3D]
$in ()
$out ()
$is
{
  $branchblock [body]
  {
    call := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    call1 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    call2 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    call3 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    call4 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    call5 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    call6 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    call7 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    call8 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv := ($cast ($uint<64>) call2 ) $buffering 1// bits of buffering = 64. 
    conv10 := ($cast ($uint<64>) call3 ) $buffering 1// bits of buffering = 64. 
    conv12 := ($cast ($uint<64>) call4 ) $buffering 1// bits of buffering = 64. 
    mul := (conv10 * conv) $buffering 1// bits of buffering = 64. 
    mul13 := (mul * conv12) $buffering 1// bits of buffering = 64. 
    shr95x_xmask := (mul13 & ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000111111111111111111111100  )) $buffering 1// bits of buffering = 64. 
    cmp96 := (shr95x_xmask == ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  )) $buffering 1// bits of buffering = 1. 
    $if cmp96 $then 
    $place[entry_forx_xend]
    $else 
    $place[entry_bbx_xnph]
    $endif
    $merge entry_bbx_xnph 
    $endmerge
    tmp := ($cast ($uint<64>) call3 ) $buffering 1// bits of buffering = 64. 
    tmp1 := ($cast ($uint<64>) call2 ) $buffering 1// bits of buffering = 64. 
    tmp2 := (tmp * tmp1) $buffering 1// bits of buffering = 64. 
    tmp3 := ($cast ($uint<64>) call4 ) $buffering 1// bits of buffering = 64. 
    tmp4 := (tmp2 * tmp3) $buffering 1// bits of buffering = 64. 
    tmp5 := (tmp4 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000010  )) $buffering 1// bits of buffering = 64. 
    tmp6 := (tmp5 > ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )) $buffering 1// bits of buffering = 1. 
    umax7 := ( $mux tmp6 tmp5  ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  ) )  $buffering 1// bits of buffering = 64. 
    $place[bbx_xnph_forx_xbody]
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody 
    $phi indvar := 			  ($cast ($uint<64>) ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody 			  ($cast ($uint<64>) indvarx_xnext ) $on   forx_xbody_forx_xbody 
    // type of target is $uint<64>
    $endmerge
    arrayidx := @(T[($bitcast ($uint<32>) _b00000000000000000000000000000000  )][indvar]) $buffering 1// bits of buffering = 32. 
    call20 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv21 := ($cast ($uint<64>) call20 ) $buffering 1// bits of buffering = 64. 
    shl := (conv21 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call23 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv25 := ($cast ($uint<64>) call23 ) $buffering 1// bits of buffering = 64. 
    add := (shl | conv25) $buffering 1// bits of buffering = 64. 
    shl27 := (add << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call28 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv30 := ($cast ($uint<64>) call28 ) $buffering 1// bits of buffering = 64. 
    add31 := (shl27 | conv30) $buffering 1// bits of buffering = 64. 
    shl33 := (add31 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call34 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv36 := ($cast ($uint<64>) call34 ) $buffering 1// bits of buffering = 64. 
    add37 := (shl33 | conv36) $buffering 1// bits of buffering = 64. 
    shl39 := (add37 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call40 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv42 := ($cast ($uint<64>) call40 ) $buffering 1// bits of buffering = 64. 
    add43 := (shl39 | conv42) $buffering 1// bits of buffering = 64. 
    shl45 := (add43 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call46 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv48 := ($cast ($uint<64>) call46 ) $buffering 1// bits of buffering = 64. 
    add49 := (shl45 | conv48) $buffering 1// bits of buffering = 64. 
    shl51 := (add49 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call52 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv54 := ($cast ($uint<64>) call52 ) $buffering 1// bits of buffering = 64. 
    add55 := (shl51 | conv54) $buffering 1// bits of buffering = 64. 
    shl57 := (add55 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call58 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv60 := ($cast ($uint<64>) call58 ) $buffering 1// bits of buffering = 64. 
    add61 := (shl57 | conv60) $buffering 1// bits of buffering = 64. 
    ->(arrayidx) := add61 $buffering 1// bits of buffering = 64. 
    indvarx_xnext := (indvar + ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )) $buffering 1// bits of buffering = 64. 
    exitcond8 := (indvarx_xnext == umax7) $buffering 1// bits of buffering = 1. 
    $if exitcond8 $then 
    $place[forx_xbody_forx_xendx_xloopexit]
    $else 
    $place[forx_xbody_forx_xbody]
    $endif
    $merge forx_xbody_forx_xendx_xloopexit 
    $endmerge
    $place[forx_xendx_xloopexit_forx_xend]
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend 
    $endmerge
    $barrier
    $call timer () (call66 ) 
    conv67 := ($bitcast ($uint<64>) ($cast ($int<64>) call66 ) ) $buffering 1// bits of buffering = 64. 
    Block0_starting := call2 $buffering 1// bits of buffering = 8. 
    Block0_starting := call3 $buffering 1// bits of buffering = 8. 
    Block0_starting := call4 $buffering 1// bits of buffering = 8. 
    Block0_starting := call6 $buffering 1// bits of buffering = 8. 
    Block0_starting := call7 $buffering 1// bits of buffering = 8. 
    Block0_starting := call8 $buffering 1// bits of buffering = 8. 
    Block0_starting := call5 $buffering 1// bits of buffering = 8. 
    call76 := Block0_complete $buffering 1// bits of buffering = 8. 
    $barrier
    $call timer () (call79 ) 
    conv80 := ($bitcast ($uint<64>) ($cast ($int<64>) call79 ) ) $buffering 1// bits of buffering = 64. 
    sub := (conv80 - conv67) $buffering 1// bits of buffering = 64. 
    elapsed_time_pipe := sub $buffering 1// bits of buffering = 64. 
    $barrier
    conv86 := ($cast ($uint<32>) call6 ) $buffering 1// bits of buffering = 32. 
    conv88 := ($cast ($uint<32>) call7 ) $buffering 1// bits of buffering = 32. 
    conv91 := ($cast ($uint<32>) call8 ) $buffering 1// bits of buffering = 32. 
    mul89 := (conv88 * conv86) $buffering 1// bits of buffering = 32. 
    mul92 := (mul89 * conv91) $buffering 1// bits of buffering = 32. 
    $call sendOutput (mul92 ) () 
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
$module [zeropad3D_A]
$in ()
$out ()
$is
{
  $branchblock [body]
  {
    call := Block0_starting $buffering 1// bits of buffering = 8. 
    call1 := Block0_starting $buffering 1// bits of buffering = 8. 
    call2 := Block0_starting $buffering 1// bits of buffering = 8. 
    call3 := Block0_starting $buffering 1// bits of buffering = 8. 
    call4 := Block0_starting $buffering 1// bits of buffering = 8. 
    call5 := Block0_starting $buffering 1// bits of buffering = 8. 
    call6 := Block0_starting $buffering 1// bits of buffering = 8. 
    $barrier
    conv27 := ($cast ($uint<32>) call2 ) $buffering 1// bits of buffering = 32. 
    conv29 := ($cast ($uint<32>) call1 ) $buffering 1// bits of buffering = 32. 
    conv33 := ($cast ($uint<32>) call5 ) $buffering 1// bits of buffering = 32. 
    conv35 := ($cast ($uint<32>) call4 ) $buffering 1// bits of buffering = 32. 
    mul36 := (conv35 << ($bitcast ($uint<32>) _b00000000000000000000000000010000  )) $buffering 1// bits of buffering = 32. 
    sext := (mul36 * conv33) $buffering 1// bits of buffering = 32. 
    conv89 := ($bitcast ($uint<32>) (($bitcast ($int<32>) sext ) >> ($bitcast ($int<32>) ($bitcast ($uint<32>) _b00000000000000000000000000010000  ) )) ) $buffering 1// bits of buffering = 32. 
    conv103 := ($cast ($uint<32>) call6 ) $buffering 1// bits of buffering = 32. 
    mul := (conv29 << ($bitcast ($uint<32>) _b00000000000000000000000000010000  )) $buffering 1// bits of buffering = 32. 
    sext168 := (mul * conv27) $buffering 1// bits of buffering = 32. 
    conv107 := ($bitcast ($uint<32>) (($bitcast ($int<32>) sext168 ) >> ($bitcast ($int<32>) ($bitcast ($uint<32>) _b00000000000000000000000000010000  ) )) ) $buffering 1// bits of buffering = 32. 
    conv125 := ($cast ($uint<32>) call ) $buffering 1// bits of buffering = 32. 
    add128 := (conv103 + conv125) $buffering 1// bits of buffering = 32. 
    add145 := (conv103 + conv29) $buffering 1// bits of buffering = 32. 
    shl := (conv103 << ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1// bits of buffering = 32. 
    add58 := (shl + conv29) $buffering 1// bits of buffering = 32. 
    add72 := (shl + conv125) $buffering 1// bits of buffering = 32. 
    $place[entry_whilex_xbody]
    $merge entry_whilex_xbody 
    $phi kx_x1_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   entry_whilex_xbody 
    // type of target is $uint<16>
    $phi ix_x2_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   entry_whilex_xbody 
    // type of target is $uint<16>
    $phi jx_x1_at_entry := 			  ($cast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) ) $on   entry_whilex_xbody 
    // type of target is $uint<16>
    $endmerge
    $dopipeline $depth 15 $buffering 1
    $fullrate 
    $merge $entry $loopback 
    $phi kx_x1 := 			  ($cast ($uint<16>) kx_x0 ) $on   $loopback 			  kx_x1_at_entry $on   $entry 
    // type of target is $uint<16>
    $phi ix_x2 := 			  ($cast ($uint<16>) ix_x1 ) $on   $loopback 			  ix_x2_at_entry $on   $entry 
    // type of target is $uint<16>
    $phi jx_x1 := 			  ($cast ($uint<16>) jx_x0 ) $on   $loopback 			  jx_x1_at_entry $on   $entry 
    // type of target is $uint<16>
    $endmerge
    conv43 := ($bitcast ($uint<32>) ($cast ($int<32>) kx_x1 ) ) $buffering 1// bits of buffering = 32. 
    add := (conv43 + ($bitcast ($uint<32>) _b00000000000000000000000000000100  )) $buffering 1// bits of buffering = 32. 
    cmp := (($bitcast ($int<32>) add ) < ($bitcast ($int<32>) conv27 )) $buffering 1// bits of buffering = 1. 
    whilex_xbody_ifx_xthen_taken := cmp $buffering 1// bits of buffering = 1. 
    whilex_xbody_ifx_xelse_taken := ( ~ cmp ) $buffering 1// bits of buffering = 1. 
    ifx_xelse_exec_guard := whilex_xbody_ifx_xelse_taken $buffering 1// bits of buffering = 1. 
    $guard (ifx_xelse_exec_guard) inc := (jx_x1 + ($bitcast ($uint<16>) _b0000000000000001  )) $buffering 1// bits of buffering = 16. 
    $guard (ifx_xelse_exec_guard) conv53 := ($bitcast ($uint<32>) ($cast ($int<32>) inc ) ) $buffering 1// bits of buffering = 32. 
    $guard (ifx_xelse_exec_guard) cmp59 := (conv53 == add58) $buffering 1// bits of buffering = 1. 
    $guard (ifx_xelse_exec_guard) inc64 := ($cast ($uint<16>) cmp59 ) $buffering 1// bits of buffering = 16. 
    $guard (ifx_xelse_exec_guard) inc64x_xix_x2 := (inc64 + ix_x2) $buffering 1// bits of buffering = 16. 
    $guard (ifx_xelse_exec_guard) jx_x2 := ( $mux cmp59 ($bitcast ($uint<16>) _b0000000000000000  )  inc )  $buffering 1// bits of buffering = 16. 
    $guard (ifx_xelse_exec_guard) conv66 := ($bitcast ($uint<32>) ($cast ($int<32>) inc64x_xix_x2 ) ) $buffering 1// bits of buffering = 32. 
    $guard (ifx_xelse_exec_guard) cmp73 := (conv66 == add72) $buffering 1// bits of buffering = 1. 
    ifx_xelse_ifx_xthen75_taken := (ifx_xelse_exec_guard & cmp73) $buffering 1// bits of buffering = 1. 
    ifx_xelse_ifx_xend77_taken := (ifx_xelse_exec_guard & ( ~ cmp73 )) $buffering 1// bits of buffering = 1. 
    ifx_xthen75_exec_guard := ifx_xelse_ifx_xthen75_taken $buffering 1// bits of buffering = 1. 
    ifx_xthen75_ifx_xend77_taken := ifx_xthen75_exec_guard $buffering 1// bits of buffering = 1. 
    ifx_xthen_exec_guard := whilex_xbody_ifx_xthen_taken $buffering 1// bits of buffering = 1. 
    $guard (ifx_xthen_exec_guard) add49 := (kx_x1 + ($bitcast ($uint<16>) _b0000000000000100  )) $buffering 1// bits of buffering = 16. 
    ifx_xthen_ifx_xend77_taken := ifx_xthen_exec_guard $buffering 1// bits of buffering = 1. 
    ifx_xend77_exec_guard := (ifx_xelse_ifx_xend77_taken | (ifx_xthen_ifx_xend77_taken | ifx_xthen75_ifx_xend77_taken)) $buffering 1// bits of buffering = 1. 
    kx_x0 := ( $mux ifx_xthen_ifx_xend77_taken ($bitcast ($uint<16>) add49 )  ( $mux ifx_xthen75_ifx_xend77_taken ($bitcast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) )  ( $mux ifx_xelse_ifx_xend77_taken ($bitcast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) )  ($bitcast ($uint<16>) 0  ) )  )  )  $buffering 1// bits of buffering = 16. 
    ix_x1 := ( $mux ifx_xthen_ifx_xend77_taken ($bitcast ($uint<16>) ix_x2 )  ( $mux ifx_xthen75_ifx_xend77_taken ($bitcast ($uint<16>) inc64x_xix_x2 )  ( $mux ifx_xelse_ifx_xend77_taken ($bitcast ($uint<16>) inc64x_xix_x2 )  ($bitcast ($uint<16>) 0  ) )  )  )  $buffering 1// bits of buffering = 16. 
    jx_x0 := ( $mux ifx_xthen_ifx_xend77_taken ($bitcast ($uint<16>) jx_x1 )  ( $mux ifx_xthen75_ifx_xend77_taken ($bitcast ($uint<16>) jx_x2 )  ( $mux ifx_xelse_ifx_xend77_taken ($bitcast ($uint<16>) jx_x2 )  ($bitcast ($uint<16>) 0  ) )  )  )  $buffering 1// bits of buffering = 16. 
    flagx_x0 := ( $mux ifx_xthen_ifx_xend77_taken ($bitcast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) )  ( $mux ifx_xthen75_ifx_xend77_taken ($bitcast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000001  ) )  ( $mux ifx_xelse_ifx_xend77_taken ($bitcast ($uint<16>) ($bitcast ($uint<16>) _b0000000000000000  ) )  ($bitcast ($uint<16>) 0  ) )  )  )  $buffering 1// bits of buffering = 16. 
    $guard (ifx_xend77_exec_guard) conv81167 := ($cast ($uint<32>) kx_x0 ) $buffering 1// bits of buffering = 32. 
    $guard (ifx_xend77_exec_guard) conv85 := ($bitcast ($uint<32>) ($cast ($int<32>) jx_x0 ) ) $buffering 1// bits of buffering = 32. 
    $guard (ifx_xend77_exec_guard) mul86 := (conv85 * conv33) $buffering 1// bits of buffering = 32. 
    $guard (ifx_xend77_exec_guard) conv91 := ($bitcast ($uint<32>) ($cast ($int<32>) ix_x1 ) ) $buffering 1// bits of buffering = 32. 
    $guard (ifx_xend77_exec_guard) mul92 := (conv91 * conv89) $buffering 1// bits of buffering = 32. 
    $guard (ifx_xend77_exec_guard) add87 := (mul92 + conv81167) $buffering 1// bits of buffering = 32. 
    $guard (ifx_xend77_exec_guard) add93 := (add87 + mul86) $buffering 1// bits of buffering = 32. 
    $guard (ifx_xend77_exec_guard) conv94 := ($cast ($uint<16>) add93 ) $buffering 1// bits of buffering = 16. 
    $guard (ifx_xend77_exec_guard) sub := (conv85 - conv103) $buffering 1// bits of buffering = 32. 
    $guard (ifx_xend77_exec_guard) mul104 := (sub * conv27) $buffering 1// bits of buffering = 32. 
    $guard (ifx_xend77_exec_guard) sub112 := (conv91 - conv103) $buffering 1// bits of buffering = 32. 
    $guard (ifx_xend77_exec_guard) mul113 := (sub112 * conv107) $buffering 1// bits of buffering = 32. 
    $guard (ifx_xend77_exec_guard) add105 := (mul113 + conv81167) $buffering 1// bits of buffering = 32. 
    $guard (ifx_xend77_exec_guard) add114 := (add105 + mul104) $buffering 1// bits of buffering = 32. 
    $guard (ifx_xend77_exec_guard) cmp120 := (($bitcast ($int<32>) conv91 ) < ($bitcast ($int<32>) conv103 )) $buffering 1// bits of buffering = 1. 
    $guard (ifx_xend77_exec_guard) cmp120x_xnot := (cmp120 ^ ($bitcast ($uint<1>) _b1  )) $buffering 1// bits of buffering = 1. 
    $guard (ifx_xend77_exec_guard) cmp129 := (($bitcast ($int<32>) conv91 ) < ($bitcast ($int<32>) add128 )) $buffering 1// bits of buffering = 1. 
    $guard (ifx_xend77_exec_guard) orx_xcond := (cmp120x_xnot & cmp129) $buffering 1// bits of buffering = 1. 
    $guard (ifx_xend77_exec_guard) orx_xcondx_xnot := (orx_xcond ^ ($bitcast ($uint<1>) _b1  )) $buffering 1// bits of buffering = 1. 
    $guard (ifx_xend77_exec_guard) cmp136 := (($bitcast ($int<32>) conv85 ) < ($bitcast ($int<32>) conv103 )) $buffering 1// bits of buffering = 1. 
    $guard (ifx_xend77_exec_guard) orx_xcond172 := (orx_xcondx_xnot | cmp136) $buffering 1// bits of buffering = 1. 
    $guard (ifx_xend77_exec_guard) orx_xcond172x_xnot := (orx_xcond172 ^ ($bitcast ($uint<1>) _b1  )) $buffering 1// bits of buffering = 1. 
    $guard (ifx_xend77_exec_guard) cmp146 := (($bitcast ($int<32>) conv85 ) < ($bitcast ($int<32>) add145 )) $buffering 1// bits of buffering = 1. 
    $guard (ifx_xend77_exec_guard) orx_xcond173 := (orx_xcond172x_xnot & cmp146) $buffering 1// bits of buffering = 1. 
    ifx_xend77_ifx_xelse151_taken := (ifx_xend77_exec_guard & orx_xcond173) $buffering 1// bits of buffering = 1. 
    ifx_xend77_ifx_xthen148_taken := (ifx_xend77_exec_guard & ( ~ orx_xcond173 )) $buffering 1// bits of buffering = 1. 
    ifx_xthen148_exec_guard := ifx_xend77_ifx_xthen148_taken $buffering 1// bits of buffering = 1. 
    $guard (ifx_xthen148_exec_guard) conv150 := ($bitcast ($uint<32>) ($cast ($int<32>) conv94 ) ) $buffering 1// bits of buffering = 32. 
    $guard (ifx_xthen148_exec_guard) shr := ($bitcast ($uint<32>) (($bitcast ($int<32>) conv150 ) >> ($bitcast ($int<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000010  ) )) ) $buffering 1// bits of buffering = 32. 
    $guard (ifx_xthen148_exec_guard) idxprom := ($bitcast ($uint<64>) ($cast ($int<64>) shr ) ) $buffering 1// bits of buffering = 64. 
    arrayidx := @(R[($bitcast ($uint<32>) _b00000000000000000000000000000000  )][idxprom]) $buffering 1// bits of buffering = 32. 
    $guard (ifx_xthen148_exec_guard) ->(arrayidx) := ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ) $buffering 1// bits of buffering = 64. 
    ifx_xthen148_ifx_xend163_taken := ifx_xthen148_exec_guard $buffering 1// bits of buffering = 1.  Orphaned statement with target ifx_xthen148_ifx_xend163_taken ?? 
    ifx_xelse151_exec_guard := ifx_xend77_ifx_xelse151_taken $buffering 1// bits of buffering = 1. 
    $guard (ifx_xelse151_exec_guard) sext170 := (add114 << ($bitcast ($uint<32>) _b00000000000000000000000000010000  )) $buffering 1// bits of buffering = 32. 
    $guard (ifx_xelse151_exec_guard) shr154 := ($bitcast ($uint<32>) (($bitcast ($int<32>) sext170 ) >> ($bitcast ($int<32>) ($bitcast ($uint<32>) _b00000000000000000000000000010010  ) )) ) $buffering 1// bits of buffering = 32. 
    $guard (ifx_xelse151_exec_guard) idxprom155 := ($bitcast ($uint<64>) ($cast ($int<64>) shr154 ) ) $buffering 1// bits of buffering = 64. 
    arrayidx156 := @(T[($bitcast ($uint<32>) _b00000000000000000000000000000000  )][idxprom155]) $buffering 1// bits of buffering = 32. 
    $guard (ifx_xelse151_exec_guard) tmp157 := ->(arrayidx156) $buffering 1// bits of buffering = 64. 
    $guard (ifx_xelse151_exec_guard) conv159 := ($bitcast ($uint<32>) ($cast ($int<32>) conv94 ) ) $buffering 1// bits of buffering = 32. 
    $guard (ifx_xelse151_exec_guard) shr160 := ($bitcast ($uint<32>) (($bitcast ($int<32>) conv159 ) >> ($bitcast ($int<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000010  ) )) ) $buffering 1// bits of buffering = 32. 
    $guard (ifx_xelse151_exec_guard) idxprom161 := ($bitcast ($uint<64>) ($cast ($int<64>) shr160 ) ) $buffering 1// bits of buffering = 64. 
    arrayidx162 := @(R[($bitcast ($uint<32>) _b00000000000000000000000000000000  )][idxprom161]) $buffering 1// bits of buffering = 32. 
    $guard (ifx_xelse151_exec_guard) ->(arrayidx162) := tmp157 $buffering 1// bits of buffering = 64. 
    ifx_xelse151_ifx_xend163_taken := ifx_xelse151_exec_guard $buffering 1// bits of buffering = 1.  Orphaned statement with target ifx_xelse151_ifx_xend163_taken ?? 
    tobool := (flagx_x0 == ($bitcast ($uint<16>) _b0000000000000000  )) $buffering 1// bits of buffering = 1. 
    ifx_xend163_whilex_xend_taken := ( ~ tobool ) $buffering 1// bits of buffering = 1. 
    $while tobool
    $if ifx_xend163_whilex_xend_taken $then 
    $place[ifx_xend163_whilex_xend]
    $endif
    $merge ifx_xend163_whilex_xend 
    $endmerge
    $barrier
    Block0_complete := ($bitcast ($uint<8>) _b00000001  ) $buffering 1// bits of buffering = 8. 
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
// Memory space 0: R 
// Memory space 1: T 
// Memory space 2: count 
// use of gated clocks in modules 
