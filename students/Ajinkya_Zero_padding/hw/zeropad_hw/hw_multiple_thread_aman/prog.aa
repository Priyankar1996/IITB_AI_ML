// Aa code produced by llvm2aa (version 1.0)
$record [structx_x__SizedTensor_16K] < $array [16384] $of $uint<64> > 
$record [structx_x__TensorDescriptor] < $uint<32> > < $uint<32> > < $uint<32> > < $array [64] $of $uint<32> > 
$pipe Block0_complete : $uint<8> $depth 1
$pipe Block0_starting : $uint<8> $depth 1
$pipe Block1_complete : $uint<8> $depth 1
$pipe Block1_starting : $uint<8> $depth 1
$pipe Block2_complete : $uint<8> $depth 1
$pipe Block2_starting : $uint<8> $depth 1
$pipe Block3_complete : $uint<8> $depth 1
$pipe Block3_starting : $uint<8> $depth 1
$pipe elapsed_time_pipe : $uint<64> $depth 1
$pipe zeropad_input_pipe : $uint<8> $depth 2
$pipe zeropad_output_pipe : $uint<8> $depth 2
$storage R:structx_x__SizedTensor_16K
$storage T:structx_x__SizedTensor_16K
$module [progx_xoptx_xo_storage_initializer_] $in () $out () $is 
{
  $null
  $attribute initializer
}
$module [sendOutput] 
$in (size : $uint<32> )
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    shr67 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) size) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    // compare instruction
    cmp68 := ( ($bitcast ( $int<32>) shr67) >  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  ) )
    $if cmp68 $then  $place [entry_bbx_xnph] $else $place [entry_forx_xend] $endif 
    //begin: basic-block bbx_xnph
    $merge entry_bbx_xnph
    $endmerge
    tmp1 := ($cast ($uint<64>) shr67)
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody_forx_xbody 
    $endmerge
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][indvar])
    // load 
    tmp4 := ->(arrayidx) 
    conv := ($cast ($uint<8>) tmp4)
    shr9 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    conv12 := ($cast ($uint<8>) shr9)
    shr15 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    conv18 := ($cast ($uint<8>) shr15)
    shr21 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000011000 ) )
    conv24 := ($cast ($uint<8>) shr21)
    shr27 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000100000 ) )
    conv30 := ($cast ($uint<8>) shr27)
    shr33 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000101000 ) )
    conv36 := ($cast ($uint<8>) shr33)
    shr39 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 ) )
    conv42 := ($cast ($uint<8>) shr39)
    shr45 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000111000 ) )
    conv48 := ($cast ($uint<8>) shr45)
    zeropad_output_pipe := conv48
    zeropad_output_pipe := conv42
    zeropad_output_pipe := conv36
    zeropad_output_pipe := conv30
    zeropad_output_pipe := conv24
    zeropad_output_pipe := conv18
    zeropad_output_pipe := conv12
    zeropad_output_pipe := conv
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond2 := (indvarx_xnext == tmp1 )
    $if exitcond2 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_A] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block0_starting
    call1 := Block0_starting
    call2 := Block0_starting
    call3 := Block0_starting
    call4 := Block0_starting
    call5 := Block0_starting
    call6 := Block0_starting
    $barrier 
    conv27 := ($cast ($uint<32>) call2)
    conv29 := ($cast ($uint<32>) call1)
    conv33 := ($cast ($uint<32>) call5)
    conv35 := ($cast ($uint<32>) call4)
    mul36 := (conv35 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    sext := (mul36 * conv33)
    conv90 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    conv104 := ($cast ($uint<32>) call6)
    mul := (conv29 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    sext171 := (mul * conv27)
    conv108 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext171) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    conv126 := ($cast ($uint<32>) call)
    div127 := (conv126 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add130 := (conv104 + div127)
    div145 := (conv29 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add148 := (conv104 + div145)
    shl := (conv104 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add58 := (shl + div145)
    add73 := (shl + div127)
    $place [entry_whilex_xbody]
    //begin: basic-block whilex_xbody
    //   this is a do-while loop.
    $merge entry_whilex_xbody
    $phi kx_x1_at_entry :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody 
    $phi ix_x2_at_entry :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody 
    $phi jx_x1_at_entry :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody 
    $endmerge
    $dopipeline $depth 15 $buffering 1 
    $fullrate
    $merge $entry $loopback
    $phi kx_x1 :=  ( $cast ($uint<16>) kx_x0) $on $loopback kx_x1_at_entry $on $entry
    $phi ix_x2 :=  ( $cast ($uint<16>) ix_x1) $on $loopback ix_x2_at_entry $on $entry
    $phi jx_x1 :=  ( $cast ($uint<16>) jx_x0) $on $loopback jx_x1_at_entry $on $entry
    $endmerge
    conv43 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    add := (conv43 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    // compare instruction
    cmp := ( ($bitcast ( $int<32>) add) <   ($bitcast ( $int<32>) conv27 ) )
    whilex_xbody_ifx_xthen_taken := cmp
    whilex_xbody_ifx_xelse_taken := ( ~cmp)
    ifx_xelse_exec_guard := whilex_xbody_ifx_xelse_taken
    //begin: basic-block ifx_xelse
    $guard (ifx_xelse_exec_guard) inc := (jx_x1 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    $guard (ifx_xelse_exec_guard) conv53 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc) )
    // compare instruction
    $guard (ifx_xelse_exec_guard) cmp59 := (conv53 == add58 )
    $guard (ifx_xelse_exec_guard) inc64 := ($cast ($uint<16>) cmp59)
    $guard (ifx_xelse_exec_guard) inc64x_xix_x2 := (inc64 + ix_x2)
    $guard (ifx_xelse_exec_guard) jx_x2 := ( $mux cmp59 ( $bitcast ($uint<16> ) _b0000000000000000 )  inc)
    $guard (ifx_xelse_exec_guard) conv66 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc64x_xix_x2) )
    // compare instruction
    $guard (ifx_xelse_exec_guard) cmp74 := (conv66 == add73 )
    ifx_xelse_ifx_xthen76_taken := (ifx_xelse_exec_guard & cmp74)
    ifx_xelse_ifx_xend78_taken := (ifx_xelse_exec_guard & (~cmp74))
    ifx_xthen76_exec_guard := ifx_xelse_ifx_xthen76_taken
    //begin: basic-block ifx_xthen76
    ifx_xthen76_ifx_xend78_taken := ifx_xthen76_exec_guard
    ifx_xthen_exec_guard := whilex_xbody_ifx_xthen_taken
    //begin: basic-block ifx_xthen
    $guard (ifx_xthen_exec_guard) add49 := (kx_x1 + ( $bitcast ($uint<16> ) _b0000000000000100 ) )
    ifx_xthen_ifx_xend78_taken := ifx_xthen_exec_guard
    ifx_xend78_exec_guard := (ifx_xelse_ifx_xend78_taken | ( ifx_xthen_ifx_xend78_taken | ifx_xthen76_ifx_xend78_taken ) )
    //begin: basic-block ifx_xend78
    kx_x0 := ($mux ifx_xthen_ifx_xend78_taken ( $bitcast ($uint<16>) add49) ($mux ifx_xthen76_ifx_xend78_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($mux ifx_xelse_ifx_xend78_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($bitcast ($uint<16>) 0))))
    ix_x1 := ($mux ifx_xthen_ifx_xend78_taken ( $bitcast ($uint<16>) ix_x2) ($mux ifx_xthen76_ifx_xend78_taken ( $bitcast ($uint<16>) inc64x_xix_x2) ($mux ifx_xelse_ifx_xend78_taken ( $bitcast ($uint<16>) inc64x_xix_x2) ($bitcast ($uint<16>) 0))))
    jx_x0 := ($mux ifx_xthen_ifx_xend78_taken ( $bitcast ($uint<16>) jx_x1) ($mux ifx_xthen76_ifx_xend78_taken ( $bitcast ($uint<16>) jx_x2) ($mux ifx_xelse_ifx_xend78_taken ( $bitcast ($uint<16>) jx_x2) ($bitcast ($uint<16>) 0))))
    flagx_x0 := ($mux ifx_xthen_ifx_xend78_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($mux ifx_xthen76_ifx_xend78_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000001 ) ) ($mux ifx_xelse_ifx_xend78_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($bitcast ($uint<16>) 0))))
    $guard (ifx_xend78_exec_guard) conv82170 := ($cast ($uint<32>) kx_x0)
    $guard (ifx_xend78_exec_guard) conv86 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x0) )
    $guard (ifx_xend78_exec_guard) mul87 := (conv86 * conv33)
    $guard (ifx_xend78_exec_guard) conv92 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) ix_x1) )
    $guard (ifx_xend78_exec_guard) mul93 := (conv92 * conv90)
    $guard (ifx_xend78_exec_guard) add88 := (mul93 + conv82170)
    $guard (ifx_xend78_exec_guard) add94 := (add88 + mul87)
    $guard (ifx_xend78_exec_guard) conv95 := ($cast ($uint<16>) add94)
    $guard (ifx_xend78_exec_guard) sub := (conv86 - conv104)
    $guard (ifx_xend78_exec_guard) mul105 := (sub * conv27)
    $guard (ifx_xend78_exec_guard) sub113 := (conv92 - conv104)
    $guard (ifx_xend78_exec_guard) mul114 := (sub113 * conv108)
    $guard (ifx_xend78_exec_guard) add106 := (mul114 + conv82170)
    $guard (ifx_xend78_exec_guard) add115 := (add106 + mul105)
    // compare instruction
    $guard (ifx_xend78_exec_guard) cmp121 := ( ($bitcast ( $int<32>) conv92) <   ($bitcast ( $int<32>) conv104 ) )
    $guard (ifx_xend78_exec_guard) cmp121x_xnot := (cmp121 ^ ( $bitcast ($uint<1> ) _b1 ) )
    // compare instruction
    $guard (ifx_xend78_exec_guard) cmp131 := ( ($bitcast ( $int<32>) conv92) <   ($bitcast ( $int<32>) add130 ) )
    $guard (ifx_xend78_exec_guard) orx_xcond := (cmp121x_xnot & cmp131)
    $guard (ifx_xend78_exec_guard) orx_xcondx_xnot := (orx_xcond ^ ( $bitcast ($uint<1> ) _b1 ) )
    // compare instruction
    $guard (ifx_xend78_exec_guard) cmp138 := ( ($bitcast ( $int<32>) conv86) <   ($bitcast ( $int<32>) conv104 ) )
    $guard (ifx_xend78_exec_guard) orx_xcond175 := (orx_xcondx_xnot | cmp138)
    $guard (ifx_xend78_exec_guard) orx_xcond175x_xnot := (orx_xcond175 ^ ( $bitcast ($uint<1> ) _b1 ) )
    // compare instruction
    $guard (ifx_xend78_exec_guard) cmp149 := ( ($bitcast ( $int<32>) conv86) <   ($bitcast ( $int<32>) add148 ) )
    $guard (ifx_xend78_exec_guard) orx_xcond176 := (orx_xcond175x_xnot & cmp149)
    ifx_xend78_ifx_xelse154_taken := (ifx_xend78_exec_guard & orx_xcond176)
    ifx_xend78_ifx_xthen151_taken := (ifx_xend78_exec_guard & (~orx_xcond176))
    ifx_xthen151_exec_guard := ifx_xend78_ifx_xthen151_taken
    //begin: basic-block ifx_xthen151
    $guard (ifx_xthen151_exec_guard) conv153 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) conv95) )
    $guard (ifx_xthen151_exec_guard) shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) conv153) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    $guard (ifx_xthen151_exec_guard) idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom])
    $guard (ifx_xthen151_exec_guard) ->(arrayidx) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    ifx_xthen151_ifx_xend166_taken := ifx_xthen151_exec_guard
    ifx_xelse154_exec_guard := ifx_xend78_ifx_xelse154_taken
    //begin: basic-block ifx_xelse154
    $guard (ifx_xelse154_exec_guard) sext173 := (add115 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    $guard (ifx_xelse154_exec_guard) shr157 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext173) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010010 )  )))
    $guard (ifx_xelse154_exec_guard) idxprom158 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr157) )
    arrayidx159 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom158])
    // load 
    $guard (ifx_xelse154_exec_guard) tmp160 := ->(arrayidx159) 
    $guard (ifx_xelse154_exec_guard) conv162 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) conv95) )
    $guard (ifx_xelse154_exec_guard) shr163 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) conv162) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    $guard (ifx_xelse154_exec_guard) idxprom164 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr163) )
    arrayidx165 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom164])
    $guard (ifx_xelse154_exec_guard) ->(arrayidx165) := tmp160
    ifx_xelse154_ifx_xend166_taken := ifx_xelse154_exec_guard
    //begin: basic-block ifx_xend166
    // compare instruction
    tobool := (flagx_x0 == ( $bitcast ($uint<16> ) _b0000000000000000 )  )
    ifx_xend166_whilex_xend_taken := ( ~tobool)
    $while tobool
    $if ifx_xend166_whilex_xend_taken $then 
    $place [ifx_xend166_whilex_xend]
    $endif
    //begin: basic-block whilex_xend
    $merge ifx_xend166_whilex_xend
    $endmerge
    $barrier 
    Block0_complete := ( $bitcast ($uint<8> ) _b00000001 ) 
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_B] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block1_starting
    call1 := Block1_starting
    call2 := Block1_starting
    call3 := Block1_starting
    call4 := Block1_starting
    call5 := Block1_starting
    call6 := Block1_starting
    $barrier 
    conv := ($cast ($uint<16>) call1)
    div := (conv >> ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    conv32 := ($cast ($uint<32>) call2)
    conv34 := ($cast ($uint<32>) call1)
    conv38 := ($cast ($uint<32>) call5)
    conv40 := ($cast ($uint<32>) call4)
    mul41 := (conv40 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    sext := (mul41 * conv38)
    conv95 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    conv109 := ($cast ($uint<32>) call6)
    mul := (conv34 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    sext175 := (mul * conv32)
    conv113 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext175) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    conv131 := ($cast ($uint<32>) call)
    div132 := (conv131 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add135 := (conv109 + div132)
    add152 := (conv109 + conv34)
    shl := (conv109 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add63 := (shl + conv34)
    add78 := (shl + div132)
    $place [entry_whilex_xbody]
    //begin: basic-block whilex_xbody
    //   this is a do-while loop.
    $merge entry_whilex_xbody
    $phi kx_x1_at_entry :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody 
    $phi ix_x2_at_entry :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody 
    $phi jx_x1_at_entry :=  ( $cast ($uint<16>) div) $on entry_whilex_xbody 
    $endmerge
    $dopipeline $depth 15 $buffering 1 
    $fullrate
    $merge $entry $loopback
    $phi kx_x1 :=  ( $cast ($uint<16>) kx_x0) $on $loopback kx_x1_at_entry $on $entry
    $phi ix_x2 :=  ( $cast ($uint<16>) ix_x1) $on $loopback ix_x2_at_entry $on $entry
    $phi jx_x1 :=  ( $cast ($uint<16>) jx_x0) $on $loopback jx_x1_at_entry $on $entry
    $endmerge
    conv48 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    add := (conv48 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    // compare instruction
    cmp := ( ($bitcast ( $int<32>) add) <   ($bitcast ( $int<32>) conv32 ) )
    whilex_xbody_ifx_xthen_taken := cmp
    whilex_xbody_ifx_xelse_taken := ( ~cmp)
    ifx_xelse_exec_guard := whilex_xbody_ifx_xelse_taken
    //begin: basic-block ifx_xelse
    $guard (ifx_xelse_exec_guard) inc := (jx_x1 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    $guard (ifx_xelse_exec_guard) conv58 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc) )
    // compare instruction
    $guard (ifx_xelse_exec_guard) cmp64 := (conv58 == add63 )
    $guard (ifx_xelse_exec_guard) inc69 := ($cast ($uint<16>) cmp64)
    $guard (ifx_xelse_exec_guard) inc69x_xix_x2 := (inc69 + ix_x2)
    $guard (ifx_xelse_exec_guard) jx_x2 := ( $mux cmp64 div inc)
    $guard (ifx_xelse_exec_guard) conv71 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc69x_xix_x2) )
    // compare instruction
    $guard (ifx_xelse_exec_guard) cmp79 := (conv71 == add78 )
    ifx_xelse_ifx_xthen81_taken := (ifx_xelse_exec_guard & cmp79)
    ifx_xelse_ifx_xend83_taken := (ifx_xelse_exec_guard & (~cmp79))
    ifx_xthen81_exec_guard := ifx_xelse_ifx_xthen81_taken
    //begin: basic-block ifx_xthen81
    ifx_xthen81_ifx_xend83_taken := ifx_xthen81_exec_guard
    ifx_xthen_exec_guard := whilex_xbody_ifx_xthen_taken
    //begin: basic-block ifx_xthen
    $guard (ifx_xthen_exec_guard) add54 := (kx_x1 + ( $bitcast ($uint<16> ) _b0000000000000100 ) )
    ifx_xthen_ifx_xend83_taken := ifx_xthen_exec_guard
    ifx_xend83_exec_guard := (ifx_xelse_ifx_xend83_taken | ( ifx_xthen_ifx_xend83_taken | ifx_xthen81_ifx_xend83_taken ) )
    //begin: basic-block ifx_xend83
    kx_x0 := ($mux ifx_xthen_ifx_xend83_taken ( $bitcast ($uint<16>) add54) ($mux ifx_xthen81_ifx_xend83_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($mux ifx_xelse_ifx_xend83_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($bitcast ($uint<16>) 0))))
    ix_x1 := ($mux ifx_xthen_ifx_xend83_taken ( $bitcast ($uint<16>) ix_x2) ($mux ifx_xthen81_ifx_xend83_taken ( $bitcast ($uint<16>) inc69x_xix_x2) ($mux ifx_xelse_ifx_xend83_taken ( $bitcast ($uint<16>) inc69x_xix_x2) ($bitcast ($uint<16>) 0))))
    jx_x0 := ($mux ifx_xthen_ifx_xend83_taken ( $bitcast ($uint<16>) jx_x1) ($mux ifx_xthen81_ifx_xend83_taken ( $bitcast ($uint<16>) jx_x2) ($mux ifx_xelse_ifx_xend83_taken ( $bitcast ($uint<16>) jx_x2) ($bitcast ($uint<16>) 0))))
    flagx_x0 := ($mux ifx_xthen_ifx_xend83_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($mux ifx_xthen81_ifx_xend83_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000001 ) ) ($mux ifx_xelse_ifx_xend83_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($bitcast ($uint<16>) 0))))
    $guard (ifx_xend83_exec_guard) conv87174 := ($cast ($uint<32>) kx_x0)
    $guard (ifx_xend83_exec_guard) conv91 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x0) )
    $guard (ifx_xend83_exec_guard) mul92 := (conv91 * conv38)
    $guard (ifx_xend83_exec_guard) conv97 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) ix_x1) )
    $guard (ifx_xend83_exec_guard) mul98 := (conv97 * conv95)
    $guard (ifx_xend83_exec_guard) add93 := (mul98 + conv87174)
    $guard (ifx_xend83_exec_guard) add99 := (add93 + mul92)
    $guard (ifx_xend83_exec_guard) conv100 := ($cast ($uint<16>) add99)
    $guard (ifx_xend83_exec_guard) sub := (conv91 - conv109)
    $guard (ifx_xend83_exec_guard) mul110 := (sub * conv32)
    $guard (ifx_xend83_exec_guard) sub118 := (conv97 - conv109)
    $guard (ifx_xend83_exec_guard) mul119 := (sub118 * conv113)
    $guard (ifx_xend83_exec_guard) add111 := (mul119 + conv87174)
    $guard (ifx_xend83_exec_guard) add120 := (add111 + mul110)
    // compare instruction
    $guard (ifx_xend83_exec_guard) cmp126 := ( ($bitcast ( $int<32>) conv97) <   ($bitcast ( $int<32>) conv109 ) )
    $guard (ifx_xend83_exec_guard) cmp126x_xnot := (cmp126 ^ ( $bitcast ($uint<1> ) _b1 ) )
    // compare instruction
    $guard (ifx_xend83_exec_guard) cmp136 := ( ($bitcast ( $int<32>) conv97) <   ($bitcast ( $int<32>) add135 ) )
    $guard (ifx_xend83_exec_guard) orx_xcond := (cmp126x_xnot & cmp136)
    $guard (ifx_xend83_exec_guard) orx_xcondx_xnot := (orx_xcond ^ ( $bitcast ($uint<1> ) _b1 ) )
    // compare instruction
    $guard (ifx_xend83_exec_guard) cmp143 := ( ($bitcast ( $int<32>) conv91) <   ($bitcast ( $int<32>) conv109 ) )
    $guard (ifx_xend83_exec_guard) orx_xcond179 := (orx_xcondx_xnot | cmp143)
    $guard (ifx_xend83_exec_guard) orx_xcond179x_xnot := (orx_xcond179 ^ ( $bitcast ($uint<1> ) _b1 ) )
    // compare instruction
    $guard (ifx_xend83_exec_guard) cmp153 := ( ($bitcast ( $int<32>) conv91) <   ($bitcast ( $int<32>) add152 ) )
    $guard (ifx_xend83_exec_guard) orx_xcond180 := (orx_xcond179x_xnot & cmp153)
    ifx_xend83_ifx_xelse158_taken := (ifx_xend83_exec_guard & orx_xcond180)
    ifx_xend83_ifx_xthen155_taken := (ifx_xend83_exec_guard & (~orx_xcond180))
    ifx_xthen155_exec_guard := ifx_xend83_ifx_xthen155_taken
    //begin: basic-block ifx_xthen155
    $guard (ifx_xthen155_exec_guard) conv157 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) conv100) )
    $guard (ifx_xthen155_exec_guard) shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) conv157) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    $guard (ifx_xthen155_exec_guard) idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom])
    $guard (ifx_xthen155_exec_guard) ->(arrayidx) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    ifx_xthen155_ifx_xend170_taken := ifx_xthen155_exec_guard
    ifx_xelse158_exec_guard := ifx_xend83_ifx_xelse158_taken
    //begin: basic-block ifx_xelse158
    $guard (ifx_xelse158_exec_guard) sext177 := (add120 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    $guard (ifx_xelse158_exec_guard) shr161 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext177) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010010 )  )))
    $guard (ifx_xelse158_exec_guard) idxprom162 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr161) )
    arrayidx163 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom162])
    // load 
    $guard (ifx_xelse158_exec_guard) tmp164 := ->(arrayidx163) 
    $guard (ifx_xelse158_exec_guard) conv166 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) conv100) )
    $guard (ifx_xelse158_exec_guard) shr167 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) conv166) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    $guard (ifx_xelse158_exec_guard) idxprom168 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr167) )
    arrayidx169 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom168])
    $guard (ifx_xelse158_exec_guard) ->(arrayidx169) := tmp164
    ifx_xelse158_ifx_xend170_taken := ifx_xelse158_exec_guard
    //begin: basic-block ifx_xend170
    // compare instruction
    tobool := (flagx_x0 == ( $bitcast ($uint<16> ) _b0000000000000000 )  )
    ifx_xend170_whilex_xend_taken := ( ~tobool)
    $while tobool
    $if ifx_xend170_whilex_xend_taken $then 
    $place [ifx_xend170_whilex_xend]
    $endif
    //begin: basic-block whilex_xend
    $merge ifx_xend170_whilex_xend
    $endmerge
    $barrier 
    Block1_complete := ( $bitcast ($uint<8> ) _b00000001 ) 
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_C] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block2_starting
    call1 := Block2_starting
    call2 := Block2_starting
    call3 := Block2_starting
    call4 := Block2_starting
    call5 := Block2_starting
    call6 := Block2_starting
    $barrier 
    conv := ($cast ($uint<16>) call)
    div := (conv >> ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    conv31 := ($cast ($uint<32>) call2)
    conv33 := ($cast ($uint<32>) call1)
    conv37 := ($cast ($uint<32>) call5)
    conv39 := ($cast ($uint<32>) call4)
    mul40 := (conv39 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    sext := (mul40 * conv37)
    conv94 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    conv108 := ($cast ($uint<32>) call6)
    mul := (conv33 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    sext174 := (mul * conv31)
    conv112 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext174) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    conv130 := ($cast ($uint<32>) call)
    add133 := (conv108 + conv130)
    div148 := (conv33 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add151 := (conv108 + div148)
    shl := (conv108 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add63 := (shl + div148)
    add77 := (shl + conv130)
    $place [entry_whilex_xbody]
    //begin: basic-block whilex_xbody
    //   this is a do-while loop.
    $merge entry_whilex_xbody
    $phi kx_x1_at_entry :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody 
    $phi ix_x2_at_entry :=  ( $cast ($uint<16>) div) $on entry_whilex_xbody 
    $phi jx_x1_at_entry :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody 
    $endmerge
    $dopipeline $depth 15 $buffering 1 
    $fullrate
    $merge $entry $loopback
    $phi kx_x1 :=  ( $cast ($uint<16>) kx_x0) $on $loopback kx_x1_at_entry $on $entry
    $phi ix_x2 :=  ( $cast ($uint<16>) ix_x1) $on $loopback ix_x2_at_entry $on $entry
    $phi jx_x1 :=  ( $cast ($uint<16>) jx_x0) $on $loopback jx_x1_at_entry $on $entry
    $endmerge
    conv47 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    add := (conv47 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    // compare instruction
    cmp := ( ($bitcast ( $int<32>) add) <   ($bitcast ( $int<32>) conv31 ) )
    whilex_xbody_ifx_xthen_taken := cmp
    whilex_xbody_ifx_xelse_taken := ( ~cmp)
    ifx_xelse_exec_guard := whilex_xbody_ifx_xelse_taken
    //begin: basic-block ifx_xelse
    $guard (ifx_xelse_exec_guard) inc := (jx_x1 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    $guard (ifx_xelse_exec_guard) conv57 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc) )
    // compare instruction
    $guard (ifx_xelse_exec_guard) cmp64 := (conv57 == add63 )
    $guard (ifx_xelse_exec_guard) inc69 := ($cast ($uint<16>) cmp64)
    $guard (ifx_xelse_exec_guard) inc69x_xix_x2 := (inc69 + ix_x2)
    $guard (ifx_xelse_exec_guard) jx_x2 := ( $mux cmp64 ( $bitcast ($uint<16> ) _b0000000000000000 )  inc)
    $guard (ifx_xelse_exec_guard) conv71 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc69x_xix_x2) )
    // compare instruction
    $guard (ifx_xelse_exec_guard) cmp78 := (conv71 == add77 )
    ifx_xelse_ifx_xthen80_taken := (ifx_xelse_exec_guard & cmp78)
    ifx_xelse_ifx_xend82_taken := (ifx_xelse_exec_guard & (~cmp78))
    ifx_xthen80_exec_guard := ifx_xelse_ifx_xthen80_taken
    //begin: basic-block ifx_xthen80
    ifx_xthen80_ifx_xend82_taken := ifx_xthen80_exec_guard
    ifx_xthen_exec_guard := whilex_xbody_ifx_xthen_taken
    //begin: basic-block ifx_xthen
    $guard (ifx_xthen_exec_guard) add53 := (kx_x1 + ( $bitcast ($uint<16> ) _b0000000000000100 ) )
    ifx_xthen_ifx_xend82_taken := ifx_xthen_exec_guard
    ifx_xend82_exec_guard := (ifx_xelse_ifx_xend82_taken | ( ifx_xthen_ifx_xend82_taken | ifx_xthen80_ifx_xend82_taken ) )
    //begin: basic-block ifx_xend82
    kx_x0 := ($mux ifx_xthen_ifx_xend82_taken ( $bitcast ($uint<16>) add53) ($mux ifx_xthen80_ifx_xend82_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($mux ifx_xelse_ifx_xend82_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($bitcast ($uint<16>) 0))))
    ix_x1 := ($mux ifx_xthen_ifx_xend82_taken ( $bitcast ($uint<16>) ix_x2) ($mux ifx_xthen80_ifx_xend82_taken ( $bitcast ($uint<16>) inc69x_xix_x2) ($mux ifx_xelse_ifx_xend82_taken ( $bitcast ($uint<16>) inc69x_xix_x2) ($bitcast ($uint<16>) 0))))
    jx_x0 := ($mux ifx_xthen_ifx_xend82_taken ( $bitcast ($uint<16>) jx_x1) ($mux ifx_xthen80_ifx_xend82_taken ( $bitcast ($uint<16>) jx_x2) ($mux ifx_xelse_ifx_xend82_taken ( $bitcast ($uint<16>) jx_x2) ($bitcast ($uint<16>) 0))))
    flagx_x0 := ($mux ifx_xthen_ifx_xend82_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($mux ifx_xthen80_ifx_xend82_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000001 ) ) ($mux ifx_xelse_ifx_xend82_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($bitcast ($uint<16>) 0))))
    $guard (ifx_xend82_exec_guard) conv86173 := ($cast ($uint<32>) kx_x0)
    $guard (ifx_xend82_exec_guard) conv90 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x0) )
    $guard (ifx_xend82_exec_guard) mul91 := (conv90 * conv37)
    $guard (ifx_xend82_exec_guard) conv96 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) ix_x1) )
    $guard (ifx_xend82_exec_guard) mul97 := (conv96 * conv94)
    $guard (ifx_xend82_exec_guard) add92 := (mul97 + conv86173)
    $guard (ifx_xend82_exec_guard) add98 := (add92 + mul91)
    $guard (ifx_xend82_exec_guard) conv99 := ($cast ($uint<16>) add98)
    $guard (ifx_xend82_exec_guard) sub := (conv90 - conv108)
    $guard (ifx_xend82_exec_guard) mul109 := (sub * conv31)
    $guard (ifx_xend82_exec_guard) sub117 := (conv96 - conv108)
    $guard (ifx_xend82_exec_guard) mul118 := (sub117 * conv112)
    $guard (ifx_xend82_exec_guard) add110 := (mul118 + conv86173)
    $guard (ifx_xend82_exec_guard) add119 := (add110 + mul109)
    // compare instruction
    $guard (ifx_xend82_exec_guard) cmp125 := ( ($bitcast ( $int<32>) conv96) <   ($bitcast ( $int<32>) conv108 ) )
    $guard (ifx_xend82_exec_guard) cmp125x_xnot := (cmp125 ^ ( $bitcast ($uint<1> ) _b1 ) )
    // compare instruction
    $guard (ifx_xend82_exec_guard) cmp134 := ( ($bitcast ( $int<32>) conv96) <   ($bitcast ( $int<32>) add133 ) )
    $guard (ifx_xend82_exec_guard) orx_xcond := (cmp125x_xnot & cmp134)
    $guard (ifx_xend82_exec_guard) orx_xcondx_xnot := (orx_xcond ^ ( $bitcast ($uint<1> ) _b1 ) )
    // compare instruction
    $guard (ifx_xend82_exec_guard) cmp141 := ( ($bitcast ( $int<32>) conv90) <   ($bitcast ( $int<32>) conv108 ) )
    $guard (ifx_xend82_exec_guard) orx_xcond178 := (orx_xcondx_xnot | cmp141)
    $guard (ifx_xend82_exec_guard) orx_xcond178x_xnot := (orx_xcond178 ^ ( $bitcast ($uint<1> ) _b1 ) )
    // compare instruction
    $guard (ifx_xend82_exec_guard) cmp152 := ( ($bitcast ( $int<32>) conv90) <   ($bitcast ( $int<32>) add151 ) )
    $guard (ifx_xend82_exec_guard) orx_xcond179 := (orx_xcond178x_xnot & cmp152)
    ifx_xend82_ifx_xelse157_taken := (ifx_xend82_exec_guard & orx_xcond179)
    ifx_xend82_ifx_xthen154_taken := (ifx_xend82_exec_guard & (~orx_xcond179))
    ifx_xthen154_exec_guard := ifx_xend82_ifx_xthen154_taken
    //begin: basic-block ifx_xthen154
    $guard (ifx_xthen154_exec_guard) conv156 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) conv99) )
    $guard (ifx_xthen154_exec_guard) shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) conv156) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    $guard (ifx_xthen154_exec_guard) idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom])
    $guard (ifx_xthen154_exec_guard) ->(arrayidx) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    ifx_xthen154_ifx_xend169_taken := ifx_xthen154_exec_guard
    ifx_xelse157_exec_guard := ifx_xend82_ifx_xelse157_taken
    //begin: basic-block ifx_xelse157
    $guard (ifx_xelse157_exec_guard) sext176 := (add119 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    $guard (ifx_xelse157_exec_guard) shr160 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext176) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010010 )  )))
    $guard (ifx_xelse157_exec_guard) idxprom161 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr160) )
    arrayidx162 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom161])
    // load 
    $guard (ifx_xelse157_exec_guard) tmp163 := ->(arrayidx162) 
    $guard (ifx_xelse157_exec_guard) conv165 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) conv99) )
    $guard (ifx_xelse157_exec_guard) shr166 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) conv165) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    $guard (ifx_xelse157_exec_guard) idxprom167 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr166) )
    arrayidx168 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom167])
    $guard (ifx_xelse157_exec_guard) ->(arrayidx168) := tmp163
    ifx_xelse157_ifx_xend169_taken := ifx_xelse157_exec_guard
    //begin: basic-block ifx_xend169
    // compare instruction
    tobool := (flagx_x0 == ( $bitcast ($uint<16> ) _b0000000000000000 )  )
    ifx_xend169_whilex_xend_taken := ( ~tobool)
    $while tobool
    $if ifx_xend169_whilex_xend_taken $then 
    $place [ifx_xend169_whilex_xend]
    $endif
    //begin: basic-block whilex_xend
    $merge ifx_xend169_whilex_xend
    $endmerge
    $barrier 
    Block2_complete := ( $bitcast ($uint<8> ) _b00000001 ) 
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_D] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block3_starting
    call1 := Block3_starting
    call2 := Block3_starting
    call3 := Block3_starting
    call4 := Block3_starting
    call5 := Block3_starting
    call6 := Block3_starting
    $barrier 
    conv := ($cast ($uint<16>) call1)
    div := (conv >> ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    conv10 := ($cast ($uint<16>) call)
    div11 := (conv10 >> ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    conv36 := ($cast ($uint<32>) call2)
    conv38 := ($cast ($uint<32>) call1)
    conv42 := ($cast ($uint<32>) call5)
    conv44 := ($cast ($uint<32>) call4)
    mul45 := (conv44 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    sext := (mul45 * conv42)
    conv98 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    conv112 := ($cast ($uint<32>) call6)
    mul := (conv38 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    sext177 := (mul * conv36)
    conv116 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext177) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    conv134 := ($cast ($uint<32>) call)
    add137 := (conv112 + conv134)
    add154 := (conv112 + conv38)
    shl := (conv112 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add67 := (shl + conv38)
    add81 := (shl + conv134)
    $place [entry_whilex_xbody]
    //begin: basic-block whilex_xbody
    //   this is a do-while loop.
    $merge entry_whilex_xbody
    $phi kx_x1_at_entry :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody 
    $phi ix_x2_at_entry :=  ( $cast ($uint<16>) div11) $on entry_whilex_xbody 
    $phi jx_x1_at_entry :=  ( $cast ($uint<16>) div) $on entry_whilex_xbody 
    $endmerge
    $dopipeline $depth 15 $buffering 1 
    $fullrate
    $merge $entry $loopback
    $phi kx_x1 :=  ( $cast ($uint<16>) kx_x0) $on $loopback kx_x1_at_entry $on $entry
    $phi ix_x2 :=  ( $cast ($uint<16>) ix_x1) $on $loopback ix_x2_at_entry $on $entry
    $phi jx_x1 :=  ( $cast ($uint<16>) jx_x0) $on $loopback jx_x1_at_entry $on $entry
    $endmerge
    conv52 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    add := (conv52 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    // compare instruction
    cmp := ( ($bitcast ( $int<32>) add) <   ($bitcast ( $int<32>) conv36 ) )
    whilex_xbody_ifx_xthen_taken := cmp
    whilex_xbody_ifx_xelse_taken := ( ~cmp)
    ifx_xelse_exec_guard := whilex_xbody_ifx_xelse_taken
    //begin: basic-block ifx_xelse
    $guard (ifx_xelse_exec_guard) inc := (jx_x1 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    $guard (ifx_xelse_exec_guard) conv62 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc) )
    // compare instruction
    $guard (ifx_xelse_exec_guard) cmp68 := (conv62 == add67 )
    $guard (ifx_xelse_exec_guard) inc73 := ($cast ($uint<16>) cmp68)
    $guard (ifx_xelse_exec_guard) inc73x_xix_x2 := (inc73 + ix_x2)
    $guard (ifx_xelse_exec_guard) jx_x2 := ( $mux cmp68 div inc)
    $guard (ifx_xelse_exec_guard) conv75 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc73x_xix_x2) )
    // compare instruction
    $guard (ifx_xelse_exec_guard) cmp82 := (conv75 == add81 )
    ifx_xelse_ifx_xthen84_taken := (ifx_xelse_exec_guard & cmp82)
    ifx_xelse_ifx_xend86_taken := (ifx_xelse_exec_guard & (~cmp82))
    ifx_xthen84_exec_guard := ifx_xelse_ifx_xthen84_taken
    //begin: basic-block ifx_xthen84
    ifx_xthen84_ifx_xend86_taken := ifx_xthen84_exec_guard
    ifx_xthen_exec_guard := whilex_xbody_ifx_xthen_taken
    //begin: basic-block ifx_xthen
    $guard (ifx_xthen_exec_guard) add58 := (kx_x1 + ( $bitcast ($uint<16> ) _b0000000000000100 ) )
    ifx_xthen_ifx_xend86_taken := ifx_xthen_exec_guard
    ifx_xend86_exec_guard := (ifx_xelse_ifx_xend86_taken | ( ifx_xthen_ifx_xend86_taken | ifx_xthen84_ifx_xend86_taken ) )
    //begin: basic-block ifx_xend86
    kx_x0 := ($mux ifx_xthen_ifx_xend86_taken ( $bitcast ($uint<16>) add58) ($mux ifx_xthen84_ifx_xend86_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($mux ifx_xelse_ifx_xend86_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($bitcast ($uint<16>) 0))))
    ix_x1 := ($mux ifx_xthen_ifx_xend86_taken ( $bitcast ($uint<16>) ix_x2) ($mux ifx_xthen84_ifx_xend86_taken ( $bitcast ($uint<16>) inc73x_xix_x2) ($mux ifx_xelse_ifx_xend86_taken ( $bitcast ($uint<16>) inc73x_xix_x2) ($bitcast ($uint<16>) 0))))
    jx_x0 := ($mux ifx_xthen_ifx_xend86_taken ( $bitcast ($uint<16>) jx_x1) ($mux ifx_xthen84_ifx_xend86_taken ( $bitcast ($uint<16>) jx_x2) ($mux ifx_xelse_ifx_xend86_taken ( $bitcast ($uint<16>) jx_x2) ($bitcast ($uint<16>) 0))))
    flagx_x0 := ($mux ifx_xthen_ifx_xend86_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($mux ifx_xthen84_ifx_xend86_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000001 ) ) ($mux ifx_xelse_ifx_xend86_taken ( $bitcast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) ($bitcast ($uint<16>) 0))))
    $guard (ifx_xend86_exec_guard) conv90176 := ($cast ($uint<32>) kx_x0)
    $guard (ifx_xend86_exec_guard) conv94 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x0) )
    $guard (ifx_xend86_exec_guard) mul95 := (conv94 * conv42)
    $guard (ifx_xend86_exec_guard) conv100 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) ix_x1) )
    $guard (ifx_xend86_exec_guard) mul101 := (conv100 * conv98)
    $guard (ifx_xend86_exec_guard) add96 := (mul101 + conv90176)
    $guard (ifx_xend86_exec_guard) add102 := (add96 + mul95)
    $guard (ifx_xend86_exec_guard) conv103 := ($cast ($uint<16>) add102)
    $guard (ifx_xend86_exec_guard) sub := (conv94 - conv112)
    $guard (ifx_xend86_exec_guard) mul113 := (sub * conv36)
    $guard (ifx_xend86_exec_guard) sub121 := (conv100 - conv112)
    $guard (ifx_xend86_exec_guard) mul122 := (sub121 * conv116)
    $guard (ifx_xend86_exec_guard) add114 := (mul122 + conv90176)
    $guard (ifx_xend86_exec_guard) add123 := (add114 + mul113)
    // compare instruction
    $guard (ifx_xend86_exec_guard) cmp129 := ( ($bitcast ( $int<32>) conv100) <   ($bitcast ( $int<32>) conv112 ) )
    $guard (ifx_xend86_exec_guard) cmp129x_xnot := (cmp129 ^ ( $bitcast ($uint<1> ) _b1 ) )
    // compare instruction
    $guard (ifx_xend86_exec_guard) cmp138 := ( ($bitcast ( $int<32>) conv100) <   ($bitcast ( $int<32>) add137 ) )
    $guard (ifx_xend86_exec_guard) orx_xcond := (cmp129x_xnot & cmp138)
    $guard (ifx_xend86_exec_guard) orx_xcondx_xnot := (orx_xcond ^ ( $bitcast ($uint<1> ) _b1 ) )
    // compare instruction
    $guard (ifx_xend86_exec_guard) cmp145 := ( ($bitcast ( $int<32>) conv94) <   ($bitcast ( $int<32>) conv112 ) )
    $guard (ifx_xend86_exec_guard) orx_xcond181 := (orx_xcondx_xnot | cmp145)
    $guard (ifx_xend86_exec_guard) orx_xcond181x_xnot := (orx_xcond181 ^ ( $bitcast ($uint<1> ) _b1 ) )
    // compare instruction
    $guard (ifx_xend86_exec_guard) cmp155 := ( ($bitcast ( $int<32>) conv94) <   ($bitcast ( $int<32>) add154 ) )
    $guard (ifx_xend86_exec_guard) orx_xcond182 := (orx_xcond181x_xnot & cmp155)
    ifx_xend86_ifx_xelse160_taken := (ifx_xend86_exec_guard & orx_xcond182)
    ifx_xend86_ifx_xthen157_taken := (ifx_xend86_exec_guard & (~orx_xcond182))
    ifx_xthen157_exec_guard := ifx_xend86_ifx_xthen157_taken
    //begin: basic-block ifx_xthen157
    $guard (ifx_xthen157_exec_guard) conv159 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) conv103) )
    $guard (ifx_xthen157_exec_guard) shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) conv159) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    $guard (ifx_xthen157_exec_guard) idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom])
    $guard (ifx_xthen157_exec_guard) ->(arrayidx) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    ifx_xthen157_ifx_xend172_taken := ifx_xthen157_exec_guard
    ifx_xelse160_exec_guard := ifx_xend86_ifx_xelse160_taken
    //begin: basic-block ifx_xelse160
    $guard (ifx_xelse160_exec_guard) sext179 := (add123 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    $guard (ifx_xelse160_exec_guard) shr163 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext179) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010010 )  )))
    $guard (ifx_xelse160_exec_guard) idxprom164 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr163) )
    arrayidx165 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom164])
    // load 
    $guard (ifx_xelse160_exec_guard) tmp166 := ->(arrayidx165) 
    $guard (ifx_xelse160_exec_guard) conv168 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) conv103) )
    $guard (ifx_xelse160_exec_guard) shr169 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) conv168) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    $guard (ifx_xelse160_exec_guard) idxprom170 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr169) )
    arrayidx171 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom170])
    $guard (ifx_xelse160_exec_guard) ->(arrayidx171) := tmp166
    ifx_xelse160_ifx_xend172_taken := ifx_xelse160_exec_guard
    //begin: basic-block ifx_xend172
    // compare instruction
    tobool := (flagx_x0 == ( $bitcast ($uint<16> ) _b0000000000000000 )  )
    ifx_xend172_whilex_xend_taken := ( ~tobool)
    $while tobool
    $if ifx_xend172_whilex_xend_taken $then 
    $place [ifx_xend172_whilex_xend]
    $endif
    //begin: basic-block whilex_xend
    $merge ifx_xend172_whilex_xend
    $endmerge
    $barrier 
    Block3_complete := ( $bitcast ($uint<8> ) _b00000001 ) 
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := zeropad_input_pipe
    call1 := zeropad_input_pipe
    call2 := zeropad_input_pipe
    call3 := zeropad_input_pipe
    call4 := zeropad_input_pipe
    call5 := zeropad_input_pipe
    call6 := zeropad_input_pipe
    call7 := zeropad_input_pipe
    call8 := zeropad_input_pipe
    conv := ($cast ($uint<64>) call2)
    conv10 := ($cast ($uint<64>) call3)
    conv12 := ($cast ($uint<64>) call4)
    mul := (conv10 * conv)
    mul13 := (mul * conv12)
    shr125x_xmask := (mul13 & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000111111111111111111111100 ) )
    // compare instruction
    cmp126 := (shr125x_xmask == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
    $if cmp126 $then  $place [entry_forx_xend] $else $place [entry_bbx_xnph] $endif 
    //begin: basic-block bbx_xnph
    $merge entry_bbx_xnph
    $endmerge
    tmp := ($cast ($uint<64>) call3)
    tmp1 := ($cast ($uint<64>) call2)
    tmp2 := (tmp * tmp1)
    tmp3 := ($cast ($uint<64>) call4)
    tmp4 := (tmp2 * tmp3)
    tmp5 := (tmp4 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    // compare instruction
    tmp6 := (tmp5 > ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
    umax7 := ( $mux tmp6 tmp5 ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody_forx_xbody 
    $endmerge
    arrayidx := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][indvar])
    call20 := zeropad_input_pipe
    conv21 := ($cast ($uint<64>) call20)
    shl := (conv21 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call23 := zeropad_input_pipe
    conv25 := ($cast ($uint<64>) call23)
    add := (shl | conv25)
    shl27 := (add << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call28 := zeropad_input_pipe
    conv30 := ($cast ($uint<64>) call28)
    add31 := (shl27 | conv30)
    shl33 := (add31 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call34 := zeropad_input_pipe
    conv36 := ($cast ($uint<64>) call34)
    add37 := (shl33 | conv36)
    shl39 := (add37 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call40 := zeropad_input_pipe
    conv42 := ($cast ($uint<64>) call40)
    add43 := (shl39 | conv42)
    shl45 := (add43 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call46 := zeropad_input_pipe
    conv48 := ($cast ($uint<64>) call46)
    add49 := (shl45 | conv48)
    shl51 := (add49 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call52 := zeropad_input_pipe
    conv54 := ($cast ($uint<64>) call52)
    add55 := (shl51 | conv54)
    shl57 := (add55 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call58 := zeropad_input_pipe
    conv60 := ($cast ($uint<64>) call58)
    add61 := (shl57 | conv60)
    ->(arrayidx) := add61
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond8 := (indvarx_xnext == umax7 )
    $if exitcond8 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend
    $endmerge
    $barrier 
    $call timer ()  (call66)
    conv67 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) call66) )
    Block0_starting := call2
    Block0_starting := call3
    Block0_starting := call4
    Block0_starting := call6
    Block0_starting := call7
    Block0_starting := call8
    Block0_starting := call5
    Block1_starting := call2
    Block1_starting := call3
    Block1_starting := call4
    Block1_starting := call6
    Block1_starting := call7
    Block1_starting := call8
    Block1_starting := call5
    Block2_starting := call2
    Block2_starting := call3
    Block2_starting := call4
    Block2_starting := call6
    Block2_starting := call7
    Block2_starting := call8
    Block2_starting := call5
    Block3_starting := call2
    Block3_starting := call3
    Block3_starting := call4
    Block3_starting := call6
    Block3_starting := call7
    Block3_starting := call8
    Block3_starting := call5
    call97 := Block0_complete
    call100 := Block1_complete
    call103 := Block2_complete
    call106 := Block3_complete
    $barrier 
    $call timer ()  (call109)
    conv110 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) call109) )
    sub := (conv110 - conv67)
    elapsed_time_pipe := sub
    $barrier 
    conv116 := ($cast ($uint<32>) call6)
    conv118 := ($cast ($uint<32>) call7)
    conv121 := ($cast ($uint<32>) call8)
    mul119 := (conv118 * conv116)
    mul122 := (mul119 * conv121)
    $call sendOutput (mul122 )  ()
    $place [return__]
    $merge return__ $endmerge
  }
}
