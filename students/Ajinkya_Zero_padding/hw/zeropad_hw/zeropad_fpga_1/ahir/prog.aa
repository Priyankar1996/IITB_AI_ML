// Aa code produced by llvm2aa (version 1.0)
$record [structx_x__SizedTensor_16K] < $array [16384] $of $uint<64> > 
$record [structx_x__TensorDescriptor] < $uint<32> > < $uint<8> > < $uint<32> > < $array [64] $of $uint<32> > 
$pipe Block0_complete : $uint<8> $depth 1
$pipe Block0_starting : $uint<8> $depth 1
$pipe zeropad_input_pipe : $uint<8> $depth 2
$pipe zeropad_output_pipe : $uint<8> $depth 2
$storage des_inp:structx_x__TensorDescriptor
$storage pad:$uint<8>
$storage des_out:structx_x__TensorDescriptor
$storage T:structx_x__SizedTensor_16K
$storage R:structx_x__SizedTensor_16K
$module [progx_xoptx_xo_storage_initializer_] $in () $out () $is 
{
  $null
  $attribute initializer
}
$module [testConfigure] 
$in ()
$out (ret_val__ : $uint<16>)
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    iNsTr_0 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ])
    ->(iNsTr_0) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000101 ) 
    call := zeropad_input_pipe
    iNsTr_3 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    ->(iNsTr_3) := call
    call1 := zeropad_input_pipe
    conv := ($cast ($uint<32>) call1)
    iNsTr_6 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    ->(iNsTr_6) := conv
    // compare instruction
    cmp86 := (call1 == ( $bitcast ($uint<8> ) _b00000000 )  )
    call487 := zeropad_input_pipe
    $if cmp86 $then  $place [entry_forx_xend] $else $place [entry_forx_xbodyx_xpreheader] $endif 
    //begin: basic-block forx_xbodyx_xpreheader
    $merge entry_forx_xbodyx_xpreheader
    $endmerge
    $place [forx_xbodyx_xpreheader_forx_xbody]
    //begin: basic-block forx_xbody
    $merge forx_xbody_forx_xbody forx_xbodyx_xpreheader_forx_xbody
    $phi indvar96 :=  ( $cast ($uint<64>) tmp98) $on forx_xbody_forx_xbody ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on forx_xbodyx_xpreheader_forx_xbody 
    $phi call489 :=  ( $cast ($uint<8>) call4) $on forx_xbody_forx_xbody ( $cast ($uint<8>) call487) $on forx_xbodyx_xpreheader_forx_xbody 
    $endmerge
    tmp := (indvar96 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    inc := ($cast ($uint<32>) tmp)
    arrayidx := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvar96])
    conv5 := ($cast ($uint<32>) call489)
    ->(arrayidx) := conv5
    tmp98 := (indvar96 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    iNsTr_28 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp2 := ->(iNsTr_28) 
    // compare instruction
    cmp := (inc < tmp2 )
    call4 := zeropad_input_pipe
    $if cmp $then  $place [forx_xbody_forx_xbody] $else $place [forx_xbody_forx_xendx_xloopexit] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $phi call4x_xlcssa1 :=  ( $cast ($uint<8>) call4) $on forx_xbody_forx_xendx_xloopexit 
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend
    $phi call4x_xlcssa :=  ( $cast ($uint<8>) call487) $on entry_forx_xend ( $cast ($uint<8>) call4x_xlcssa1) $on forx_xendx_xloopexit_forx_xend 
    $endmerge
    pad := call4x_xlcssa
    call9 := zeropad_input_pipe
    conv10 := ($cast ($uint<32>) call9)
    iNsTr_12 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    ->(iNsTr_12) := conv10
    call11 := zeropad_input_pipe
    conv12 := ($cast ($uint<32>) call11)
    iNsTr_15 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    ->(iNsTr_15) := conv12
    call13 := zeropad_input_pipe
    conv14 := ($cast ($uint<32>) call13)
    iNsTr_18 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    ->(iNsTr_18) := conv14
    iNsTr_20 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp16 := ->(iNsTr_20) 
    iNsTr_21 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp17 := ->(iNsTr_21) 
    iNsTr_22 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp18 := ->(iNsTr_22) 
    mul := (tmp17 * tmp16)
    mul19 := (mul * tmp18)
    conv20 := ($cast ($uint<64>) mul19)
    shr82x_xmask := (conv20 & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000011111111111111111111111111111100 ) )
    // compare instruction
    cmp2583 := (shr82x_xmask == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
    $if cmp2583 $then  $place [forx_xend_forx_xend78] $else $place [forx_xend_bbx_xnph] $endif 
    //begin: basic-block bbx_xnph
    $merge forx_xend_bbx_xnph
    $endmerge
    tmp4 := (tmp17 * tmp16)
    tmp5 := (tmp4 * tmp18)
    tmp6 := ($cast ($uint<64>) tmp5)
    tmp7 := (tmp6 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    // compare instruction
    tmp8 := (tmp7 > ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
    umax9 := ( $mux tmp8 tmp7 ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph_forx_xbody27]
    //begin: basic-block forx_xbody27
    $merge bbx_xnph_forx_xbody27 forx_xbody27_forx_xbody27
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody27 ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody27_forx_xbody27 
    $endmerge
    arrayidx74 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][indvar])
    call29 := zeropad_input_pipe
    conv30 := ($cast ($uint<64>) call29)
    shl := (conv30 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call32 := zeropad_input_pipe
    conv34 := ($cast ($uint<64>) call32)
    add := (shl | conv34)
    shl36 := (add << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call37 := zeropad_input_pipe
    conv39 := ($cast ($uint<64>) call37)
    add40 := (shl36 | conv39)
    shl42 := (add40 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call43 := zeropad_input_pipe
    conv45 := ($cast ($uint<64>) call43)
    add46 := (shl42 | conv45)
    shl48 := (add46 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call49 := zeropad_input_pipe
    conv51 := ($cast ($uint<64>) call49)
    add52 := (shl48 | conv51)
    shl54 := (add52 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call55 := zeropad_input_pipe
    conv57 := ($cast ($uint<64>) call55)
    add58 := (shl54 | conv57)
    shl60 := (add58 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call61 := zeropad_input_pipe
    conv63 := ($cast ($uint<64>) call61)
    add64 := (shl60 | conv63)
    shl66 := (add64 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call67 := zeropad_input_pipe
    conv69 := ($cast ($uint<64>) call67)
    add70 := (shl66 | conv69)
    ->(arrayidx74) := add70
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond10 := (indvarx_xnext == umax9 )
    $if exitcond10 $then  $place [forx_xbody27_forx_xend78x_xloopexit] $else $place [forx_xbody27_forx_xbody27] $endif 
    //begin: basic-block forx_xend78x_xloopexit
    $merge forx_xbody27_forx_xend78x_xloopexit
    $endmerge
    $place [forx_xend78x_xloopexit_forx_xend78]
    //begin: basic-block forx_xend78
    $merge forx_xend_forx_xend78 forx_xend78x_xloopexit_forx_xend78
    $endmerge
    ret_val__ := ($cast ($uint<16>) mul19)
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [sendOutput] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    iNsTr_0 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp := ->(iNsTr_0) 
    iNsTr_1 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp1 := ->(iNsTr_1) 
    iNsTr_2 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp2 := ->(iNsTr_2) 
    mul := (tmp1 * tmp)
    mul3 := (mul * tmp2)
    conv := ($cast ($uint<64>) mul3)
    shr76x_xmask := (conv & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000011111111111111111111111111111100 ) )
    // compare instruction
    cmp77 := (shr76x_xmask == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
    $if cmp77 $then  $place [entry_forx_xend] $else $place [entry_bbx_xnph] $endif 
    //begin: basic-block bbx_xnph
    $merge entry_bbx_xnph
    $endmerge
    tmp3 := (tmp1 * tmp)
    tmp4 := (tmp3 * tmp2)
    tmp5 := ($cast ($uint<64>) tmp4)
    tmp6 := (tmp5 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    // compare instruction
    tmp7 := (tmp6 > ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
    umax8 := ( $mux tmp7 tmp6 ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody_forx_xbody 
    $endmerge
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][indvar])
    // load 
    tmp11 := ->(arrayidx) 
    conv14 := ($cast ($uint<8>) tmp11)
    shr17 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    conv20 := ($cast ($uint<8>) shr17)
    shr23 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    conv26 := ($cast ($uint<8>) shr23)
    shr29 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000011000 ) )
    conv32 := ($cast ($uint<8>) shr29)
    shr35 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000100000 ) )
    conv38 := ($cast ($uint<8>) shr35)
    shr41 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000101000 ) )
    conv44 := ($cast ($uint<8>) shr41)
    shr47 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 ) )
    conv50 := ($cast ($uint<8>) shr47)
    shr53 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000111000 ) )
    conv56 := ($cast ($uint<8>) shr53)
    zeropad_output_pipe := conv56
    zeropad_output_pipe := conv50
    zeropad_output_pipe := conv44
    zeropad_output_pipe := conv38
    zeropad_output_pipe := conv32
    zeropad_output_pipe := conv26
    zeropad_output_pipe := conv20
    zeropad_output_pipe := conv14
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond9 := (indvarx_xnext == umax8 )
    $if exitcond9 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_A] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block0_starting
    $barrier 
    // load 
    tmp := pad
    conv := ($cast ($uint<32>) tmp)
    iNsTr_2 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp2 := ->(iNsTr_2) 
    iNsTr_3 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp4 := ->(iNsTr_3) 
    iNsTr_4 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp8 := ->(iNsTr_4) 
    iNsTr_5 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp10 := ->(iNsTr_5) 
    mul19 := (tmp10 * tmp8)
    iNsTr_6 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp22120 := ->(iNsTr_6) 
    mul24121 := (conv << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add122 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  - mul24121)
    // compare instruction
    cmp123 := (tmp22120 == add122 )
    $if cmp123 $then  $place [entry_whilex_xend] $else $place [entry_bbx_xnph] $endif 
    //begin: basic-block bbx_xnph
    $merge entry_bbx_xnph
    $endmerge
    sub := (conv + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
    $place [bbx_xnph_whilex_xbody]
    //begin: basic-block whilex_xbody
    $merge bbx_xnph_whilex_xbody ifx_xend116_whilex_xbody
    $phi tmp31 :=  ( $cast ($uint<32>) tmp22120) $on bbx_xnph_whilex_xbody ( $cast ($uint<32>) tmp22) $on ifx_xend116_whilex_xbody 
    $phi ix_x1126 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on bbx_xnph_whilex_xbody ( $cast ($uint<32>) ix_x0) $on ifx_xend116_whilex_xbody 
    $phi kx_x0125 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on bbx_xnph_whilex_xbody ( $cast ($uint<32>) kx_x1) $on ifx_xend116_whilex_xbody 
    $phi jx_x1124 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on bbx_xnph_whilex_xbody ( $cast ($uint<32>) jx_x0) $on ifx_xend116_whilex_xbody 
    $endmerge
    // compare instruction
    cmp28 := ( ($bitcast ( $int<32>) ix_x1126) >  ($bitcast ( $int<32>) sub ) )
    $if cmp28 $then  $place [whilex_xbody_lorx_xlhsx_xfalse] $else $place [whilex_xbody_ifx_xthen] $endif 
    //begin: basic-block lorx_xlhsx_xfalse
    $merge whilex_xbody_lorx_xlhsx_xfalse
    $endmerge
    sub34 := (sub + tmp31)
    // compare instruction
    cmp35x_xnot := (ix_x1126 <= sub34 )
    // compare instruction
    cmp41 := ( ($bitcast ( $int<32>) jx_x1124) >  ($bitcast ( $int<32>) sub ) )
    orx_xcond := (cmp35x_xnot & cmp41)
    $if orx_xcond $then  $place [lorx_xlhsx_xfalse_lorx_xlhsx_xfalse43] $else $place [lorx_xlhsx_xfalse_ifx_xthen] $endif 
    //begin: basic-block lorx_xlhsx_xfalse43
    $merge lorx_xlhsx_xfalse_lorx_xlhsx_xfalse43
    $endmerge
    iNsTr_17 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp45 := ->(iNsTr_17) 
    sub48 := (sub + tmp45)
    // compare instruction
    cmp49 := (jx_x1124 > sub48 )
    $if cmp49 $then  $place [lorx_xlhsx_xfalse43_ifx_xthen] $else $place [lorx_xlhsx_xfalse43_ifx_xelse] $endif 
    //begin: basic-block ifx_xthen
    $merge lorx_xlhsx_xfalse_ifx_xthen lorx_xlhsx_xfalse43_ifx_xthen whilex_xbody_ifx_xthen
    $endmerge
    mul55 := (jx_x1124 * tmp8)
    mul59 := (ix_x1126 * mul19)
    add56 := (kx_x0125 + mul55)
    add60 := (add56 + mul59)
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add60) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom])
    ->(arrayidx) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    $place [ifx_xthen_ifx_xend]
    //begin: basic-block ifx_xelse
    $merge lorx_xlhsx_xfalse43_ifx_xelse
    $endmerge
    sub67 := (jx_x1124 - conv)
    sub73 := (ix_x1126 - conv)
    mul74 := (tmp4 * sub73)
    tmp118 := (mul74 + sub67)
    tmp119 := (tmp118 * tmp2)
    add75 := (tmp119 + kx_x0125)
    mul81 := (jx_x1124 * tmp8)
    mul85 := (ix_x1126 * mul19)
    add82 := (kx_x0125 + mul81)
    add86 := (add82 + mul85)
    shr88 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add75) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom89 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr88) )
    arrayidx90 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom89])
    // load 
    tmp91 := ->(arrayidx90) 
    shr93 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add86) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom94 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr93) )
    arrayidx95 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom94])
    ->(arrayidx95) := tmp91
    $place [ifx_xelse_ifx_xend]
    //begin: basic-block ifx_xend
    $merge ifx_xelse_ifx_xend ifx_xthen_ifx_xend
    $endmerge
    add97 := (kx_x0125 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    // compare instruction
    cmp100 := ( ($bitcast ( $int<32>) add97) <   ($bitcast ( $int<32>) tmp2 ) )
    $if cmp100 $then  $place [ifx_xend_ifx_xend116] $else $place [ifx_xend_ifx_xthen102] $endif 
    //begin: basic-block ifx_xthen102
    $merge ifx_xend_ifx_xthen102
    $endmerge
    inc := (jx_x1124 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    iNsTr_25 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp105 := ->(iNsTr_25) 
    add108 := (tmp105 + mul24121)
    // compare instruction
    cmp109 := (inc == add108 )
    inc114 := ($cast ($uint<32>) cmp109)
    inc114x_xix_x1 := (inc114 + ix_x1126)
    $if cmp109 $then  $place [ifx_xthen102_ifx_xthen111] $else $place [ifx_xthen102_ifx_xend116] $endif 
    //begin: basic-block ifx_xthen111
    $merge ifx_xthen102_ifx_xthen111
    $endmerge
    $place [ifx_xthen111_ifx_xend116]
    //begin: basic-block ifx_xend116
    $merge ifx_xend_ifx_xend116 ifx_xthen102_ifx_xend116 ifx_xthen111_ifx_xend116
    $phi jx_x0 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on ifx_xthen111_ifx_xend116 ( $cast ($uint<32>) inc) $on ifx_xthen102_ifx_xend116 ( $cast ($uint<32>) jx_x1124) $on ifx_xend_ifx_xend116 
    $phi kx_x1 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on ifx_xthen111_ifx_xend116 ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on ifx_xthen102_ifx_xend116 ( $cast ($uint<32>) add97) $on ifx_xend_ifx_xend116 
    $phi ix_x0 :=  ( $cast ($uint<32>) inc114x_xix_x1) $on ifx_xthen111_ifx_xend116 ( $cast ($uint<32>) inc114x_xix_x1) $on ifx_xthen102_ifx_xend116 ( $cast ($uint<32>) ix_x1126) $on ifx_xend_ifx_xend116 
    $endmerge
    iNsTr_23 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp22 := ->(iNsTr_23) 
    add := (tmp22 + mul24121)
    // compare instruction
    cmp := (ix_x0 < add )
    $if cmp $then  $place [ifx_xend116_whilex_xbody] $else $place [ifx_xend116_whilex_xendx_xloopexit] $endif 
    //begin: basic-block whilex_xendx_xloopexit
    $merge ifx_xend116_whilex_xendx_xloopexit
    $endmerge
    $place [whilex_xendx_xloopexit_whilex_xend]
    //begin: basic-block whilex_xend
    $merge entry_whilex_xend whilex_xendx_xloopexit_whilex_xend
    $endmerge
    $barrier 
    Block0_complete := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    $call testConfigure ()  (call)
    $barrier 
    conv := ($cast ($uint<8>) call)
    Block0_starting := conv
    call2 := Block0_complete
    $barrier 
    $barrier 
    $call sendOutput ()  ()
    $place [return__]
    $merge return__ $endmerge
  }
}
