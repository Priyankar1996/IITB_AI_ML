// Aa code produced by llvm2aa (version 1.0)
$record [structx_x__SizedTensor_16K] < $array [16384] $of $uint<64> > 
$record [structx_x__TensorDescriptor] < $uint<32> > < $uint<32> > < $uint<32> > < $array [64] $of $uint<32> > 
$pipe Block0_complete : $uint<16> $depth 1
$pipe Block0_starting : $uint<16> $depth 1
$pipe Block1_complete : $uint<16> $depth 1
$pipe Block1_starting : $uint<16> $depth 1
$pipe Block2_complete : $uint<16> $depth 1
$pipe Block2_starting : $uint<16> $depth 1
$pipe Block3_complete : $uint<16> $depth 1
$pipe Block3_starting : $uint<16> $depth 1
$pipe elapsed_time_pipe : $uint<64> $depth 1
$pipe zeropad_input_pipe : $uint<8> $depth 2
$pipe zeropad_output_pipe : $uint<8> $depth 2
$storage des_inp:structx_x__TensorDescriptor
$storage pad:$uint<8>
$storage des_out:structx_x__TensorDescriptor
$storage T:structx_x__SizedTensor_16K
$storage R:structx_x__SizedTensor_16K
$module [progx_xoptx_xo_storage_initializer_] $in () $out () $is 
{
  $null
  $attribute initializer
}
$module [testConfigure] 
$in ()
$out (ret_val__ : $uint<16>)
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    iNsTr_0 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ])
    ->(iNsTr_0) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000101 ) 
    call := zeropad_input_pipe
    conv := ($cast ($uint<32>) call)
    iNsTr_3 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) ])
    ->(iNsTr_3) := conv
    call1 := zeropad_input_pipe
    conv2 := ($cast ($uint<32>) call1)
    iNsTr_6 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    ->(iNsTr_6) := conv2
    // compare instruction
    cmp87 := (call1 == ( $bitcast ($uint<8> ) _b00000000 )  )
    call588 := zeropad_input_pipe
    $if cmp87 $then  $place [entry_forx_xend] $else $place [entry_forx_xbodyx_xpreheader] $endif 
    //begin: basic-block forx_xbodyx_xpreheader
    $merge entry_forx_xbodyx_xpreheader
    $endmerge
    $place [forx_xbodyx_xpreheader_forx_xbody]
    //begin: basic-block forx_xbody
    $merge forx_xbody_forx_xbody forx_xbodyx_xpreheader_forx_xbody
    $phi indvar97 :=  ( $cast ($uint<64>) tmp99) $on forx_xbody_forx_xbody ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on forx_xbodyx_xpreheader_forx_xbody 
    $phi call590 :=  ( $cast ($uint<8>) call5) $on forx_xbody_forx_xbody ( $cast ($uint<8>) call588) $on forx_xbodyx_xpreheader_forx_xbody 
    $endmerge
    tmp := (indvar97 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    inc := ($cast ($uint<32>) tmp)
    arrayidx := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][indvar97])
    conv6 := ($cast ($uint<32>) call590)
    ->(arrayidx) := conv6
    tmp99 := (indvar97 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    iNsTr_28 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) ])
    // load 
    tmp3 := ->(iNsTr_28) 
    // compare instruction
    cmp := (inc < tmp3 )
    call5 := zeropad_input_pipe
    $if cmp $then  $place [forx_xbody_forx_xbody] $else $place [forx_xbody_forx_xendx_xloopexit] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $phi call5x_xlcssa1 :=  ( $cast ($uint<8>) call5) $on forx_xbody_forx_xendx_xloopexit 
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend
    $phi call5x_xlcssa :=  ( $cast ($uint<8>) call588) $on entry_forx_xend ( $cast ($uint<8>) call5x_xlcssa1) $on forx_xendx_xloopexit_forx_xend 
    $endmerge
    pad := call5x_xlcssa
    call10 := zeropad_input_pipe
    conv11 := ($cast ($uint<32>) call10)
    iNsTr_12 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    ->(iNsTr_12) := conv11
    call12 := zeropad_input_pipe
    conv13 := ($cast ($uint<32>) call12)
    iNsTr_15 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    ->(iNsTr_15) := conv13
    call14 := zeropad_input_pipe
    conv15 := ($cast ($uint<32>) call14)
    iNsTr_18 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    ->(iNsTr_18) := conv15
    iNsTr_20 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp17 := ->(iNsTr_20) 
    iNsTr_21 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp18 := ->(iNsTr_21) 
    iNsTr_22 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp19 := ->(iNsTr_22) 
    mul := (tmp18 * tmp17)
    mul20 := (mul * tmp19)
    conv21 := ($cast ($uint<64>) mul20)
    shr83x_xmask := (conv21 & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000011111111111111111111111111111100 ) )
    // compare instruction
    cmp2684 := (shr83x_xmask == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
    $if cmp2684 $then  $place [forx_xend_forx_xend79] $else $place [forx_xend_bbx_xnph] $endif 
    //begin: basic-block bbx_xnph
    $merge forx_xend_bbx_xnph
    $endmerge
    tmp4 := (tmp18 * tmp17)
    tmp5 := (tmp4 * tmp19)
    tmp6 := ($cast ($uint<64>) tmp5)
    tmp7 := (tmp6 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    // compare instruction
    tmp8 := (tmp7 > ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
    umax9 := ( $mux tmp8 tmp7 ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph_forx_xbody28]
    //begin: basic-block forx_xbody28
    $merge bbx_xnph_forx_xbody28 forx_xbody28_forx_xbody28
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody28 ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody28_forx_xbody28 
    $endmerge
    arrayidx75 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][indvar])
    call30 := zeropad_input_pipe
    conv31 := ($cast ($uint<64>) call30)
    shl := (conv31 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call33 := zeropad_input_pipe
    conv35 := ($cast ($uint<64>) call33)
    add := (shl | conv35)
    shl37 := (add << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call38 := zeropad_input_pipe
    conv40 := ($cast ($uint<64>) call38)
    add41 := (shl37 | conv40)
    shl43 := (add41 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call44 := zeropad_input_pipe
    conv46 := ($cast ($uint<64>) call44)
    add47 := (shl43 | conv46)
    shl49 := (add47 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call50 := zeropad_input_pipe
    conv52 := ($cast ($uint<64>) call50)
    add53 := (shl49 | conv52)
    shl55 := (add53 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call56 := zeropad_input_pipe
    conv58 := ($cast ($uint<64>) call56)
    add59 := (shl55 | conv58)
    shl61 := (add59 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call62 := zeropad_input_pipe
    conv64 := ($cast ($uint<64>) call62)
    add65 := (shl61 | conv64)
    shl67 := (add65 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    call68 := zeropad_input_pipe
    conv70 := ($cast ($uint<64>) call68)
    add71 := (shl67 | conv70)
    ->(arrayidx75) := add71
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond10 := (indvarx_xnext == umax9 )
    $if exitcond10 $then  $place [forx_xbody28_forx_xend79x_xloopexit] $else $place [forx_xbody28_forx_xbody28] $endif 
    //begin: basic-block forx_xend79x_xloopexit
    $merge forx_xbody28_forx_xend79x_xloopexit
    $endmerge
    $place [forx_xend79x_xloopexit_forx_xend79]
    //begin: basic-block forx_xend79
    $merge forx_xend_forx_xend79 forx_xend79x_xloopexit_forx_xend79
    $endmerge
    ret_val__ := ($cast ($uint<16>) mul20)
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [sendOutput] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    iNsTr_0 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp := ->(iNsTr_0) 
    iNsTr_1 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp1 := ->(iNsTr_1) 
    iNsTr_2 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp2 := ->(iNsTr_2) 
    mul := (tmp1 * tmp)
    mul3 := (mul * tmp2)
    conv := ($cast ($uint<64>) mul3)
    shr76x_xmask := (conv & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000011111111111111111111111111111100 ) )
    // compare instruction
    cmp77 := (shr76x_xmask == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
    $if cmp77 $then  $place [entry_forx_xend] $else $place [entry_bbx_xnph] $endif 
    //begin: basic-block bbx_xnph
    $merge entry_bbx_xnph
    $endmerge
    tmp3 := (tmp1 * tmp)
    tmp4 := (tmp3 * tmp2)
    tmp5 := ($cast ($uint<64>) tmp4)
    tmp6 := (tmp5 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) )
    // compare instruction
    tmp7 := (tmp6 > ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
    umax8 := ( $mux tmp7 tmp6 ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    $place [bbx_xnph_forx_xbody]
    //begin: basic-block forx_xbody
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody
    $phi indvar :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on bbx_xnph_forx_xbody ( $cast ($uint<64>) indvarx_xnext) $on forx_xbody_forx_xbody 
    $endmerge
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][indvar])
    // load 
    tmp11 := ->(arrayidx) 
    conv14 := ($cast ($uint<8>) tmp11)
    shr17 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
    conv20 := ($cast ($uint<8>) shr17)
    shr23 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000010000 ) )
    conv26 := ($cast ($uint<8>) shr23)
    shr29 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000011000 ) )
    conv32 := ($cast ($uint<8>) shr29)
    shr35 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000100000 ) )
    conv38 := ($cast ($uint<8>) shr35)
    shr41 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000101000 ) )
    conv44 := ($cast ($uint<8>) shr41)
    shr47 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000110000 ) )
    conv50 := ($cast ($uint<8>) shr47)
    shr53 := (tmp11 >> ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000111000 ) )
    conv56 := ($cast ($uint<8>) shr53)
    zeropad_output_pipe := conv56
    zeropad_output_pipe := conv50
    zeropad_output_pipe := conv44
    zeropad_output_pipe := conv38
    zeropad_output_pipe := conv32
    zeropad_output_pipe := conv26
    zeropad_output_pipe := conv20
    zeropad_output_pipe := conv14
    indvarx_xnext := (indvar + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
    // compare instruction
    exitcond9 := (indvarx_xnext == umax8 )
    $if exitcond9 $then  $place [forx_xbody_forx_xendx_xloopexit] $else $place [forx_xbody_forx_xbody] $endif 
    //begin: basic-block forx_xendx_xloopexit
    $merge forx_xbody_forx_xendx_xloopexit
    $endmerge
    $place [forx_xendx_xloopexit_forx_xend]
    //begin: basic-block forx_xend
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_A] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block0_starting
    $barrier 
    // load 
    tmp := pad
    iNsTr_2 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp2 := ->(iNsTr_2) 
    iNsTr_3 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp5 := ->(iNsTr_3) 
    iNsTr_4 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp11 := ->(iNsTr_4) 
    iNsTr_5 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp14 := ->(iNsTr_5) 
    sext := (tmp5 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv23 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext179 := (tmp11 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv27 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext179) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext172 := (tmp14 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv29 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext172) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    mul30 := (conv29 * conv27)
    conv38 := ($cast ($uint<32>) tmp)
    sext180 := (mul30 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv74 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext180) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext181 := (tmp2 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv130 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext181) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    shl := (conv38 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    mul := (tmp2 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    sext173 := (mul * conv23)
    conv92 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext173) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    $place [entry_whilex_xbody]
    //begin: basic-block whilex_xbody
    $merge entry_whilex_xbody ifx_xend170_whilex_xbody
    $phi ix_x2 :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody ( $cast ($uint<16>) ix_x1x_xph) $on ifx_xend170_whilex_xbody 
    $phi jx_x1 :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody ( $cast ($uint<16>) jx_x0x_xph) $on ifx_xend170_whilex_xbody 
    $phi kx_x1 :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody ( $cast ($uint<16>) kx_x0x_xph) $on ifx_xend170_whilex_xbody 
    $endmerge
    conv36 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) ix_x2) )
    // compare instruction
    cmp := ( ($bitcast ( $int<32>) conv36) <   ($bitcast ( $int<32>) conv38 ) )
    $if cmp $then  $place [whilex_xbody_ifx_xthen] $else $place [whilex_xbody_lorx_xlhsx_xfalse] $endif 
    //begin: basic-block lorx_xlhsx_xfalse
    $merge whilex_xbody_lorx_xlhsx_xfalse
    $endmerge
    iNsTr_10 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp42 := ->(iNsTr_10) 
    div := (tmp42 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add := (div + conv38)
    // compare instruction
    cmp45 := (conv36 < add )
    $if cmp45 $then  $place [lorx_xlhsx_xfalse_lorx_xlhsx_xfalse47] $else $place [lorx_xlhsx_xfalse_ifx_xthen] $endif 
    //begin: basic-block lorx_xlhsx_xfalse47
    $merge lorx_xlhsx_xfalse_lorx_xlhsx_xfalse47
    $endmerge
    conv49 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x1) )
    // compare instruction
    cmp52 := ( ($bitcast ( $int<32>) conv49) <   ($bitcast ( $int<32>) conv38 ) )
    $if cmp52 $then  $place [lorx_xlhsx_xfalse47_ifx_xthen] $else $place [lorx_xlhsx_xfalse47_lorx_xlhsx_xfalse54] $endif 
    //begin: basic-block lorx_xlhsx_xfalse54
    $merge lorx_xlhsx_xfalse47_lorx_xlhsx_xfalse54
    $endmerge
    iNsTr_18 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp57 := ->(iNsTr_18) 
    div58 := (tmp57 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add61 := (div58 + conv38)
    // compare instruction
    cmp62 := (conv49 < add61 )
    $if cmp62 $then  $place [lorx_xlhsx_xfalse54_ifx_xelse] $else $place [lorx_xlhsx_xfalse54_ifx_xthen] $endif 
    //begin: basic-block ifx_xthen
    $merge lorx_xlhsx_xfalse_ifx_xthen lorx_xlhsx_xfalse47_ifx_xthen lorx_xlhsx_xfalse54_ifx_xthen whilex_xbody_ifx_xthen
    $endmerge
    conv66 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    conv70 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x1) )
    mul71 := (conv70 * conv27)
    mul77 := (conv36 * conv74)
    add72 := (mul71 + mul77)
    add78 := (add72 + conv66)
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add78) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom])
    ->(arrayidx) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    $place [ifx_xthen_ifx_xend]
    //begin: basic-block ifx_xelse
    $merge lorx_xlhsx_xfalse54_ifx_xelse
    $endmerge
    conv82 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    sub := (conv49 - conv38)
    mul89 := (sub * conv130)
    sub97 := (conv36 - conv38)
    mul98 := (sub97 * conv92)
    add90 := (conv82 + mul98)
    add99 := (add90 + mul89)
    mul108 := (conv49 * conv27)
    mul114 := (conv36 * conv74)
    add109 := (mul108 + mul114)
    add115 := (add109 + conv82)
    shr117 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add99) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom118 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr117) )
    arrayidx119 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom118])
    // load 
    tmp120 := ->(arrayidx119) 
    shr122 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add115) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom123 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr122) )
    arrayidx124 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom123])
    ->(arrayidx124) := tmp120
    $place [ifx_xelse_ifx_xend]
    //begin: basic-block ifx_xend
    $merge ifx_xelse_ifx_xend ifx_xthen_ifx_xend
    $endmerge
    conv127 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    add128 := (conv127 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    // compare instruction
    cmp131 := ( ($bitcast ( $int<32>) add128) <   ($bitcast ( $int<32>) conv130 ) )
    $if cmp131 $then  $place [ifx_xend_ifx_xthen133] $else $place [ifx_xend_ifx_xelse138] $endif 
    //begin: basic-block ifx_xthen133
    $merge ifx_xend_ifx_xthen133
    $endmerge
    add136 := (kx_x1 + ( $bitcast ($uint<16> ) _b0000000000000100 ) )
    $place [ifx_xthen133_ifx_xend170]
    //begin: basic-block ifx_xelse138
    $merge ifx_xend_ifx_xelse138
    $endmerge
    inc := (jx_x1 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    conv141 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc) )
    iNsTr_15 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp142 := ->(iNsTr_15) 
    div143 := (tmp142 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add146 := (div143 + shl)
    // compare instruction
    cmp147 := (conv141 == add146 )
    inc152 := ($cast ($uint<16>) cmp147)
    inc152x_xix_x2 := (inc152 + ix_x2)
    jx_x2 := ( $mux cmp147 ( $bitcast ($uint<16> ) _b0000000000000000 )  inc)
    conv155 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc152x_xix_x2) )
    iNsTr_16 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp156 := ->(iNsTr_16) 
    div157 := (tmp156 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add161 := (div157 + shl)
    // compare instruction
    cmp162 := (conv155 == add161 )
    $if cmp162 $then  $place [ifx_xelse138_whilex_xend] $else $place [ifx_xelse138_ifx_xend170] $endif 
    //begin: basic-block ifx_xend170
    $merge ifx_xelse138_ifx_xend170 ifx_xthen133_ifx_xend170
    $phi ix_x1x_xph :=  ( $cast ($uint<16>) ix_x2) $on ifx_xthen133_ifx_xend170 ( $cast ($uint<16>) inc152x_xix_x2) $on ifx_xelse138_ifx_xend170 
    $phi jx_x0x_xph :=  ( $cast ($uint<16>) jx_x1) $on ifx_xthen133_ifx_xend170 ( $cast ($uint<16>) jx_x2) $on ifx_xelse138_ifx_xend170 
    $phi kx_x0x_xph :=  ( $cast ($uint<16>) add136) $on ifx_xthen133_ifx_xend170 ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on ifx_xelse138_ifx_xend170 
    $endmerge
    $place [ifx_xend170_whilex_xbody]
    //begin: basic-block whilex_xend
    $merge ifx_xelse138_whilex_xend
    $endmerge
    $barrier 
    Block0_complete := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_B] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block1_starting
    $barrier 
    iNsTr_2 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp := ->(iNsTr_2) 
    div := (tmp >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    conv := ($cast ($uint<16>) div)
    // load 
    tmp3 := pad
    iNsTr_3 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp6 := ->(iNsTr_3) 
    iNsTr_4 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp15 := ->(iNsTr_4) 
    iNsTr_5 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp18 := ->(iNsTr_5) 
    sext182 := (tmp6 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv25 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext182) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext := (tmp << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    sext183 := (tmp15 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv31 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext183) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext175 := (tmp18 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv33 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext175) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    mul34 := (conv33 * conv31)
    conv42 := ($cast ($uint<32>) tmp3)
    sext184 := (mul34 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv78 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext184) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    shl := (conv42 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    sext176 := (sext * conv25)
    conv96 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext176) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    $place [entry_whilex_xbody]
    //begin: basic-block whilex_xbody
    $merge entry_whilex_xbody ifx_xend173_whilex_xbody
    $phi ix_x2 :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody ( $cast ($uint<16>) ix_x1x_xph) $on ifx_xend173_whilex_xbody 
    $phi jx_x1 :=  ( $cast ($uint<16>) conv) $on entry_whilex_xbody ( $cast ($uint<16>) jx_x0x_xph) $on ifx_xend173_whilex_xbody 
    $phi kx_x1 :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody ( $cast ($uint<16>) kx_x0x_xph) $on ifx_xend173_whilex_xbody 
    $endmerge
    conv40 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) ix_x2) )
    // compare instruction
    cmp := ( ($bitcast ( $int<32>) conv40) <   ($bitcast ( $int<32>) conv42 ) )
    $if cmp $then  $place [whilex_xbody_ifx_xthen] $else $place [whilex_xbody_lorx_xlhsx_xfalse] $endif 
    //begin: basic-block lorx_xlhsx_xfalse
    $merge whilex_xbody_lorx_xlhsx_xfalse
    $endmerge
    iNsTr_10 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp46 := ->(iNsTr_10) 
    div47 := (tmp46 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add := (div47 + conv42)
    // compare instruction
    cmp50 := (conv40 < add )
    $if cmp50 $then  $place [lorx_xlhsx_xfalse_lorx_xlhsx_xfalse52] $else $place [lorx_xlhsx_xfalse_ifx_xthen] $endif 
    //begin: basic-block lorx_xlhsx_xfalse52
    $merge lorx_xlhsx_xfalse_lorx_xlhsx_xfalse52
    $endmerge
    conv54 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x1) )
    // compare instruction
    cmp57 := ( ($bitcast ( $int<32>) conv54) <   ($bitcast ( $int<32>) conv42 ) )
    $if cmp57 $then  $place [lorx_xlhsx_xfalse52_ifx_xthen] $else $place [lorx_xlhsx_xfalse52_lorx_xlhsx_xfalse59] $endif 
    //begin: basic-block lorx_xlhsx_xfalse59
    $merge lorx_xlhsx_xfalse52_lorx_xlhsx_xfalse59
    $endmerge
    iNsTr_18 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp62 := ->(iNsTr_18) 
    add65 := (tmp62 + conv42)
    // compare instruction
    cmp66 := (conv54 < add65 )
    $if cmp66 $then  $place [lorx_xlhsx_xfalse59_ifx_xelse] $else $place [lorx_xlhsx_xfalse59_ifx_xthen] $endif 
    //begin: basic-block ifx_xthen
    $merge lorx_xlhsx_xfalse_ifx_xthen lorx_xlhsx_xfalse52_ifx_xthen lorx_xlhsx_xfalse59_ifx_xthen whilex_xbody_ifx_xthen
    $endmerge
    conv70 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    conv74 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x1) )
    mul75 := (conv74 * conv31)
    mul81 := (conv40 * conv78)
    add76 := (mul75 + mul81)
    add82 := (add76 + conv70)
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add82) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom])
    ->(arrayidx) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    $place [ifx_xthen_ifx_xend]
    //begin: basic-block ifx_xelse
    $merge lorx_xlhsx_xfalse59_ifx_xelse
    $endmerge
    conv86 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    sub := (conv54 - conv42)
    mul93 := (sub * conv25)
    sub101 := (conv40 - conv42)
    mul102 := (sub101 * conv96)
    add94 := (conv86 + mul102)
    add103 := (add94 + mul93)
    mul112 := (conv54 * conv31)
    mul118 := (conv40 * conv78)
    add113 := (mul112 + mul118)
    add119 := (add113 + conv86)
    shr121 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add103) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom122 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr121) )
    arrayidx123 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom122])
    // load 
    tmp124 := ->(arrayidx123) 
    shr126 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add119) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom127 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr126) )
    arrayidx128 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom127])
    ->(arrayidx128) := tmp124
    $place [ifx_xelse_ifx_xend]
    //begin: basic-block ifx_xend
    $merge ifx_xelse_ifx_xend ifx_xthen_ifx_xend
    $endmerge
    conv131 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    add132 := (conv131 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    // compare instruction
    cmp135 := ( ($bitcast ( $int<32>) add132) <   ($bitcast ( $int<32>) conv25 ) )
    $if cmp135 $then  $place [ifx_xend_ifx_xthen137] $else $place [ifx_xend_ifx_xelse142] $endif 
    //begin: basic-block ifx_xthen137
    $merge ifx_xend_ifx_xthen137
    $endmerge
    add140 := (kx_x1 + ( $bitcast ($uint<16> ) _b0000000000000100 ) )
    $place [ifx_xthen137_ifx_xend173]
    //begin: basic-block ifx_xelse142
    $merge ifx_xend_ifx_xelse142
    $endmerge
    inc := (jx_x1 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    conv145 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc) )
    iNsTr_15 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp146 := ->(iNsTr_15) 
    add149 := (tmp146 + shl)
    // compare instruction
    cmp150 := (conv145 == add149 )
    inc155 := ($cast ($uint<16>) cmp150)
    inc155x_xix_x2 := (inc155 + ix_x2)
    jx_x2 := ( $mux cmp150 conv inc)
    conv158 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc155x_xix_x2) )
    iNsTr_16 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp159 := ->(iNsTr_16) 
    div160 := (tmp159 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add164 := (div160 + shl)
    // compare instruction
    cmp165 := (conv158 == add164 )
    $if cmp165 $then  $place [ifx_xelse142_whilex_xend] $else $place [ifx_xelse142_ifx_xend173] $endif 
    //begin: basic-block ifx_xend173
    $merge ifx_xelse142_ifx_xend173 ifx_xthen137_ifx_xend173
    $phi ix_x1x_xph :=  ( $cast ($uint<16>) ix_x2) $on ifx_xthen137_ifx_xend173 ( $cast ($uint<16>) inc155x_xix_x2) $on ifx_xelse142_ifx_xend173 
    $phi jx_x0x_xph :=  ( $cast ($uint<16>) jx_x1) $on ifx_xthen137_ifx_xend173 ( $cast ($uint<16>) jx_x2) $on ifx_xelse142_ifx_xend173 
    $phi kx_x0x_xph :=  ( $cast ($uint<16>) add140) $on ifx_xthen137_ifx_xend173 ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on ifx_xelse142_ifx_xend173 
    $endmerge
    $place [ifx_xend173_whilex_xbody]
    //begin: basic-block whilex_xend
    $merge ifx_xelse142_whilex_xend
    $endmerge
    $barrier 
    Block1_complete := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_C] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block2_starting
    $barrier 
    iNsTr_2 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp := ->(iNsTr_2) 
    div := (tmp >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    conv := ($cast ($uint<16>) div)
    // load 
    tmp2 := pad
    iNsTr_3 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp5 := ->(iNsTr_3) 
    iNsTr_4 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp8 := ->(iNsTr_4) 
    iNsTr_5 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp14 := ->(iNsTr_5) 
    iNsTr_6 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp17 := ->(iNsTr_6) 
    sext := (tmp8 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv26 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext181 := (tmp14 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv30 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext181) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext174 := (tmp17 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv32 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext174) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    mul33 := (conv32 * conv30)
    conv41 := ($cast ($uint<32>) tmp2)
    sext182 := (mul33 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv77 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext182) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext183 := (tmp5 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv133 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext183) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    shl := (conv41 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    mul := (tmp5 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    sext175 := (mul * conv26)
    conv95 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext175) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    $place [entry_whilex_xbody]
    //begin: basic-block whilex_xbody
    $merge entry_whilex_xbody ifx_xend172_whilex_xbody
    $phi ix_x2 :=  ( $cast ($uint<16>) conv) $on entry_whilex_xbody ( $cast ($uint<16>) ix_x1x_xph) $on ifx_xend172_whilex_xbody 
    $phi jx_x1 :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody ( $cast ($uint<16>) jx_x0x_xph) $on ifx_xend172_whilex_xbody 
    $phi kx_x1 :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody ( $cast ($uint<16>) kx_x0x_xph) $on ifx_xend172_whilex_xbody 
    $endmerge
    conv39 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) ix_x2) )
    // compare instruction
    cmp := ( ($bitcast ( $int<32>) conv39) <   ($bitcast ( $int<32>) conv41 ) )
    $if cmp $then  $place [whilex_xbody_ifx_xthen] $else $place [whilex_xbody_lorx_xlhsx_xfalse] $endif 
    //begin: basic-block lorx_xlhsx_xfalse
    $merge whilex_xbody_lorx_xlhsx_xfalse
    $endmerge
    iNsTr_11 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp45 := ->(iNsTr_11) 
    add := (tmp45 + conv41)
    // compare instruction
    cmp48 := (conv39 < add )
    $if cmp48 $then  $place [lorx_xlhsx_xfalse_lorx_xlhsx_xfalse50] $else $place [lorx_xlhsx_xfalse_ifx_xthen] $endif 
    //begin: basic-block lorx_xlhsx_xfalse50
    $merge lorx_xlhsx_xfalse_lorx_xlhsx_xfalse50
    $endmerge
    conv52 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x1) )
    // compare instruction
    cmp55 := ( ($bitcast ( $int<32>) conv52) <   ($bitcast ( $int<32>) conv41 ) )
    $if cmp55 $then  $place [lorx_xlhsx_xfalse50_ifx_xthen] $else $place [lorx_xlhsx_xfalse50_lorx_xlhsx_xfalse57] $endif 
    //begin: basic-block lorx_xlhsx_xfalse57
    $merge lorx_xlhsx_xfalse50_lorx_xlhsx_xfalse57
    $endmerge
    iNsTr_19 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp60 := ->(iNsTr_19) 
    div61 := (tmp60 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add64 := (div61 + conv41)
    // compare instruction
    cmp65 := (conv52 < add64 )
    $if cmp65 $then  $place [lorx_xlhsx_xfalse57_ifx_xelse] $else $place [lorx_xlhsx_xfalse57_ifx_xthen] $endif 
    //begin: basic-block ifx_xthen
    $merge lorx_xlhsx_xfalse_ifx_xthen lorx_xlhsx_xfalse50_ifx_xthen lorx_xlhsx_xfalse57_ifx_xthen whilex_xbody_ifx_xthen
    $endmerge
    conv69 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    conv73 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x1) )
    mul74 := (conv73 * conv30)
    mul80 := (conv39 * conv77)
    add75 := (mul74 + mul80)
    add81 := (add75 + conv69)
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add81) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom])
    ->(arrayidx) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    $place [ifx_xthen_ifx_xend]
    //begin: basic-block ifx_xelse
    $merge lorx_xlhsx_xfalse57_ifx_xelse
    $endmerge
    conv85 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    sub := (conv52 - conv41)
    mul92 := (sub * conv133)
    sub100 := (conv39 - conv41)
    mul101 := (sub100 * conv95)
    add93 := (conv85 + mul101)
    add102 := (add93 + mul92)
    mul111 := (conv52 * conv30)
    mul117 := (conv39 * conv77)
    add112 := (mul111 + mul117)
    add118 := (add112 + conv85)
    shr120 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add102) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom121 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr120) )
    arrayidx122 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom121])
    // load 
    tmp123 := ->(arrayidx122) 
    shr125 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add118) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom126 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr125) )
    arrayidx127 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom126])
    ->(arrayidx127) := tmp123
    $place [ifx_xelse_ifx_xend]
    //begin: basic-block ifx_xend
    $merge ifx_xelse_ifx_xend ifx_xthen_ifx_xend
    $endmerge
    conv130 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    add131 := (conv130 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    // compare instruction
    cmp134 := ( ($bitcast ( $int<32>) add131) <   ($bitcast ( $int<32>) conv133 ) )
    $if cmp134 $then  $place [ifx_xend_ifx_xthen136] $else $place [ifx_xend_ifx_xelse141] $endif 
    //begin: basic-block ifx_xthen136
    $merge ifx_xend_ifx_xthen136
    $endmerge
    add139 := (kx_x1 + ( $bitcast ($uint<16> ) _b0000000000000100 ) )
    $place [ifx_xthen136_ifx_xend172]
    //begin: basic-block ifx_xelse141
    $merge ifx_xend_ifx_xelse141
    $endmerge
    inc := (jx_x1 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    conv144 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc) )
    iNsTr_16 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp145 := ->(iNsTr_16) 
    div146 := (tmp145 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    add149 := (div146 + shl)
    // compare instruction
    cmp150 := (conv144 == add149 )
    inc155 := ($cast ($uint<16>) cmp150)
    inc155x_xix_x2 := (inc155 + ix_x2)
    jx_x2 := ( $mux cmp150 ( $bitcast ($uint<16> ) _b0000000000000000 )  inc)
    conv158 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc155x_xix_x2) )
    iNsTr_17 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp159 := ->(iNsTr_17) 
    add163 := (tmp159 + shl)
    // compare instruction
    cmp164 := (conv158 == add163 )
    $if cmp164 $then  $place [ifx_xelse141_whilex_xend] $else $place [ifx_xelse141_ifx_xend172] $endif 
    //begin: basic-block ifx_xend172
    $merge ifx_xelse141_ifx_xend172 ifx_xthen136_ifx_xend172
    $phi ix_x1x_xph :=  ( $cast ($uint<16>) ix_x2) $on ifx_xthen136_ifx_xend172 ( $cast ($uint<16>) inc155x_xix_x2) $on ifx_xelse141_ifx_xend172 
    $phi jx_x0x_xph :=  ( $cast ($uint<16>) jx_x1) $on ifx_xthen136_ifx_xend172 ( $cast ($uint<16>) jx_x2) $on ifx_xelse141_ifx_xend172 
    $phi kx_x0x_xph :=  ( $cast ($uint<16>) add139) $on ifx_xthen136_ifx_xend172 ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on ifx_xelse141_ifx_xend172 
    $endmerge
    $place [ifx_xend172_whilex_xbody]
    //begin: basic-block whilex_xend
    $merge ifx_xelse141_whilex_xend
    $endmerge
    $barrier 
    Block2_complete := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D_D] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    call := Block3_starting
    $barrier 
    iNsTr_2 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp := ->(iNsTr_2) 
    div := (tmp >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    conv := ($cast ($uint<16>) div)
    iNsTr_3 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp2 := ->(iNsTr_3) 
    div3 := (tmp2 >> ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    conv4 := ($cast ($uint<16>) div3)
    // load 
    tmp6 := pad
    iNsTr_4 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp9 := ->(iNsTr_4) 
    iNsTr_5 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    tmp18 := ->(iNsTr_5) 
    iNsTr_6 := @(des_out[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp21 := ->(iNsTr_6) 
    sext := (tmp << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv30 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext183 := (tmp18 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv34 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext183) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext176 := (tmp21 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv36 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext176) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    mul37 := (conv36 * conv34)
    conv45 := ($cast ($uint<32>) tmp6)
    sext184 := (mul37 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv80 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext184) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    sext185 := (tmp9 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    conv136 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext185) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    shl := (conv45 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    mul := (tmp9 << ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 ) )
    sext177 := (mul * conv30)
    conv98 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) sext177) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000010000 )  )))
    $place [entry_whilex_xbody]
    //begin: basic-block whilex_xbody
    $merge entry_whilex_xbody ifx_xend174_whilex_xbody
    $phi ix_x2 :=  ( $cast ($uint<16>) conv4) $on entry_whilex_xbody ( $cast ($uint<16>) ix_x1x_xph) $on ifx_xend174_whilex_xbody 
    $phi jx_x1 :=  ( $cast ($uint<16>) conv) $on entry_whilex_xbody ( $cast ($uint<16>) jx_x0x_xph) $on ifx_xend174_whilex_xbody 
    $phi kx_x1 :=  ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on entry_whilex_xbody ( $cast ($uint<16>) kx_x0x_xph) $on ifx_xend174_whilex_xbody 
    $endmerge
    conv43 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) ix_x2) )
    // compare instruction
    cmp := ( ($bitcast ( $int<32>) conv43) <   ($bitcast ( $int<32>) conv45 ) )
    $if cmp $then  $place [whilex_xbody_ifx_xthen] $else $place [whilex_xbody_lorx_xlhsx_xfalse] $endif 
    //begin: basic-block lorx_xlhsx_xfalse
    $merge whilex_xbody_lorx_xlhsx_xfalse
    $endmerge
    iNsTr_11 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp49 := ->(iNsTr_11) 
    add := (tmp49 + conv45)
    // compare instruction
    cmp52 := (conv43 < add )
    $if cmp52 $then  $place [lorx_xlhsx_xfalse_lorx_xlhsx_xfalse54] $else $place [lorx_xlhsx_xfalse_ifx_xthen] $endif 
    //begin: basic-block lorx_xlhsx_xfalse54
    $merge lorx_xlhsx_xfalse_lorx_xlhsx_xfalse54
    $endmerge
    conv56 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x1) )
    // compare instruction
    cmp59 := ( ($bitcast ( $int<32>) conv56) <   ($bitcast ( $int<32>) conv45 ) )
    $if cmp59 $then  $place [lorx_xlhsx_xfalse54_ifx_xthen] $else $place [lorx_xlhsx_xfalse54_lorx_xlhsx_xfalse61] $endif 
    //begin: basic-block lorx_xlhsx_xfalse61
    $merge lorx_xlhsx_xfalse54_lorx_xlhsx_xfalse61
    $endmerge
    iNsTr_19 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp64 := ->(iNsTr_19) 
    add67 := (tmp64 + conv45)
    // compare instruction
    cmp68 := (conv56 < add67 )
    $if cmp68 $then  $place [lorx_xlhsx_xfalse61_ifx_xelse] $else $place [lorx_xlhsx_xfalse61_ifx_xthen] $endif 
    //begin: basic-block ifx_xthen
    $merge lorx_xlhsx_xfalse_ifx_xthen lorx_xlhsx_xfalse54_ifx_xthen lorx_xlhsx_xfalse61_ifx_xthen whilex_xbody_ifx_xthen
    $endmerge
    conv72 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    conv76 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) jx_x1) )
    mul77 := (conv76 * conv34)
    mul83 := (conv43 * conv80)
    add78 := (mul77 + mul83)
    add84 := (add78 + conv72)
    shr :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add84) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr) )
    arrayidx := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom])
    ->(arrayidx) := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) 
    $place [ifx_xthen_ifx_xend]
    //begin: basic-block ifx_xelse
    $merge lorx_xlhsx_xfalse61_ifx_xelse
    $endmerge
    conv88 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    sub := (conv56 - conv45)
    mul95 := (sub * conv136)
    sub103 := (conv43 - conv45)
    mul104 := (sub103 * conv98)
    add96 := (conv88 + mul104)
    add105 := (add96 + mul95)
    mul114 := (conv56 * conv34)
    mul120 := (conv43 * conv80)
    add115 := (mul114 + mul120)
    add121 := (add115 + conv88)
    shr123 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add105) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom124 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr123) )
    arrayidx125 := @(T[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom124])
    // load 
    tmp126 := ->(arrayidx125) 
    shr128 :=  ($bitcast ($uint<32>) ( ($bitcast ( $int<32>) add121) >>  ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )))
    idxprom129 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) shr128) )
    arrayidx130 := @(R[( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ][idxprom129])
    ->(arrayidx130) := tmp126
    $place [ifx_xelse_ifx_xend]
    //begin: basic-block ifx_xend
    $merge ifx_xelse_ifx_xend ifx_xthen_ifx_xend
    $endmerge
    conv133 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) kx_x1) )
    add134 := (conv133 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 ) )
    // compare instruction
    cmp137 := ( ($bitcast ( $int<32>) add134) <   ($bitcast ( $int<32>) conv136 ) )
    $if cmp137 $then  $place [ifx_xend_ifx_xthen139] $else $place [ifx_xend_ifx_xelse144] $endif 
    //begin: basic-block ifx_xthen139
    $merge ifx_xend_ifx_xthen139
    $endmerge
    add142 := (kx_x1 + ( $bitcast ($uint<16> ) _b0000000000000100 ) )
    $place [ifx_xthen139_ifx_xend174]
    //begin: basic-block ifx_xelse144
    $merge ifx_xend_ifx_xelse144
    $endmerge
    inc := (jx_x1 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    conv147 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc) )
    iNsTr_16 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    tmp148 := ->(iNsTr_16) 
    add151 := (tmp148 + shl)
    // compare instruction
    cmp152 := (conv147 == add151 )
    inc157 := ($cast ($uint<16>) cmp152)
    inc157x_xix_x2 := (inc157 + ix_x2)
    jx_x2 := ( $mux cmp152 conv inc)
    conv160 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) inc157x_xix_x2) )
    iNsTr_17 := @(des_inp[( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) ][( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    tmp161 := ->(iNsTr_17) 
    add165 := (tmp161 + shl)
    // compare instruction
    cmp166 := (conv160 == add165 )
    $if cmp166 $then  $place [ifx_xelse144_whilex_xend] $else $place [ifx_xelse144_ifx_xend174] $endif 
    //begin: basic-block ifx_xend174
    $merge ifx_xelse144_ifx_xend174 ifx_xthen139_ifx_xend174
    $phi ix_x1x_xph :=  ( $cast ($uint<16>) ix_x2) $on ifx_xthen139_ifx_xend174 ( $cast ($uint<16>) inc157x_xix_x2) $on ifx_xelse144_ifx_xend174 
    $phi jx_x0x_xph :=  ( $cast ($uint<16>) jx_x1) $on ifx_xthen139_ifx_xend174 ( $cast ($uint<16>) jx_x2) $on ifx_xelse144_ifx_xend174 
    $phi kx_x0x_xph :=  ( $cast ($uint<16>) add142) $on ifx_xthen139_ifx_xend174 ( $cast ($uint<16>) ( $bitcast ($uint<16> ) _b0000000000000000 ) ) $on ifx_xelse144_ifx_xend174 
    $endmerge
    $place [ifx_xend174_whilex_xbody]
    //begin: basic-block whilex_xend
    $merge ifx_xelse144_whilex_xend
    $endmerge
    $barrier 
    Block3_complete := call
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [zeropad3D] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block entry
    $call testConfigure ()  (call)
    $barrier 
    $call timer ()  (call1)
    conv :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) call1) )
    Block0_starting := call
    Block1_starting := call
    Block2_starting := call
    Block3_starting := call
    call6 := Block0_complete
    call8 := Block1_complete
    call10 := Block2_complete
    call12 := Block3_complete
    $barrier 
    $call timer ()  (call14)
    conv15 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) call14) )
    sub := (conv15 - conv)
    elapsed_time_pipe := sub
    $barrier 
    $call sendOutput ()  ()
    $place [return__]
    $merge return__ $endmerge
  }
}
