$record [structx_x__SizedTensor_16K]  < $array[16384] $of $uint<64> > 
$record [structx_x__TensorDescriptor]  < $uint<32> >  < $uint<8> >  < $uint<32> >  < $array[64] $of $uint<32> > 
$pipe  Block0_complete : $uint<8>  $depth 1 
// can point into 
$pipe  Block0_starting : $uint<8>  $depth 1 
// can point into 
$storage  R :  structx_x__SizedTensor_16K  // memory space index = 4  base address = 0  word size = 64
// can point into 
$storage  T :  structx_x__SizedTensor_16K  // memory space index = 3  base address = 0  word size = 64
// can point into 
$storage  des_inp :  structx_x__TensorDescriptor  // memory space index = 0  base address = 0  word size = 8
// can point into 
$storage  des_out :  structx_x__TensorDescriptor  // memory space index = 2  base address = 0  word size = 32
// can point into 
$storage  pad : $uint<8> // memory space index = 1  base address = 0  word size = 8
// can point into 
$pipe  zeropad_input_pipe : $uint<8>  $depth 2 
// can point into 
$pipe  zeropad_output_pipe : $uint<8>  $depth 2 
// can point into 
$module [progx_xoptx_xo_storage_initializer_]
$in ()
$out ()
$is
{
  $null
  $attribute initializer 
}
$module [global_storage_initializer_]
$in ()
$out ()
$is
{
  $parallelblock[pb]
  {
    $call progx_xoptx_xo_storage_initializer_ () () 
  }
}
$module [sendOutput]
$in ()
$out ()
$is
{
  $branchblock [body]
  {
    iNsTr_0 := @(des_out[($bitcast ($uint<32>) _b00000000000000000000000000000011  )][($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  )]) $buffering 1// bits of buffering = 32. 
    tmp := ->(iNsTr_0) $buffering 1// bits of buffering = 32. 
    iNsTr_1 := @(des_out[($bitcast ($uint<32>) _b00000000000000000000000000000011  )][($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )]) $buffering 1// bits of buffering = 32. 
    tmp1 := ->(iNsTr_1) $buffering 1// bits of buffering = 32. 
    iNsTr_2 := @(des_out[($bitcast ($uint<32>) _b00000000000000000000000000000011  )][($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000010  )]) $buffering 1// bits of buffering = 32. 
    tmp2 := ->(iNsTr_2) $buffering 1// bits of buffering = 32. 
    mul := (tmp1 * tmp) $buffering 1// bits of buffering = 32. 
    mul3 := (mul * tmp2) $buffering 1// bits of buffering = 32. 
    conv := ($cast ($uint<64>) mul3 ) $buffering 1// bits of buffering = 64. 
    shr76x_xmask := (conv & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111100  )) $buffering 1// bits of buffering = 64. 
    cmp77 := (shr76x_xmask == ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  )) $buffering 1// bits of buffering = 1. 
    $if cmp77 $then 
    $place[entry_forx_xend]
    $else 
    $place[entry_bbx_xnph]
    $endif
    $merge entry_bbx_xnph 
    $endmerge
    tmp3 := (tmp1 * tmp) $buffering 1// bits of buffering = 32. 
    tmp4 := (tmp3 * tmp2) $buffering 1// bits of buffering = 32. 
    tmp5 := ($cast ($uint<64>) tmp4 ) $buffering 1// bits of buffering = 64. 
    tmp6 := (tmp5 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000010  )) $buffering 1// bits of buffering = 64. 
    tmp7 := (tmp6 > ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )) $buffering 1// bits of buffering = 1. 
    umax8 := ( $mux tmp7 tmp6  ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  ) )  $buffering 1// bits of buffering = 64. 
    $place[bbx_xnph_forx_xbody]
    $merge bbx_xnph_forx_xbody forx_xbody_forx_xbody 
    $phi indvar := 			  ($cast ($uint<64>) ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody 			  ($cast ($uint<64>) indvarx_xnext ) $on   forx_xbody_forx_xbody 
    // type of target is $uint<64>
    $endmerge
    arrayidx := @(R[($bitcast ($uint<32>) _b00000000000000000000000000000000  )][indvar]) $buffering 1// bits of buffering = 32. 
    tmp11 := ->(arrayidx) $buffering 1// bits of buffering = 64. 
    conv14 := ($cast ($uint<8>) tmp11 ) $buffering 1// bits of buffering = 8. 
    shr17 := (tmp11 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    conv20 := ($cast ($uint<8>) shr17 ) $buffering 1// bits of buffering = 8. 
    shr23 := (tmp11 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000010000  )) $buffering 1// bits of buffering = 64. 
    conv26 := ($cast ($uint<8>) shr23 ) $buffering 1// bits of buffering = 8. 
    shr29 := (tmp11 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000011000  )) $buffering 1// bits of buffering = 64. 
    conv32 := ($cast ($uint<8>) shr29 ) $buffering 1// bits of buffering = 8. 
    shr35 := (tmp11 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000100000  )) $buffering 1// bits of buffering = 64. 
    conv38 := ($cast ($uint<8>) shr35 ) $buffering 1// bits of buffering = 8. 
    shr41 := (tmp11 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000101000  )) $buffering 1// bits of buffering = 64. 
    conv44 := ($cast ($uint<8>) shr41 ) $buffering 1// bits of buffering = 8. 
    shr47 := (tmp11 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000110000  )) $buffering 1// bits of buffering = 64. 
    conv50 := ($cast ($uint<8>) shr47 ) $buffering 1// bits of buffering = 8. 
    shr53 := (tmp11 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000111000  )) $buffering 1// bits of buffering = 64. 
    conv56 := ($cast ($uint<8>) shr53 ) $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv56 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv50 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv44 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv38 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv32 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv26 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv20 $buffering 1// bits of buffering = 8. 
    zeropad_output_pipe := conv14 $buffering 1// bits of buffering = 8. 
    indvarx_xnext := (indvar + ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )) $buffering 1// bits of buffering = 64. 
    exitcond9 := (indvarx_xnext == umax8) $buffering 1// bits of buffering = 1. 
    $if exitcond9 $then 
    $place[forx_xbody_forx_xendx_xloopexit]
    $else 
    $place[forx_xbody_forx_xbody]
    $endif
    $merge forx_xbody_forx_xendx_xloopexit 
    $endmerge
    $place[forx_xendx_xloopexit_forx_xend]
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend 
    $endmerge
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
$module [testConfigure]
$in ()
$out ( ret_val__ : $uint<16>  )
$is
{
  $branchblock [body]
  {
    iNsTr_0 := @(des_inp[($bitcast ($uint<32>) _b00000000000000000000000000000000  )]) $buffering 1// bits of buffering = 32. 
    ->(iNsTr_0) := ($bitcast ($uint<32>) _b00000000000000000000000000000101  ) $buffering 1// bits of buffering = 32. 
    call := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    iNsTr_3 := @(des_inp[($bitcast ($uint<32>) _b00000000000000000000000000000001  )]) $buffering 1// bits of buffering = 32. 
    ->(iNsTr_3) := call $buffering 1// bits of buffering = 8. 
    call1 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv := ($cast ($uint<32>) call1 ) $buffering 1// bits of buffering = 32. 
    iNsTr_6 := @(des_inp[($bitcast ($uint<32>) _b00000000000000000000000000000010  )]) $buffering 1// bits of buffering = 32. 
    ->(iNsTr_6) := conv $buffering 1// bits of buffering = 32. 
    cmp86 := (call1 == ($bitcast ($uint<8>) _b00000000  )) $buffering 1// bits of buffering = 1. 
    call487 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    $if cmp86 $then 
    $place[entry_forx_xend]
    $else 
    $place[entry_forx_xbodyx_xpreheader]
    $endif
    $merge entry_forx_xbodyx_xpreheader 
    $endmerge
    $place[forx_xbodyx_xpreheader_forx_xbody]
    $merge forx_xbody_forx_xbody forx_xbodyx_xpreheader_forx_xbody 
    $phi indvar96 := 			  ($cast ($uint<64>) tmp98 ) $on   forx_xbody_forx_xbody 			  ($cast ($uint<64>) ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ) ) $on   forx_xbodyx_xpreheader_forx_xbody 
    // type of target is $uint<64>
    $phi call489 := 			  ($cast ($uint<8>) call4 ) $on   forx_xbody_forx_xbody 			  ($cast ($uint<8>) call487 ) $on   forx_xbodyx_xpreheader_forx_xbody 
    // type of target is $uint<8>
    $endmerge
    tmp := (indvar96 + ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )) $buffering 1// bits of buffering = 64. 
    inc := ($cast ($uint<32>) tmp ) $buffering 1// bits of buffering = 32. 
    arrayidx := @(des_inp[($bitcast ($uint<32>) _b00000000000000000000000000000011  )][indvar96]) $buffering 1// bits of buffering = 32. 
    conv5 := ($cast ($uint<32>) call489 ) $buffering 1// bits of buffering = 32. 
    ->(arrayidx) := conv5 $buffering 1// bits of buffering = 32. 
    tmp98 := (indvar96 + ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )) $buffering 1// bits of buffering = 64. 
    iNsTr_28 := @(des_inp[($bitcast ($uint<32>) _b00000000000000000000000000000010  )]) $buffering 1// bits of buffering = 32. 
    tmp2 := ->(iNsTr_28) $buffering 1// bits of buffering = 32. 
    cmp := (inc < tmp2) $buffering 1// bits of buffering = 1. 
    call4 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    $if cmp $then 
    $place[forx_xbody_forx_xbody]
    $else 
    $place[forx_xbody_forx_xendx_xloopexit]
    $endif
    $merge forx_xbody_forx_xendx_xloopexit 
    $phi call4x_xlcssa1 := 			  ($cast ($uint<8>) call4 ) $on   forx_xbody_forx_xendx_xloopexit 
    // type of target is $uint<8>
    $endmerge
    $place[forx_xendx_xloopexit_forx_xend]
    $merge entry_forx_xend forx_xendx_xloopexit_forx_xend 
    $phi call4x_xlcssa := 			  ($cast ($uint<8>) call487 ) $on   entry_forx_xend 			  ($cast ($uint<8>) call4x_xlcssa1 ) $on   forx_xendx_xloopexit_forx_xend 
    // type of target is $uint<8>
    $endmerge
    pad := call4x_xlcssa $buffering 1// bits of buffering = 8. 
    call9 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv10 := ($cast ($uint<32>) call9 ) $buffering 1// bits of buffering = 32. 
    iNsTr_12 := @(des_out[($bitcast ($uint<32>) _b00000000000000000000000000000011  )][($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  )]) $buffering 1// bits of buffering = 32. 
    ->(iNsTr_12) := conv10 $buffering 1// bits of buffering = 32. 
    call11 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv12 := ($cast ($uint<32>) call11 ) $buffering 1// bits of buffering = 32. 
    iNsTr_15 := @(des_out[($bitcast ($uint<32>) _b00000000000000000000000000000011  )][($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )]) $buffering 1// bits of buffering = 32. 
    ->(iNsTr_15) := conv12 $buffering 1// bits of buffering = 32. 
    call13 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv14 := ($cast ($uint<32>) call13 ) $buffering 1// bits of buffering = 32. 
    iNsTr_18 := @(des_out[($bitcast ($uint<32>) _b00000000000000000000000000000011  )][($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000010  )]) $buffering 1// bits of buffering = 32. 
    ->(iNsTr_18) := conv14 $buffering 1// bits of buffering = 32. 
    iNsTr_20 := @(des_inp[($bitcast ($uint<32>) _b00000000000000000000000000000011  )][($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  )]) $buffering 1// bits of buffering = 32. 
    tmp16 := ->(iNsTr_20) $buffering 1// bits of buffering = 32. 
    iNsTr_21 := @(des_inp[($bitcast ($uint<32>) _b00000000000000000000000000000011  )][($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )]) $buffering 1// bits of buffering = 32. 
    tmp17 := ->(iNsTr_21) $buffering 1// bits of buffering = 32. 
    iNsTr_22 := @(des_inp[($bitcast ($uint<32>) _b00000000000000000000000000000011  )][($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000010  )]) $buffering 1// bits of buffering = 32. 
    tmp18 := ->(iNsTr_22) $buffering 1// bits of buffering = 32. 
    mul := (tmp17 * tmp16) $buffering 1// bits of buffering = 32. 
    mul19 := (mul * tmp18) $buffering 1// bits of buffering = 32. 
    conv20 := ($cast ($uint<64>) mul19 ) $buffering 1// bits of buffering = 64. 
    shr82x_xmask := (conv20 & ($bitcast ($uint<64>) _b0000000000000000000000000000000011111111111111111111111111111100  )) $buffering 1// bits of buffering = 64. 
    cmp2583 := (shr82x_xmask == ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  )) $buffering 1// bits of buffering = 1. 
    $if cmp2583 $then 
    $place[forx_xend_forx_xend78]
    $else 
    $place[forx_xend_bbx_xnph]
    $endif
    $merge forx_xend_bbx_xnph 
    $endmerge
    tmp4 := (tmp17 * tmp16) $buffering 1// bits of buffering = 32. 
    tmp5 := (tmp4 * tmp18) $buffering 1// bits of buffering = 32. 
    tmp6 := ($cast ($uint<64>) tmp5 ) $buffering 1// bits of buffering = 64. 
    tmp7 := (tmp6 >> ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000010  )) $buffering 1// bits of buffering = 64. 
    tmp8 := (tmp7 > ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )) $buffering 1// bits of buffering = 1. 
    umax9 := ( $mux tmp8 tmp7  ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  ) )  $buffering 1// bits of buffering = 64. 
    $place[bbx_xnph_forx_xbody27]
    $merge bbx_xnph_forx_xbody27 forx_xbody27_forx_xbody27 
    $phi indvar := 			  ($cast ($uint<64>) ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ) ) $on   bbx_xnph_forx_xbody27 			  ($cast ($uint<64>) indvarx_xnext ) $on   forx_xbody27_forx_xbody27 
    // type of target is $uint<64>
    $endmerge
    arrayidx74 := @(T[($bitcast ($uint<32>) _b00000000000000000000000000000000  )][indvar]) $buffering 1// bits of buffering = 32. 
    call29 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv30 := ($cast ($uint<64>) call29 ) $buffering 1// bits of buffering = 64. 
    shl := (conv30 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call32 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv34 := ($cast ($uint<64>) call32 ) $buffering 1// bits of buffering = 64. 
    add := (shl | conv34) $buffering 1// bits of buffering = 64. 
    shl36 := (add << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call37 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv39 := ($cast ($uint<64>) call37 ) $buffering 1// bits of buffering = 64. 
    add40 := (shl36 | conv39) $buffering 1// bits of buffering = 64. 
    shl42 := (add40 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call43 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv45 := ($cast ($uint<64>) call43 ) $buffering 1// bits of buffering = 64. 
    add46 := (shl42 | conv45) $buffering 1// bits of buffering = 64. 
    shl48 := (add46 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call49 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv51 := ($cast ($uint<64>) call49 ) $buffering 1// bits of buffering = 64. 
    add52 := (shl48 | conv51) $buffering 1// bits of buffering = 64. 
    shl54 := (add52 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call55 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv57 := ($cast ($uint<64>) call55 ) $buffering 1// bits of buffering = 64. 
    add58 := (shl54 | conv57) $buffering 1// bits of buffering = 64. 
    shl60 := (add58 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call61 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv63 := ($cast ($uint<64>) call61 ) $buffering 1// bits of buffering = 64. 
    add64 := (shl60 | conv63) $buffering 1// bits of buffering = 64. 
    shl66 := (add64 << ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000001000  )) $buffering 1// bits of buffering = 64. 
    call67 := zeropad_input_pipe $buffering 1// bits of buffering = 8. 
    conv69 := ($cast ($uint<64>) call67 ) $buffering 1// bits of buffering = 64. 
    add70 := (shl66 | conv69) $buffering 1// bits of buffering = 64. 
    ->(arrayidx74) := add70 $buffering 1// bits of buffering = 64. 
    indvarx_xnext := (indvar + ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )) $buffering 1// bits of buffering = 64. 
    exitcond10 := (indvarx_xnext == umax9) $buffering 1// bits of buffering = 1. 
    $if exitcond10 $then 
    $place[forx_xbody27_forx_xend78x_xloopexit]
    $else 
    $place[forx_xbody27_forx_xbody27]
    $endif
    $merge forx_xbody27_forx_xend78x_xloopexit 
    $endmerge
    $place[forx_xend78x_xloopexit_forx_xend78]
    $merge forx_xend_forx_xend78 forx_xend78x_xloopexit_forx_xend78 
    $endmerge
    ret_val__ := ($cast ($uint<16>) mul19 ) $buffering 1// bits of buffering = 16. 
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
$module [zeropad3D]
$in ()
$out ()
$is
{
  $branchblock [body]
  {
    $call testConfigure () (call ) 
    $barrier
    conv := ($cast ($uint<8>) call ) $buffering 1// bits of buffering = 8. 
    Block0_starting := conv $buffering 1// bits of buffering = 8. 
    call2 := Block0_complete $buffering 1// bits of buffering = 8. 
    $barrier
    $barrier
    $call sendOutput () () 
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
$module [zeropad3D_A]
$in ()
$out ()
$is
{
  $branchblock [body]
  {
    call := Block0_starting $buffering 1// bits of buffering = 8. 
    $barrier
    tmp := pad $buffering 1// bits of buffering = 8. 
    conv := ($cast ($uint<32>) tmp ) $buffering 1// bits of buffering = 32. 
    iNsTr_2 := @(des_inp[($bitcast ($uint<32>) _b00000000000000000000000000000011  )][($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000010  )]) $buffering 1// bits of buffering = 32. 
    tmp2 := ->(iNsTr_2) $buffering 1// bits of buffering = 32. 
    iNsTr_3 := @(des_inp[($bitcast ($uint<32>) _b00000000000000000000000000000011  )][($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )]) $buffering 1// bits of buffering = 32. 
    tmp4 := ->(iNsTr_3) $buffering 1// bits of buffering = 32. 
    iNsTr_4 := @(des_out[($bitcast ($uint<32>) _b00000000000000000000000000000011  )][($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000010  )]) $buffering 1// bits of buffering = 32. 
    tmp8 := ->(iNsTr_4) $buffering 1// bits of buffering = 32. 
    iNsTr_5 := @(des_out[($bitcast ($uint<32>) _b00000000000000000000000000000011  )][($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )]) $buffering 1// bits of buffering = 32. 
    tmp10 := ->(iNsTr_5) $buffering 1// bits of buffering = 32. 
    mul19 := (tmp10 * tmp8) $buffering 1// bits of buffering = 32. 
    iNsTr_6 := @(des_inp[($bitcast ($uint<32>) _b00000000000000000000000000000011  )][($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  )]) $buffering 1// bits of buffering = 32. 
    tmp22120 := ->(iNsTr_6) $buffering 1// bits of buffering = 32. 
    mul24121 := (conv << ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1// bits of buffering = 32. 
    add122 := (($bitcast ($uint<32>) _b00000000000000000000000000000000  ) - mul24121) $buffering 1// bits of buffering = 32. 
    cmp123 := (tmp22120 == add122) $buffering 1// bits of buffering = 1. 
    $if cmp123 $then 
    $place[entry_whilex_xend]
    $else 
    $place[entry_bbx_xnph]
    $endif
    $merge entry_bbx_xnph 
    $endmerge
    sub := (conv + ($bitcast ($uint<32>) _b11111111111111111111111111111111  )) $buffering 1// bits of buffering = 32. 
    $place[bbx_xnph_whilex_xbody]
    $merge bbx_xnph_whilex_xbody ifx_xend116_whilex_xbody 
    $phi tmp31 := 			  ($cast ($uint<32>) tmp22120 ) $on   bbx_xnph_whilex_xbody 			  ($cast ($uint<32>) tmp22 ) $on   ifx_xend116_whilex_xbody 
    // type of target is $uint<32>
    $phi ix_x1126 := 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   bbx_xnph_whilex_xbody 			  ($cast ($uint<32>) ix_x0 ) $on   ifx_xend116_whilex_xbody 
    // type of target is $uint<32>
    $phi kx_x0125 := 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   bbx_xnph_whilex_xbody 			  ($cast ($uint<32>) kx_x1 ) $on   ifx_xend116_whilex_xbody 
    // type of target is $uint<32>
    $phi jx_x1124 := 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   bbx_xnph_whilex_xbody 			  ($cast ($uint<32>) jx_x0 ) $on   ifx_xend116_whilex_xbody 
    // type of target is $uint<32>
    $endmerge
    cmp28 := (($bitcast ($int<32>) ix_x1126 ) > ($bitcast ($int<32>) sub )) $buffering 1// bits of buffering = 1. 
    $if cmp28 $then 
    $place[whilex_xbody_lorx_xlhsx_xfalse]
    $else 
    $place[whilex_xbody_ifx_xthen]
    $endif
    $merge whilex_xbody_lorx_xlhsx_xfalse 
    $endmerge
    sub34 := (sub + tmp31) $buffering 1// bits of buffering = 32. 
    cmp35x_xnot := (ix_x1126 <= sub34) $buffering 1// bits of buffering = 1. 
    cmp41 := (($bitcast ($int<32>) jx_x1124 ) > ($bitcast ($int<32>) sub )) $buffering 1// bits of buffering = 1. 
    orx_xcond := (cmp35x_xnot & cmp41) $buffering 1// bits of buffering = 1. 
    $if orx_xcond $then 
    $place[lorx_xlhsx_xfalse_lorx_xlhsx_xfalse43]
    $else 
    $place[lorx_xlhsx_xfalse_ifx_xthen]
    $endif
    $merge lorx_xlhsx_xfalse_lorx_xlhsx_xfalse43 
    $endmerge
    iNsTr_17 := @(des_inp[($bitcast ($uint<32>) _b00000000000000000000000000000011  )][($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )]) $buffering 1// bits of buffering = 32. 
    tmp45 := ->(iNsTr_17) $buffering 1// bits of buffering = 32. 
    sub48 := (sub + tmp45) $buffering 1// bits of buffering = 32. 
    cmp49 := (jx_x1124 > sub48) $buffering 1// bits of buffering = 1. 
    $if cmp49 $then 
    $place[lorx_xlhsx_xfalse43_ifx_xthen]
    $else 
    $place[lorx_xlhsx_xfalse43_ifx_xelse]
    $endif
    $merge lorx_xlhsx_xfalse_ifx_xthen lorx_xlhsx_xfalse43_ifx_xthen whilex_xbody_ifx_xthen 
    $endmerge
    mul55 := (jx_x1124 * tmp8) $buffering 1// bits of buffering = 32. 
    mul59 := (ix_x1126 * mul19) $buffering 1// bits of buffering = 32. 
    add56 := (kx_x0125 + mul55) $buffering 1// bits of buffering = 32. 
    add60 := (add56 + mul59) $buffering 1// bits of buffering = 32. 
    shr := ($bitcast ($uint<32>) (($bitcast ($int<32>) add60 ) >> ($bitcast ($int<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000010  ) )) ) $buffering 1// bits of buffering = 32. 
    idxprom := ($bitcast ($uint<64>) ($cast ($int<64>) shr ) ) $buffering 1// bits of buffering = 64. 
    arrayidx := @(R[($bitcast ($uint<32>) _b00000000000000000000000000000000  )][idxprom]) $buffering 1// bits of buffering = 32. 
    ->(arrayidx) := ($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  ) $buffering 1// bits of buffering = 64. 
    $place[ifx_xthen_ifx_xend]
    $merge lorx_xlhsx_xfalse43_ifx_xelse 
    $endmerge
    sub67 := (jx_x1124 - conv) $buffering 1// bits of buffering = 32. 
    sub73 := (ix_x1126 - conv) $buffering 1// bits of buffering = 32. 
    mul74 := (tmp4 * sub73) $buffering 1// bits of buffering = 32. 
    tmp118 := (mul74 + sub67) $buffering 1// bits of buffering = 32. 
    tmp119 := (tmp118 * tmp2) $buffering 1// bits of buffering = 32. 
    add75 := (tmp119 + kx_x0125) $buffering 1// bits of buffering = 32. 
    mul81 := (jx_x1124 * tmp8) $buffering 1// bits of buffering = 32. 
    mul85 := (ix_x1126 * mul19) $buffering 1// bits of buffering = 32. 
    add82 := (kx_x0125 + mul81) $buffering 1// bits of buffering = 32. 
    add86 := (add82 + mul85) $buffering 1// bits of buffering = 32. 
    shr88 := ($bitcast ($uint<32>) (($bitcast ($int<32>) add75 ) >> ($bitcast ($int<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000010  ) )) ) $buffering 1// bits of buffering = 32. 
    idxprom89 := ($bitcast ($uint<64>) ($cast ($int<64>) shr88 ) ) $buffering 1// bits of buffering = 64. 
    arrayidx90 := @(T[($bitcast ($uint<32>) _b00000000000000000000000000000000  )][idxprom89]) $buffering 1// bits of buffering = 32. 
    tmp91 := ->(arrayidx90) $buffering 1// bits of buffering = 64. 
    shr93 := ($bitcast ($uint<32>) (($bitcast ($int<32>) add86 ) >> ($bitcast ($int<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000010  ) )) ) $buffering 1// bits of buffering = 32. 
    idxprom94 := ($bitcast ($uint<64>) ($cast ($int<64>) shr93 ) ) $buffering 1// bits of buffering = 64. 
    arrayidx95 := @(R[($bitcast ($uint<32>) _b00000000000000000000000000000000  )][idxprom94]) $buffering 1// bits of buffering = 32. 
    ->(arrayidx95) := tmp91 $buffering 1// bits of buffering = 64. 
    $place[ifx_xelse_ifx_xend]
    $merge ifx_xelse_ifx_xend ifx_xthen_ifx_xend 
    $endmerge
    add97 := (kx_x0125 + ($bitcast ($uint<32>) _b00000000000000000000000000000100  )) $buffering 1// bits of buffering = 32. 
    cmp100 := (($bitcast ($int<32>) add97 ) < ($bitcast ($int<32>) tmp2 )) $buffering 1// bits of buffering = 1. 
    $if cmp100 $then 
    $place[ifx_xend_ifx_xend116]
    $else 
    $place[ifx_xend_ifx_xthen102]
    $endif
    $merge ifx_xend_ifx_xthen102 
    $endmerge
    inc := (jx_x1124 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  )) $buffering 1// bits of buffering = 32. 
    iNsTr_25 := @(des_inp[($bitcast ($uint<32>) _b00000000000000000000000000000011  )][($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )]) $buffering 1// bits of buffering = 32. 
    tmp105 := ->(iNsTr_25) $buffering 1// bits of buffering = 32. 
    add108 := (tmp105 + mul24121) $buffering 1// bits of buffering = 32. 
    cmp109 := (inc == add108) $buffering 1// bits of buffering = 1. 
    inc114 := ($cast ($uint<32>) cmp109 ) $buffering 1// bits of buffering = 32. 
    inc114x_xix_x1 := (inc114 + ix_x1126) $buffering 1// bits of buffering = 32. 
    $if cmp109 $then 
    $place[ifx_xthen102_ifx_xthen111]
    $else 
    $place[ifx_xthen102_ifx_xend116]
    $endif
    $merge ifx_xthen102_ifx_xthen111 
    $endmerge
    $place[ifx_xthen111_ifx_xend116]
    $merge ifx_xend_ifx_xend116 ifx_xthen102_ifx_xend116 ifx_xthen111_ifx_xend116 
    $phi jx_x0 := 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   ifx_xthen111_ifx_xend116 			  ($cast ($uint<32>) inc ) $on   ifx_xthen102_ifx_xend116 			  ($cast ($uint<32>) jx_x1124 ) $on   ifx_xend_ifx_xend116 
    // type of target is $uint<32>
    $phi kx_x1 := 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   ifx_xthen111_ifx_xend116 			  ($cast ($uint<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000000  ) ) $on   ifx_xthen102_ifx_xend116 			  ($cast ($uint<32>) add97 ) $on   ifx_xend_ifx_xend116 
    // type of target is $uint<32>
    $phi ix_x0 := 			  ($cast ($uint<32>) inc114x_xix_x1 ) $on   ifx_xthen111_ifx_xend116 			  ($cast ($uint<32>) inc114x_xix_x1 ) $on   ifx_xthen102_ifx_xend116 			  ($cast ($uint<32>) ix_x1126 ) $on   ifx_xend_ifx_xend116 
    // type of target is $uint<32>
    $endmerge
    iNsTr_23 := @(des_inp[($bitcast ($uint<32>) _b00000000000000000000000000000011  )][($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  )]) $buffering 1// bits of buffering = 32. 
    tmp22 := ->(iNsTr_23) $buffering 1// bits of buffering = 32. 
    add := (tmp22 + mul24121) $buffering 1// bits of buffering = 32. 
    cmp := (ix_x0 < add) $buffering 1// bits of buffering = 1. 
    $if cmp $then 
    $place[ifx_xend116_whilex_xbody]
    $else 
    $place[ifx_xend116_whilex_xendx_xloopexit]
    $endif
    $merge ifx_xend116_whilex_xendx_xloopexit 
    $endmerge
    $place[whilex_xendx_xloopexit_whilex_xend]
    $merge entry_whilex_xend whilex_xendx_xloopexit_whilex_xend 
    $endmerge
    $barrier
    Block0_complete := call $buffering 1// bits of buffering = 8. 
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
// Memory space 0: des_inp 
// Memory space 1: pad 
// Memory space 2: des_out 
// Memory space 3: T 
// Memory space 4: R 
// use of gated clocks in modules 
