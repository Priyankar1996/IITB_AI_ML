$record [structx_x__SizedTensor_16K]  < $array[16384] $of $uint<64> > 
$storage  B :  structx_x__SizedTensor_16K  // memory space index = 0  base address = 0  word size = 64
// can point into  foreign( $void )
$storage  K :  structx_x__SizedTensor_16K  // memory space index = 1  base address = 0  word size = 64
// can point into 
$storage  T :  structx_x__SizedTensor_16K  // memory space index = 2  base address = 0  word size = 64
// can point into 
$pipe  acc_pipe1_1 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  acc_pipe1_2 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  acc_pipe1_3 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  acc_pipe1_4 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  acc_pipe1_5 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  acc_pipe1_6 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  acc_pipe1_7 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  acc_pipe1_8 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  acc_pipe2_1 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  acc_pipe2_2 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  acc_pipe2_3 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  acc_pipe2_4 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  acc_pipe2_5 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  acc_pipe2_6 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  acc_pipe2_7 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  acc_pipe2_8 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  conv1_kp1 : $uint<64>  $depth 256 
// can point into 
$pipe  conv1_kp2 : $uint<64>  $depth 256 
// can point into 
$pipe  conv1_kp3 : $uint<64>  $depth 256 
// can point into 
$pipe  conv2_kp1 : $uint<64>  $depth 256 
// can point into 
$pipe  conv2_kp2 : $uint<64>  $depth 256 
// can point into 
$pipe  conv2_kp3 : $uint<64>  $depth 256 
// can point into 
$pipe  conv3_kp1 : $uint<64>  $depth 256 
// can point into 
$pipe  conv3_kp2 : $uint<64>  $depth 256 
// can point into 
$pipe  conv3_kp3 : $uint<64>  $depth 256 
// can point into 
$pipe  conv4_kp1 : $uint<64>  $depth 256 
// can point into 
$pipe  conv4_kp2 : $uint<64>  $depth 256 
// can point into 
$pipe  conv4_kp3 : $uint<64>  $depth 256 
// can point into 
$pipe  conv5_kp1 : $uint<64>  $depth 256 
// can point into 
$pipe  conv5_kp2 : $uint<64>  $depth 256 
// can point into 
$pipe  conv5_kp3 : $uint<64>  $depth 256 
// can point into 
$pipe  conv6_kp1 : $uint<64>  $depth 256 
// can point into 
$pipe  conv6_kp2 : $uint<64>  $depth 256 
// can point into 
$pipe  conv6_kp3 : $uint<64>  $depth 256 
// can point into 
$pipe  conv7_kp1 : $uint<64>  $depth 256 
// can point into 
$pipe  conv7_kp2 : $uint<64>  $depth 256 
// can point into 
$pipe  conv7_kp3 : $uint<64>  $depth 256 
// can point into 
$pipe  conv8_kp1 : $uint<64>  $depth 256 
// can point into 
$pipe  conv8_kp2 : $uint<64>  $depth 256 
// can point into 
$pipe  conv8_kp3 : $uint<64>  $depth 256 
// can point into 
$pipe  conv_ip1 : $uint<64>  $depth 256 
// can point into  foreign( $void )
$pipe  conv_ip2 : $uint<64>  $depth 256 
// can point into  foreign( $void )
$pipe  conv_ip3 : $uint<64>  $depth 256 
// can point into  foreign( $void )
$pipe  conv_ip4 : $uint<64>  $depth 256 
// can point into  foreign( $void )
$pipe  core1_kp1 : $uint<64>  $depth 96 
// can point into 
$pipe  core1_kp2 : $uint<64>  $depth 96 
// can point into 
$pipe  core1_kp3 : $uint<64>  $depth 96 
// can point into 
$pipe  core2_kp1 : $uint<64>  $depth 96 
// can point into 
$pipe  core2_kp2 : $uint<64>  $depth 96 
// can point into 
$pipe  core2_kp3 : $uint<64>  $depth 96 
// can point into 
$pipe  core3_kp1 : $uint<64>  $depth 96 
// can point into 
$pipe  core3_kp2 : $uint<64>  $depth 96 
// can point into 
$pipe  core3_kp3 : $uint<64>  $depth 96 
// can point into 
$pipe  core4_kp1 : $uint<64>  $depth 96 
// can point into 
$pipe  core4_kp2 : $uint<64>  $depth 96 
// can point into 
$pipe  core4_kp3 : $uint<64>  $depth 96 
// can point into 
$pipe  core5_kp1 : $uint<64>  $depth 96 
// can point into 
$pipe  core5_kp2 : $uint<64>  $depth 96 
// can point into 
$pipe  core5_kp3 : $uint<64>  $depth 96 
// can point into 
$pipe  core6_kp1 : $uint<64>  $depth 96 
// can point into 
$pipe  core6_kp2 : $uint<64>  $depth 96 
// can point into 
$pipe  core6_kp3 : $uint<64>  $depth 96 
// can point into 
$pipe  core7_kp1 : $uint<64>  $depth 96 
// can point into 
$pipe  core7_kp2 : $uint<64>  $depth 96 
// can point into 
$pipe  core7_kp3 : $uint<64>  $depth 96 
// can point into 
$pipe  core8_kp1 : $uint<64>  $depth 96 
// can point into 
$pipe  core8_kp2 : $uint<64>  $depth 96 
// can point into 
$pipe  core8_kp3 : $uint<64>  $depth 96 
// can point into 
$pipe  core_ip1 : $uint<64>  $depth 48 
// can point into  foreign( $void )
$pipe  core_ip2 : $uint<64>  $depth 48 
// can point into  foreign( $void )
$pipe  core_ip3 : $uint<64>  $depth 48 
// can point into  foreign( $void )
$pipe  core_ip4 : $uint<64>  $depth 48 
// can point into  foreign( $void )
$pipe  fetch_ip1 : $uint<64>  $depth 48 
// can point into 
$pipe  fetch_ip2 : $uint<64>  $depth 48 
// can point into 
$pipe  fetch_ip3 : $uint<64>  $depth 48 
// can point into 
$pipe  fetch_ip4 : $uint<64>  $depth 48 
// can point into 
$pipe  fetch_kp1 : $uint<64>  $depth 96 
// can point into 
$pipe  fetch_kp2 : $uint<64>  $depth 96 
// can point into 
$pipe  fetch_kp3 : $uint<64>  $depth 96 
// can point into 
$pipe  maxpool_input_pipe : $uint<8>  $depth 2 
// can point into 
$pipe  maxpool_output_pipe : $uint<8>  $depth 2 
// can point into 
$pipe  output_pipe1_1 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  output_pipe1_2 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  output_pipe2_1 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  output_pipe2_2 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  output_pipe3_1 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  output_pipe3_2 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  output_pipe4_1 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  output_pipe4_2 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  output_pipe5_1 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  output_pipe5_2 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  output_pipe6_1 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  output_pipe6_2 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  output_pipe7_1 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  output_pipe7_2 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  output_pipe8_1 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  output_pipe8_2 : $uint<16>  $depth 16 
// can point into  foreign( $void )
$pipe  pool_buffer : $uint<64>  $depth 64 
// can point into  foreign( $void )
$pipe  prev_core_ip1 : $uint<64>  $depth 96 
// can point into  foreign( $void )
$pipe  prev_core_ip2 : $uint<64>  $depth 96 
// can point into  foreign( $void )
$pipe  time_pipe : $uint<64>  $depth 2 
// can point into 
$noblock $pipe  timer_req : $uint<1>  $depth 1 
// can point into 
$pipe  timer_resp : $uint<64>  $depth 1 
// can point into 
$opaque $module [Divider]
$in ( dividend : $uint<16>   divisor : $uint<16>  )
$out ( quotient : $uint<16>  )
$is
{
  $branchblock [DivBlock]
  {
    $volatile ext_div := ($bitcast ($uint<17>) dividend ) $buffering 1
    $dopipeline $depth 7 $buffering 1
    $fullrate 
    $merge $entry $loopback 
    $phi div := 			  ($bitcast ($uint<17>) divisor ) $on   $entry 			  ndiv $on   $loopback 
    // type of target is $uint<17>
    $phi cnt := 			  ($bitcast ($uint<5>) 0  ) $on   $entry 			  ncnt $on   $loopback 
    // type of target is $uint<5>
    $endmerge
    $volatile cmp := (div >= ext_div) $buffering 1
    $volatile ndiv := (div << 1 ) $buffering 1
    $volatile ncnt := (cnt + 1 ) $buffering 1
    $while ( ~ cmp )
    $dopipeline $depth 7 $buffering 1
    $fullrate 
    $merge $entry $loopback 
    $phi div_2 := 			  div $on   $entry 			  ndiv_2 $on   $loopback 
    // type of target is $uint<17>
    $phi ediv_2 := 			  ext_div $on   $entry 			  nediv_2 $on   $loopback 
    // type of target is $uint<17>
    $phi quo := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nq $on   $loopback 
    // type of target is $uint<16>
    $phi cnt2 := 			  cnt $on   $entry 			  ncnt2 $on   $loopback 
    // type of target is $uint<5>
    $endmerge
    $volatile cmp2 := (div_2 > ediv_2) $buffering 1
    $volatile ndiv_2 := (div_2 >> 1 ) $buffering 1
    $volatile nediv_2 := (ediv_2 - ( $mux cmp2 0   div_2 ) ) $buffering 1
    $volatile ncnt2 := (cnt2 - 1 ) $buffering 1
    $volatile nq := ((quo << 1 ) + ( $mux cmp2 0   1  ) ) $buffering 1
    $while (cnt2 > 0 )
    quotient := nq $buffering 1// bits of buffering = 16. 
  }
}
$opaque $module [TopMult]
$in ( in1 : $uint<32>   in2 : $uint<32>  )
$out ( output : $uint<32>  )
$is
{
  output := (in1 * in2) $buffering 1// bits of buffering = 32. 
}
$module [singleFetch]
$in ( rt : $uint<16>   ct : $uint<16>   pad : $uint<16>   chl_in : $uint<16>   max_parts : $uint<8>  )
$out ()
$is
{
  $branchblock [block]
  {
    $volatile cnt_max := ((ct + (pad << 1 )) * chl_in) $buffering 1
    $dopipeline $depth 15 $buffering 1
    $fullrate 
    $merge $entry $loopback 
    $phi start := 			  n_start $on   $loopback 			  ($bitcast ($uint<1>) 1  ) $on   $entry 
    // type of target is $uint<1>
    $phi cnt := 			  n_cnt $on   $loopback 			  ($bitcast ($uint<16>) 1  ) $on   $entry 
    // type of target is $uint<16>
    $phi row := 			  n_row $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    $phi parts := 			  n_parts $on   $loopback 			  0  $on   $entry 
    // type of target is $uint<8>
    $endmerge
    val_read1 := prev_core_ip1 $buffering 1// bits of buffering = 64. 
    val_read2 := prev_core_ip2 $buffering 1// bits of buffering = 64. 
    $volatile change := (cnt == cnt_max) $buffering 1
    $volatile n_cnt := ( $mux change 1   (cnt + 1 ) )  $buffering 1
    $volatile incr_row := (row + 2 ) $buffering 1
    $volatile update_row := ( $mux change incr_row  row )  $buffering 1
    $volatile chng_prt := (update_row > rt) $buffering 1
    $volatile n_row := ( $mux chng_prt 0   update_row )  $buffering 1
    $volatile n_parts := ( $mux chng_prt (parts + 1 )  parts )  $buffering 1
    $volatile n_start := (n_row == 0 ) $buffering 1
    $volatile end := (incr_row > rt) $buffering 1
    $guard (~end) core_ip1 := val_read1 $buffering 1// bits of buffering = 64. 
    $guard (~start) core_ip3 := val_read1 $buffering 1// bits of buffering = 64. 
    $guard (~end) core_ip2 := val_read2 $buffering 1// bits of buffering = 64. 
    $guard (~start) core_ip4 := val_read2 $buffering 1// bits of buffering = 64. 
    $while (n_parts <= max_parts)
  }
}
$module [loadInput_in1]
$in ( addr_init : $uint<32>   row_in : $uint<16>   ct : $uint<16>   chl_in : $uint<16>   pad : $uint<16>   num_parts_1 : $uint<8>  )
$out ()
$is
{
  $branchblock [access_block]
  {
    $volatile ct_new := (ct + (pad << 1 )) $buffering 1
    $volatile m_factor := ($bitcast ($uint<32>) (ct * chl_in) ) $buffering 1
    $volatile row_last := (row_in + 2 ) $buffering 1
    $volatile np := (num_parts_1 + 1 ) $buffering 1
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi row1 := 			  n_row1 $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    $phi part_cnt := 			  np_cnt $on   $loopback 			  ($bitcast ($uint<8>) 0  ) $on   $entry 
    // type of target is $uint<8>
    $phi sent := 			  n_sent $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    $phi fv1 := 			  nfv1 $on   $loopback 			  0  $on   $entry 
    // type of target is $uint<64>
    $phi cv1 := 			  ($bitcast ($uint<64>) 0  ) $on   $entry 			  ncv1 $on   $loopback 
    // type of target is $uint<64>
    $phi left := 			  n_left $on   $loopback 			  chl_in $on   $entry 
    // type of target is $uint<16>
    $phi head := 			  n_head $on   $loopback 			  ($bitcast ($uint<3>) 0  ) $on   $entry 
    // type of target is $uint<3>
    $phi addr1 := 			  n_addr1 $on   $loopback 			  addr_init $on   $entry 
    // type of target is $uint<32>
    $phi fn := 			  n_fn $on   $loopback 			  ($bitcast ($uint<1>) 1  ) $on   $entry 
    // type of target is $uint<1>
    $endmerge
    ADD_u16_u16_430_430_delayed_1_0 := (ct + pad) $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile mc_lt_p := ((sent < pad) | (sent >= ADD_u16_u16_430_430_delayed_1_0)) $buffering 1
    SUB_u16_u16_443_443_delayed_1_0 := ((row_in + 2 ) - pad) $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile r_lt_p := ((row1 < pad) | (row1 >= SUB_u16_u16_443_443_delayed_1_0)) $buffering 1
    $volatile p1_zero := (mc_lt_p | r_lt_p) $buffering 1
    $volatile sp := ($bitcast ($uint<3>) addr1 ) $buffering 1
    $volatile min1 := ( $mux (sp > head) sp  head )  $buffering 1
    $volatile mi71 := (8  - ($bitcast ($uint<16>) min1 )) $buffering 1
    $volatile cmp_val := ( $mux p1_zero 8   mi71 )  $buffering 1
    $volatile ns := ( $mux (cmp_val < left) cmp_val  left )  $buffering 1
    $volatile hns := (head + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile sns := (sp + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile done := (left == ns) $buffering 1
    $volatile send := (done | (hns == 0 )) $buffering 1
    $volatile read_from_pipe := (fn & ( ~ p1_zero )) $buffering 1
    $guard (read_from_pipe) read_val := T[0 ][(addr1 >> 3 )] $buffering 1// bits of buffering = 64. 
    read_from_pipe_523_delayed_5_0 := read_from_pipe $buffering 5 $cut_through // bits of buffering = 5. 
    fv1_525_delayed_5_0 := fv1 $buffering 5 $cut_through // bits of buffering = 320. 
    $volatile val_in_use := ( $mux read_from_pipe_523_delayed_5_0 read_val  fv1_525_delayed_5_0 )  $buffering 1
    SHL_u64_u64_533_533_delayed_5_0 := (($bitcast ($uint<64>) sp ) << 3 ) $buffering 5 $cut_through // bits of buffering = 320. 
    SHL_u64_u64_538_538_delayed_5_0 := (($bitcast ($uint<64>) head ) << 3 ) $buffering 5 $cut_through // bits of buffering = 320. 
    $volatile tmp1 := ((val_in_use << SHL_u64_u64_533_533_delayed_5_0) >> SHL_u64_u64_538_538_delayed_5_0) $buffering 1
    $volatile bytemask := (($bitcast ($uint<64>) _hFFFFFFFFFFFFFFFF  ) << (($bitcast ($uint<64>) (8  - hns) ) << 3 )) $buffering 1
    p1_zero_553_delayed_5_0 := p1_zero $buffering 5 $cut_through // bits of buffering = 5. 
    cv1_555_delayed_5_0 := cv1 $buffering 5 $cut_through // bits of buffering = 320. 
    bytemask_558_delayed_5_0 := bytemask $buffering 5 $cut_through // bits of buffering = 320. 
    $volatile send_data := ( $mux p1_zero_553_delayed_5_0 0   ((cv1_555_delayed_5_0 | tmp1) & bytemask_558_delayed_5_0) )  $buffering 1
    send_562_delayed_5_0 := send $buffering 5 $cut_through // bits of buffering = 5. 
    $guard (send_562_delayed_5_0) prev_core_ip1 := send_data $buffering 1// bits of buffering = 64. 
    send_567_delayed_5_0 := send $buffering 5 $cut_through // bits of buffering = 5. 
    $volatile ncv1 := ( $mux send_567_delayed_5_0 0   send_data )  $buffering 1
    SUB_u16_u16_576_576_delayed_1_0 := (ct_new - 1 ) $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile next_row := ((sent == SUB_u16_u16_576_576_delayed_1_0) & done) $buffering 1
    $volatile n_left := ( $mux done chl_in  (left - ns) )  $buffering 1
    $volatile n_sent := ( $mux done ( $mux next_row 0   (sent + 1 ) )   sent )  $buffering 1
    $volatile n_head := ( $mux send 0   hns )  $buffering 1
    $volatile update_row := ( $mux next_row (row1 + 2 )  row1 )  $buffering 1
    $volatile continue_flag1 := (update_row < row_last) $buffering 1
    $volatile n_row1 := ( $mux continue_flag1 update_row  0  )  $buffering 1
    $volatile n_addr1 := ( $mux r_lt_p addr_init  (addr1 + (( $mux next_row m_factor  0  )  + ( $mux mc_lt_p 0   ($bitcast ($uint<32>) ns ) ) )) )  $buffering 1
    $volatile na3_1 := (n_addr1 >> 3 ) $buffering 1
    $volatile n_fn := (((sns == 0 ) | (done & (na3_1 != (addr1 >> 3 )))) | (next_row | (p1_zero & fn))) $buffering 1
    $volatile nfv1 := val_in_use $buffering 1
    $volatile np_cnt := (part_cnt + ( $mux continue_flag1 0   1  ) ) $buffering 1
    $while (continue_flag1 | (np_cnt != np))
  }
}
$module [loadInput_in2]
$in ( addr_init : $uint<32>   row_in : $uint<16>   ct : $uint<16>   chl_in : $uint<16>   pad : $uint<16>   num_parts_1 : $uint<8>  )
$out ()
$is
{
  $branchblock [access_block]
  {
    $volatile ct_new := (ct + (pad << 1 )) $buffering 1
    $volatile m_factor := ($bitcast ($uint<32>) (ct * chl_in) ) $buffering 1
    $volatile row_last := (row_in + 3 ) $buffering 1
    $volatile np := (num_parts_1 + 1 ) $buffering 1
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi row1 := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_row1 $on   $loopback 
    // type of target is $uint<16>
    $phi part_cnt := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  np_cnt $on   $loopback 
    // type of target is $uint<8>
    $phi sent := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  n_sent $on   $loopback 
    // type of target is $uint<16>
    $phi fv1 := 			  0  $on   $entry 			  nfv1 $on   $loopback 
    // type of target is $uint<64>
    $phi cv1 := 			  ($bitcast ($uint<64>) 0  ) $on   $entry 			  ncv1 $on   $loopback 
    // type of target is $uint<64>
    $phi left := 			  chl_in $on   $entry 			  n_left $on   $loopback 
    // type of target is $uint<16>
    $phi head := 			  ($bitcast ($uint<3>) 0  ) $on   $entry 			  n_head $on   $loopback 
    // type of target is $uint<3>
    $phi addr1 := 			  addr_init $on   $entry 			  n_addr1 $on   $loopback 
    // type of target is $uint<32>
    $phi fn := 			  ($bitcast ($uint<1>) 1  ) $on   $entry 			  n_fn $on   $loopback 
    // type of target is $uint<1>
    $endmerge
    ADD_u16_u16_768_768_delayed_1_0 := (ct + pad) $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile mc_lt_p := ((sent < pad) | (sent >= ADD_u16_u16_768_768_delayed_1_0)) $buffering 1
    SUB_u16_u16_781_781_delayed_1_0 := ((row_in + 2 ) - pad) $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile r_lt_p := ((row1 < pad) | (row1 >= SUB_u16_u16_781_781_delayed_1_0)) $buffering 1
    $volatile p1_zero := (mc_lt_p | r_lt_p) $buffering 1
    $volatile sp := ($bitcast ($uint<3>) addr1 ) $buffering 1
    $volatile min1 := ( $mux (sp > head) sp  head )  $buffering 1
    $volatile mi71 := (8  - ($bitcast ($uint<16>) min1 )) $buffering 1
    $volatile cmp_val := ( $mux p1_zero 8   mi71 )  $buffering 1
    $volatile ns := ( $mux (cmp_val < left) cmp_val  left )  $buffering 1
    $volatile hns := (head + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile sns := (sp + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile done := (left == ns) $buffering 1
    $volatile send := (done | (hns == 0 )) $buffering 1
    $volatile read_from_pipe := (fn & ( ~ p1_zero )) $buffering 1
    $guard (read_from_pipe) read_val := T[0 ][(addr1 >> 3 )] $buffering 1// bits of buffering = 64. 
    read_from_pipe_861_delayed_5_0 := read_from_pipe $buffering 5 $cut_through // bits of buffering = 5. 
    fv1_863_delayed_5_0 := fv1 $buffering 5 $cut_through // bits of buffering = 320. 
    $volatile val_in_use := ( $mux read_from_pipe_861_delayed_5_0 read_val  fv1_863_delayed_5_0 )  $buffering 1
    SHL_u64_u64_871_871_delayed_5_0 := (($bitcast ($uint<64>) sp ) << 3 ) $buffering 5 $cut_through // bits of buffering = 320. 
    SHL_u64_u64_876_876_delayed_5_0 := (($bitcast ($uint<64>) head ) << 3 ) $buffering 5 $cut_through // bits of buffering = 320. 
    $volatile tmp1 := ((val_in_use << SHL_u64_u64_871_871_delayed_5_0) >> SHL_u64_u64_876_876_delayed_5_0) $buffering 1
    $volatile bytemask := (($bitcast ($uint<64>) _hFFFFFFFFFFFFFFFF  ) << (($bitcast ($uint<64>) (8  - hns) ) << 3 )) $buffering 1
    p1_zero_891_delayed_5_0 := p1_zero $buffering 5 $cut_through // bits of buffering = 5. 
    cv1_893_delayed_5_0 := cv1 $buffering 5 $cut_through // bits of buffering = 320. 
    bytemask_896_delayed_5_0 := bytemask $buffering 5 $cut_through // bits of buffering = 320. 
    $volatile send_data := ( $mux p1_zero_891_delayed_5_0 0   ((cv1_893_delayed_5_0 | tmp1) & bytemask_896_delayed_5_0) )  $buffering 1
    send_900_delayed_5_0 := send $buffering 5 $cut_through // bits of buffering = 5. 
    $guard (send_900_delayed_5_0) prev_core_ip2 := send_data $buffering 1// bits of buffering = 64. 
    send_905_delayed_5_0 := send $buffering 5 $cut_through // bits of buffering = 5. 
    $volatile ncv1 := ( $mux send_905_delayed_5_0 0   send_data )  $buffering 1
    SUB_u16_u16_914_914_delayed_1_0 := (ct_new - 1 ) $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile next_row := ((sent == SUB_u16_u16_914_914_delayed_1_0) & done) $buffering 1
    $volatile n_left := ( $mux done chl_in  (left - ns) )  $buffering 1
    $volatile n_sent := ( $mux done ( $mux next_row 0   (sent + 1 ) )   sent )  $buffering 1
    $volatile n_head := ( $mux send 0   hns )  $buffering 1
    $volatile update_row := ( $mux next_row (row1 + 2 )  row1 )  $buffering 1
    $volatile continue_flag1 := (update_row < row_last) $buffering 1
    $volatile n_row1 := ( $mux continue_flag1 update_row  1  )  $buffering 1
    $volatile n_addr1 := ( $mux r_lt_p addr_init  (addr1 + (( $mux next_row m_factor  0  )  + ( $mux mc_lt_p 0   ($bitcast ($uint<32>) ns ) ) )) )  $buffering 1
    $volatile na3_1 := (n_addr1 >> 3 ) $buffering 1
    $volatile n_fn := (((sns == 0 ) | (done & (na3_1 != (addr1 >> 3 )))) | (next_row | (p1_zero & fn))) $buffering 1
    $volatile nfv1 := val_in_use $buffering 1
    $volatile np_cnt := (part_cnt + ( $mux continue_flag1 0   1  ) ) $buffering 1
    $while (continue_flag1 | (np_cnt != np))
  }
}
$module [access_T]
$in ( row_in : $uint<16>   rt : $uint<16>   ct : $uint<16>   chl_in : $uint<16>   rk : $uint<16>   pad : $uint<16>   num_parts_1 : $uint<8>  )
$out ()
$is
{
  $volatile m_factor := ($bitcast ($uint<32>) (ct * chl_in) ) $buffering 1
  $volatile bit0 := (pad [] 0 ) $buffering 1
  $volatile addr1 := ( $mux bit0 m_factor  0  )  $buffering 1
  $volatile addr2 := ( $mux bit0 0   m_factor )  $buffering 1
  $parallelblock[access_block]
  {
    $call singleFetch (row_in ct pad chl_in num_parts_1 ) () 
    $call loadInput_in1 (addr1 row_in ct chl_in pad num_parts_1 ) () 
    $call loadInput_in2 (addr2 row_in ct chl_in pad num_parts_1 ) () 
  }
}
$module [accumulator]
$in ( chl_in : $uint<16>   ck : $uint<16>   op_size : $uint<32>  )
$out ()
$is
{
  $branchblock [acc_blk]
  {
    $volatile acc_count := ((chl_in * ck) - 1 ) $buffering 1
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi acc1_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val1_1 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc1_2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val1_2 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc2_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val2_1 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc2_2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val2_2 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc3_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val3_1 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc3_2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val3_2 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc4_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val4_1 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc4_2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val4_2 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc5_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val5_1 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc5_2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val5_2 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc6_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val6_1 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc6_2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val6_2 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc7_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val7_1 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc7_2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val7_2 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc8_1 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val8_1 )  $on   $loopback 
    // type of target is $uint<16>
    $phi acc8_2 := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  ( $mux num_done 0   acc_val8_2 )  $on   $loopback 
    // type of target is $uint<16>
    $phi c_count := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  nc_count $on   $loopback 
    // type of target is $uint<16>
    $phi op_count := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nop_count $on   $loopback 
    // type of target is $uint<32>
    $phi t1 := 			  acc_pipe1_1 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi t2 := 			  acc_pipe1_2 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi t3 := 			  acc_pipe1_3 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi t4 := 			  acc_pipe1_4 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi t5 := 			  acc_pipe1_5 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi t6 := 			  acc_pipe1_6 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi t7 := 			  acc_pipe1_7 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi t8 := 			  acc_pipe1_8 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi r1 := 			  acc_pipe2_1 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi r2 := 			  acc_pipe2_2 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi r3 := 			  acc_pipe2_3 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi r4 := 			  acc_pipe2_4 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi r5 := 			  acc_pipe2_5 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi r6 := 			  acc_pipe2_6 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi r7 := 			  acc_pipe2_7 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $phi r8 := 			  acc_pipe2_8 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    $endmerge
    $volatile num_done := (c_count == acc_count) $buffering 1
    $volatile nc_count := ( $mux num_done 0   (c_count + 1 ) )  $buffering 1
    $volatile nop_count := ( $mux num_done (op_count + 1 )  op_count )  $buffering 1
    $volatile acc_val1_1 := (acc1_1 + t1) $buffering 1
    $volatile acc_val2_1 := (acc2_1 + t2) $buffering 1
    $volatile acc_val3_1 := (acc3_1 + t3) $buffering 1
    $volatile acc_val4_1 := (acc4_1 + t4) $buffering 1
    $volatile acc_val5_1 := (acc5_1 + t5) $buffering 1
    $volatile acc_val6_1 := (acc6_1 + t6) $buffering 1
    $volatile acc_val7_1 := (acc7_1 + t7) $buffering 1
    $volatile acc_val8_1 := (acc8_1 + t8) $buffering 1
    $volatile acc_val1_2 := (acc1_2 + r1) $buffering 1
    $volatile acc_val2_2 := (acc2_2 + r2) $buffering 1
    $volatile acc_val3_2 := (acc3_2 + r3) $buffering 1
    $volatile acc_val4_2 := (acc4_2 + r4) $buffering 1
    $volatile acc_val5_2 := (acc5_2 + r5) $buffering 1
    $volatile acc_val6_2 := (acc6_2 + r6) $buffering 1
    $volatile acc_val7_2 := (acc7_2 + r7) $buffering 1
    $volatile acc_val8_2 := (acc8_2 + r8) $buffering 1
    $guard (num_done) output_pipe1_1 := acc_val1_1 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe1_2 := acc_val1_2 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe2_1 := acc_val2_1 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe2_2 := acc_val2_2 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe3_1 := acc_val3_1 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe3_2 := acc_val3_2 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe4_1 := acc_val4_1 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe4_2 := acc_val4_2 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe5_1 := acc_val5_1 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe5_2 := acc_val5_2 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe6_1 := acc_val6_1 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe6_2 := acc_val6_2 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe7_1 := acc_val7_1 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe7_2 := acc_val7_2 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe8_1 := acc_val8_1 $buffering 1// bits of buffering = 16. 
    $guard (num_done) output_pipe8_2 := acc_val8_2 $buffering 1// bits of buffering = 16. 
    $while (nop_count < op_size)
  }
}
$opaque $module [atomicMaskedWrite]
$in ( addr : $uint<32>   bm : $uint<64>   val : $uint<64>  )
$out ()
$is
{
  B[0 ][addr] := ((B[0 ][addr] & bm) | val) $buffering 1// bits of buffering = 64. 
}
$module [configureConvolution]
$in ()
$out ( add : $uint<16>   add13 : $uint<16>   add23 : $uint<16>   add33 : $uint<16>   add43 : $uint<16>   add53 : $uint<16>   add63 : $uint<16>   add73 : $uint<16>   shft : $uint<16>   pad : $uint<16>   mul233 : $uint<32>   scale_val : $uint<32>  )
$is
{
  $branchblock [body]
  {
    add := (maxpool_input_pipe && maxpool_input_pipe) $buffering 1// bits of buffering = 16. 
    add13 := (maxpool_input_pipe && maxpool_input_pipe) $buffering 1// bits of buffering = 16. 
    add23 := (maxpool_input_pipe && maxpool_input_pipe) $buffering 1// bits of buffering = 16. 
    add33 := (maxpool_input_pipe && maxpool_input_pipe) $buffering 1// bits of buffering = 16. 
    add43 := (maxpool_input_pipe && maxpool_input_pipe) $buffering 1// bits of buffering = 16. 
    add53 := (maxpool_input_pipe && maxpool_input_pipe) $buffering 1// bits of buffering = 16. 
    add63 := (maxpool_input_pipe && maxpool_input_pipe) $buffering 1// bits of buffering = 16. 
    add73 := (maxpool_input_pipe && maxpool_input_pipe) $buffering 1// bits of buffering = 16. 
    shft := (maxpool_input_pipe && maxpool_input_pipe) $buffering 1// bits of buffering = 16. 
    pad := (maxpool_input_pipe && maxpool_input_pipe) $buffering 1// bits of buffering = 16. 
    scale_val := ((maxpool_input_pipe && maxpool_input_pipe) && (maxpool_input_pipe && maxpool_input_pipe)) $buffering 1// bits of buffering = 32. 
    $place[entry_bbx_xnph244]
    $merge entry_bbx_xnph244 
    $endmerge
    $call TopMult (($cast ($uint<32>) add ) ($cast ($uint<32>) add13 ) ) (tmp2 ) 
    tmp4 := ($cast ($uint<32>) add23 ) $buffering 1// bits of buffering = 32. 
    $call TopMult (tmp2 tmp4 ) (tmp5 ) 
    $place[bbx_xnph244_forx_xbody]
    $merge bbx_xnph244_forx_xbody forx_xbody_forx_xbody 
    $phi ix_x0243 := 			  0  $on   bbx_xnph244_forx_xbody 			  ($cast ($uint<32>) inc ) $on   forx_xbody_forx_xbody 
    // type of target is $uint<32>
    $phi send_datat := 			  ($bitcast ($uint<64>) 0  ) $on   bbx_xnph244_forx_xbody 			  next_send_datat $on   forx_xbody_forx_xbody 
    // type of target is $uint<64>
    $endmerge
    arrayidx := @(T[0 ][(ix_x0243 >> 3 )]) $buffering 1// bits of buffering = 32. 
    next_send_datat := (( $slice send_datat 55 0 )  && maxpool_input_pipe) $buffering 1// bits of buffering = 64. 
    $volatile send_condt := (($bitcast ($uint<3>) ix_x0243 ) == 7 ) $buffering 1
    $guard (send_condt) ->(arrayidx) := next_send_datat $buffering 1// bits of buffering = 64. 
    $volatile inc := (ix_x0243 + 1 ) $buffering 1
    $volatile exitcond6 := (inc == tmp5) $buffering 1
    $if exitcond6 $then 
    $place[forx_xbody_forx_xendx_xloopexit]
    $else 
    $place[forx_xbody_forx_xbody]
    $endif
    $merge forx_xbody_forx_xendx_xloopexit 
    $endmerge
    $volatile data_leftt := (8  - ($bitcast ($uint<3>) tmp5 )) $buffering 1
    $volatile send_remainingt := (data_leftt != 0 ) $buffering 1
    $volatile data_to_sendt := (next_send_datat << (($bitcast ($uint<64>) data_leftt ) << 3 )) $buffering 1
    $guard (send_remainingt) ->(arrayidx) := data_to_sendt $buffering 1// bits of buffering = 64. 
    $call TopMult (($cast ($uint<32>) add63 ) ($cast ($uint<32>) add23 ) ) (tmp8 ) 
    $call TopMult (($cast ($uint<32>) add73 ) ($cast ($uint<32>) add53 ) ) (tmp9 ) 
    $call TopMult (tmp8 tmp9 ) (tmp13 ) 
    $place[bbx_xnph_forx_xbody158]
    $merge bbx_xnph_forx_xbody158 forx_xbody158_forx_xbody158 
    $phi ix_x1241 := 			  0  $on   bbx_xnph_forx_xbody158 			  ($cast ($uint<32>) inc208 ) $on   forx_xbody158_forx_xbody158 
    // type of target is $uint<32>
    $phi send_data := 			  ($bitcast ($uint<64>) 0  ) $on   bbx_xnph_forx_xbody158 			  next_send_data $on   forx_xbody158_forx_xbody158 
    // type of target is $uint<64>
    $endmerge
    arrayidx205 := @(K[0 ][(ix_x1241 >> 3 )]) $buffering 1// bits of buffering = 32. 
    next_send_data := (( $slice send_data 55 0 )  && maxpool_input_pipe) $buffering 1// bits of buffering = 64. 
    $volatile send_cond := (($bitcast ($uint<3>) ix_x1241 ) == 7 ) $buffering 1
    $guard (send_cond) ->(arrayidx205) := next_send_data $buffering 1// bits of buffering = 64. 
    $volatile inc208 := (ix_x1241 + 1 ) $buffering 1
    $volatile exitcond14 := (inc208 == tmp13) $buffering 1
    $if exitcond14 $then 
    $place[forx_xbody158_forx_xend209x_xloopexit]
    $else 
    $place[forx_xbody158_forx_xbody158]
    $endif
    $merge forx_xbody158_forx_xend209x_xloopexit 
    $endmerge
    $volatile data_left := (8  - ($bitcast ($uint<3>) tmp13 )) $buffering 1
    $volatile send_remaining := (data_left != 0 ) $buffering 1
    $volatile data_to_send := (next_send_data << (($bitcast ($uint<64>) data_left ) << 3 )) $buffering 1
    $guard (send_remaining) ->(arrayidx205) := data_to_send $buffering 1// bits of buffering = 64. 
    conv227 := ($cast ($uint<32>) add43 ) $buffering 1// bits of buffering = 32. 
    conv229 := ($cast ($uint<32>) add33 ) $buffering 1// bits of buffering = 32. 
    $call TopMult (conv227 conv229 ) (mul230 ) 
    $call TopMult (mul230 ($cast ($uint<32>) ((add53 + 7 ) >> 3 ) ) ) (mul233 ) 
  }
}
$pipeline $depth 15 $buffering 1 $fullrate $operator $module [multiplier]
$in ( in1 : $int<16>   in2 : $int<16>  )
$out ( output : $int<16>   deb_out : $uint<64>  )
$is
{
  tmp := ($cast ($int<16>) ( $slice (in1 * in2) 15 8 )  ) $buffering 1// bits of buffering = 16. 
  output := tmp $buffering 1// bits of buffering = 16. 
  CONCAT_u16_u32_1783_1783_delayed_1_0 := (($bitcast ($uint<16>) in1 ) && ($bitcast ($uint<16>) in2 )) $buffering 1 $cut_through // bits of buffering = 32. 
  deb_out := (CONCAT_u16_u32_1783_1783_delayed_1_0 && ($bitcast ($uint<32>) tmp )) $buffering 1// bits of buffering = 64. 
  $attribute delay 2
}
$module [convolveCore]
$in ( rb : $uint<16>   cb : $uint<16>   chl_in_read : $uint<16>   chl_out : $uint<16>   rk : $uint<16>   ck : $uint<16>   num_parts : $uint<8>   max_chl : $uint<16>  )
$out ()
$is
{
  $branchblock [conv_block]
  {
    $volatile num_row := (rb - 2 ) $buffering 1
    $volatile num_col := (cb - 1 ) $buffering 1
    $volatile chl_in := (chl_in_read - 1 ) $buffering 1
    $volatile ck_s := (($bitcast ($uint<2>) ck ) - 1 ) $buffering 1
    $volatile mode_2 := (rk == 2 ) $buffering 1
    $volatile not_mode_2 := ( ~ mode_2 ) $buffering 1
    $merge $entry loopback 
    $phi p_cnt := 			  np_cnt $on   loopback 			  ($bitcast ($uint<8>) 0  ) $on   $entry 
    // type of target is $uint<8>
    $phi chl_max_itr := 			  n_cmi $on   loopback 			  max_chl $on   $entry 
    // type of target is $uint<16>
    $phi chl_left := 			  n_chl_left $on   loopback 			  (chl_out - max_chl) $on   $entry 
    // type of target is $uint<16>
    $endmerge
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi chl := 			  ( $mux chl_done 0   (chl + 1 ) )  $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    $phi num := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  ( $mux chl_done ( $mux nd 0   (num + 1 ) )   num )  $on   $loopback 
    // type of target is $uint<2>
    $phi chl_out_var := 			  ( $mux num_done ( $mux chl_done_flag 1   (chl_out_var + 8 ) )   chl_out_var )  $on   $loopback 			  ($bitcast ($uint<16>) 1  ) $on   $entry 
    // type of target is $uint<16>
    $phi col := 			  ( $mux chl_done_flag ( $mux col_done 0   (col + 1 ) )   col )  $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    $phi row := 			  ( $mux col_done (row + 2 )  row )  $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    $endmerge
    $volatile nd := (num == ck_s) $buffering 1
    $volatile chl_done := (chl >= chl_in) $buffering 1
    $volatile num_done := (nd & chl_done) $buffering 1
    $volatile chl_done_flag := (((chl_out_var + 8 ) > chl_max_itr) & num_done) $buffering 1
    $volatile last_col := (col == num_col) $buffering 1
    $volatile col_done := (last_col & chl_done_flag) $buffering 1
    $volatile out_done_flag := (row >= num_row) $buffering 1
    $volatile all_done_flag := (out_done_flag & col_done) $buffering 1
    $volatile o_chl1_valid := (chl_out_var <= chl_max_itr) $buffering 1
    $volatile o_chl2_valid := ((chl_out_var + 1 ) <= chl_max_itr) $buffering 1
    $volatile o_chl3_valid := ((chl_out_var + 2 ) <= chl_max_itr) $buffering 1
    $volatile o_chl4_valid := ((chl_out_var + 3 ) <= chl_max_itr) $buffering 1
    $volatile o_chl5_valid := ((chl_out_var + 4 ) <= chl_max_itr) $buffering 1
    $volatile o_chl6_valid := ((chl_out_var + 5 ) <= chl_max_itr) $buffering 1
    $volatile o_chl7_valid := ((chl_out_var + 6 ) <= chl_max_itr) $buffering 1
    $volatile o_chl8_valid := ((chl_out_var + 7 ) <= chl_max_itr) $buffering 1
    $volatile read_ip := (((col == 0 ) | nd) & (chl_out_var == 1 )) $buffering 1
    $volatile not_read_ip := ( ~ read_ip ) $buffering 1
    $volatile write_input := (((chl_out_var + 8 ) < chl_max_itr) | ((col < num_col) & (num > 0 ))) $buffering 1
    $volatile read_k := ((col == 0 ) & (row == 0 )) $buffering 1
    $volatile not_read_k := ( ~ read_k ) $buffering 1
    $volatile store_kernel := (out_done_flag ~& last_col) $buffering 1
    $volatile read_ip3 := (not_mode_2 & read_ip) $buffering 1
    $volatile not_read_ip3 := (not_mode_2 & not_read_ip) $buffering 1
    $volatile write_input3 := (write_input & not_mode_2) $buffering 1
    $guard (read_ip) temp2_1 := core_ip1 $buffering 1// bits of buffering = 64. 
    $guard (not_read_ip) temp1_1 := conv_ip1 $buffering 1// bits of buffering = 64. 
    read_ip_2079_delayed_1_0 := read_ip $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile iread1 := ( $mux read_ip_2079_delayed_1_0 temp2_1  temp1_1 )  $buffering 1
    write_input_2084_delayed_1_0 := write_input $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (write_input_2084_delayed_1_0) conv_ip1 := iread1 $buffering 1// bits of buffering = 64. 
    ir1_1 := ( $slice iread1 63 56 )  $buffering 1// bits of buffering = 8. 
    ir2_1 := ( $slice iread1 55 48 )  $buffering 1// bits of buffering = 8. 
    ir3_1 := ( $slice iread1 47 40 )  $buffering 1// bits of buffering = 8. 
    ir4_1 := ( $slice iread1 39 32 )  $buffering 1// bits of buffering = 8. 
    ir5_1 := ( $slice iread1 31 24 )  $buffering 1// bits of buffering = 8. 
    ir6_1 := ( $slice iread1 23 16 )  $buffering 1// bits of buffering = 8. 
    ir7_1 := ( $slice iread1 15 8 )  $buffering 1// bits of buffering = 8. 
    ir8_1 := ( $slice iread1 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile ival1_1 := ($bitcast ($int<8>) ir1_1 ) $buffering 1
    $volatile ival2_1 := ($bitcast ($int<8>) ir2_1 ) $buffering 1
    $volatile ival3_1 := ($bitcast ($int<8>) ir3_1 ) $buffering 1
    $volatile ival4_1 := ($bitcast ($int<8>) ir4_1 ) $buffering 1
    $volatile ival5_1 := ($bitcast ($int<8>) ir5_1 ) $buffering 1
    $volatile ival6_1 := ($bitcast ($int<8>) ir6_1 ) $buffering 1
    $volatile ival7_1 := ($bitcast ($int<8>) ir7_1 ) $buffering 1
    $volatile ival8_1 := ($bitcast ($int<8>) ir8_1 ) $buffering 1
    $guard (read_ip) temp2_2 := core_ip2 $buffering 1// bits of buffering = 64. 
    $guard (not_read_ip) temp1_2 := conv_ip2 $buffering 1// bits of buffering = 64. 
    read_ip_2162_delayed_1_0 := read_ip $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile iread2 := ( $mux read_ip_2162_delayed_1_0 temp2_2  temp1_2 )  $buffering 1
    write_input_2167_delayed_1_0 := write_input $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (write_input_2167_delayed_1_0) conv_ip2 := iread2 $buffering 1// bits of buffering = 64. 
    ir1_2 := ( $slice iread2 63 56 )  $buffering 1// bits of buffering = 8. 
    ir2_2 := ( $slice iread2 55 48 )  $buffering 1// bits of buffering = 8. 
    ir3_2 := ( $slice iread2 47 40 )  $buffering 1// bits of buffering = 8. 
    ir4_2 := ( $slice iread2 39 32 )  $buffering 1// bits of buffering = 8. 
    ir5_2 := ( $slice iread2 31 24 )  $buffering 1// bits of buffering = 8. 
    ir6_2 := ( $slice iread2 23 16 )  $buffering 1// bits of buffering = 8. 
    ir7_2 := ( $slice iread2 15 8 )  $buffering 1// bits of buffering = 8. 
    ir8_2 := ( $slice iread2 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile ival1_2 := ($bitcast ($int<8>) ir1_2 ) $buffering 1
    $volatile ival2_2 := ($bitcast ($int<8>) ir2_2 ) $buffering 1
    $volatile ival3_2 := ($bitcast ($int<8>) ir3_2 ) $buffering 1
    $volatile ival4_2 := ($bitcast ($int<8>) ir4_2 ) $buffering 1
    $volatile ival5_2 := ($bitcast ($int<8>) ir5_2 ) $buffering 1
    $volatile ival6_2 := ($bitcast ($int<8>) ir6_2 ) $buffering 1
    $volatile ival7_2 := ($bitcast ($int<8>) ir7_2 ) $buffering 1
    $volatile ival8_2 := ($bitcast ($int<8>) ir8_2 ) $buffering 1
    $guard (read_ip) temp2_3 := core_ip3 $buffering 1// bits of buffering = 64. 
    $guard (not_read_ip) temp1_3 := conv_ip3 $buffering 1// bits of buffering = 64. 
    read_ip_2244_delayed_1_0 := read_ip $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile iread3 := ( $mux read_ip_2244_delayed_1_0 temp2_3  temp1_3 )  $buffering 1
    write_input_2249_delayed_1_0 := write_input $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (write_input_2249_delayed_1_0) conv_ip3 := iread3 $buffering 1// bits of buffering = 64. 
    ir1_3 := ( $slice iread3 63 56 )  $buffering 1// bits of buffering = 8. 
    ir2_3 := ( $slice iread3 55 48 )  $buffering 1// bits of buffering = 8. 
    ir3_3 := ( $slice iread3 47 40 )  $buffering 1// bits of buffering = 8. 
    ir4_3 := ( $slice iread3 39 32 )  $buffering 1// bits of buffering = 8. 
    ir5_3 := ( $slice iread3 31 24 )  $buffering 1// bits of buffering = 8. 
    ir6_3 := ( $slice iread3 23 16 )  $buffering 1// bits of buffering = 8. 
    ir7_3 := ( $slice iread3 15 8 )  $buffering 1// bits of buffering = 8. 
    ir8_3 := ( $slice iread3 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile ival1_3 := ($bitcast ($int<8>) ir1_3 ) $buffering 1
    $volatile ival2_3 := ($bitcast ($int<8>) ir2_3 ) $buffering 1
    $volatile ival3_3 := ($bitcast ($int<8>) ir3_3 ) $buffering 1
    $volatile ival4_3 := ($bitcast ($int<8>) ir4_3 ) $buffering 1
    $volatile ival5_3 := ($bitcast ($int<8>) ir5_3 ) $buffering 1
    $volatile ival6_3 := ($bitcast ($int<8>) ir6_3 ) $buffering 1
    $volatile ival7_3 := ($bitcast ($int<8>) ir7_3 ) $buffering 1
    $volatile ival8_3 := ($bitcast ($int<8>) ir8_3 ) $buffering 1
    $guard (read_ip3) temp2_4 := core_ip4 $buffering 1// bits of buffering = 64. 
    $guard (not_read_ip3) temp1_4 := conv_ip4 $buffering 1// bits of buffering = 64. 
    read_ip_2328_delayed_1_0 := read_ip $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile iread4 := ( $mux mode_2 0   ( $mux read_ip_2328_delayed_1_0 temp2_4  temp1_4 )  )  $buffering 1
    write_input3_2334_delayed_1_0 := write_input3 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (write_input3_2334_delayed_1_0) conv_ip4 := iread4 $buffering 1// bits of buffering = 64. 
    ir1_4 := ( $slice iread4 63 56 )  $buffering 1// bits of buffering = 8. 
    ir2_4 := ( $slice iread4 55 48 )  $buffering 1// bits of buffering = 8. 
    ir3_4 := ( $slice iread4 47 40 )  $buffering 1// bits of buffering = 8. 
    ir4_4 := ( $slice iread4 39 32 )  $buffering 1// bits of buffering = 8. 
    ir5_4 := ( $slice iread4 31 24 )  $buffering 1// bits of buffering = 8. 
    ir6_4 := ( $slice iread4 23 16 )  $buffering 1// bits of buffering = 8. 
    ir7_4 := ( $slice iread4 15 8 )  $buffering 1// bits of buffering = 8. 
    ir8_4 := ( $slice iread4 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile ival1_4 := ($bitcast ($int<8>) ir1_4 ) $buffering 1
    $volatile ival2_4 := ($bitcast ($int<8>) ir2_4 ) $buffering 1
    $volatile ival3_4 := ($bitcast ($int<8>) ir3_4 ) $buffering 1
    $volatile ival4_4 := ($bitcast ($int<8>) ir4_4 ) $buffering 1
    $volatile ival5_4 := ($bitcast ($int<8>) ir5_4 ) $buffering 1
    $volatile ival6_4 := ($bitcast ($int<8>) ir6_4 ) $buffering 1
    $volatile ival7_4 := ($bitcast ($int<8>) ir7_4 ) $buffering 1
    $volatile ival8_4 := ($bitcast ($int<8>) ir8_4 ) $buffering 1
    $volatile readk_3 := (read_k & not_mode_2) $buffering 1
    $volatile not_readk_3 := (not_read_k & not_mode_2) $buffering 1
    $volatile store_3 := (store_kernel & not_mode_2) $buffering 1
    $volatile rk_v1 := (read_k & o_chl1_valid) $buffering 1
    $volatile nrk_v1 := (not_read_k & o_chl1_valid) $buffering 1
    $guard (rk_v1) tempk1_1_1 := core1_kp1 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v1) tempk2_1_1 := conv1_kp1 $buffering 1// bits of buffering = 64. 
    o_chl1_valid_2436_delayed_1_0 := o_chl1_valid $buffering 1 $cut_through // bits of buffering = 1. 
    read_k_2437_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_1_1 := ( $mux o_chl1_valid_2436_delayed_1_0 ( $mux read_k_2437_delayed_1_0 tempk1_1_1  tempk2_1_1 )   0  )  $buffering 1
    kr_1_1_1 := ( $slice kread_1_1 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_1_2_1 := ( $slice kread_1_1 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_1_3_1 := ( $slice kread_1_1 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_1_4_1 := ( $slice kread_1_1 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_1_5_1 := ( $slice kread_1_1 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_1_6_1 := ( $slice kread_1_1 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_1_7_1 := ( $slice kread_1_1 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_1_8_1 := ( $slice kread_1_1 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_1_1_1 := ($bitcast ($int<8>) kr_1_1_1 ) $buffering 1
    $volatile kval_1_2_1 := ($bitcast ($int<8>) kr_1_2_1 ) $buffering 1
    $volatile kval_1_3_1 := ($bitcast ($int<8>) kr_1_3_1 ) $buffering 1
    $volatile kval_1_4_1 := ($bitcast ($int<8>) kr_1_4_1 ) $buffering 1
    $volatile kval_1_5_1 := ($bitcast ($int<8>) kr_1_5_1 ) $buffering 1
    $volatile kval_1_6_1 := ($bitcast ($int<8>) kr_1_6_1 ) $buffering 1
    $volatile kval_1_7_1 := ($bitcast ($int<8>) kr_1_7_1 ) $buffering 1
    $volatile kval_1_8_1 := ($bitcast ($int<8>) kr_1_8_1 ) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_1 ) ($cast ($int<16>) kval_1_1_1 ) ) (mul_val_1_1_1 time_pipe_1_1_1 ) 
    $call multiplier (($cast ($int<16>) ival2_1 ) ($cast ($int<16>) kval_1_2_1 ) ) (mul_val_1_2_1 time_pipe_1_2_1 ) 
    $call multiplier (($cast ($int<16>) ival3_1 ) ($cast ($int<16>) kval_1_3_1 ) ) (mul_val_1_3_1 time_pipe_1_3_1 ) 
    $call multiplier (($cast ($int<16>) ival4_1 ) ($cast ($int<16>) kval_1_4_1 ) ) (mul_val_1_4_1 time_pipe_1_4_1 ) 
    $call multiplier (($cast ($int<16>) ival5_1 ) ($cast ($int<16>) kval_1_5_1 ) ) (mul_val_1_5_1 time_pipe_1_5_1 ) 
    $call multiplier (($cast ($int<16>) ival6_1 ) ($cast ($int<16>) kval_1_6_1 ) ) (mul_val_1_6_1 time_pipe_1_6_1 ) 
    $call multiplier (($cast ($int<16>) ival7_1 ) ($cast ($int<16>) kval_1_7_1 ) ) (mul_val_1_7_1 time_pipe_1_7_1 ) 
    $call multiplier (($cast ($int<16>) ival8_1 ) ($cast ($int<16>) kval_1_8_1 ) ) (mul_val_1_8_1 time_pipe_1_8_1 ) 
    $volatile t_acc_val_1_1 := (((mul_val_1_1_1 + mul_val_1_2_1) + (mul_val_1_3_1 + mul_val_1_4_1)) + ((mul_val_1_5_1 + mul_val_1_6_1) + (mul_val_1_7_1 + mul_val_1_8_1))) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_2 ) ($cast ($int<16>) kval_1_1_1 ) ) (mul_val_1_1_4 time_pipe_1_1_4 ) 
    $call multiplier (($cast ($int<16>) ival2_2 ) ($cast ($int<16>) kval_1_2_1 ) ) (mul_val_1_2_4 time_pipe_1_2_4 ) 
    $call multiplier (($cast ($int<16>) ival3_2 ) ($cast ($int<16>) kval_1_3_1 ) ) (mul_val_1_3_4 time_pipe_1_3_4 ) 
    $call multiplier (($cast ($int<16>) ival4_2 ) ($cast ($int<16>) kval_1_4_1 ) ) (mul_val_1_4_4 time_pipe_1_4_4 ) 
    $call multiplier (($cast ($int<16>) ival5_2 ) ($cast ($int<16>) kval_1_5_1 ) ) (mul_val_1_5_4 time_pipe_1_5_4 ) 
    $call multiplier (($cast ($int<16>) ival6_2 ) ($cast ($int<16>) kval_1_6_1 ) ) (mul_val_1_6_4 time_pipe_1_6_4 ) 
    $call multiplier (($cast ($int<16>) ival7_2 ) ($cast ($int<16>) kval_1_7_1 ) ) (mul_val_1_7_4 time_pipe_1_7_4 ) 
    $call multiplier (($cast ($int<16>) ival8_2 ) ($cast ($int<16>) kval_1_8_1 ) ) (mul_val_1_8_4 time_pipe_1_8_4 ) 
    $volatile t_acc_val_1_4 := (((mul_val_1_1_4 + mul_val_1_2_4) + (mul_val_1_3_4 + mul_val_1_4_4)) + ((mul_val_1_5_4 + mul_val_1_6_4) + (mul_val_1_7_4 + mul_val_1_8_4))) $buffering 1
    $guard (rk_v1) tempk1_1_2 := core1_kp2 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v1) tempk2_1_2 := conv1_kp2 $buffering 1// bits of buffering = 64. 
    o_chl1_valid_2663_delayed_1_0 := o_chl1_valid $buffering 1 $cut_through // bits of buffering = 1. 
    read_k_2664_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_1_2 := ( $mux o_chl1_valid_2663_delayed_1_0 ( $mux read_k_2664_delayed_1_0 tempk1_1_2  tempk2_1_2 )   0  )  $buffering 1
    kr_1_1_2 := ( $slice kread_1_2 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_1_2_2 := ( $slice kread_1_2 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_1_3_2 := ( $slice kread_1_2 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_1_4_2 := ( $slice kread_1_2 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_1_5_2 := ( $slice kread_1_2 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_1_6_2 := ( $slice kread_1_2 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_1_7_2 := ( $slice kread_1_2 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_1_8_2 := ( $slice kread_1_2 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_1_1_2 := ($bitcast ($int<8>) kr_1_1_2 ) $buffering 1
    $volatile kval_1_2_2 := ($bitcast ($int<8>) kr_1_2_2 ) $buffering 1
    $volatile kval_1_3_2 := ($bitcast ($int<8>) kr_1_3_2 ) $buffering 1
    $volatile kval_1_4_2 := ($bitcast ($int<8>) kr_1_4_2 ) $buffering 1
    $volatile kval_1_5_2 := ($bitcast ($int<8>) kr_1_5_2 ) $buffering 1
    $volatile kval_1_6_2 := ($bitcast ($int<8>) kr_1_6_2 ) $buffering 1
    $volatile kval_1_7_2 := ($bitcast ($int<8>) kr_1_7_2 ) $buffering 1
    $volatile kval_1_8_2 := ($bitcast ($int<8>) kr_1_8_2 ) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_2 ) ($cast ($int<16>) kval_1_1_2 ) ) (mul_val_1_1_2 time_pipe_1_1_2 ) 
    $call multiplier (($cast ($int<16>) ival2_2 ) ($cast ($int<16>) kval_1_2_2 ) ) (mul_val_1_2_2 time_pipe_1_2_2 ) 
    $call multiplier (($cast ($int<16>) ival3_2 ) ($cast ($int<16>) kval_1_3_2 ) ) (mul_val_1_3_2 time_pipe_1_3_2 ) 
    $call multiplier (($cast ($int<16>) ival4_2 ) ($cast ($int<16>) kval_1_4_2 ) ) (mul_val_1_4_2 time_pipe_1_4_2 ) 
    $call multiplier (($cast ($int<16>) ival5_2 ) ($cast ($int<16>) kval_1_5_2 ) ) (mul_val_1_5_2 time_pipe_1_5_2 ) 
    $call multiplier (($cast ($int<16>) ival6_2 ) ($cast ($int<16>) kval_1_6_2 ) ) (mul_val_1_6_2 time_pipe_1_6_2 ) 
    $call multiplier (($cast ($int<16>) ival7_2 ) ($cast ($int<16>) kval_1_7_2 ) ) (mul_val_1_7_2 time_pipe_1_7_2 ) 
    $call multiplier (($cast ($int<16>) ival8_2 ) ($cast ($int<16>) kval_1_8_2 ) ) (mul_val_1_8_2 time_pipe_1_8_2 ) 
    $volatile t_acc_val_1_2 := (((mul_val_1_1_2 + mul_val_1_2_2) + (mul_val_1_3_2 + mul_val_1_4_2)) + ((mul_val_1_5_2 + mul_val_1_6_2) + (mul_val_1_7_2 + mul_val_1_8_2))) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_3 ) ($cast ($int<16>) kval_1_1_2 ) ) (mul_val_1_1_5 time_pipe_1_1_5 ) 
    $call multiplier (($cast ($int<16>) ival2_3 ) ($cast ($int<16>) kval_1_2_2 ) ) (mul_val_1_2_5 time_pipe_1_2_5 ) 
    $call multiplier (($cast ($int<16>) ival3_3 ) ($cast ($int<16>) kval_1_3_2 ) ) (mul_val_1_3_5 time_pipe_1_3_5 ) 
    $call multiplier (($cast ($int<16>) ival4_3 ) ($cast ($int<16>) kval_1_4_2 ) ) (mul_val_1_4_5 time_pipe_1_4_5 ) 
    $call multiplier (($cast ($int<16>) ival5_3 ) ($cast ($int<16>) kval_1_5_2 ) ) (mul_val_1_5_5 time_pipe_1_5_5 ) 
    $call multiplier (($cast ($int<16>) ival6_3 ) ($cast ($int<16>) kval_1_6_2 ) ) (mul_val_1_6_5 time_pipe_1_6_5 ) 
    $call multiplier (($cast ($int<16>) ival7_3 ) ($cast ($int<16>) kval_1_7_2 ) ) (mul_val_1_7_5 time_pipe_1_7_5 ) 
    $call multiplier (($cast ($int<16>) ival8_3 ) ($cast ($int<16>) kval_1_8_2 ) ) (mul_val_1_8_5 time_pipe_1_8_5 ) 
    $volatile t_acc_val_1_5 := (((mul_val_1_1_5 + mul_val_1_2_5) + (mul_val_1_3_5 + mul_val_1_4_5)) + ((mul_val_1_5_5 + mul_val_1_6_5) + (mul_val_1_7_5 + mul_val_1_8_5))) $buffering 1
    $volatile rk_3v1 := (readk_3 & o_chl1_valid) $buffering 1
    $volatile nrk_3v1 := (not_readk_3 & o_chl1_valid) $buffering 1
    $guard (rk_3v1) tempk1_1_3 := core1_kp3 $buffering 1// bits of buffering = 64. 
    $guard (nrk_3v1) tempk2_1_3 := conv1_kp3 $buffering 1// bits of buffering = 64. 
    o_chl1_valid_2900_delayed_1_0 := o_chl1_valid $buffering 1 $cut_through // bits of buffering = 1. 
    read_k_2903_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_1_3 := ( $mux o_chl1_valid_2900_delayed_1_0 ( $mux mode_2 0   ( $mux read_k_2903_delayed_1_0 tempk1_1_3  tempk2_1_3 )  )   0  )  $buffering 1
    kr_1_1_3 := ( $slice kread_1_3 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_1_2_3 := ( $slice kread_1_3 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_1_3_3 := ( $slice kread_1_3 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_1_4_3 := ( $slice kread_1_3 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_1_5_3 := ( $slice kread_1_3 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_1_6_3 := ( $slice kread_1_3 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_1_7_3 := ( $slice kread_1_3 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_1_8_3 := ( $slice kread_1_3 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_1_1_3 := ($bitcast ($int<8>) kr_1_1_3 ) $buffering 1
    $volatile kval_1_2_3 := ($bitcast ($int<8>) kr_1_2_3 ) $buffering 1
    $volatile kval_1_3_3 := ($bitcast ($int<8>) kr_1_3_3 ) $buffering 1
    $volatile kval_1_4_3 := ($bitcast ($int<8>) kr_1_4_3 ) $buffering 1
    $volatile kval_1_5_3 := ($bitcast ($int<8>) kr_1_5_3 ) $buffering 1
    $volatile kval_1_6_3 := ($bitcast ($int<8>) kr_1_6_3 ) $buffering 1
    $volatile kval_1_7_3 := ($bitcast ($int<8>) kr_1_7_3 ) $buffering 1
    $volatile kval_1_8_3 := ($bitcast ($int<8>) kr_1_8_3 ) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_3 ) ($cast ($int<16>) kval_1_1_3 ) ) (mul_val_1_1_3 time_pipe_1_1_3 ) 
    $call multiplier (($cast ($int<16>) ival2_3 ) ($cast ($int<16>) kval_1_2_3 ) ) (mul_val_1_2_3 time_pipe_1_2_3 ) 
    $call multiplier (($cast ($int<16>) ival3_3 ) ($cast ($int<16>) kval_1_3_3 ) ) (mul_val_1_3_3 time_pipe_1_3_3 ) 
    $call multiplier (($cast ($int<16>) ival4_3 ) ($cast ($int<16>) kval_1_4_3 ) ) (mul_val_1_4_3 time_pipe_1_4_3 ) 
    $call multiplier (($cast ($int<16>) ival5_3 ) ($cast ($int<16>) kval_1_5_3 ) ) (mul_val_1_5_3 time_pipe_1_5_3 ) 
    $call multiplier (($cast ($int<16>) ival6_3 ) ($cast ($int<16>) kval_1_6_3 ) ) (mul_val_1_6_3 time_pipe_1_6_3 ) 
    $call multiplier (($cast ($int<16>) ival7_3 ) ($cast ($int<16>) kval_1_7_3 ) ) (mul_val_1_7_3 time_pipe_1_7_3 ) 
    $call multiplier (($cast ($int<16>) ival8_3 ) ($cast ($int<16>) kval_1_8_3 ) ) (mul_val_1_8_3 time_pipe_1_8_3 ) 
    $volatile t_acc_val_1_3 := (((mul_val_1_1_3 + mul_val_1_2_3) + (mul_val_1_3_3 + mul_val_1_4_3)) + ((mul_val_1_5_3 + mul_val_1_6_3) + (mul_val_1_7_3 + mul_val_1_8_3))) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_4 ) ($cast ($int<16>) kval_1_1_3 ) ) (mul_val_1_1_6 time_pipe_1_1_6 ) 
    $call multiplier (($cast ($int<16>) ival2_4 ) ($cast ($int<16>) kval_1_2_3 ) ) (mul_val_1_2_6 time_pipe_1_2_6 ) 
    $call multiplier (($cast ($int<16>) ival3_4 ) ($cast ($int<16>) kval_1_3_3 ) ) (mul_val_1_3_6 time_pipe_1_3_6 ) 
    $call multiplier (($cast ($int<16>) ival4_4 ) ($cast ($int<16>) kval_1_4_3 ) ) (mul_val_1_4_6 time_pipe_1_4_6 ) 
    $call multiplier (($cast ($int<16>) ival5_4 ) ($cast ($int<16>) kval_1_5_3 ) ) (mul_val_1_5_6 time_pipe_1_5_6 ) 
    $call multiplier (($cast ($int<16>) ival6_4 ) ($cast ($int<16>) kval_1_6_3 ) ) (mul_val_1_6_6 time_pipe_1_6_6 ) 
    $call multiplier (($cast ($int<16>) ival7_4 ) ($cast ($int<16>) kval_1_7_3 ) ) (mul_val_1_7_6 time_pipe_1_7_6 ) 
    $call multiplier (($cast ($int<16>) ival8_4 ) ($cast ($int<16>) kval_1_8_3 ) ) (mul_val_1_8_6 time_pipe_1_8_6 ) 
    $volatile t_acc_val_1_6 := (((mul_val_1_1_6 + mul_val_1_2_6) + (mul_val_1_3_6 + mul_val_1_4_6)) + ((mul_val_1_5_6 + mul_val_1_6_6) + (mul_val_1_7_6 + mul_val_1_8_6))) $buffering 1
    $volatile acc_val1_1 := ((t_acc_val_1_1 + t_acc_val_1_2) + t_acc_val_1_3) $buffering 1
    $volatile acc_val1_2 := ((t_acc_val_1_4 + t_acc_val_1_5) + t_acc_val_1_6) $buffering 1
    $volatile store_kernel1 := (store_kernel & o_chl1_valid) $buffering 1
    $volatile store_31 := (store_3 & o_chl1_valid) $buffering 1
    store_kernel1_3145_delayed_1_0 := store_kernel1 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel1_3145_delayed_1_0) conv1_kp1 := kread_1_1 $buffering 1// bits of buffering = 64. 
    store_kernel1_3149_delayed_1_0 := store_kernel1 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel1_3149_delayed_1_0) conv1_kp2 := kread_1_2 $buffering 1// bits of buffering = 64. 
    store_31_3153_delayed_1_0 := store_31 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_31_3153_delayed_1_0) conv1_kp3 := kread_1_3 $buffering 1// bits of buffering = 64. 
    $volatile rk_v2 := (read_k & o_chl2_valid) $buffering 1
    $volatile nrk_v2 := (not_read_k & o_chl2_valid) $buffering 1
    $guard (rk_v2) tempk1_2_1 := core2_kp1 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v2) tempk2_2_1 := conv2_kp1 $buffering 1// bits of buffering = 64. 
    o_chl2_valid_3176_delayed_1_0 := o_chl2_valid $buffering 1 $cut_through // bits of buffering = 1. 
    read_k_3177_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_2_1 := ( $mux o_chl2_valid_3176_delayed_1_0 ( $mux read_k_3177_delayed_1_0 tempk1_2_1  tempk2_2_1 )   0  )  $buffering 1
    kr_2_1_1 := ( $slice kread_2_1 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_2_2_1 := ( $slice kread_2_1 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_2_3_1 := ( $slice kread_2_1 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_2_4_1 := ( $slice kread_2_1 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_2_5_1 := ( $slice kread_2_1 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_2_6_1 := ( $slice kread_2_1 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_2_7_1 := ( $slice kread_2_1 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_2_8_1 := ( $slice kread_2_1 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_2_1_1 := ($bitcast ($int<8>) kr_2_1_1 ) $buffering 1
    $volatile kval_2_2_1 := ($bitcast ($int<8>) kr_2_2_1 ) $buffering 1
    $volatile kval_2_3_1 := ($bitcast ($int<8>) kr_2_3_1 ) $buffering 1
    $volatile kval_2_4_1 := ($bitcast ($int<8>) kr_2_4_1 ) $buffering 1
    $volatile kval_2_5_1 := ($bitcast ($int<8>) kr_2_5_1 ) $buffering 1
    $volatile kval_2_6_1 := ($bitcast ($int<8>) kr_2_6_1 ) $buffering 1
    $volatile kval_2_7_1 := ($bitcast ($int<8>) kr_2_7_1 ) $buffering 1
    $volatile kval_2_8_1 := ($bitcast ($int<8>) kr_2_8_1 ) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_1 ) ($cast ($int<16>) kval_2_1_1 ) ) (mul_val_2_1_1 time_pipe_2_1_1 ) 
    $call multiplier (($cast ($int<16>) ival2_1 ) ($cast ($int<16>) kval_2_2_1 ) ) (mul_val_2_2_1 time_pipe_2_2_1 ) 
    $call multiplier (($cast ($int<16>) ival3_1 ) ($cast ($int<16>) kval_2_3_1 ) ) (mul_val_2_3_1 time_pipe_2_3_1 ) 
    $call multiplier (($cast ($int<16>) ival4_1 ) ($cast ($int<16>) kval_2_4_1 ) ) (mul_val_2_4_1 time_pipe_2_4_1 ) 
    $call multiplier (($cast ($int<16>) ival5_1 ) ($cast ($int<16>) kval_2_5_1 ) ) (mul_val_2_5_1 time_pipe_2_5_1 ) 
    $call multiplier (($cast ($int<16>) ival6_1 ) ($cast ($int<16>) kval_2_6_1 ) ) (mul_val_2_6_1 time_pipe_2_6_1 ) 
    $call multiplier (($cast ($int<16>) ival7_1 ) ($cast ($int<16>) kval_2_7_1 ) ) (mul_val_2_7_1 time_pipe_2_7_1 ) 
    $call multiplier (($cast ($int<16>) ival8_1 ) ($cast ($int<16>) kval_2_8_1 ) ) (mul_val_2_8_1 time_pipe_2_8_1 ) 
    $volatile t_acc_val_2_1 := (((mul_val_2_1_1 + mul_val_2_2_1) + (mul_val_2_3_1 + mul_val_2_4_1)) + ((mul_val_2_5_1 + mul_val_2_6_1) + (mul_val_2_7_1 + mul_val_2_8_1))) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_2 ) ($cast ($int<16>) kval_2_1_1 ) ) (mul_val_2_1_4 time_pipe_2_1_4 ) 
    $call multiplier (($cast ($int<16>) ival2_2 ) ($cast ($int<16>) kval_2_2_1 ) ) (mul_val_2_2_4 time_pipe_2_2_4 ) 
    $call multiplier (($cast ($int<16>) ival3_2 ) ($cast ($int<16>) kval_2_3_1 ) ) (mul_val_2_3_4 time_pipe_2_3_4 ) 
    $call multiplier (($cast ($int<16>) ival4_2 ) ($cast ($int<16>) kval_2_4_1 ) ) (mul_val_2_4_4 time_pipe_2_4_4 ) 
    $call multiplier (($cast ($int<16>) ival5_2 ) ($cast ($int<16>) kval_2_5_1 ) ) (mul_val_2_5_4 time_pipe_2_5_4 ) 
    $call multiplier (($cast ($int<16>) ival6_2 ) ($cast ($int<16>) kval_2_6_1 ) ) (mul_val_2_6_4 time_pipe_2_6_4 ) 
    $call multiplier (($cast ($int<16>) ival7_2 ) ($cast ($int<16>) kval_2_7_1 ) ) (mul_val_2_7_4 time_pipe_2_7_4 ) 
    $call multiplier (($cast ($int<16>) ival8_2 ) ($cast ($int<16>) kval_2_8_1 ) ) (mul_val_2_8_4 time_pipe_2_8_4 ) 
    $volatile t_acc_val_2_4 := (((mul_val_2_1_4 + mul_val_2_2_4) + (mul_val_2_3_4 + mul_val_2_4_4)) + ((mul_val_2_5_4 + mul_val_2_6_4) + (mul_val_2_7_4 + mul_val_2_8_4))) $buffering 1
    $guard (rk_v2) tempk1_2_2 := core2_kp2 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v2) tempk2_2_2 := conv2_kp2 $buffering 1// bits of buffering = 64. 
    o_chl2_valid_3403_delayed_1_0 := o_chl2_valid $buffering 1 $cut_through // bits of buffering = 1. 
    read_k_3404_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_2_2 := ( $mux o_chl2_valid_3403_delayed_1_0 ( $mux read_k_3404_delayed_1_0 tempk1_2_2  tempk2_2_2 )   0  )  $buffering 1
    kr_2_1_2 := ( $slice kread_2_2 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_2_2_2 := ( $slice kread_2_2 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_2_3_2 := ( $slice kread_2_2 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_2_4_2 := ( $slice kread_2_2 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_2_5_2 := ( $slice kread_2_2 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_2_6_2 := ( $slice kread_2_2 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_2_7_2 := ( $slice kread_2_2 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_2_8_2 := ( $slice kread_2_2 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_2_1_2 := ($bitcast ($int<8>) kr_2_1_2 ) $buffering 1
    $volatile kval_2_2_2 := ($bitcast ($int<8>) kr_2_2_2 ) $buffering 1
    $volatile kval_2_3_2 := ($bitcast ($int<8>) kr_2_3_2 ) $buffering 1
    $volatile kval_2_4_2 := ($bitcast ($int<8>) kr_2_4_2 ) $buffering 1
    $volatile kval_2_5_2 := ($bitcast ($int<8>) kr_2_5_2 ) $buffering 1
    $volatile kval_2_6_2 := ($bitcast ($int<8>) kr_2_6_2 ) $buffering 1
    $volatile kval_2_7_2 := ($bitcast ($int<8>) kr_2_7_2 ) $buffering 1
    $volatile kval_2_8_2 := ($bitcast ($int<8>) kr_2_8_2 ) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_2 ) ($cast ($int<16>) kval_2_1_2 ) ) (mul_val_2_1_2 time_pipe_2_1_2 ) 
    $call multiplier (($cast ($int<16>) ival2_2 ) ($cast ($int<16>) kval_2_2_2 ) ) (mul_val_2_2_2 time_pipe_2_2_2 ) 
    $call multiplier (($cast ($int<16>) ival3_2 ) ($cast ($int<16>) kval_2_3_2 ) ) (mul_val_2_3_2 time_pipe_2_3_2 ) 
    $call multiplier (($cast ($int<16>) ival4_2 ) ($cast ($int<16>) kval_2_4_2 ) ) (mul_val_2_4_2 time_pipe_2_4_2 ) 
    $call multiplier (($cast ($int<16>) ival5_2 ) ($cast ($int<16>) kval_2_5_2 ) ) (mul_val_2_5_2 time_pipe_2_5_2 ) 
    $call multiplier (($cast ($int<16>) ival6_2 ) ($cast ($int<16>) kval_2_6_2 ) ) (mul_val_2_6_2 time_pipe_2_6_2 ) 
    $call multiplier (($cast ($int<16>) ival7_2 ) ($cast ($int<16>) kval_2_7_2 ) ) (mul_val_2_7_2 time_pipe_2_7_2 ) 
    $call multiplier (($cast ($int<16>) ival8_2 ) ($cast ($int<16>) kval_2_8_2 ) ) (mul_val_2_8_2 time_pipe_2_8_2 ) 
    $volatile t_acc_val_2_2 := (((mul_val_2_1_2 + mul_val_2_2_2) + (mul_val_2_3_2 + mul_val_2_4_2)) + ((mul_val_2_5_2 + mul_val_2_6_2) + (mul_val_2_7_2 + mul_val_2_8_2))) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_3 ) ($cast ($int<16>) kval_2_1_2 ) ) (mul_val_2_1_5 time_pipe_2_1_5 ) 
    $call multiplier (($cast ($int<16>) ival2_3 ) ($cast ($int<16>) kval_2_2_2 ) ) (mul_val_2_2_5 time_pipe_2_2_5 ) 
    $call multiplier (($cast ($int<16>) ival3_3 ) ($cast ($int<16>) kval_2_3_2 ) ) (mul_val_2_3_5 time_pipe_2_3_5 ) 
    $call multiplier (($cast ($int<16>) ival4_3 ) ($cast ($int<16>) kval_2_4_2 ) ) (mul_val_2_4_5 time_pipe_2_4_5 ) 
    $call multiplier (($cast ($int<16>) ival5_3 ) ($cast ($int<16>) kval_2_5_2 ) ) (mul_val_2_5_5 time_pipe_2_5_5 ) 
    $call multiplier (($cast ($int<16>) ival6_3 ) ($cast ($int<16>) kval_2_6_2 ) ) (mul_val_2_6_5 time_pipe_2_6_5 ) 
    $call multiplier (($cast ($int<16>) ival7_3 ) ($cast ($int<16>) kval_2_7_2 ) ) (mul_val_2_7_5 time_pipe_2_7_5 ) 
    $call multiplier (($cast ($int<16>) ival8_3 ) ($cast ($int<16>) kval_2_8_2 ) ) (mul_val_2_8_5 time_pipe_2_8_5 ) 
    $volatile t_acc_val_2_5 := (((mul_val_2_1_5 + mul_val_2_2_5) + (mul_val_2_3_5 + mul_val_2_4_5)) + ((mul_val_2_5_5 + mul_val_2_6_5) + (mul_val_2_7_5 + mul_val_2_8_5))) $buffering 1
    $volatile rk_3v2 := (readk_3 & o_chl2_valid) $buffering 1
    $volatile nrk_3v2 := (not_readk_3 & o_chl2_valid) $buffering 1
    $guard (rk_3v2) tempk1_2_3 := core2_kp3 $buffering 1// bits of buffering = 64. 
    $guard (nrk_3v2) tempk2_2_3 := conv2_kp3 $buffering 1// bits of buffering = 64. 
    read_k_3643_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    o_chl2_valid_3640_delayed_1_0 := o_chl2_valid $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_2_3 := ( $mux o_chl2_valid_3640_delayed_1_0 ( $mux mode_2 0   ( $mux read_k_3643_delayed_1_0 tempk1_2_3  tempk2_2_3 )  )   0  )  $buffering 1
    kr_2_1_3 := ( $slice kread_2_3 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_2_2_3 := ( $slice kread_2_3 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_2_3_3 := ( $slice kread_2_3 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_2_4_3 := ( $slice kread_2_3 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_2_5_3 := ( $slice kread_2_3 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_2_6_3 := ( $slice kread_2_3 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_2_7_3 := ( $slice kread_2_3 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_2_8_3 := ( $slice kread_2_3 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_2_1_3 := ($bitcast ($int<8>) kr_2_1_3 ) $buffering 1
    $volatile kval_2_2_3 := ($bitcast ($int<8>) kr_2_2_3 ) $buffering 1
    $volatile kval_2_3_3 := ($bitcast ($int<8>) kr_2_3_3 ) $buffering 1
    $volatile kval_2_4_3 := ($bitcast ($int<8>) kr_2_4_3 ) $buffering 1
    $volatile kval_2_5_3 := ($bitcast ($int<8>) kr_2_5_3 ) $buffering 1
    $volatile kval_2_6_3 := ($bitcast ($int<8>) kr_2_6_3 ) $buffering 1
    $volatile kval_2_7_3 := ($bitcast ($int<8>) kr_2_7_3 ) $buffering 1
    $volatile kval_2_8_3 := ($bitcast ($int<8>) kr_2_8_3 ) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_3 ) ($cast ($int<16>) kval_2_1_3 ) ) (mul_val_2_1_3 time_pipe_2_1_3 ) 
    $call multiplier (($cast ($int<16>) ival2_3 ) ($cast ($int<16>) kval_2_2_3 ) ) (mul_val_2_2_3 time_pipe_2_2_3 ) 
    $call multiplier (($cast ($int<16>) ival3_3 ) ($cast ($int<16>) kval_2_3_3 ) ) (mul_val_2_3_3 time_pipe_2_3_3 ) 
    $call multiplier (($cast ($int<16>) ival4_3 ) ($cast ($int<16>) kval_2_4_3 ) ) (mul_val_2_4_3 time_pipe_2_4_3 ) 
    $call multiplier (($cast ($int<16>) ival5_3 ) ($cast ($int<16>) kval_2_5_3 ) ) (mul_val_2_5_3 time_pipe_2_5_3 ) 
    $call multiplier (($cast ($int<16>) ival6_3 ) ($cast ($int<16>) kval_2_6_3 ) ) (mul_val_2_6_3 time_pipe_2_6_3 ) 
    $call multiplier (($cast ($int<16>) ival7_3 ) ($cast ($int<16>) kval_2_7_3 ) ) (mul_val_2_7_3 time_pipe_2_7_3 ) 
    $call multiplier (($cast ($int<16>) ival8_3 ) ($cast ($int<16>) kval_2_8_3 ) ) (mul_val_2_8_3 time_pipe_2_8_3 ) 
    $volatile t_acc_val_2_3 := (((mul_val_2_1_3 + mul_val_2_2_3) + (mul_val_2_3_3 + mul_val_2_4_3)) + ((mul_val_2_5_3 + mul_val_2_6_3) + (mul_val_2_7_3 + mul_val_2_8_3))) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_4 ) ($cast ($int<16>) kval_2_1_3 ) ) (mul_val_2_1_6 time_pipe_2_1_6 ) 
    $call multiplier (($cast ($int<16>) ival2_4 ) ($cast ($int<16>) kval_2_2_3 ) ) (mul_val_2_2_6 time_pipe_2_2_6 ) 
    $call multiplier (($cast ($int<16>) ival3_4 ) ($cast ($int<16>) kval_2_3_3 ) ) (mul_val_2_3_6 time_pipe_2_3_6 ) 
    $call multiplier (($cast ($int<16>) ival4_4 ) ($cast ($int<16>) kval_2_4_3 ) ) (mul_val_2_4_6 time_pipe_2_4_6 ) 
    $call multiplier (($cast ($int<16>) ival5_4 ) ($cast ($int<16>) kval_2_5_3 ) ) (mul_val_2_5_6 time_pipe_2_5_6 ) 
    $call multiplier (($cast ($int<16>) ival6_4 ) ($cast ($int<16>) kval_2_6_3 ) ) (mul_val_2_6_6 time_pipe_2_6_6 ) 
    $call multiplier (($cast ($int<16>) ival7_4 ) ($cast ($int<16>) kval_2_7_3 ) ) (mul_val_2_7_6 time_pipe_2_7_6 ) 
    $call multiplier (($cast ($int<16>) ival8_4 ) ($cast ($int<16>) kval_2_8_3 ) ) (mul_val_2_8_6 time_pipe_2_8_6 ) 
    $volatile t_acc_val_2_6 := (((mul_val_2_1_6 + mul_val_2_2_6) + (mul_val_2_3_6 + mul_val_2_4_6)) + ((mul_val_2_5_6 + mul_val_2_6_6) + (mul_val_2_7_6 + mul_val_2_8_6))) $buffering 1
    $volatile acc_val2_1 := ((t_acc_val_2_1 + t_acc_val_2_2) + t_acc_val_2_3) $buffering 1
    $volatile acc_val2_2 := ((t_acc_val_2_4 + t_acc_val_2_5) + t_acc_val_2_6) $buffering 1
    $volatile store_kernel2 := (store_kernel & o_chl2_valid) $buffering 1
    $volatile store_32 := (store_3 & o_chl2_valid) $buffering 1
    store_kernel2_3885_delayed_1_0 := store_kernel2 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel2_3885_delayed_1_0) conv2_kp1 := kread_2_1 $buffering 1// bits of buffering = 64. 
    store_kernel2_3889_delayed_1_0 := store_kernel2 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel2_3889_delayed_1_0) conv2_kp2 := kread_2_2 $buffering 1// bits of buffering = 64. 
    store_32_3893_delayed_1_0 := store_32 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_32_3893_delayed_1_0) conv2_kp3 := kread_2_3 $buffering 1// bits of buffering = 64. 
    $volatile rk_v3 := (read_k & o_chl3_valid) $buffering 1
    $volatile nrk_v3 := (not_read_k & o_chl3_valid) $buffering 1
    $guard (rk_v3) tempk1_3_1 := core3_kp1 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v3) tempk2_3_1 := conv3_kp1 $buffering 1// bits of buffering = 64. 
    o_chl3_valid_3916_delayed_1_0 := o_chl3_valid $buffering 1 $cut_through // bits of buffering = 1. 
    read_k_3917_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_3_1 := ( $mux o_chl3_valid_3916_delayed_1_0 ( $mux read_k_3917_delayed_1_0 tempk1_3_1  tempk2_3_1 )   0  )  $buffering 1
    kr_3_1_1 := ( $slice kread_3_1 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_3_2_1 := ( $slice kread_3_1 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_3_3_1 := ( $slice kread_3_1 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_3_4_1 := ( $slice kread_3_1 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_3_5_1 := ( $slice kread_3_1 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_3_6_1 := ( $slice kread_3_1 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_3_7_1 := ( $slice kread_3_1 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_3_8_1 := ( $slice kread_3_1 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_3_1_1 := ($bitcast ($int<8>) kr_3_1_1 ) $buffering 1
    $volatile kval_3_2_1 := ($bitcast ($int<8>) kr_3_2_1 ) $buffering 1
    $volatile kval_3_3_1 := ($bitcast ($int<8>) kr_3_3_1 ) $buffering 1
    $volatile kval_3_4_1 := ($bitcast ($int<8>) kr_3_4_1 ) $buffering 1
    $volatile kval_3_5_1 := ($bitcast ($int<8>) kr_3_5_1 ) $buffering 1
    $volatile kval_3_6_1 := ($bitcast ($int<8>) kr_3_6_1 ) $buffering 1
    $volatile kval_3_7_1 := ($bitcast ($int<8>) kr_3_7_1 ) $buffering 1
    $volatile kval_3_8_1 := ($bitcast ($int<8>) kr_3_8_1 ) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_1 ) ($cast ($int<16>) kval_3_1_1 ) ) (mul_val_3_1_1 time_pipe_3_1_1 ) 
    $call multiplier (($cast ($int<16>) ival2_1 ) ($cast ($int<16>) kval_3_2_1 ) ) (mul_val_3_2_1 time_pipe_3_2_1 ) 
    $call multiplier (($cast ($int<16>) ival3_1 ) ($cast ($int<16>) kval_3_3_1 ) ) (mul_val_3_3_1 time_pipe_3_3_1 ) 
    $call multiplier (($cast ($int<16>) ival4_1 ) ($cast ($int<16>) kval_3_4_1 ) ) (mul_val_3_4_1 time_pipe_3_4_1 ) 
    $call multiplier (($cast ($int<16>) ival5_1 ) ($cast ($int<16>) kval_3_5_1 ) ) (mul_val_3_5_1 time_pipe_3_5_1 ) 
    $call multiplier (($cast ($int<16>) ival6_1 ) ($cast ($int<16>) kval_3_6_1 ) ) (mul_val_3_6_1 time_pipe_3_6_1 ) 
    $call multiplier (($cast ($int<16>) ival7_1 ) ($cast ($int<16>) kval_3_7_1 ) ) (mul_val_3_7_1 time_pipe_3_7_1 ) 
    $call multiplier (($cast ($int<16>) ival8_1 ) ($cast ($int<16>) kval_3_8_1 ) ) (mul_val_3_8_1 time_pipe_3_8_1 ) 
    $volatile t_acc_val_3_1 := (((mul_val_3_1_1 + mul_val_3_2_1) + (mul_val_3_3_1 + mul_val_3_4_1)) + ((mul_val_3_5_1 + mul_val_3_6_1) + (mul_val_3_7_1 + mul_val_3_8_1))) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_2 ) ($cast ($int<16>) kval_3_1_1 ) ) (mul_val_3_1_4 time_pipe_3_1_4 ) 
    $call multiplier (($cast ($int<16>) ival2_2 ) ($cast ($int<16>) kval_3_2_1 ) ) (mul_val_3_2_4 time_pipe_3_2_4 ) 
    $call multiplier (($cast ($int<16>) ival3_2 ) ($cast ($int<16>) kval_3_3_1 ) ) (mul_val_3_3_4 time_pipe_3_3_4 ) 
    $call multiplier (($cast ($int<16>) ival4_2 ) ($cast ($int<16>) kval_3_4_1 ) ) (mul_val_3_4_4 time_pipe_3_4_4 ) 
    $call multiplier (($cast ($int<16>) ival5_2 ) ($cast ($int<16>) kval_3_5_1 ) ) (mul_val_3_5_4 time_pipe_3_5_4 ) 
    $call multiplier (($cast ($int<16>) ival6_2 ) ($cast ($int<16>) kval_3_6_1 ) ) (mul_val_3_6_4 time_pipe_3_6_4 ) 
    $call multiplier (($cast ($int<16>) ival7_2 ) ($cast ($int<16>) kval_3_7_1 ) ) (mul_val_3_7_4 time_pipe_3_7_4 ) 
    $call multiplier (($cast ($int<16>) ival8_2 ) ($cast ($int<16>) kval_3_8_1 ) ) (mul_val_3_8_4 time_pipe_3_8_4 ) 
    $volatile t_acc_val_3_4 := (((mul_val_3_1_4 + mul_val_3_2_4) + (mul_val_3_3_4 + mul_val_3_4_4)) + ((mul_val_3_5_4 + mul_val_3_6_4) + (mul_val_3_7_4 + mul_val_3_8_4))) $buffering 1
    $guard (rk_v3) tempk1_3_2 := core3_kp2 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v3) tempk2_3_2 := conv3_kp2 $buffering 1// bits of buffering = 64. 
    o_chl3_valid_4143_delayed_1_0 := o_chl3_valid $buffering 1 $cut_through // bits of buffering = 1. 
    read_k_4144_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_3_2 := ( $mux o_chl3_valid_4143_delayed_1_0 ( $mux read_k_4144_delayed_1_0 tempk1_3_2  tempk2_3_2 )   0  )  $buffering 1
    kr_3_1_2 := ( $slice kread_3_2 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_3_2_2 := ( $slice kread_3_2 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_3_3_2 := ( $slice kread_3_2 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_3_4_2 := ( $slice kread_3_2 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_3_5_2 := ( $slice kread_3_2 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_3_6_2 := ( $slice kread_3_2 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_3_7_2 := ( $slice kread_3_2 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_3_8_2 := ( $slice kread_3_2 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_3_1_2 := ($bitcast ($int<8>) kr_3_1_2 ) $buffering 1
    $volatile kval_3_2_2 := ($bitcast ($int<8>) kr_3_2_2 ) $buffering 1
    $volatile kval_3_3_2 := ($bitcast ($int<8>) kr_3_3_2 ) $buffering 1
    $volatile kval_3_4_2 := ($bitcast ($int<8>) kr_3_4_2 ) $buffering 1
    $volatile kval_3_5_2 := ($bitcast ($int<8>) kr_3_5_2 ) $buffering 1
    $volatile kval_3_6_2 := ($bitcast ($int<8>) kr_3_6_2 ) $buffering 1
    $volatile kval_3_7_2 := ($bitcast ($int<8>) kr_3_7_2 ) $buffering 1
    $volatile kval_3_8_2 := ($bitcast ($int<8>) kr_3_8_2 ) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_2 ) ($cast ($int<16>) kval_3_1_2 ) ) (mul_val_3_1_2 time_pipe_3_1_2 ) 
    $call multiplier (($cast ($int<16>) ival2_2 ) ($cast ($int<16>) kval_3_2_2 ) ) (mul_val_3_2_2 time_pipe_3_2_2 ) 
    $call multiplier (($cast ($int<16>) ival3_2 ) ($cast ($int<16>) kval_3_3_2 ) ) (mul_val_3_3_2 time_pipe_3_3_2 ) 
    $call multiplier (($cast ($int<16>) ival4_2 ) ($cast ($int<16>) kval_3_4_2 ) ) (mul_val_3_4_2 time_pipe_3_4_2 ) 
    $call multiplier (($cast ($int<16>) ival5_2 ) ($cast ($int<16>) kval_3_5_2 ) ) (mul_val_3_5_2 time_pipe_3_5_2 ) 
    $call multiplier (($cast ($int<16>) ival6_2 ) ($cast ($int<16>) kval_3_6_2 ) ) (mul_val_3_6_2 time_pipe_3_6_2 ) 
    $call multiplier (($cast ($int<16>) ival7_2 ) ($cast ($int<16>) kval_3_7_2 ) ) (mul_val_3_7_2 time_pipe_3_7_2 ) 
    $call multiplier (($cast ($int<16>) ival8_2 ) ($cast ($int<16>) kval_3_8_2 ) ) (mul_val_3_8_2 time_pipe_3_8_2 ) 
    $volatile t_acc_val_3_2 := (((mul_val_3_1_2 + mul_val_3_2_2) + (mul_val_3_3_2 + mul_val_3_4_2)) + ((mul_val_3_5_2 + mul_val_3_6_2) + (mul_val_3_7_2 + mul_val_3_8_2))) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_3 ) ($cast ($int<16>) kval_3_1_2 ) ) (mul_val_3_1_5 time_pipe_3_1_5 ) 
    $call multiplier (($cast ($int<16>) ival2_3 ) ($cast ($int<16>) kval_3_2_2 ) ) (mul_val_3_2_5 time_pipe_3_2_5 ) 
    $call multiplier (($cast ($int<16>) ival3_3 ) ($cast ($int<16>) kval_3_3_2 ) ) (mul_val_3_3_5 time_pipe_3_3_5 ) 
    $call multiplier (($cast ($int<16>) ival4_3 ) ($cast ($int<16>) kval_3_4_2 ) ) (mul_val_3_4_5 time_pipe_3_4_5 ) 
    $call multiplier (($cast ($int<16>) ival5_3 ) ($cast ($int<16>) kval_3_5_2 ) ) (mul_val_3_5_5 time_pipe_3_5_5 ) 
    $call multiplier (($cast ($int<16>) ival6_3 ) ($cast ($int<16>) kval_3_6_2 ) ) (mul_val_3_6_5 time_pipe_3_6_5 ) 
    $call multiplier (($cast ($int<16>) ival7_3 ) ($cast ($int<16>) kval_3_7_2 ) ) (mul_val_3_7_5 time_pipe_3_7_5 ) 
    $call multiplier (($cast ($int<16>) ival8_3 ) ($cast ($int<16>) kval_3_8_2 ) ) (mul_val_3_8_5 time_pipe_3_8_5 ) 
    $volatile t_acc_val_3_5 := (((mul_val_3_1_5 + mul_val_3_2_5) + (mul_val_3_3_5 + mul_val_3_4_5)) + ((mul_val_3_5_5 + mul_val_3_6_5) + (mul_val_3_7_5 + mul_val_3_8_5))) $buffering 1
    $volatile rk_3v3 := (readk_3 & o_chl3_valid) $buffering 1
    $volatile nrk_3v3 := (not_readk_3 & o_chl3_valid) $buffering 1
    $guard (rk_3v3) tempk1_3_3 := core3_kp3 $buffering 1// bits of buffering = 64. 
    $guard (nrk_3v3) tempk2_3_3 := conv3_kp3 $buffering 1// bits of buffering = 64. 
    o_chl3_valid_4380_delayed_1_0 := o_chl3_valid $buffering 1 $cut_through // bits of buffering = 1. 
    read_k_4383_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_3_3 := ( $mux o_chl3_valid_4380_delayed_1_0 ( $mux mode_2 0   ( $mux read_k_4383_delayed_1_0 tempk1_3_3  tempk2_3_3 )  )   0  )  $buffering 1
    kr_3_1_3 := ( $slice kread_3_3 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_3_2_3 := ( $slice kread_3_3 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_3_3_3 := ( $slice kread_3_3 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_3_4_3 := ( $slice kread_3_3 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_3_5_3 := ( $slice kread_3_3 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_3_6_3 := ( $slice kread_3_3 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_3_7_3 := ( $slice kread_3_3 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_3_8_3 := ( $slice kread_3_3 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_3_1_3 := ($bitcast ($int<8>) kr_3_1_3 ) $buffering 1
    $volatile kval_3_2_3 := ($bitcast ($int<8>) kr_3_2_3 ) $buffering 1
    $volatile kval_3_3_3 := ($bitcast ($int<8>) kr_3_3_3 ) $buffering 1
    $volatile kval_3_4_3 := ($bitcast ($int<8>) kr_3_4_3 ) $buffering 1
    $volatile kval_3_5_3 := ($bitcast ($int<8>) kr_3_5_3 ) $buffering 1
    $volatile kval_3_6_3 := ($bitcast ($int<8>) kr_3_6_3 ) $buffering 1
    $volatile kval_3_7_3 := ($bitcast ($int<8>) kr_3_7_3 ) $buffering 1
    $volatile kval_3_8_3 := ($bitcast ($int<8>) kr_3_8_3 ) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_3 ) ($cast ($int<16>) kval_3_1_3 ) ) (mul_val_3_1_3 time_pipe_3_1_3 ) 
    $call multiplier (($cast ($int<16>) ival2_3 ) ($cast ($int<16>) kval_3_2_3 ) ) (mul_val_3_2_3 time_pipe_3_2_3 ) 
    $call multiplier (($cast ($int<16>) ival3_3 ) ($cast ($int<16>) kval_3_3_3 ) ) (mul_val_3_3_3 time_pipe_3_3_3 ) 
    $call multiplier (($cast ($int<16>) ival4_3 ) ($cast ($int<16>) kval_3_4_3 ) ) (mul_val_3_4_3 time_pipe_3_4_3 ) 
    $call multiplier (($cast ($int<16>) ival5_3 ) ($cast ($int<16>) kval_3_5_3 ) ) (mul_val_3_5_3 time_pipe_3_5_3 ) 
    $call multiplier (($cast ($int<16>) ival6_3 ) ($cast ($int<16>) kval_3_6_3 ) ) (mul_val_3_6_3 time_pipe_3_6_3 ) 
    $call multiplier (($cast ($int<16>) ival7_3 ) ($cast ($int<16>) kval_3_7_3 ) ) (mul_val_3_7_3 time_pipe_3_7_3 ) 
    $call multiplier (($cast ($int<16>) ival8_3 ) ($cast ($int<16>) kval_3_8_3 ) ) (mul_val_3_8_3 time_pipe_3_8_3 ) 
    $volatile t_acc_val_3_3 := (((mul_val_3_1_3 + mul_val_3_2_3) + (mul_val_3_3_3 + mul_val_3_4_3)) + ((mul_val_3_5_3 + mul_val_3_6_3) + (mul_val_3_7_3 + mul_val_3_8_3))) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_4 ) ($cast ($int<16>) kval_3_1_3 ) ) (mul_val_3_1_6 time_pipe_3_1_6 ) 
    $call multiplier (($cast ($int<16>) ival2_4 ) ($cast ($int<16>) kval_3_2_3 ) ) (mul_val_3_2_6 time_pipe_3_2_6 ) 
    $call multiplier (($cast ($int<16>) ival3_4 ) ($cast ($int<16>) kval_3_3_3 ) ) (mul_val_3_3_6 time_pipe_3_3_6 ) 
    $call multiplier (($cast ($int<16>) ival4_4 ) ($cast ($int<16>) kval_3_4_3 ) ) (mul_val_3_4_6 time_pipe_3_4_6 ) 
    $call multiplier (($cast ($int<16>) ival5_4 ) ($cast ($int<16>) kval_3_5_3 ) ) (mul_val_3_5_6 time_pipe_3_5_6 ) 
    $call multiplier (($cast ($int<16>) ival6_4 ) ($cast ($int<16>) kval_3_6_3 ) ) (mul_val_3_6_6 time_pipe_3_6_6 ) 
    $call multiplier (($cast ($int<16>) ival7_4 ) ($cast ($int<16>) kval_3_7_3 ) ) (mul_val_3_7_6 time_pipe_3_7_6 ) 
    $call multiplier (($cast ($int<16>) ival8_4 ) ($cast ($int<16>) kval_3_8_3 ) ) (mul_val_3_8_6 time_pipe_3_8_6 ) 
    $volatile t_acc_val_3_6 := (((mul_val_3_1_6 + mul_val_3_2_6) + (mul_val_3_3_6 + mul_val_3_4_6)) + ((mul_val_3_5_6 + mul_val_3_6_6) + (mul_val_3_7_6 + mul_val_3_8_6))) $buffering 1
    $volatile acc_val3_1 := ((t_acc_val_3_1 + t_acc_val_3_2) + t_acc_val_3_3) $buffering 1
    $volatile acc_val3_2 := ((t_acc_val_3_4 + t_acc_val_3_5) + t_acc_val_3_6) $buffering 1
    $volatile store_kernel3 := (store_kernel & o_chl3_valid) $buffering 1
    $volatile store_33 := (store_3 & o_chl3_valid) $buffering 1
    store_kernel3_4625_delayed_1_0 := store_kernel3 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel3_4625_delayed_1_0) conv3_kp1 := kread_3_1 $buffering 1// bits of buffering = 64. 
    store_kernel3_4629_delayed_1_0 := store_kernel3 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel3_4629_delayed_1_0) conv3_kp2 := kread_3_2 $buffering 1// bits of buffering = 64. 
    store_33_4633_delayed_1_0 := store_33 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_33_4633_delayed_1_0) conv3_kp3 := kread_3_3 $buffering 1// bits of buffering = 64. 
    $volatile rk_v4 := (read_k & o_chl4_valid) $buffering 1
    $volatile nrk_v4 := (not_read_k & o_chl4_valid) $buffering 1
    $guard (rk_v4) tempk1_4_1 := core4_kp1 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v4) tempk2_4_1 := conv4_kp1 $buffering 1// bits of buffering = 64. 
    o_chl4_valid_4656_delayed_1_0 := o_chl4_valid $buffering 1 $cut_through // bits of buffering = 1. 
    read_k_4657_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_4_1 := ( $mux o_chl4_valid_4656_delayed_1_0 ( $mux read_k_4657_delayed_1_0 tempk1_4_1  tempk2_4_1 )   0  )  $buffering 1
    kr_4_1_1 := ( $slice kread_4_1 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_4_2_1 := ( $slice kread_4_1 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_4_3_1 := ( $slice kread_4_1 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_4_4_1 := ( $slice kread_4_1 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_4_5_1 := ( $slice kread_4_1 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_4_6_1 := ( $slice kread_4_1 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_4_7_1 := ( $slice kread_4_1 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_4_8_1 := ( $slice kread_4_1 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_4_1_1 := ($bitcast ($int<8>) kr_4_1_1 ) $buffering 1
    $volatile kval_4_2_1 := ($bitcast ($int<8>) kr_4_2_1 ) $buffering 1
    $volatile kval_4_3_1 := ($bitcast ($int<8>) kr_4_3_1 ) $buffering 1
    $volatile kval_4_4_1 := ($bitcast ($int<8>) kr_4_4_1 ) $buffering 1
    $volatile kval_4_5_1 := ($bitcast ($int<8>) kr_4_5_1 ) $buffering 1
    $volatile kval_4_6_1 := ($bitcast ($int<8>) kr_4_6_1 ) $buffering 1
    $volatile kval_4_7_1 := ($bitcast ($int<8>) kr_4_7_1 ) $buffering 1
    $volatile kval_4_8_1 := ($bitcast ($int<8>) kr_4_8_1 ) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_1 ) ($cast ($int<16>) kval_4_1_1 ) ) (mul_val_4_1_1 time_pipe_4_1_1 ) 
    $call multiplier (($cast ($int<16>) ival2_1 ) ($cast ($int<16>) kval_4_2_1 ) ) (mul_val_4_2_1 time_pipe_4_2_1 ) 
    $call multiplier (($cast ($int<16>) ival3_1 ) ($cast ($int<16>) kval_4_3_1 ) ) (mul_val_4_3_1 time_pipe_4_3_1 ) 
    $call multiplier (($cast ($int<16>) ival4_1 ) ($cast ($int<16>) kval_4_4_1 ) ) (mul_val_4_4_1 time_pipe_4_4_1 ) 
    $call multiplier (($cast ($int<16>) ival5_1 ) ($cast ($int<16>) kval_4_5_1 ) ) (mul_val_4_5_1 time_pipe_4_5_1 ) 
    $call multiplier (($cast ($int<16>) ival6_1 ) ($cast ($int<16>) kval_4_6_1 ) ) (mul_val_4_6_1 time_pipe_4_6_1 ) 
    $call multiplier (($cast ($int<16>) ival7_1 ) ($cast ($int<16>) kval_4_7_1 ) ) (mul_val_4_7_1 time_pipe_4_7_1 ) 
    $call multiplier (($cast ($int<16>) ival8_1 ) ($cast ($int<16>) kval_4_8_1 ) ) (mul_val_4_8_1 time_pipe_4_8_1 ) 
    $volatile t_acc_val_4_1 := (((mul_val_4_1_1 + mul_val_4_2_1) + (mul_val_4_3_1 + mul_val_4_4_1)) + ((mul_val_4_5_1 + mul_val_4_6_1) + (mul_val_4_7_1 + mul_val_4_8_1))) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_2 ) ($cast ($int<16>) kval_4_1_1 ) ) (mul_val_4_1_4 time_pipe_4_1_4 ) 
    $call multiplier (($cast ($int<16>) ival2_2 ) ($cast ($int<16>) kval_4_2_1 ) ) (mul_val_4_2_4 time_pipe_4_2_4 ) 
    $call multiplier (($cast ($int<16>) ival3_2 ) ($cast ($int<16>) kval_4_3_1 ) ) (mul_val_4_3_4 time_pipe_4_3_4 ) 
    $call multiplier (($cast ($int<16>) ival4_2 ) ($cast ($int<16>) kval_4_4_1 ) ) (mul_val_4_4_4 time_pipe_4_4_4 ) 
    $call multiplier (($cast ($int<16>) ival5_2 ) ($cast ($int<16>) kval_4_5_1 ) ) (mul_val_4_5_4 time_pipe_4_5_4 ) 
    $call multiplier (($cast ($int<16>) ival6_2 ) ($cast ($int<16>) kval_4_6_1 ) ) (mul_val_4_6_4 time_pipe_4_6_4 ) 
    $call multiplier (($cast ($int<16>) ival7_2 ) ($cast ($int<16>) kval_4_7_1 ) ) (mul_val_4_7_4 time_pipe_4_7_4 ) 
    $call multiplier (($cast ($int<16>) ival8_2 ) ($cast ($int<16>) kval_4_8_1 ) ) (mul_val_4_8_4 time_pipe_4_8_4 ) 
    $volatile t_acc_val_4_4 := (((mul_val_4_1_4 + mul_val_4_2_4) + (mul_val_4_3_4 + mul_val_4_4_4)) + ((mul_val_4_5_4 + mul_val_4_6_4) + (mul_val_4_7_4 + mul_val_4_8_4))) $buffering 1
    $guard (rk_v4) tempk1_4_2 := core4_kp2 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v4) tempk2_4_2 := conv4_kp2 $buffering 1// bits of buffering = 64. 
    o_chl4_valid_4883_delayed_1_0 := o_chl4_valid $buffering 1 $cut_through // bits of buffering = 1. 
    read_k_4884_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_4_2 := ( $mux o_chl4_valid_4883_delayed_1_0 ( $mux read_k_4884_delayed_1_0 tempk1_4_2  tempk2_4_2 )   0  )  $buffering 1
    kr_4_1_2 := ( $slice kread_4_2 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_4_2_2 := ( $slice kread_4_2 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_4_3_2 := ( $slice kread_4_2 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_4_4_2 := ( $slice kread_4_2 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_4_5_2 := ( $slice kread_4_2 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_4_6_2 := ( $slice kread_4_2 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_4_7_2 := ( $slice kread_4_2 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_4_8_2 := ( $slice kread_4_2 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_4_1_2 := ($bitcast ($int<8>) kr_4_1_2 ) $buffering 1
    $volatile kval_4_2_2 := ($bitcast ($int<8>) kr_4_2_2 ) $buffering 1
    $volatile kval_4_3_2 := ($bitcast ($int<8>) kr_4_3_2 ) $buffering 1
    $volatile kval_4_4_2 := ($bitcast ($int<8>) kr_4_4_2 ) $buffering 1
    $volatile kval_4_5_2 := ($bitcast ($int<8>) kr_4_5_2 ) $buffering 1
    $volatile kval_4_6_2 := ($bitcast ($int<8>) kr_4_6_2 ) $buffering 1
    $volatile kval_4_7_2 := ($bitcast ($int<8>) kr_4_7_2 ) $buffering 1
    $volatile kval_4_8_2 := ($bitcast ($int<8>) kr_4_8_2 ) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_2 ) ($cast ($int<16>) kval_4_1_2 ) ) (mul_val_4_1_2 time_pipe_4_1_2 ) 
    $call multiplier (($cast ($int<16>) ival2_2 ) ($cast ($int<16>) kval_4_2_2 ) ) (mul_val_4_2_2 time_pipe_4_2_2 ) 
    $call multiplier (($cast ($int<16>) ival3_2 ) ($cast ($int<16>) kval_4_3_2 ) ) (mul_val_4_3_2 time_pipe_4_3_2 ) 
    $call multiplier (($cast ($int<16>) ival4_2 ) ($cast ($int<16>) kval_4_4_2 ) ) (mul_val_4_4_2 time_pipe_4_4_2 ) 
    $call multiplier (($cast ($int<16>) ival5_2 ) ($cast ($int<16>) kval_4_5_2 ) ) (mul_val_4_5_2 time_pipe_4_5_2 ) 
    $call multiplier (($cast ($int<16>) ival6_2 ) ($cast ($int<16>) kval_4_6_2 ) ) (mul_val_4_6_2 time_pipe_4_6_2 ) 
    $call multiplier (($cast ($int<16>) ival7_2 ) ($cast ($int<16>) kval_4_7_2 ) ) (mul_val_4_7_2 time_pipe_4_7_2 ) 
    $call multiplier (($cast ($int<16>) ival8_2 ) ($cast ($int<16>) kval_4_8_2 ) ) (mul_val_4_8_2 time_pipe_4_8_2 ) 
    $volatile t_acc_val_4_2 := (((mul_val_4_1_2 + mul_val_4_2_2) + (mul_val_4_3_2 + mul_val_4_4_2)) + ((mul_val_4_5_2 + mul_val_4_6_2) + (mul_val_4_7_2 + mul_val_4_8_2))) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_3 ) ($cast ($int<16>) kval_4_1_2 ) ) (mul_val_4_1_5 time_pipe_4_1_5 ) 
    $call multiplier (($cast ($int<16>) ival2_3 ) ($cast ($int<16>) kval_4_2_2 ) ) (mul_val_4_2_5 time_pipe_4_2_5 ) 
    $call multiplier (($cast ($int<16>) ival3_3 ) ($cast ($int<16>) kval_4_3_2 ) ) (mul_val_4_3_5 time_pipe_4_3_5 ) 
    $call multiplier (($cast ($int<16>) ival4_3 ) ($cast ($int<16>) kval_4_4_2 ) ) (mul_val_4_4_5 time_pipe_4_4_5 ) 
    $call multiplier (($cast ($int<16>) ival5_3 ) ($cast ($int<16>) kval_4_5_2 ) ) (mul_val_4_5_5 time_pipe_4_5_5 ) 
    $call multiplier (($cast ($int<16>) ival6_3 ) ($cast ($int<16>) kval_4_6_2 ) ) (mul_val_4_6_5 time_pipe_4_6_5 ) 
    $call multiplier (($cast ($int<16>) ival7_3 ) ($cast ($int<16>) kval_4_7_2 ) ) (mul_val_4_7_5 time_pipe_4_7_5 ) 
    $call multiplier (($cast ($int<16>) ival8_3 ) ($cast ($int<16>) kval_4_8_2 ) ) (mul_val_4_8_5 time_pipe_4_8_5 ) 
    $volatile t_acc_val_4_5 := (((mul_val_4_1_5 + mul_val_4_2_5) + (mul_val_4_3_5 + mul_val_4_4_5)) + ((mul_val_4_5_5 + mul_val_4_6_5) + (mul_val_4_7_5 + mul_val_4_8_5))) $buffering 1
    $volatile rk_3v4 := (readk_3 & o_chl4_valid) $buffering 1
    $volatile nrk_3v4 := (not_readk_3 & o_chl4_valid) $buffering 1
    $guard (rk_3v4) tempk1_4_3 := core4_kp3 $buffering 1// bits of buffering = 64. 
    $guard (nrk_3v4) tempk2_4_3 := conv4_kp3 $buffering 1// bits of buffering = 64. 
    read_k_5123_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    o_chl4_valid_5120_delayed_1_0 := o_chl4_valid $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_4_3 := ( $mux o_chl4_valid_5120_delayed_1_0 ( $mux mode_2 0   ( $mux read_k_5123_delayed_1_0 tempk1_4_3  tempk2_4_3 )  )   0  )  $buffering 1
    kr_4_1_3 := ( $slice kread_4_3 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_4_2_3 := ( $slice kread_4_3 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_4_3_3 := ( $slice kread_4_3 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_4_4_3 := ( $slice kread_4_3 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_4_5_3 := ( $slice kread_4_3 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_4_6_3 := ( $slice kread_4_3 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_4_7_3 := ( $slice kread_4_3 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_4_8_3 := ( $slice kread_4_3 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_4_1_3 := ($bitcast ($int<8>) kr_4_1_3 ) $buffering 1
    $volatile kval_4_2_3 := ($bitcast ($int<8>) kr_4_2_3 ) $buffering 1
    $volatile kval_4_3_3 := ($bitcast ($int<8>) kr_4_3_3 ) $buffering 1
    $volatile kval_4_4_3 := ($bitcast ($int<8>) kr_4_4_3 ) $buffering 1
    $volatile kval_4_5_3 := ($bitcast ($int<8>) kr_4_5_3 ) $buffering 1
    $volatile kval_4_6_3 := ($bitcast ($int<8>) kr_4_6_3 ) $buffering 1
    $volatile kval_4_7_3 := ($bitcast ($int<8>) kr_4_7_3 ) $buffering 1
    $volatile kval_4_8_3 := ($bitcast ($int<8>) kr_4_8_3 ) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_3 ) ($cast ($int<16>) kval_4_1_3 ) ) (mul_val_4_1_3 time_pipe_4_1_3 ) 
    $call multiplier (($cast ($int<16>) ival2_3 ) ($cast ($int<16>) kval_4_2_3 ) ) (mul_val_4_2_3 time_pipe_4_2_3 ) 
    $call multiplier (($cast ($int<16>) ival3_3 ) ($cast ($int<16>) kval_4_3_3 ) ) (mul_val_4_3_3 time_pipe_4_3_3 ) 
    $call multiplier (($cast ($int<16>) ival4_3 ) ($cast ($int<16>) kval_4_4_3 ) ) (mul_val_4_4_3 time_pipe_4_4_3 ) 
    $call multiplier (($cast ($int<16>) ival5_3 ) ($cast ($int<16>) kval_4_5_3 ) ) (mul_val_4_5_3 time_pipe_4_5_3 ) 
    $call multiplier (($cast ($int<16>) ival6_3 ) ($cast ($int<16>) kval_4_6_3 ) ) (mul_val_4_6_3 time_pipe_4_6_3 ) 
    $call multiplier (($cast ($int<16>) ival7_3 ) ($cast ($int<16>) kval_4_7_3 ) ) (mul_val_4_7_3 time_pipe_4_7_3 ) 
    $call multiplier (($cast ($int<16>) ival8_3 ) ($cast ($int<16>) kval_4_8_3 ) ) (mul_val_4_8_3 time_pipe_4_8_3 ) 
    $volatile t_acc_val_4_3 := (((mul_val_4_1_3 + mul_val_4_2_3) + (mul_val_4_3_3 + mul_val_4_4_3)) + ((mul_val_4_5_3 + mul_val_4_6_3) + (mul_val_4_7_3 + mul_val_4_8_3))) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_4 ) ($cast ($int<16>) kval_4_1_3 ) ) (mul_val_4_1_6 time_pipe_4_1_6 ) 
    $call multiplier (($cast ($int<16>) ival2_4 ) ($cast ($int<16>) kval_4_2_3 ) ) (mul_val_4_2_6 time_pipe_4_2_6 ) 
    $call multiplier (($cast ($int<16>) ival3_4 ) ($cast ($int<16>) kval_4_3_3 ) ) (mul_val_4_3_6 time_pipe_4_3_6 ) 
    $call multiplier (($cast ($int<16>) ival4_4 ) ($cast ($int<16>) kval_4_4_3 ) ) (mul_val_4_4_6 time_pipe_4_4_6 ) 
    $call multiplier (($cast ($int<16>) ival5_4 ) ($cast ($int<16>) kval_4_5_3 ) ) (mul_val_4_5_6 time_pipe_4_5_6 ) 
    $call multiplier (($cast ($int<16>) ival6_4 ) ($cast ($int<16>) kval_4_6_3 ) ) (mul_val_4_6_6 time_pipe_4_6_6 ) 
    $call multiplier (($cast ($int<16>) ival7_4 ) ($cast ($int<16>) kval_4_7_3 ) ) (mul_val_4_7_6 time_pipe_4_7_6 ) 
    $call multiplier (($cast ($int<16>) ival8_4 ) ($cast ($int<16>) kval_4_8_3 ) ) (mul_val_4_8_6 time_pipe_4_8_6 ) 
    $volatile t_acc_val_4_6 := (((mul_val_4_1_6 + mul_val_4_2_6) + (mul_val_4_3_6 + mul_val_4_4_6)) + ((mul_val_4_5_6 + mul_val_4_6_6) + (mul_val_4_7_6 + mul_val_4_8_6))) $buffering 1
    $volatile acc_val4_1 := ((t_acc_val_4_1 + t_acc_val_4_2) + t_acc_val_4_3) $buffering 1
    $volatile acc_val4_2 := ((t_acc_val_4_4 + t_acc_val_4_5) + t_acc_val_4_6) $buffering 1
    $volatile store_kernel4 := (store_kernel & o_chl4_valid) $buffering 1
    $volatile store_34 := (store_3 & o_chl4_valid) $buffering 1
    store_kernel4_5365_delayed_1_0 := store_kernel4 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel4_5365_delayed_1_0) conv4_kp1 := kread_4_1 $buffering 1// bits of buffering = 64. 
    store_kernel4_5369_delayed_1_0 := store_kernel4 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel4_5369_delayed_1_0) conv4_kp2 := kread_4_2 $buffering 1// bits of buffering = 64. 
    store_34_5373_delayed_1_0 := store_34 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_34_5373_delayed_1_0) conv4_kp3 := kread_4_3 $buffering 1// bits of buffering = 64. 
    $volatile rk_v5 := (read_k & o_chl5_valid) $buffering 1
    $volatile nrk_v5 := (not_read_k & o_chl5_valid) $buffering 1
    $guard (rk_v5) tempk1_5_1 := core5_kp1 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v5) tempk2_5_1 := conv5_kp1 $buffering 1// bits of buffering = 64. 
    o_chl5_valid_5396_delayed_1_0 := o_chl5_valid $buffering 1 $cut_through // bits of buffering = 1. 
    read_k_5397_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_5_1 := ( $mux o_chl5_valid_5396_delayed_1_0 ( $mux read_k_5397_delayed_1_0 tempk1_5_1  tempk2_5_1 )   0  )  $buffering 1
    kr_5_1_1 := ( $slice kread_5_1 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_5_2_1 := ( $slice kread_5_1 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_5_3_1 := ( $slice kread_5_1 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_5_4_1 := ( $slice kread_5_1 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_5_5_1 := ( $slice kread_5_1 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_5_6_1 := ( $slice kread_5_1 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_5_7_1 := ( $slice kread_5_1 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_5_8_1 := ( $slice kread_5_1 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_5_1_1 := ($bitcast ($int<8>) kr_5_1_1 ) $buffering 1
    $volatile kval_5_2_1 := ($bitcast ($int<8>) kr_5_2_1 ) $buffering 1
    $volatile kval_5_3_1 := ($bitcast ($int<8>) kr_5_3_1 ) $buffering 1
    $volatile kval_5_4_1 := ($bitcast ($int<8>) kr_5_4_1 ) $buffering 1
    $volatile kval_5_5_1 := ($bitcast ($int<8>) kr_5_5_1 ) $buffering 1
    $volatile kval_5_6_1 := ($bitcast ($int<8>) kr_5_6_1 ) $buffering 1
    $volatile kval_5_7_1 := ($bitcast ($int<8>) kr_5_7_1 ) $buffering 1
    $volatile kval_5_8_1 := ($bitcast ($int<8>) kr_5_8_1 ) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_1 ) ($cast ($int<16>) kval_5_1_1 ) ) (mul_val_5_1_1 time_pipe_5_1_1 ) 
    $call multiplier (($cast ($int<16>) ival2_1 ) ($cast ($int<16>) kval_5_2_1 ) ) (mul_val_5_2_1 time_pipe_5_2_1 ) 
    $call multiplier (($cast ($int<16>) ival3_1 ) ($cast ($int<16>) kval_5_3_1 ) ) (mul_val_5_3_1 time_pipe_5_3_1 ) 
    $call multiplier (($cast ($int<16>) ival4_1 ) ($cast ($int<16>) kval_5_4_1 ) ) (mul_val_5_4_1 time_pipe_5_4_1 ) 
    $call multiplier (($cast ($int<16>) ival5_1 ) ($cast ($int<16>) kval_5_5_1 ) ) (mul_val_5_5_1 time_pipe_5_5_1 ) 
    $call multiplier (($cast ($int<16>) ival6_1 ) ($cast ($int<16>) kval_5_6_1 ) ) (mul_val_5_6_1 time_pipe_5_6_1 ) 
    $call multiplier (($cast ($int<16>) ival7_1 ) ($cast ($int<16>) kval_5_7_1 ) ) (mul_val_5_7_1 time_pipe_5_7_1 ) 
    $call multiplier (($cast ($int<16>) ival8_1 ) ($cast ($int<16>) kval_5_8_1 ) ) (mul_val_5_8_1 time_pipe_5_8_1 ) 
    $volatile t_acc_val_5_1 := (((mul_val_5_1_1 + mul_val_5_2_1) + (mul_val_5_3_1 + mul_val_5_4_1)) + ((mul_val_5_5_1 + mul_val_5_6_1) + (mul_val_5_7_1 + mul_val_5_8_1))) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_2 ) ($cast ($int<16>) kval_5_1_1 ) ) (mul_val_5_1_4 time_pipe_5_1_4 ) 
    $call multiplier (($cast ($int<16>) ival2_2 ) ($cast ($int<16>) kval_5_2_1 ) ) (mul_val_5_2_4 time_pipe_5_2_4 ) 
    $call multiplier (($cast ($int<16>) ival3_2 ) ($cast ($int<16>) kval_5_3_1 ) ) (mul_val_5_3_4 time_pipe_5_3_4 ) 
    $call multiplier (($cast ($int<16>) ival4_2 ) ($cast ($int<16>) kval_5_4_1 ) ) (mul_val_5_4_4 time_pipe_5_4_4 ) 
    $call multiplier (($cast ($int<16>) ival5_2 ) ($cast ($int<16>) kval_5_5_1 ) ) (mul_val_5_5_4 time_pipe_5_5_4 ) 
    $call multiplier (($cast ($int<16>) ival6_2 ) ($cast ($int<16>) kval_5_6_1 ) ) (mul_val_5_6_4 time_pipe_5_6_4 ) 
    $call multiplier (($cast ($int<16>) ival7_2 ) ($cast ($int<16>) kval_5_7_1 ) ) (mul_val_5_7_4 time_pipe_5_7_4 ) 
    $call multiplier (($cast ($int<16>) ival8_2 ) ($cast ($int<16>) kval_5_8_1 ) ) (mul_val_5_8_4 time_pipe_5_8_4 ) 
    $volatile t_acc_val_5_4 := (((mul_val_5_1_4 + mul_val_5_2_4) + (mul_val_5_3_4 + mul_val_5_4_4)) + ((mul_val_5_5_4 + mul_val_5_6_4) + (mul_val_5_7_4 + mul_val_5_8_4))) $buffering 1
    $guard (rk_v5) tempk1_5_2 := core5_kp2 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v5) tempk2_5_2 := conv5_kp2 $buffering 1// bits of buffering = 64. 
    o_chl5_valid_5623_delayed_1_0 := o_chl5_valid $buffering 1 $cut_through // bits of buffering = 1. 
    read_k_5624_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_5_2 := ( $mux o_chl5_valid_5623_delayed_1_0 ( $mux read_k_5624_delayed_1_0 tempk1_5_2  tempk2_5_2 )   0  )  $buffering 1
    kr_5_1_2 := ( $slice kread_5_2 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_5_2_2 := ( $slice kread_5_2 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_5_3_2 := ( $slice kread_5_2 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_5_4_2 := ( $slice kread_5_2 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_5_5_2 := ( $slice kread_5_2 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_5_6_2 := ( $slice kread_5_2 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_5_7_2 := ( $slice kread_5_2 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_5_8_2 := ( $slice kread_5_2 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_5_1_2 := ($bitcast ($int<8>) kr_5_1_2 ) $buffering 1
    $volatile kval_5_2_2 := ($bitcast ($int<8>) kr_5_2_2 ) $buffering 1
    $volatile kval_5_3_2 := ($bitcast ($int<8>) kr_5_3_2 ) $buffering 1
    $volatile kval_5_4_2 := ($bitcast ($int<8>) kr_5_4_2 ) $buffering 1
    $volatile kval_5_5_2 := ($bitcast ($int<8>) kr_5_5_2 ) $buffering 1
    $volatile kval_5_6_2 := ($bitcast ($int<8>) kr_5_6_2 ) $buffering 1
    $volatile kval_5_7_2 := ($bitcast ($int<8>) kr_5_7_2 ) $buffering 1
    $volatile kval_5_8_2 := ($bitcast ($int<8>) kr_5_8_2 ) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_2 ) ($cast ($int<16>) kval_5_1_2 ) ) (mul_val_5_1_2 time_pipe_5_1_2 ) 
    $call multiplier (($cast ($int<16>) ival2_2 ) ($cast ($int<16>) kval_5_2_2 ) ) (mul_val_5_2_2 time_pipe_5_2_2 ) 
    $call multiplier (($cast ($int<16>) ival3_2 ) ($cast ($int<16>) kval_5_3_2 ) ) (mul_val_5_3_2 time_pipe_5_3_2 ) 
    $call multiplier (($cast ($int<16>) ival4_2 ) ($cast ($int<16>) kval_5_4_2 ) ) (mul_val_5_4_2 time_pipe_5_4_2 ) 
    $call multiplier (($cast ($int<16>) ival5_2 ) ($cast ($int<16>) kval_5_5_2 ) ) (mul_val_5_5_2 time_pipe_5_5_2 ) 
    $call multiplier (($cast ($int<16>) ival6_2 ) ($cast ($int<16>) kval_5_6_2 ) ) (mul_val_5_6_2 time_pipe_5_6_2 ) 
    $call multiplier (($cast ($int<16>) ival7_2 ) ($cast ($int<16>) kval_5_7_2 ) ) (mul_val_5_7_2 time_pipe_5_7_2 ) 
    $call multiplier (($cast ($int<16>) ival8_2 ) ($cast ($int<16>) kval_5_8_2 ) ) (mul_val_5_8_2 time_pipe_5_8_2 ) 
    $volatile t_acc_val_5_2 := (((mul_val_5_1_2 + mul_val_5_2_2) + (mul_val_5_3_2 + mul_val_5_4_2)) + ((mul_val_5_5_2 + mul_val_5_6_2) + (mul_val_5_7_2 + mul_val_5_8_2))) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_3 ) ($cast ($int<16>) kval_5_1_2 ) ) (mul_val_5_1_5 time_pipe_5_1_5 ) 
    $call multiplier (($cast ($int<16>) ival2_3 ) ($cast ($int<16>) kval_5_2_2 ) ) (mul_val_5_2_5 time_pipe_5_2_5 ) 
    $call multiplier (($cast ($int<16>) ival3_3 ) ($cast ($int<16>) kval_5_3_2 ) ) (mul_val_5_3_5 time_pipe_5_3_5 ) 
    $call multiplier (($cast ($int<16>) ival4_3 ) ($cast ($int<16>) kval_5_4_2 ) ) (mul_val_5_4_5 time_pipe_5_4_5 ) 
    $call multiplier (($cast ($int<16>) ival5_3 ) ($cast ($int<16>) kval_5_5_2 ) ) (mul_val_5_5_5 time_pipe_5_5_5 ) 
    $call multiplier (($cast ($int<16>) ival6_3 ) ($cast ($int<16>) kval_5_6_2 ) ) (mul_val_5_6_5 time_pipe_5_6_5 ) 
    $call multiplier (($cast ($int<16>) ival7_3 ) ($cast ($int<16>) kval_5_7_2 ) ) (mul_val_5_7_5 time_pipe_5_7_5 ) 
    $call multiplier (($cast ($int<16>) ival8_3 ) ($cast ($int<16>) kval_5_8_2 ) ) (mul_val_5_8_5 time_pipe_5_8_5 ) 
    $volatile t_acc_val_5_5 := (((mul_val_5_1_5 + mul_val_5_2_5) + (mul_val_5_3_5 + mul_val_5_4_5)) + ((mul_val_5_5_5 + mul_val_5_6_5) + (mul_val_5_7_5 + mul_val_5_8_5))) $buffering 1
    $volatile rk_3v5 := (readk_3 & o_chl5_valid) $buffering 1
    $volatile nrk_3v5 := (not_readk_3 & o_chl5_valid) $buffering 1
    $guard (rk_3v5) tempk1_5_3 := core5_kp3 $buffering 1// bits of buffering = 64. 
    $guard (nrk_3v5) tempk2_5_3 := conv5_kp3 $buffering 1// bits of buffering = 64. 
    o_chl5_valid_5860_delayed_1_0 := o_chl5_valid $buffering 1 $cut_through // bits of buffering = 1. 
    read_k_5863_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_5_3 := ( $mux o_chl5_valid_5860_delayed_1_0 ( $mux mode_2 0   ( $mux read_k_5863_delayed_1_0 tempk1_5_3  tempk2_5_3 )  )   0  )  $buffering 1
    kr_5_1_3 := ( $slice kread_5_3 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_5_2_3 := ( $slice kread_5_3 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_5_3_3 := ( $slice kread_5_3 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_5_4_3 := ( $slice kread_5_3 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_5_5_3 := ( $slice kread_5_3 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_5_6_3 := ( $slice kread_5_3 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_5_7_3 := ( $slice kread_5_3 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_5_8_3 := ( $slice kread_5_3 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_5_1_3 := ($bitcast ($int<8>) kr_5_1_3 ) $buffering 1
    $volatile kval_5_2_3 := ($bitcast ($int<8>) kr_5_2_3 ) $buffering 1
    $volatile kval_5_3_3 := ($bitcast ($int<8>) kr_5_3_3 ) $buffering 1
    $volatile kval_5_4_3 := ($bitcast ($int<8>) kr_5_4_3 ) $buffering 1
    $volatile kval_5_5_3 := ($bitcast ($int<8>) kr_5_5_3 ) $buffering 1
    $volatile kval_5_6_3 := ($bitcast ($int<8>) kr_5_6_3 ) $buffering 1
    $volatile kval_5_7_3 := ($bitcast ($int<8>) kr_5_7_3 ) $buffering 1
    $volatile kval_5_8_3 := ($bitcast ($int<8>) kr_5_8_3 ) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_3 ) ($cast ($int<16>) kval_5_1_3 ) ) (mul_val_5_1_3 time_pipe_5_1_3 ) 
    $call multiplier (($cast ($int<16>) ival2_3 ) ($cast ($int<16>) kval_5_2_3 ) ) (mul_val_5_2_3 time_pipe_5_2_3 ) 
    $call multiplier (($cast ($int<16>) ival3_3 ) ($cast ($int<16>) kval_5_3_3 ) ) (mul_val_5_3_3 time_pipe_5_3_3 ) 
    $call multiplier (($cast ($int<16>) ival4_3 ) ($cast ($int<16>) kval_5_4_3 ) ) (mul_val_5_4_3 time_pipe_5_4_3 ) 
    $call multiplier (($cast ($int<16>) ival5_3 ) ($cast ($int<16>) kval_5_5_3 ) ) (mul_val_5_5_3 time_pipe_5_5_3 ) 
    $call multiplier (($cast ($int<16>) ival6_3 ) ($cast ($int<16>) kval_5_6_3 ) ) (mul_val_5_6_3 time_pipe_5_6_3 ) 
    $call multiplier (($cast ($int<16>) ival7_3 ) ($cast ($int<16>) kval_5_7_3 ) ) (mul_val_5_7_3 time_pipe_5_7_3 ) 
    $call multiplier (($cast ($int<16>) ival8_3 ) ($cast ($int<16>) kval_5_8_3 ) ) (mul_val_5_8_3 time_pipe_5_8_3 ) 
    $volatile t_acc_val_5_3 := (((mul_val_5_1_3 + mul_val_5_2_3) + (mul_val_5_3_3 + mul_val_5_4_3)) + ((mul_val_5_5_3 + mul_val_5_6_3) + (mul_val_5_7_3 + mul_val_5_8_3))) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_4 ) ($cast ($int<16>) kval_5_1_3 ) ) (mul_val_5_1_6 time_pipe_5_1_6 ) 
    $call multiplier (($cast ($int<16>) ival2_4 ) ($cast ($int<16>) kval_5_2_3 ) ) (mul_val_5_2_6 time_pipe_5_2_6 ) 
    $call multiplier (($cast ($int<16>) ival3_4 ) ($cast ($int<16>) kval_5_3_3 ) ) (mul_val_5_3_6 time_pipe_5_3_6 ) 
    $call multiplier (($cast ($int<16>) ival4_4 ) ($cast ($int<16>) kval_5_4_3 ) ) (mul_val_5_4_6 time_pipe_5_4_6 ) 
    $call multiplier (($cast ($int<16>) ival5_4 ) ($cast ($int<16>) kval_5_5_3 ) ) (mul_val_5_5_6 time_pipe_5_5_6 ) 
    $call multiplier (($cast ($int<16>) ival6_4 ) ($cast ($int<16>) kval_5_6_3 ) ) (mul_val_5_6_6 time_pipe_5_6_6 ) 
    $call multiplier (($cast ($int<16>) ival7_4 ) ($cast ($int<16>) kval_5_7_3 ) ) (mul_val_5_7_6 time_pipe_5_7_6 ) 
    $call multiplier (($cast ($int<16>) ival8_4 ) ($cast ($int<16>) kval_5_8_3 ) ) (mul_val_5_8_6 time_pipe_5_8_6 ) 
    $volatile t_acc_val_5_6 := (((mul_val_5_1_6 + mul_val_5_2_6) + (mul_val_5_3_6 + mul_val_5_4_6)) + ((mul_val_5_5_6 + mul_val_5_6_6) + (mul_val_5_7_6 + mul_val_5_8_6))) $buffering 1
    $volatile acc_val5_1 := ((t_acc_val_5_1 + t_acc_val_5_2) + t_acc_val_5_3) $buffering 1
    $volatile acc_val5_2 := ((t_acc_val_5_4 + t_acc_val_5_5) + t_acc_val_5_6) $buffering 1
    $volatile store_kernel5 := (store_kernel & o_chl5_valid) $buffering 1
    $volatile store_35 := (store_3 & o_chl5_valid) $buffering 1
    store_kernel5_6105_delayed_1_0 := store_kernel5 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel5_6105_delayed_1_0) conv5_kp1 := kread_5_1 $buffering 1// bits of buffering = 64. 
    store_kernel5_6109_delayed_1_0 := store_kernel5 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel5_6109_delayed_1_0) conv5_kp2 := kread_5_2 $buffering 1// bits of buffering = 64. 
    store_35_6113_delayed_1_0 := store_35 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_35_6113_delayed_1_0) conv5_kp3 := kread_5_3 $buffering 1// bits of buffering = 64. 
    $volatile rk_v6 := (read_k & o_chl6_valid) $buffering 1
    $volatile nrk_v6 := (not_read_k & o_chl6_valid) $buffering 1
    $guard (rk_v6) tempk1_6_1 := core6_kp1 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v6) tempk2_6_1 := conv6_kp1 $buffering 1// bits of buffering = 64. 
    o_chl6_valid_6136_delayed_1_0 := o_chl6_valid $buffering 1 $cut_through // bits of buffering = 1. 
    read_k_6137_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_6_1 := ( $mux o_chl6_valid_6136_delayed_1_0 ( $mux read_k_6137_delayed_1_0 tempk1_6_1  tempk2_6_1 )   0  )  $buffering 1
    kr_6_1_1 := ( $slice kread_6_1 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_6_2_1 := ( $slice kread_6_1 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_6_3_1 := ( $slice kread_6_1 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_6_4_1 := ( $slice kread_6_1 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_6_5_1 := ( $slice kread_6_1 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_6_6_1 := ( $slice kread_6_1 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_6_7_1 := ( $slice kread_6_1 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_6_8_1 := ( $slice kread_6_1 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_6_1_1 := ($bitcast ($int<8>) kr_6_1_1 ) $buffering 1
    $volatile kval_6_2_1 := ($bitcast ($int<8>) kr_6_2_1 ) $buffering 1
    $volatile kval_6_3_1 := ($bitcast ($int<8>) kr_6_3_1 ) $buffering 1
    $volatile kval_6_4_1 := ($bitcast ($int<8>) kr_6_4_1 ) $buffering 1
    $volatile kval_6_5_1 := ($bitcast ($int<8>) kr_6_5_1 ) $buffering 1
    $volatile kval_6_6_1 := ($bitcast ($int<8>) kr_6_6_1 ) $buffering 1
    $volatile kval_6_7_1 := ($bitcast ($int<8>) kr_6_7_1 ) $buffering 1
    $volatile kval_6_8_1 := ($bitcast ($int<8>) kr_6_8_1 ) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_1 ) ($cast ($int<16>) kval_6_1_1 ) ) (mul_val_6_1_1 time_pipe_6_1_1 ) 
    $call multiplier (($cast ($int<16>) ival2_1 ) ($cast ($int<16>) kval_6_2_1 ) ) (mul_val_6_2_1 time_pipe_6_2_1 ) 
    $call multiplier (($cast ($int<16>) ival3_1 ) ($cast ($int<16>) kval_6_3_1 ) ) (mul_val_6_3_1 time_pipe_6_3_1 ) 
    $call multiplier (($cast ($int<16>) ival4_1 ) ($cast ($int<16>) kval_6_4_1 ) ) (mul_val_6_4_1 time_pipe_6_4_1 ) 
    $call multiplier (($cast ($int<16>) ival5_1 ) ($cast ($int<16>) kval_6_5_1 ) ) (mul_val_6_5_1 time_pipe_6_5_1 ) 
    $call multiplier (($cast ($int<16>) ival6_1 ) ($cast ($int<16>) kval_6_6_1 ) ) (mul_val_6_6_1 time_pipe_6_6_1 ) 
    $call multiplier (($cast ($int<16>) ival7_1 ) ($cast ($int<16>) kval_6_7_1 ) ) (mul_val_6_7_1 time_pipe_6_7_1 ) 
    $call multiplier (($cast ($int<16>) ival8_1 ) ($cast ($int<16>) kval_6_8_1 ) ) (mul_val_6_8_1 time_pipe_6_8_1 ) 
    $volatile t_acc_val_6_1 := (((mul_val_6_1_1 + mul_val_6_2_1) + (mul_val_6_3_1 + mul_val_6_4_1)) + ((mul_val_6_5_1 + mul_val_6_6_1) + (mul_val_6_7_1 + mul_val_6_8_1))) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_2 ) ($cast ($int<16>) kval_6_1_1 ) ) (mul_val_6_1_4 time_pipe_6_1_4 ) 
    $call multiplier (($cast ($int<16>) ival2_2 ) ($cast ($int<16>) kval_6_2_1 ) ) (mul_val_6_2_4 time_pipe_6_2_4 ) 
    $call multiplier (($cast ($int<16>) ival3_2 ) ($cast ($int<16>) kval_6_3_1 ) ) (mul_val_6_3_4 time_pipe_6_3_4 ) 
    $call multiplier (($cast ($int<16>) ival4_2 ) ($cast ($int<16>) kval_6_4_1 ) ) (mul_val_6_4_4 time_pipe_6_4_4 ) 
    $call multiplier (($cast ($int<16>) ival5_2 ) ($cast ($int<16>) kval_6_5_1 ) ) (mul_val_6_5_4 time_pipe_6_5_4 ) 
    $call multiplier (($cast ($int<16>) ival6_2 ) ($cast ($int<16>) kval_6_6_1 ) ) (mul_val_6_6_4 time_pipe_6_6_4 ) 
    $call multiplier (($cast ($int<16>) ival7_2 ) ($cast ($int<16>) kval_6_7_1 ) ) (mul_val_6_7_4 time_pipe_6_7_4 ) 
    $call multiplier (($cast ($int<16>) ival8_2 ) ($cast ($int<16>) kval_6_8_1 ) ) (mul_val_6_8_4 time_pipe_6_8_4 ) 
    $volatile t_acc_val_6_4 := (((mul_val_6_1_4 + mul_val_6_2_4) + (mul_val_6_3_4 + mul_val_6_4_4)) + ((mul_val_6_5_4 + mul_val_6_6_4) + (mul_val_6_7_4 + mul_val_6_8_4))) $buffering 1
    $guard (rk_v6) tempk1_6_2 := core6_kp2 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v6) tempk2_6_2 := conv6_kp2 $buffering 1// bits of buffering = 64. 
    o_chl6_valid_6363_delayed_1_0 := o_chl6_valid $buffering 1 $cut_through // bits of buffering = 1. 
    read_k_6364_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_6_2 := ( $mux o_chl6_valid_6363_delayed_1_0 ( $mux read_k_6364_delayed_1_0 tempk1_6_2  tempk2_6_2 )   0  )  $buffering 1
    kr_6_1_2 := ( $slice kread_6_2 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_6_2_2 := ( $slice kread_6_2 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_6_3_2 := ( $slice kread_6_2 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_6_4_2 := ( $slice kread_6_2 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_6_5_2 := ( $slice kread_6_2 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_6_6_2 := ( $slice kread_6_2 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_6_7_2 := ( $slice kread_6_2 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_6_8_2 := ( $slice kread_6_2 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_6_1_2 := ($bitcast ($int<8>) kr_6_1_2 ) $buffering 1
    $volatile kval_6_2_2 := ($bitcast ($int<8>) kr_6_2_2 ) $buffering 1
    $volatile kval_6_3_2 := ($bitcast ($int<8>) kr_6_3_2 ) $buffering 1
    $volatile kval_6_4_2 := ($bitcast ($int<8>) kr_6_4_2 ) $buffering 1
    $volatile kval_6_5_2 := ($bitcast ($int<8>) kr_6_5_2 ) $buffering 1
    $volatile kval_6_6_2 := ($bitcast ($int<8>) kr_6_6_2 ) $buffering 1
    $volatile kval_6_7_2 := ($bitcast ($int<8>) kr_6_7_2 ) $buffering 1
    $volatile kval_6_8_2 := ($bitcast ($int<8>) kr_6_8_2 ) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_2 ) ($cast ($int<16>) kval_6_1_2 ) ) (mul_val_6_1_2 time_pipe_6_1_2 ) 
    $call multiplier (($cast ($int<16>) ival2_2 ) ($cast ($int<16>) kval_6_2_2 ) ) (mul_val_6_2_2 time_pipe_6_2_2 ) 
    $call multiplier (($cast ($int<16>) ival3_2 ) ($cast ($int<16>) kval_6_3_2 ) ) (mul_val_6_3_2 time_pipe_6_3_2 ) 
    $call multiplier (($cast ($int<16>) ival4_2 ) ($cast ($int<16>) kval_6_4_2 ) ) (mul_val_6_4_2 time_pipe_6_4_2 ) 
    $call multiplier (($cast ($int<16>) ival5_2 ) ($cast ($int<16>) kval_6_5_2 ) ) (mul_val_6_5_2 time_pipe_6_5_2 ) 
    $call multiplier (($cast ($int<16>) ival6_2 ) ($cast ($int<16>) kval_6_6_2 ) ) (mul_val_6_6_2 time_pipe_6_6_2 ) 
    $call multiplier (($cast ($int<16>) ival7_2 ) ($cast ($int<16>) kval_6_7_2 ) ) (mul_val_6_7_2 time_pipe_6_7_2 ) 
    $call multiplier (($cast ($int<16>) ival8_2 ) ($cast ($int<16>) kval_6_8_2 ) ) (mul_val_6_8_2 time_pipe_6_8_2 ) 
    $volatile t_acc_val_6_2 := (((mul_val_6_1_2 + mul_val_6_2_2) + (mul_val_6_3_2 + mul_val_6_4_2)) + ((mul_val_6_5_2 + mul_val_6_6_2) + (mul_val_6_7_2 + mul_val_6_8_2))) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_3 ) ($cast ($int<16>) kval_6_1_2 ) ) (mul_val_6_1_5 time_pipe_6_1_5 ) 
    $call multiplier (($cast ($int<16>) ival2_3 ) ($cast ($int<16>) kval_6_2_2 ) ) (mul_val_6_2_5 time_pipe_6_2_5 ) 
    $call multiplier (($cast ($int<16>) ival3_3 ) ($cast ($int<16>) kval_6_3_2 ) ) (mul_val_6_3_5 time_pipe_6_3_5 ) 
    $call multiplier (($cast ($int<16>) ival4_3 ) ($cast ($int<16>) kval_6_4_2 ) ) (mul_val_6_4_5 time_pipe_6_4_5 ) 
    $call multiplier (($cast ($int<16>) ival5_3 ) ($cast ($int<16>) kval_6_5_2 ) ) (mul_val_6_5_5 time_pipe_6_5_5 ) 
    $call multiplier (($cast ($int<16>) ival6_3 ) ($cast ($int<16>) kval_6_6_2 ) ) (mul_val_6_6_5 time_pipe_6_6_5 ) 
    $call multiplier (($cast ($int<16>) ival7_3 ) ($cast ($int<16>) kval_6_7_2 ) ) (mul_val_6_7_5 time_pipe_6_7_5 ) 
    $call multiplier (($cast ($int<16>) ival8_3 ) ($cast ($int<16>) kval_6_8_2 ) ) (mul_val_6_8_5 time_pipe_6_8_5 ) 
    $volatile t_acc_val_6_5 := (((mul_val_6_1_5 + mul_val_6_2_5) + (mul_val_6_3_5 + mul_val_6_4_5)) + ((mul_val_6_5_5 + mul_val_6_6_5) + (mul_val_6_7_5 + mul_val_6_8_5))) $buffering 1
    $volatile rk_3v6 := (readk_3 & o_chl6_valid) $buffering 1
    $volatile nrk_3v6 := (not_readk_3 & o_chl6_valid) $buffering 1
    $guard (rk_3v6) tempk1_6_3 := core6_kp3 $buffering 1// bits of buffering = 64. 
    $guard (nrk_3v6) tempk2_6_3 := conv6_kp3 $buffering 1// bits of buffering = 64. 
    read_k_6603_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    o_chl6_valid_6600_delayed_1_0 := o_chl6_valid $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_6_3 := ( $mux o_chl6_valid_6600_delayed_1_0 ( $mux mode_2 0   ( $mux read_k_6603_delayed_1_0 tempk1_6_3  tempk2_6_3 )  )   0  )  $buffering 1
    kr_6_1_3 := ( $slice kread_6_3 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_6_2_3 := ( $slice kread_6_3 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_6_3_3 := ( $slice kread_6_3 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_6_4_3 := ( $slice kread_6_3 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_6_5_3 := ( $slice kread_6_3 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_6_6_3 := ( $slice kread_6_3 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_6_7_3 := ( $slice kread_6_3 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_6_8_3 := ( $slice kread_6_3 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_6_1_3 := ($bitcast ($int<8>) kr_6_1_3 ) $buffering 1
    $volatile kval_6_2_3 := ($bitcast ($int<8>) kr_6_2_3 ) $buffering 1
    $volatile kval_6_3_3 := ($bitcast ($int<8>) kr_6_3_3 ) $buffering 1
    $volatile kval_6_4_3 := ($bitcast ($int<8>) kr_6_4_3 ) $buffering 1
    $volatile kval_6_5_3 := ($bitcast ($int<8>) kr_6_5_3 ) $buffering 1
    $volatile kval_6_6_3 := ($bitcast ($int<8>) kr_6_6_3 ) $buffering 1
    $volatile kval_6_7_3 := ($bitcast ($int<8>) kr_6_7_3 ) $buffering 1
    $volatile kval_6_8_3 := ($bitcast ($int<8>) kr_6_8_3 ) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_3 ) ($cast ($int<16>) kval_6_1_3 ) ) (mul_val_6_1_3 time_pipe_6_1_3 ) 
    $call multiplier (($cast ($int<16>) ival2_3 ) ($cast ($int<16>) kval_6_2_3 ) ) (mul_val_6_2_3 time_pipe_6_2_3 ) 
    $call multiplier (($cast ($int<16>) ival3_3 ) ($cast ($int<16>) kval_6_3_3 ) ) (mul_val_6_3_3 time_pipe_6_3_3 ) 
    $call multiplier (($cast ($int<16>) ival4_3 ) ($cast ($int<16>) kval_6_4_3 ) ) (mul_val_6_4_3 time_pipe_6_4_3 ) 
    $call multiplier (($cast ($int<16>) ival5_3 ) ($cast ($int<16>) kval_6_5_3 ) ) (mul_val_6_5_3 time_pipe_6_5_3 ) 
    $call multiplier (($cast ($int<16>) ival6_3 ) ($cast ($int<16>) kval_6_6_3 ) ) (mul_val_6_6_3 time_pipe_6_6_3 ) 
    $call multiplier (($cast ($int<16>) ival7_3 ) ($cast ($int<16>) kval_6_7_3 ) ) (mul_val_6_7_3 time_pipe_6_7_3 ) 
    $call multiplier (($cast ($int<16>) ival8_3 ) ($cast ($int<16>) kval_6_8_3 ) ) (mul_val_6_8_3 time_pipe_6_8_3 ) 
    $volatile t_acc_val_6_3 := (((mul_val_6_1_3 + mul_val_6_2_3) + (mul_val_6_3_3 + mul_val_6_4_3)) + ((mul_val_6_5_3 + mul_val_6_6_3) + (mul_val_6_7_3 + mul_val_6_8_3))) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_4 ) ($cast ($int<16>) kval_6_1_3 ) ) (mul_val_6_1_6 time_pipe_6_1_6 ) 
    $call multiplier (($cast ($int<16>) ival2_4 ) ($cast ($int<16>) kval_6_2_3 ) ) (mul_val_6_2_6 time_pipe_6_2_6 ) 
    $call multiplier (($cast ($int<16>) ival3_4 ) ($cast ($int<16>) kval_6_3_3 ) ) (mul_val_6_3_6 time_pipe_6_3_6 ) 
    $call multiplier (($cast ($int<16>) ival4_4 ) ($cast ($int<16>) kval_6_4_3 ) ) (mul_val_6_4_6 time_pipe_6_4_6 ) 
    $call multiplier (($cast ($int<16>) ival5_4 ) ($cast ($int<16>) kval_6_5_3 ) ) (mul_val_6_5_6 time_pipe_6_5_6 ) 
    $call multiplier (($cast ($int<16>) ival6_4 ) ($cast ($int<16>) kval_6_6_3 ) ) (mul_val_6_6_6 time_pipe_6_6_6 ) 
    $call multiplier (($cast ($int<16>) ival7_4 ) ($cast ($int<16>) kval_6_7_3 ) ) (mul_val_6_7_6 time_pipe_6_7_6 ) 
    $call multiplier (($cast ($int<16>) ival8_4 ) ($cast ($int<16>) kval_6_8_3 ) ) (mul_val_6_8_6 time_pipe_6_8_6 ) 
    $volatile t_acc_val_6_6 := (((mul_val_6_1_6 + mul_val_6_2_6) + (mul_val_6_3_6 + mul_val_6_4_6)) + ((mul_val_6_5_6 + mul_val_6_6_6) + (mul_val_6_7_6 + mul_val_6_8_6))) $buffering 1
    $volatile acc_val6_1 := ((t_acc_val_6_1 + t_acc_val_6_2) + t_acc_val_6_3) $buffering 1
    $volatile acc_val6_2 := ((t_acc_val_6_4 + t_acc_val_6_5) + t_acc_val_6_6) $buffering 1
    $volatile store_kernel6 := (store_kernel & o_chl6_valid) $buffering 1
    $volatile store_36 := (store_3 & o_chl6_valid) $buffering 1
    store_kernel6_6845_delayed_1_0 := store_kernel6 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel6_6845_delayed_1_0) conv6_kp1 := kread_6_1 $buffering 1// bits of buffering = 64. 
    store_kernel6_6849_delayed_1_0 := store_kernel6 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel6_6849_delayed_1_0) conv6_kp2 := kread_6_2 $buffering 1// bits of buffering = 64. 
    store_36_6853_delayed_1_0 := store_36 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_36_6853_delayed_1_0) conv6_kp3 := kread_6_3 $buffering 1// bits of buffering = 64. 
    $volatile rk_v7 := (read_k & o_chl7_valid) $buffering 1
    $volatile nrk_v7 := (not_read_k & o_chl7_valid) $buffering 1
    $guard (rk_v7) tempk1_7_1 := core7_kp1 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v7) tempk2_7_1 := conv7_kp1 $buffering 1// bits of buffering = 64. 
    o_chl7_valid_6876_delayed_1_0 := o_chl7_valid $buffering 1 $cut_through // bits of buffering = 1. 
    read_k_6877_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_7_1 := ( $mux o_chl7_valid_6876_delayed_1_0 ( $mux read_k_6877_delayed_1_0 tempk1_7_1  tempk2_7_1 )   0  )  $buffering 1
    kr_7_1_1 := ( $slice kread_7_1 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_7_2_1 := ( $slice kread_7_1 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_7_3_1 := ( $slice kread_7_1 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_7_4_1 := ( $slice kread_7_1 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_7_5_1 := ( $slice kread_7_1 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_7_6_1 := ( $slice kread_7_1 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_7_7_1 := ( $slice kread_7_1 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_7_8_1 := ( $slice kread_7_1 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_7_1_1 := ($bitcast ($int<8>) kr_7_1_1 ) $buffering 1
    $volatile kval_7_2_1 := ($bitcast ($int<8>) kr_7_2_1 ) $buffering 1
    $volatile kval_7_3_1 := ($bitcast ($int<8>) kr_7_3_1 ) $buffering 1
    $volatile kval_7_4_1 := ($bitcast ($int<8>) kr_7_4_1 ) $buffering 1
    $volatile kval_7_5_1 := ($bitcast ($int<8>) kr_7_5_1 ) $buffering 1
    $volatile kval_7_6_1 := ($bitcast ($int<8>) kr_7_6_1 ) $buffering 1
    $volatile kval_7_7_1 := ($bitcast ($int<8>) kr_7_7_1 ) $buffering 1
    $volatile kval_7_8_1 := ($bitcast ($int<8>) kr_7_8_1 ) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_1 ) ($cast ($int<16>) kval_7_1_1 ) ) (mul_val_7_1_1 time_pipe_7_1_1 ) 
    $call multiplier (($cast ($int<16>) ival2_1 ) ($cast ($int<16>) kval_7_2_1 ) ) (mul_val_7_2_1 time_pipe_7_2_1 ) 
    $call multiplier (($cast ($int<16>) ival3_1 ) ($cast ($int<16>) kval_7_3_1 ) ) (mul_val_7_3_1 time_pipe_7_3_1 ) 
    $call multiplier (($cast ($int<16>) ival4_1 ) ($cast ($int<16>) kval_7_4_1 ) ) (mul_val_7_4_1 time_pipe_7_4_1 ) 
    $call multiplier (($cast ($int<16>) ival5_1 ) ($cast ($int<16>) kval_7_5_1 ) ) (mul_val_7_5_1 time_pipe_7_5_1 ) 
    $call multiplier (($cast ($int<16>) ival6_1 ) ($cast ($int<16>) kval_7_6_1 ) ) (mul_val_7_6_1 time_pipe_7_6_1 ) 
    $call multiplier (($cast ($int<16>) ival7_1 ) ($cast ($int<16>) kval_7_7_1 ) ) (mul_val_7_7_1 time_pipe_7_7_1 ) 
    $call multiplier (($cast ($int<16>) ival8_1 ) ($cast ($int<16>) kval_7_8_1 ) ) (mul_val_7_8_1 time_pipe_7_8_1 ) 
    $volatile t_acc_val_7_1 := (((mul_val_7_1_1 + mul_val_7_2_1) + (mul_val_7_3_1 + mul_val_7_4_1)) + ((mul_val_7_5_1 + mul_val_7_6_1) + (mul_val_7_7_1 + mul_val_7_8_1))) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_2 ) ($cast ($int<16>) kval_7_1_1 ) ) (mul_val_7_1_4 time_pipe_7_1_4 ) 
    $call multiplier (($cast ($int<16>) ival2_2 ) ($cast ($int<16>) kval_7_2_1 ) ) (mul_val_7_2_4 time_pipe_7_2_4 ) 
    $call multiplier (($cast ($int<16>) ival3_2 ) ($cast ($int<16>) kval_7_3_1 ) ) (mul_val_7_3_4 time_pipe_7_3_4 ) 
    $call multiplier (($cast ($int<16>) ival4_2 ) ($cast ($int<16>) kval_7_4_1 ) ) (mul_val_7_4_4 time_pipe_7_4_4 ) 
    $call multiplier (($cast ($int<16>) ival5_2 ) ($cast ($int<16>) kval_7_5_1 ) ) (mul_val_7_5_4 time_pipe_7_5_4 ) 
    $call multiplier (($cast ($int<16>) ival6_2 ) ($cast ($int<16>) kval_7_6_1 ) ) (mul_val_7_6_4 time_pipe_7_6_4 ) 
    $call multiplier (($cast ($int<16>) ival7_2 ) ($cast ($int<16>) kval_7_7_1 ) ) (mul_val_7_7_4 time_pipe_7_7_4 ) 
    $call multiplier (($cast ($int<16>) ival8_2 ) ($cast ($int<16>) kval_7_8_1 ) ) (mul_val_7_8_4 time_pipe_7_8_4 ) 
    $volatile t_acc_val_7_4 := (((mul_val_7_1_4 + mul_val_7_2_4) + (mul_val_7_3_4 + mul_val_7_4_4)) + ((mul_val_7_5_4 + mul_val_7_6_4) + (mul_val_7_7_4 + mul_val_7_8_4))) $buffering 1
    $guard (rk_v7) tempk1_7_2 := core7_kp2 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v7) tempk2_7_2 := conv7_kp2 $buffering 1// bits of buffering = 64. 
    o_chl7_valid_7103_delayed_1_0 := o_chl7_valid $buffering 1 $cut_through // bits of buffering = 1. 
    read_k_7104_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_7_2 := ( $mux o_chl7_valid_7103_delayed_1_0 ( $mux read_k_7104_delayed_1_0 tempk1_7_2  tempk2_7_2 )   0  )  $buffering 1
    kr_7_1_2 := ( $slice kread_7_2 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_7_2_2 := ( $slice kread_7_2 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_7_3_2 := ( $slice kread_7_2 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_7_4_2 := ( $slice kread_7_2 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_7_5_2 := ( $slice kread_7_2 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_7_6_2 := ( $slice kread_7_2 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_7_7_2 := ( $slice kread_7_2 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_7_8_2 := ( $slice kread_7_2 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_7_1_2 := ($bitcast ($int<8>) kr_7_1_2 ) $buffering 1
    $volatile kval_7_2_2 := ($bitcast ($int<8>) kr_7_2_2 ) $buffering 1
    $volatile kval_7_3_2 := ($bitcast ($int<8>) kr_7_3_2 ) $buffering 1
    $volatile kval_7_4_2 := ($bitcast ($int<8>) kr_7_4_2 ) $buffering 1
    $volatile kval_7_5_2 := ($bitcast ($int<8>) kr_7_5_2 ) $buffering 1
    $volatile kval_7_6_2 := ($bitcast ($int<8>) kr_7_6_2 ) $buffering 1
    $volatile kval_7_7_2 := ($bitcast ($int<8>) kr_7_7_2 ) $buffering 1
    $volatile kval_7_8_2 := ($bitcast ($int<8>) kr_7_8_2 ) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_2 ) ($cast ($int<16>) kval_7_1_2 ) ) (mul_val_7_1_2 time_pipe_7_1_2 ) 
    $call multiplier (($cast ($int<16>) ival2_2 ) ($cast ($int<16>) kval_7_2_2 ) ) (mul_val_7_2_2 time_pipe_7_2_2 ) 
    $call multiplier (($cast ($int<16>) ival3_2 ) ($cast ($int<16>) kval_7_3_2 ) ) (mul_val_7_3_2 time_pipe_7_3_2 ) 
    $call multiplier (($cast ($int<16>) ival4_2 ) ($cast ($int<16>) kval_7_4_2 ) ) (mul_val_7_4_2 time_pipe_7_4_2 ) 
    $call multiplier (($cast ($int<16>) ival5_2 ) ($cast ($int<16>) kval_7_5_2 ) ) (mul_val_7_5_2 time_pipe_7_5_2 ) 
    $call multiplier (($cast ($int<16>) ival6_2 ) ($cast ($int<16>) kval_7_6_2 ) ) (mul_val_7_6_2 time_pipe_7_6_2 ) 
    $call multiplier (($cast ($int<16>) ival7_2 ) ($cast ($int<16>) kval_7_7_2 ) ) (mul_val_7_7_2 time_pipe_7_7_2 ) 
    $call multiplier (($cast ($int<16>) ival8_2 ) ($cast ($int<16>) kval_7_8_2 ) ) (mul_val_7_8_2 time_pipe_7_8_2 ) 
    $volatile t_acc_val_7_2 := (((mul_val_7_1_2 + mul_val_7_2_2) + (mul_val_7_3_2 + mul_val_7_4_2)) + ((mul_val_7_5_2 + mul_val_7_6_2) + (mul_val_7_7_2 + mul_val_7_8_2))) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_3 ) ($cast ($int<16>) kval_7_1_2 ) ) (mul_val_7_1_5 time_pipe_7_1_5 ) 
    $call multiplier (($cast ($int<16>) ival2_3 ) ($cast ($int<16>) kval_7_2_2 ) ) (mul_val_7_2_5 time_pipe_7_2_5 ) 
    $call multiplier (($cast ($int<16>) ival3_3 ) ($cast ($int<16>) kval_7_3_2 ) ) (mul_val_7_3_5 time_pipe_7_3_5 ) 
    $call multiplier (($cast ($int<16>) ival4_3 ) ($cast ($int<16>) kval_7_4_2 ) ) (mul_val_7_4_5 time_pipe_7_4_5 ) 
    $call multiplier (($cast ($int<16>) ival5_3 ) ($cast ($int<16>) kval_7_5_2 ) ) (mul_val_7_5_5 time_pipe_7_5_5 ) 
    $call multiplier (($cast ($int<16>) ival6_3 ) ($cast ($int<16>) kval_7_6_2 ) ) (mul_val_7_6_5 time_pipe_7_6_5 ) 
    $call multiplier (($cast ($int<16>) ival7_3 ) ($cast ($int<16>) kval_7_7_2 ) ) (mul_val_7_7_5 time_pipe_7_7_5 ) 
    $call multiplier (($cast ($int<16>) ival8_3 ) ($cast ($int<16>) kval_7_8_2 ) ) (mul_val_7_8_5 time_pipe_7_8_5 ) 
    $volatile t_acc_val_7_5 := (((mul_val_7_1_5 + mul_val_7_2_5) + (mul_val_7_3_5 + mul_val_7_4_5)) + ((mul_val_7_5_5 + mul_val_7_6_5) + (mul_val_7_7_5 + mul_val_7_8_5))) $buffering 1
    $volatile rk_3v7 := (readk_3 & o_chl7_valid) $buffering 1
    $volatile nrk_3v7 := (not_readk_3 & o_chl7_valid) $buffering 1
    $guard (rk_3v7) tempk1_7_3 := core7_kp3 $buffering 1// bits of buffering = 64. 
    $guard (nrk_3v7) tempk2_7_3 := conv7_kp3 $buffering 1// bits of buffering = 64. 
    o_chl7_valid_7340_delayed_1_0 := o_chl7_valid $buffering 1 $cut_through // bits of buffering = 1. 
    read_k_7343_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_7_3 := ( $mux o_chl7_valid_7340_delayed_1_0 ( $mux mode_2 0   ( $mux read_k_7343_delayed_1_0 tempk1_7_3  tempk2_7_3 )  )   0  )  $buffering 1
    kr_7_1_3 := ( $slice kread_7_3 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_7_2_3 := ( $slice kread_7_3 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_7_3_3 := ( $slice kread_7_3 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_7_4_3 := ( $slice kread_7_3 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_7_5_3 := ( $slice kread_7_3 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_7_6_3 := ( $slice kread_7_3 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_7_7_3 := ( $slice kread_7_3 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_7_8_3 := ( $slice kread_7_3 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_7_1_3 := ($bitcast ($int<8>) kr_7_1_3 ) $buffering 1
    $volatile kval_7_2_3 := ($bitcast ($int<8>) kr_7_2_3 ) $buffering 1
    $volatile kval_7_3_3 := ($bitcast ($int<8>) kr_7_3_3 ) $buffering 1
    $volatile kval_7_4_3 := ($bitcast ($int<8>) kr_7_4_3 ) $buffering 1
    $volatile kval_7_5_3 := ($bitcast ($int<8>) kr_7_5_3 ) $buffering 1
    $volatile kval_7_6_3 := ($bitcast ($int<8>) kr_7_6_3 ) $buffering 1
    $volatile kval_7_7_3 := ($bitcast ($int<8>) kr_7_7_3 ) $buffering 1
    $volatile kval_7_8_3 := ($bitcast ($int<8>) kr_7_8_3 ) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_3 ) ($cast ($int<16>) kval_7_1_3 ) ) (mul_val_7_1_3 time_pipe_7_1_3 ) 
    $call multiplier (($cast ($int<16>) ival2_3 ) ($cast ($int<16>) kval_7_2_3 ) ) (mul_val_7_2_3 time_pipe_7_2_3 ) 
    $call multiplier (($cast ($int<16>) ival3_3 ) ($cast ($int<16>) kval_7_3_3 ) ) (mul_val_7_3_3 time_pipe_7_3_3 ) 
    $call multiplier (($cast ($int<16>) ival4_3 ) ($cast ($int<16>) kval_7_4_3 ) ) (mul_val_7_4_3 time_pipe_7_4_3 ) 
    $call multiplier (($cast ($int<16>) ival5_3 ) ($cast ($int<16>) kval_7_5_3 ) ) (mul_val_7_5_3 time_pipe_7_5_3 ) 
    $call multiplier (($cast ($int<16>) ival6_3 ) ($cast ($int<16>) kval_7_6_3 ) ) (mul_val_7_6_3 time_pipe_7_6_3 ) 
    $call multiplier (($cast ($int<16>) ival7_3 ) ($cast ($int<16>) kval_7_7_3 ) ) (mul_val_7_7_3 time_pipe_7_7_3 ) 
    $call multiplier (($cast ($int<16>) ival8_3 ) ($cast ($int<16>) kval_7_8_3 ) ) (mul_val_7_8_3 time_pipe_7_8_3 ) 
    $volatile t_acc_val_7_3 := (((mul_val_7_1_3 + mul_val_7_2_3) + (mul_val_7_3_3 + mul_val_7_4_3)) + ((mul_val_7_5_3 + mul_val_7_6_3) + (mul_val_7_7_3 + mul_val_7_8_3))) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_4 ) ($cast ($int<16>) kval_7_1_3 ) ) (mul_val_7_1_6 time_pipe_7_1_6 ) 
    $call multiplier (($cast ($int<16>) ival2_4 ) ($cast ($int<16>) kval_7_2_3 ) ) (mul_val_7_2_6 time_pipe_7_2_6 ) 
    $call multiplier (($cast ($int<16>) ival3_4 ) ($cast ($int<16>) kval_7_3_3 ) ) (mul_val_7_3_6 time_pipe_7_3_6 ) 
    $call multiplier (($cast ($int<16>) ival4_4 ) ($cast ($int<16>) kval_7_4_3 ) ) (mul_val_7_4_6 time_pipe_7_4_6 ) 
    $call multiplier (($cast ($int<16>) ival5_4 ) ($cast ($int<16>) kval_7_5_3 ) ) (mul_val_7_5_6 time_pipe_7_5_6 ) 
    $call multiplier (($cast ($int<16>) ival6_4 ) ($cast ($int<16>) kval_7_6_3 ) ) (mul_val_7_6_6 time_pipe_7_6_6 ) 
    $call multiplier (($cast ($int<16>) ival7_4 ) ($cast ($int<16>) kval_7_7_3 ) ) (mul_val_7_7_6 time_pipe_7_7_6 ) 
    $call multiplier (($cast ($int<16>) ival8_4 ) ($cast ($int<16>) kval_7_8_3 ) ) (mul_val_7_8_6 time_pipe_7_8_6 ) 
    $volatile t_acc_val_7_6 := (((mul_val_7_1_6 + mul_val_7_2_6) + (mul_val_7_3_6 + mul_val_7_4_6)) + ((mul_val_7_5_6 + mul_val_7_6_6) + (mul_val_7_7_6 + mul_val_7_8_6))) $buffering 1
    $volatile acc_val7_1 := ((t_acc_val_7_1 + t_acc_val_7_2) + t_acc_val_7_3) $buffering 1
    $volatile acc_val7_2 := ((t_acc_val_7_4 + t_acc_val_7_5) + t_acc_val_7_6) $buffering 1
    $volatile store_kernel7 := (store_kernel & o_chl7_valid) $buffering 1
    $volatile store_37 := (store_3 & o_chl7_valid) $buffering 1
    store_kernel7_7585_delayed_1_0 := store_kernel7 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel7_7585_delayed_1_0) conv7_kp1 := kread_7_1 $buffering 1// bits of buffering = 64. 
    store_kernel7_7589_delayed_1_0 := store_kernel7 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel7_7589_delayed_1_0) conv7_kp2 := kread_7_2 $buffering 1// bits of buffering = 64. 
    store_37_7593_delayed_1_0 := store_37 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_37_7593_delayed_1_0) conv7_kp3 := kread_7_3 $buffering 1// bits of buffering = 64. 
    $volatile rk_v8 := (read_k & o_chl8_valid) $buffering 1
    $volatile nrk_v8 := (not_read_k & o_chl8_valid) $buffering 1
    $guard (rk_v8) tempk1_8_1 := core8_kp1 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v8) tempk2_8_1 := conv8_kp1 $buffering 1// bits of buffering = 64. 
    o_chl8_valid_7616_delayed_1_0 := o_chl8_valid $buffering 1 $cut_through // bits of buffering = 1. 
    read_k_7617_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_8_1 := ( $mux o_chl8_valid_7616_delayed_1_0 ( $mux read_k_7617_delayed_1_0 tempk1_8_1  tempk2_8_1 )   0  )  $buffering 1
    kr_8_1_1 := ( $slice kread_8_1 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_8_2_1 := ( $slice kread_8_1 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_8_3_1 := ( $slice kread_8_1 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_8_4_1 := ( $slice kread_8_1 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_8_5_1 := ( $slice kread_8_1 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_8_6_1 := ( $slice kread_8_1 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_8_7_1 := ( $slice kread_8_1 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_8_8_1 := ( $slice kread_8_1 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_8_1_1 := ($bitcast ($int<8>) kr_8_1_1 ) $buffering 1
    $volatile kval_8_2_1 := ($bitcast ($int<8>) kr_8_2_1 ) $buffering 1
    $volatile kval_8_3_1 := ($bitcast ($int<8>) kr_8_3_1 ) $buffering 1
    $volatile kval_8_4_1 := ($bitcast ($int<8>) kr_8_4_1 ) $buffering 1
    $volatile kval_8_5_1 := ($bitcast ($int<8>) kr_8_5_1 ) $buffering 1
    $volatile kval_8_6_1 := ($bitcast ($int<8>) kr_8_6_1 ) $buffering 1
    $volatile kval_8_7_1 := ($bitcast ($int<8>) kr_8_7_1 ) $buffering 1
    $volatile kval_8_8_1 := ($bitcast ($int<8>) kr_8_8_1 ) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_1 ) ($cast ($int<16>) kval_8_1_1 ) ) (mul_val_8_1_1 time_pipe_8_1_1 ) 
    $call multiplier (($cast ($int<16>) ival2_1 ) ($cast ($int<16>) kval_8_2_1 ) ) (mul_val_8_2_1 time_pipe_8_2_1 ) 
    $call multiplier (($cast ($int<16>) ival3_1 ) ($cast ($int<16>) kval_8_3_1 ) ) (mul_val_8_3_1 time_pipe_8_3_1 ) 
    $call multiplier (($cast ($int<16>) ival4_1 ) ($cast ($int<16>) kval_8_4_1 ) ) (mul_val_8_4_1 time_pipe_8_4_1 ) 
    $call multiplier (($cast ($int<16>) ival5_1 ) ($cast ($int<16>) kval_8_5_1 ) ) (mul_val_8_5_1 time_pipe_8_5_1 ) 
    $call multiplier (($cast ($int<16>) ival6_1 ) ($cast ($int<16>) kval_8_6_1 ) ) (mul_val_8_6_1 time_pipe_8_6_1 ) 
    $call multiplier (($cast ($int<16>) ival7_1 ) ($cast ($int<16>) kval_8_7_1 ) ) (mul_val_8_7_1 time_pipe_8_7_1 ) 
    $call multiplier (($cast ($int<16>) ival8_1 ) ($cast ($int<16>) kval_8_8_1 ) ) (mul_val_8_8_1 time_pipe_8_8_1 ) 
    $volatile t_acc_val_8_1 := (((mul_val_8_1_1 + mul_val_8_2_1) + (mul_val_8_3_1 + mul_val_8_4_1)) + ((mul_val_8_5_1 + mul_val_8_6_1) + (mul_val_8_7_1 + mul_val_8_8_1))) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_2 ) ($cast ($int<16>) kval_8_1_1 ) ) (mul_val_8_1_4 time_pipe_8_1_4 ) 
    $call multiplier (($cast ($int<16>) ival2_2 ) ($cast ($int<16>) kval_8_2_1 ) ) (mul_val_8_2_4 time_pipe_8_2_4 ) 
    $call multiplier (($cast ($int<16>) ival3_2 ) ($cast ($int<16>) kval_8_3_1 ) ) (mul_val_8_3_4 time_pipe_8_3_4 ) 
    $call multiplier (($cast ($int<16>) ival4_2 ) ($cast ($int<16>) kval_8_4_1 ) ) (mul_val_8_4_4 time_pipe_8_4_4 ) 
    $call multiplier (($cast ($int<16>) ival5_2 ) ($cast ($int<16>) kval_8_5_1 ) ) (mul_val_8_5_4 time_pipe_8_5_4 ) 
    $call multiplier (($cast ($int<16>) ival6_2 ) ($cast ($int<16>) kval_8_6_1 ) ) (mul_val_8_6_4 time_pipe_8_6_4 ) 
    $call multiplier (($cast ($int<16>) ival7_2 ) ($cast ($int<16>) kval_8_7_1 ) ) (mul_val_8_7_4 time_pipe_8_7_4 ) 
    $call multiplier (($cast ($int<16>) ival8_2 ) ($cast ($int<16>) kval_8_8_1 ) ) (mul_val_8_8_4 time_pipe_8_8_4 ) 
    $volatile t_acc_val_8_4 := (((mul_val_8_1_4 + mul_val_8_2_4) + (mul_val_8_3_4 + mul_val_8_4_4)) + ((mul_val_8_5_4 + mul_val_8_6_4) + (mul_val_8_7_4 + mul_val_8_8_4))) $buffering 1
    $guard (rk_v8) tempk1_8_2 := core8_kp2 $buffering 1// bits of buffering = 64. 
    $guard (nrk_v8) tempk2_8_2 := conv8_kp2 $buffering 1// bits of buffering = 64. 
    o_chl8_valid_7843_delayed_1_0 := o_chl8_valid $buffering 1 $cut_through // bits of buffering = 1. 
    read_k_7844_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_8_2 := ( $mux o_chl8_valid_7843_delayed_1_0 ( $mux read_k_7844_delayed_1_0 tempk1_8_2  tempk2_8_2 )   0  )  $buffering 1
    kr_8_1_2 := ( $slice kread_8_2 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_8_2_2 := ( $slice kread_8_2 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_8_3_2 := ( $slice kread_8_2 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_8_4_2 := ( $slice kread_8_2 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_8_5_2 := ( $slice kread_8_2 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_8_6_2 := ( $slice kread_8_2 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_8_7_2 := ( $slice kread_8_2 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_8_8_2 := ( $slice kread_8_2 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_8_1_2 := ($bitcast ($int<8>) kr_8_1_2 ) $buffering 1
    $volatile kval_8_2_2 := ($bitcast ($int<8>) kr_8_2_2 ) $buffering 1
    $volatile kval_8_3_2 := ($bitcast ($int<8>) kr_8_3_2 ) $buffering 1
    $volatile kval_8_4_2 := ($bitcast ($int<8>) kr_8_4_2 ) $buffering 1
    $volatile kval_8_5_2 := ($bitcast ($int<8>) kr_8_5_2 ) $buffering 1
    $volatile kval_8_6_2 := ($bitcast ($int<8>) kr_8_6_2 ) $buffering 1
    $volatile kval_8_7_2 := ($bitcast ($int<8>) kr_8_7_2 ) $buffering 1
    $volatile kval_8_8_2 := ($bitcast ($int<8>) kr_8_8_2 ) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_2 ) ($cast ($int<16>) kval_8_1_2 ) ) (mul_val_8_1_2 time_pipe_8_1_2 ) 
    $call multiplier (($cast ($int<16>) ival2_2 ) ($cast ($int<16>) kval_8_2_2 ) ) (mul_val_8_2_2 time_pipe_8_2_2 ) 
    $call multiplier (($cast ($int<16>) ival3_2 ) ($cast ($int<16>) kval_8_3_2 ) ) (mul_val_8_3_2 time_pipe_8_3_2 ) 
    $call multiplier (($cast ($int<16>) ival4_2 ) ($cast ($int<16>) kval_8_4_2 ) ) (mul_val_8_4_2 time_pipe_8_4_2 ) 
    $call multiplier (($cast ($int<16>) ival5_2 ) ($cast ($int<16>) kval_8_5_2 ) ) (mul_val_8_5_2 time_pipe_8_5_2 ) 
    $call multiplier (($cast ($int<16>) ival6_2 ) ($cast ($int<16>) kval_8_6_2 ) ) (mul_val_8_6_2 time_pipe_8_6_2 ) 
    $call multiplier (($cast ($int<16>) ival7_2 ) ($cast ($int<16>) kval_8_7_2 ) ) (mul_val_8_7_2 time_pipe_8_7_2 ) 
    $call multiplier (($cast ($int<16>) ival8_2 ) ($cast ($int<16>) kval_8_8_2 ) ) (mul_val_8_8_2 time_pipe_8_8_2 ) 
    $volatile t_acc_val_8_2 := (((mul_val_8_1_2 + mul_val_8_2_2) + (mul_val_8_3_2 + mul_val_8_4_2)) + ((mul_val_8_5_2 + mul_val_8_6_2) + (mul_val_8_7_2 + mul_val_8_8_2))) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_3 ) ($cast ($int<16>) kval_8_1_2 ) ) (mul_val_8_1_5 time_pipe_8_1_5 ) 
    $call multiplier (($cast ($int<16>) ival2_3 ) ($cast ($int<16>) kval_8_2_2 ) ) (mul_val_8_2_5 time_pipe_8_2_5 ) 
    $call multiplier (($cast ($int<16>) ival3_3 ) ($cast ($int<16>) kval_8_3_2 ) ) (mul_val_8_3_5 time_pipe_8_3_5 ) 
    $call multiplier (($cast ($int<16>) ival4_3 ) ($cast ($int<16>) kval_8_4_2 ) ) (mul_val_8_4_5 time_pipe_8_4_5 ) 
    $call multiplier (($cast ($int<16>) ival5_3 ) ($cast ($int<16>) kval_8_5_2 ) ) (mul_val_8_5_5 time_pipe_8_5_5 ) 
    $call multiplier (($cast ($int<16>) ival6_3 ) ($cast ($int<16>) kval_8_6_2 ) ) (mul_val_8_6_5 time_pipe_8_6_5 ) 
    $call multiplier (($cast ($int<16>) ival7_3 ) ($cast ($int<16>) kval_8_7_2 ) ) (mul_val_8_7_5 time_pipe_8_7_5 ) 
    $call multiplier (($cast ($int<16>) ival8_3 ) ($cast ($int<16>) kval_8_8_2 ) ) (mul_val_8_8_5 time_pipe_8_8_5 ) 
    $volatile t_acc_val_8_5 := (((mul_val_8_1_5 + mul_val_8_2_5) + (mul_val_8_3_5 + mul_val_8_4_5)) + ((mul_val_8_5_5 + mul_val_8_6_5) + (mul_val_8_7_5 + mul_val_8_8_5))) $buffering 1
    $volatile rk_3v8 := (readk_3 & o_chl8_valid) $buffering 1
    $volatile nrk_3v8 := (not_readk_3 & o_chl8_valid) $buffering 1
    $guard (rk_3v8) tempk1_8_3 := core8_kp3 $buffering 1// bits of buffering = 64. 
    $guard (nrk_3v8) tempk2_8_3 := conv8_kp3 $buffering 1// bits of buffering = 64. 
    o_chl8_valid_8080_delayed_1_0 := o_chl8_valid $buffering 1 $cut_through // bits of buffering = 1. 
    read_k_8083_delayed_1_0 := read_k $buffering 1 $cut_through // bits of buffering = 1. 
    $volatile kread_8_3 := ( $mux o_chl8_valid_8080_delayed_1_0 ( $mux mode_2 0   ( $mux read_k_8083_delayed_1_0 tempk1_8_3  tempk2_8_3 )  )   0  )  $buffering 1
    kr_8_1_3 := ( $slice kread_8_3 63 56 )  $buffering 1// bits of buffering = 8. 
    kr_8_2_3 := ( $slice kread_8_3 55 48 )  $buffering 1// bits of buffering = 8. 
    kr_8_3_3 := ( $slice kread_8_3 47 40 )  $buffering 1// bits of buffering = 8. 
    kr_8_4_3 := ( $slice kread_8_3 39 32 )  $buffering 1// bits of buffering = 8. 
    kr_8_5_3 := ( $slice kread_8_3 31 24 )  $buffering 1// bits of buffering = 8. 
    kr_8_6_3 := ( $slice kread_8_3 23 16 )  $buffering 1// bits of buffering = 8. 
    kr_8_7_3 := ( $slice kread_8_3 15 8 )  $buffering 1// bits of buffering = 8. 
    kr_8_8_3 := ( $slice kread_8_3 7 0 )  $buffering 1// bits of buffering = 8. 
    $volatile kval_8_1_3 := ($bitcast ($int<8>) kr_8_1_3 ) $buffering 1
    $volatile kval_8_2_3 := ($bitcast ($int<8>) kr_8_2_3 ) $buffering 1
    $volatile kval_8_3_3 := ($bitcast ($int<8>) kr_8_3_3 ) $buffering 1
    $volatile kval_8_4_3 := ($bitcast ($int<8>) kr_8_4_3 ) $buffering 1
    $volatile kval_8_5_3 := ($bitcast ($int<8>) kr_8_5_3 ) $buffering 1
    $volatile kval_8_6_3 := ($bitcast ($int<8>) kr_8_6_3 ) $buffering 1
    $volatile kval_8_7_3 := ($bitcast ($int<8>) kr_8_7_3 ) $buffering 1
    $volatile kval_8_8_3 := ($bitcast ($int<8>) kr_8_8_3 ) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_3 ) ($cast ($int<16>) kval_8_1_3 ) ) (mul_val_8_1_3 time_pipe_8_1_3 ) 
    $call multiplier (($cast ($int<16>) ival2_3 ) ($cast ($int<16>) kval_8_2_3 ) ) (mul_val_8_2_3 time_pipe_8_2_3 ) 
    $call multiplier (($cast ($int<16>) ival3_3 ) ($cast ($int<16>) kval_8_3_3 ) ) (mul_val_8_3_3 time_pipe_8_3_3 ) 
    $call multiplier (($cast ($int<16>) ival4_3 ) ($cast ($int<16>) kval_8_4_3 ) ) (mul_val_8_4_3 time_pipe_8_4_3 ) 
    $call multiplier (($cast ($int<16>) ival5_3 ) ($cast ($int<16>) kval_8_5_3 ) ) (mul_val_8_5_3 time_pipe_8_5_3 ) 
    $call multiplier (($cast ($int<16>) ival6_3 ) ($cast ($int<16>) kval_8_6_3 ) ) (mul_val_8_6_3 time_pipe_8_6_3 ) 
    $call multiplier (($cast ($int<16>) ival7_3 ) ($cast ($int<16>) kval_8_7_3 ) ) (mul_val_8_7_3 time_pipe_8_7_3 ) 
    $call multiplier (($cast ($int<16>) ival8_3 ) ($cast ($int<16>) kval_8_8_3 ) ) (mul_val_8_8_3 time_pipe_8_8_3 ) 
    $volatile t_acc_val_8_3 := (((mul_val_8_1_3 + mul_val_8_2_3) + (mul_val_8_3_3 + mul_val_8_4_3)) + ((mul_val_8_5_3 + mul_val_8_6_3) + (mul_val_8_7_3 + mul_val_8_8_3))) $buffering 1
    $call multiplier (($cast ($int<16>) ival1_4 ) ($cast ($int<16>) kval_8_1_3 ) ) (mul_val_8_1_6 time_pipe_8_1_6 ) 
    $call multiplier (($cast ($int<16>) ival2_4 ) ($cast ($int<16>) kval_8_2_3 ) ) (mul_val_8_2_6 time_pipe_8_2_6 ) 
    $call multiplier (($cast ($int<16>) ival3_4 ) ($cast ($int<16>) kval_8_3_3 ) ) (mul_val_8_3_6 time_pipe_8_3_6 ) 
    $call multiplier (($cast ($int<16>) ival4_4 ) ($cast ($int<16>) kval_8_4_3 ) ) (mul_val_8_4_6 time_pipe_8_4_6 ) 
    $call multiplier (($cast ($int<16>) ival5_4 ) ($cast ($int<16>) kval_8_5_3 ) ) (mul_val_8_5_6 time_pipe_8_5_6 ) 
    $call multiplier (($cast ($int<16>) ival6_4 ) ($cast ($int<16>) kval_8_6_3 ) ) (mul_val_8_6_6 time_pipe_8_6_6 ) 
    $call multiplier (($cast ($int<16>) ival7_4 ) ($cast ($int<16>) kval_8_7_3 ) ) (mul_val_8_7_6 time_pipe_8_7_6 ) 
    $call multiplier (($cast ($int<16>) ival8_4 ) ($cast ($int<16>) kval_8_8_3 ) ) (mul_val_8_8_6 time_pipe_8_8_6 ) 
    $volatile t_acc_val_8_6 := (((mul_val_8_1_6 + mul_val_8_2_6) + (mul_val_8_3_6 + mul_val_8_4_6)) + ((mul_val_8_5_6 + mul_val_8_6_6) + (mul_val_8_7_6 + mul_val_8_8_6))) $buffering 1
    $volatile acc_val8_1 := ((t_acc_val_8_1 + t_acc_val_8_2) + t_acc_val_8_3) $buffering 1
    $volatile acc_val8_2 := ((t_acc_val_8_4 + t_acc_val_8_5) + t_acc_val_8_6) $buffering 1
    $volatile store_kernel8 := (store_kernel & o_chl8_valid) $buffering 1
    $volatile store_38 := (store_3 & o_chl8_valid) $buffering 1
    store_kernel8_8325_delayed_1_0 := store_kernel8 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel8_8325_delayed_1_0) conv8_kp1 := kread_8_1 $buffering 1// bits of buffering = 64. 
    store_kernel8_8329_delayed_1_0 := store_kernel8 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_kernel8_8329_delayed_1_0) conv8_kp2 := kread_8_2 $buffering 1// bits of buffering = 64. 
    store_38_8333_delayed_1_0 := store_38 $buffering 1 $cut_through // bits of buffering = 1. 
    $guard (store_38_8333_delayed_1_0) conv8_kp3 := kread_8_3 $buffering 1// bits of buffering = 64. 
    acc_pipe1_1 := ($bitcast ($uint<16>) acc_val1_1 ) $buffering 1// bits of buffering = 16. 
    acc_pipe1_2 := ($bitcast ($uint<16>) acc_val2_1 ) $buffering 1// bits of buffering = 16. 
    acc_pipe1_3 := ($bitcast ($uint<16>) acc_val3_1 ) $buffering 1// bits of buffering = 16. 
    acc_pipe1_4 := ($bitcast ($uint<16>) acc_val4_1 ) $buffering 1// bits of buffering = 16. 
    acc_pipe1_5 := ($bitcast ($uint<16>) acc_val5_1 ) $buffering 1// bits of buffering = 16. 
    acc_pipe1_6 := ($bitcast ($uint<16>) acc_val6_1 ) $buffering 1// bits of buffering = 16. 
    acc_pipe1_7 := ($bitcast ($uint<16>) acc_val7_1 ) $buffering 1// bits of buffering = 16. 
    acc_pipe1_8 := ($bitcast ($uint<16>) acc_val8_1 ) $buffering 1// bits of buffering = 16. 
    acc_pipe2_1 := ($bitcast ($uint<16>) acc_val1_2 ) $buffering 1// bits of buffering = 16. 
    acc_pipe2_2 := ($bitcast ($uint<16>) acc_val2_2 ) $buffering 1// bits of buffering = 16. 
    acc_pipe2_3 := ($bitcast ($uint<16>) acc_val3_2 ) $buffering 1// bits of buffering = 16. 
    acc_pipe2_4 := ($bitcast ($uint<16>) acc_val4_2 ) $buffering 1// bits of buffering = 16. 
    acc_pipe2_5 := ($bitcast ($uint<16>) acc_val5_2 ) $buffering 1// bits of buffering = 16. 
    acc_pipe2_6 := ($bitcast ($uint<16>) acc_val6_2 ) $buffering 1// bits of buffering = 16. 
    acc_pipe2_7 := ($bitcast ($uint<16>) acc_val7_2 ) $buffering 1// bits of buffering = 16. 
    acc_pipe2_8 := ($bitcast ($uint<16>) acc_val8_2 ) $buffering 1// bits of buffering = 16. 
    $while ( ~ all_done_flag )
    $volatile np_cnt := (p_cnt + 1 ) $buffering 1
    $volatile n_cmi := ( $mux (chl_left > max_chl) max_chl  chl_left )  $buffering 1
    $volatile n_chl_left := (chl_left - n_cmi) $buffering 1
    $if (p_cnt < num_parts) $then 
    $place[loopback]
    $endif
  }
}
$module [progx_xoptx_xo_storage_initializer_]
$in ()
$out ()
$is
{
  $null
  $attribute initializer 
}
$module [global_storage_initializer_]
$in ()
$out ()
$is
{
  $parallelblock[pb]
  {
    $call progx_xoptx_xo_storage_initializer_ () () 
  }
}
$module [inputModule8]
$in ( row_in : $uint<16>   ct : $uint<16>   chl_in : $uint<16>   rk : $uint<16>   pad : $uint<16>   num_parts : $uint<8>  )
$out ()
$is
{
  $parallelblock[blk]
  {
    $call singleFetch (row_in ct pad chl_in num_parts ) () 
    $branchblock [access_block]
    {
      $volatile ct_new := (ct + (pad << 1 )) $buffering 1
      $volatile row_size_total := ($bitcast ($uint<32>) (ct_new * chl_in) ) $buffering 1
      $volatile p_chl_in := ($bitcast ($uint<32>) (pad * chl_in) ) $buffering 1
      $volatile m_factor := ($bitcast ($uint<32>) (ct * chl_in) ) $buffering 1
      $volatile addr_init := (-1  * (($bitcast ($uint<32>) pad ) * m_factor)) $buffering 1
      $dopipeline $depth 15 $buffering 2
      $fullrate 
      $merge $entry $loopback 
      $phi address := 				  addr_init $on   $entry 				  n_address $on   $loopback 
      // type of target is $uint<32>
      $phi row1 := 				  ($bitcast ($uint<16>) 0  ) $on   $entry 				  n_row1 $on   $loopback 
      // type of target is $uint<16>
      $phi mycounter := 				  ($bitcast ($uint<32>) row_size_total ) $on   $entry 				  n_mycounter $on   $loopback 
      // type of target is $uint<32>
      $phi part_cnt := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  np_cnt $on   $loopback 
      // type of target is $uint<8>
      $endmerge
      $volatile next_row := (mycounter == 1 ) $buffering 1
      $volatile tmp_cnt := (mycounter - 1 ) $buffering 1
      $volatile n_mycounter := ( $mux next_row row_size_total  tmp_cnt )  $buffering 1
      $volatile update_row := ( $mux next_row (row1 + 2 )  row1 )  $buffering 1
      ADD_u16_u16_8541_8541_delayed_1_0 := (row_in + 2 ) $buffering 1 $cut_through // bits of buffering = 16. 
      $volatile continue_flag1 := (update_row < ADD_u16_u16_8541_8541_delayed_1_0) $buffering 1
      SUB_u32_u32_8551_8551_delayed_1_0 := (row_size_total - p_chl_in) $buffering 1 $cut_through // bits of buffering = 32. 
      $volatile mc_lt_p := ((mycounter <= p_chl_in) | (mycounter > SUB_u32_u32_8551_8551_delayed_1_0)) $buffering 1
      $volatile n_row1 := ( $mux continue_flag1 update_row  0  )  $buffering 1
      $volatile n_address := ( $mux continue_flag1 (address + (( $mux next_row m_factor  0  )  + ( $mux mc_lt_p 0   1  ) ))  addr_init )  $buffering 1
      $volatile np_cnt := (part_cnt + ( $mux continue_flag1 0   1  ) ) $buffering 1
      SUB_u16_u16_8595_8595_delayed_1_0 := ((row_in + 3 ) - pad) $buffering 1 $cut_through // bits of buffering = 16. 
      $volatile p1_zero := (mc_lt_p | ((row1 < pad) | (row1 >= SUB_u16_u16_8595_8595_delayed_1_0))) $buffering 1
      SUB_u16_u16_8612_8612_delayed_1_0 := ((row_in + 2 ) - pad) $buffering 1 $cut_through // bits of buffering = 16. 
      $volatile p2_zero := (mc_lt_p | (((row1 + 1 ) < pad) | (row1 >= SUB_u16_u16_8612_8612_delayed_1_0))) $buffering 1
      $volatile addr2 := (address + m_factor) $buffering 1
      $guard (~p1_zero) val1 := T[0 ][address] $buffering 1// bits of buffering = 64. 
      $guard (~p2_zero) val2 := T[0 ][addr2] $buffering 1// bits of buffering = 64. 
      p1_zero_8635_delayed_5_0 := p1_zero $buffering 5 $cut_through // bits of buffering = 5. 
      $volatile send_1 := ( $mux p1_zero_8635_delayed_5_0 0   val1 )  $buffering 1
      prev_core_ip1 := send_1 $buffering 1// bits of buffering = 64. 
      p2_zero_8644_delayed_5_0 := p2_zero $buffering 5 $cut_through // bits of buffering = 5. 
      prev_core_ip2 := ( $mux p2_zero_8644_delayed_5_0 0   val2 )  $buffering 1// bits of buffering = 64. 
      $while (continue_flag1 | (part_cnt < num_parts))
    }
  }
}
$module [loadKernel_in1]
$in ( init_addr : $uint<32>   chl_in : $uint<16>   chl_out : $uint<16>   rk : $uint<16>   ck : $uint<16>   index : $uint<8>  )
$out ()
$is
{
  $branchblock [load_block]
  {
    $volatile row_size := (chl_in * ck) $buffering 1
    $volatile count_update := (row_size * (rk - 1 )) $buffering 1
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi chl_num := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_chl_num $on   $loopback 
    // type of target is $uint<16>
    $phi sent := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  n_sent $on   $loopback 
    // type of target is $uint<16>
    $phi fv1 := 			  0  $on   $entry 			  nfv1 $on   $loopback 
    // type of target is $uint<64>
    $phi cv1 := 			  ($bitcast ($uint<64>) 0  ) $on   $entry 			  ncv1 $on   $loopback 
    // type of target is $uint<64>
    $phi left := 			  chl_in $on   $entry 			  n_left $on   $loopback 
    // type of target is $uint<16>
    $phi head := 			  ($bitcast ($uint<3>) 0  ) $on   $entry 			  n_head $on   $loopback 
    // type of target is $uint<3>
    $phi addr1 := 			  init_addr $on   $entry 			  n_addr1 $on   $loopback 
    // type of target is $uint<32>
    $phi fn := 			  ($bitcast ($uint<1>) 1  ) $on   $entry 			  n_fn $on   $loopback 
    // type of target is $uint<1>
    $endmerge
    $volatile chl_3 := ($bitcast ($uint<3>) chl_num ) $buffering 1
    $volatile sp := ($bitcast ($uint<3>) addr1 ) $buffering 1
    $volatile min1 := ( $mux (sp > head) sp  head )  $buffering 1
    $volatile mi71 := (8  - ($bitcast ($uint<16>) min1 )) $buffering 1
    $volatile ns := ( $mux (mi71 < left) mi71  left )  $buffering 1
    $volatile hns := (head + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile sns := (sp + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile done := (left == ns) $buffering 1
    $volatile send := (done | (hns == 0 )) $buffering 1
    $volatile n_left := ( $mux done chl_in  (left - ns) )  $buffering 1
    $guard (fn) read_val := K[0 ][(addr1 >> 3 )] $buffering 1// bits of buffering = 64. 
    fn_8789_delayed_5_0 := fn $buffering 5 $cut_through // bits of buffering = 5. 
    fv1_8791_delayed_5_0 := fv1 $buffering 5 $cut_through // bits of buffering = 320. 
    $volatile val_in_use := ( $mux fn_8789_delayed_5_0 read_val  fv1_8791_delayed_5_0 )  $buffering 1
    SHL_u64_u64_8799_8799_delayed_5_0 := (($bitcast ($uint<64>) sp ) << 3 ) $buffering 5 $cut_through // bits of buffering = 320. 
    SHL_u64_u64_8804_8804_delayed_5_0 := (($bitcast ($uint<64>) head ) << 3 ) $buffering 5 $cut_through // bits of buffering = 320. 
    $volatile tmp1 := ((val_in_use << SHL_u64_u64_8799_8799_delayed_5_0) >> SHL_u64_u64_8804_8804_delayed_5_0) $buffering 1
    $volatile bytemask := (($bitcast ($uint<64>) _hFFFFFFFFFFFFFFFF  ) << (($bitcast ($uint<64>) (8  - hns) ) << 3 )) $buffering 1
    cv1_8819_delayed_5_0 := cv1 $buffering 5 $cut_through // bits of buffering = 320. 
    bytemask_8822_delayed_5_0 := bytemask $buffering 5 $cut_through // bits of buffering = 320. 
    $volatile send_data := ((cv1_8819_delayed_5_0 | tmp1) & bytemask_8822_delayed_5_0) $buffering 1
    send_8826_delayed_5_0 := send $buffering 5 $cut_through // bits of buffering = 5. 
    $volatile ncv1 := ( $mux send_8826_delayed_5_0 0   send_data )  $buffering 1
    $volatile send_to_1 := (send & (chl_3 == 1 )) $buffering 1
    $volatile send_to_2 := (send & (chl_3 == 2 )) $buffering 1
    $volatile send_to_3 := (send & (chl_3 == 3 )) $buffering 1
    $volatile send_to_4 := (send & (chl_3 == 4 )) $buffering 1
    $volatile send_to_5 := (send & (chl_3 == 5 )) $buffering 1
    $volatile send_to_6 := (send & (chl_3 == 6 )) $buffering 1
    $volatile send_to_7 := (send & (chl_3 == 7 )) $buffering 1
    $volatile send_to_8 := (send & (chl_3 == 8 )) $buffering 1
    send_to_1_8887_delayed_5_0 := send_to_1 $buffering 5 $cut_through // bits of buffering = 5. 
    $guard (send_to_1_8887_delayed_5_0) core1_kp1 := send_data $buffering 1// bits of buffering = 64. 
    send_to_2_8891_delayed_5_0 := send_to_2 $buffering 5 $cut_through // bits of buffering = 5. 
    $guard (send_to_2_8891_delayed_5_0) core2_kp1 := send_data $buffering 1// bits of buffering = 64. 
    send_to_3_8895_delayed_5_0 := send_to_3 $buffering 5 $cut_through // bits of buffering = 5. 
    $guard (send_to_3_8895_delayed_5_0) core3_kp1 := send_data $buffering 1// bits of buffering = 64. 
    send_to_4_8899_delayed_5_0 := send_to_4 $buffering 5 $cut_through // bits of buffering = 5. 
    $guard (send_to_4_8899_delayed_5_0) core4_kp1 := send_data $buffering 1// bits of buffering = 64. 
    send_to_5_8903_delayed_5_0 := send_to_5 $buffering 5 $cut_through // bits of buffering = 5. 
    $guard (send_to_5_8903_delayed_5_0) core5_kp1 := send_data $buffering 1// bits of buffering = 64. 
    send_to_6_8907_delayed_5_0 := send_to_6 $buffering 5 $cut_through // bits of buffering = 5. 
    $guard (send_to_6_8907_delayed_5_0) core6_kp1 := send_data $buffering 1// bits of buffering = 64. 
    send_to_7_8911_delayed_5_0 := send_to_7 $buffering 5 $cut_through // bits of buffering = 5. 
    $guard (send_to_7_8911_delayed_5_0) core7_kp1 := send_data $buffering 1// bits of buffering = 64. 
    send_to_8_8915_delayed_5_0 := send_to_8 $buffering 5 $cut_through // bits of buffering = 5. 
    $guard (send_to_8_8915_delayed_5_0) core8_kp1 := send_data $buffering 1// bits of buffering = 64. 
    SUB_u16_u16_8924_8924_delayed_1_0 := (ck - 1 ) $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile n_sent := ( $mux done ( $mux (sent == SUB_u16_u16_8924_8924_delayed_1_0) 0   (sent + 1 ) )   sent )  $buffering 1
    $volatile n_head := ( $mux send 0   hns )  $buffering 1
    $volatile nxt_chl := ((n_sent == 0 ) & done) $buffering 1
    $volatile n_addr1 := (addr1 + ($bitcast ($uint<32>) ( $mux nxt_chl (count_update + ns)  ns )  )) $buffering 1
    $volatile n_chl_num := ( $mux nxt_chl (chl_num + 1 )  chl_num )  $buffering 1
    $volatile na3_1 := (n_addr1 >> 3 ) $buffering 1
    $volatile n_fn := (((sns == 0 ) | nxt_chl) | (done & (na3_1 != (addr1 >> 3 )))) $buffering 1
    $volatile nfv1 := val_in_use $buffering 1
    $volatile exit_cond := (nxt_chl & (chl_num == chl_out)) $buffering 1
    $while ( ~ exit_cond )
  }
}
$module [loadKernel_in2]
$in ( init_addr : $uint<32>   chl_in : $uint<16>   chl_out : $uint<16>   rk : $uint<16>   ck : $uint<16>   index : $uint<8>  )
$out ()
$is
{
  $branchblock [load_block]
  {
    $volatile row_size := (chl_in * ck) $buffering 1
    $volatile count_update := (row_size * (rk - 1 )) $buffering 1
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi chl_num := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_chl_num $on   $loopback 
    // type of target is $uint<16>
    $phi sent := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  n_sent $on   $loopback 
    // type of target is $uint<16>
    $phi fv1 := 			  0  $on   $entry 			  nfv1 $on   $loopback 
    // type of target is $uint<64>
    $phi cv1 := 			  ($bitcast ($uint<64>) 0  ) $on   $entry 			  ncv1 $on   $loopback 
    // type of target is $uint<64>
    $phi left := 			  chl_in $on   $entry 			  n_left $on   $loopback 
    // type of target is $uint<16>
    $phi head := 			  ($bitcast ($uint<3>) 0  ) $on   $entry 			  n_head $on   $loopback 
    // type of target is $uint<3>
    $phi addr1 := 			  init_addr $on   $entry 			  n_addr1 $on   $loopback 
    // type of target is $uint<32>
    $phi fn := 			  ($bitcast ($uint<1>) 1  ) $on   $entry 			  n_fn $on   $loopback 
    // type of target is $uint<1>
    $endmerge
    $volatile chl_3 := ($bitcast ($uint<3>) chl_num ) $buffering 1
    $volatile sp := ($bitcast ($uint<3>) addr1 ) $buffering 1
    $volatile min1 := ( $mux (sp > head) sp  head )  $buffering 1
    $volatile mi71 := (8  - ($bitcast ($uint<16>) min1 )) $buffering 1
    $volatile ns := ( $mux (mi71 < left) mi71  left )  $buffering 1
    $volatile hns := (head + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile sns := (sp + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile done := (left == ns) $buffering 1
    $volatile send := (done | (hns == 0 )) $buffering 1
    $volatile n_left := ( $mux done chl_in  (left - ns) )  $buffering 1
    $guard (fn) read_val := K[0 ][(addr1 >> 3 )] $buffering 1// bits of buffering = 64. 
    fn_9132_delayed_5_0 := fn $buffering 5 $cut_through // bits of buffering = 5. 
    fv1_9134_delayed_5_0 := fv1 $buffering 5 $cut_through // bits of buffering = 320. 
    $volatile val_in_use := ( $mux fn_9132_delayed_5_0 read_val  fv1_9134_delayed_5_0 )  $buffering 1
    SHL_u64_u64_9142_9142_delayed_5_0 := (($bitcast ($uint<64>) sp ) << 3 ) $buffering 5 $cut_through // bits of buffering = 320. 
    SHL_u64_u64_9147_9147_delayed_5_0 := (($bitcast ($uint<64>) head ) << 3 ) $buffering 5 $cut_through // bits of buffering = 320. 
    $volatile tmp1 := ((val_in_use << SHL_u64_u64_9142_9142_delayed_5_0) >> SHL_u64_u64_9147_9147_delayed_5_0) $buffering 1
    $volatile bytemask := (($bitcast ($uint<64>) _hFFFFFFFFFFFFFFFF  ) << (($bitcast ($uint<64>) (8  - hns) ) << 3 )) $buffering 1
    cv1_9162_delayed_5_0 := cv1 $buffering 5 $cut_through // bits of buffering = 320. 
    bytemask_9165_delayed_5_0 := bytemask $buffering 5 $cut_through // bits of buffering = 320. 
    $volatile send_data := ((cv1_9162_delayed_5_0 | tmp1) & bytemask_9165_delayed_5_0) $buffering 1
    send_9169_delayed_5_0 := send $buffering 5 $cut_through // bits of buffering = 5. 
    $volatile ncv1 := ( $mux send_9169_delayed_5_0 0   send_data )  $buffering 1
    $volatile send_to_1 := (send & (chl_3 == 1 )) $buffering 1
    $volatile send_to_2 := (send & (chl_3 == 2 )) $buffering 1
    $volatile send_to_3 := (send & (chl_3 == 3 )) $buffering 1
    $volatile send_to_4 := (send & (chl_3 == 4 )) $buffering 1
    $volatile send_to_5 := (send & (chl_3 == 5 )) $buffering 1
    $volatile send_to_6 := (send & (chl_3 == 6 )) $buffering 1
    $volatile send_to_7 := (send & (chl_3 == 7 )) $buffering 1
    $volatile send_to_8 := (send & (chl_3 == 8 )) $buffering 1
    send_to_1_9230_delayed_5_0 := send_to_1 $buffering 5 $cut_through // bits of buffering = 5. 
    $guard (send_to_1_9230_delayed_5_0) core1_kp2 := send_data $buffering 1// bits of buffering = 64. 
    send_to_2_9234_delayed_5_0 := send_to_2 $buffering 5 $cut_through // bits of buffering = 5. 
    $guard (send_to_2_9234_delayed_5_0) core2_kp2 := send_data $buffering 1// bits of buffering = 64. 
    send_to_3_9238_delayed_5_0 := send_to_3 $buffering 5 $cut_through // bits of buffering = 5. 
    $guard (send_to_3_9238_delayed_5_0) core3_kp2 := send_data $buffering 1// bits of buffering = 64. 
    send_to_4_9242_delayed_5_0 := send_to_4 $buffering 5 $cut_through // bits of buffering = 5. 
    $guard (send_to_4_9242_delayed_5_0) core4_kp2 := send_data $buffering 1// bits of buffering = 64. 
    send_to_5_9246_delayed_5_0 := send_to_5 $buffering 5 $cut_through // bits of buffering = 5. 
    $guard (send_to_5_9246_delayed_5_0) core5_kp2 := send_data $buffering 1// bits of buffering = 64. 
    send_to_6_9250_delayed_5_0 := send_to_6 $buffering 5 $cut_through // bits of buffering = 5. 
    $guard (send_to_6_9250_delayed_5_0) core6_kp2 := send_data $buffering 1// bits of buffering = 64. 
    send_to_7_9254_delayed_5_0 := send_to_7 $buffering 5 $cut_through // bits of buffering = 5. 
    $guard (send_to_7_9254_delayed_5_0) core7_kp2 := send_data $buffering 1// bits of buffering = 64. 
    send_to_8_9258_delayed_5_0 := send_to_8 $buffering 5 $cut_through // bits of buffering = 5. 
    $guard (send_to_8_9258_delayed_5_0) core8_kp2 := send_data $buffering 1// bits of buffering = 64. 
    SUB_u16_u16_9267_9267_delayed_1_0 := (ck - 1 ) $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile n_sent := ( $mux done ( $mux (sent == SUB_u16_u16_9267_9267_delayed_1_0) 0   (sent + 1 ) )   sent )  $buffering 1
    $volatile n_head := ( $mux send 0   hns )  $buffering 1
    $volatile nxt_chl := ((n_sent == 0 ) & done) $buffering 1
    $volatile n_addr1 := (addr1 + ($bitcast ($uint<32>) ( $mux nxt_chl (count_update + ns)  ns )  )) $buffering 1
    $volatile n_chl_num := ( $mux nxt_chl (chl_num + 1 )  chl_num )  $buffering 1
    $volatile na3_1 := (n_addr1 >> 3 ) $buffering 1
    $volatile n_fn := (((sns == 0 ) | nxt_chl) | (done & (na3_1 != (addr1 >> 3 )))) $buffering 1
    $volatile nfv1 := val_in_use $buffering 1
    $volatile exit_cond := (nxt_chl & (chl_num == chl_out)) $buffering 1
    $while ( ~ exit_cond )
  }
}
$module [loadKernel_in3]
$in ( init_addr : $uint<32>   chl_in : $uint<16>   chl_out : $uint<16>   rk : $uint<16>   ck : $uint<16>   index : $uint<8>  )
$out ()
$is
{
  $branchblock [load_block]
  {
    $volatile row_size := (chl_in * ck) $buffering 1
    $volatile count_update := (row_size * (rk - 1 )) $buffering 1
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi chl_num := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_chl_num $on   $loopback 
    // type of target is $uint<16>
    $phi sent := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  n_sent $on   $loopback 
    // type of target is $uint<16>
    $phi fv1 := 			  0  $on   $entry 			  nfv1 $on   $loopback 
    // type of target is $uint<64>
    $phi cv1 := 			  ($bitcast ($uint<64>) 0  ) $on   $entry 			  ncv1 $on   $loopback 
    // type of target is $uint<64>
    $phi left := 			  chl_in $on   $entry 			  n_left $on   $loopback 
    // type of target is $uint<16>
    $phi head := 			  ($bitcast ($uint<3>) 0  ) $on   $entry 			  n_head $on   $loopback 
    // type of target is $uint<3>
    $phi addr1 := 			  init_addr $on   $entry 			  n_addr1 $on   $loopback 
    // type of target is $uint<32>
    $phi fn := 			  ($bitcast ($uint<1>) 1  ) $on   $entry 			  n_fn $on   $loopback 
    // type of target is $uint<1>
    $endmerge
    $volatile chl_3 := ($bitcast ($uint<3>) chl_num ) $buffering 1
    $volatile sp := ($bitcast ($uint<3>) addr1 ) $buffering 1
    $volatile min1 := ( $mux (sp > head) sp  head )  $buffering 1
    $volatile mi71 := (8  - ($bitcast ($uint<16>) min1 )) $buffering 1
    $volatile ns := ( $mux (mi71 < left) mi71  left )  $buffering 1
    $volatile hns := (head + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile sns := (sp + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile done := (left == ns) $buffering 1
    $volatile send := (done | (hns == 0 )) $buffering 1
    $volatile n_left := ( $mux done chl_in  (left - ns) )  $buffering 1
    $guard (fn) read_val := K[0 ][(addr1 >> 3 )] $buffering 1// bits of buffering = 64. 
    fn_9475_delayed_5_0 := fn $buffering 5 $cut_through // bits of buffering = 5. 
    fv1_9477_delayed_5_0 := fv1 $buffering 5 $cut_through // bits of buffering = 320. 
    $volatile val_in_use := ( $mux fn_9475_delayed_5_0 read_val  fv1_9477_delayed_5_0 )  $buffering 1
    SHL_u64_u64_9485_9485_delayed_5_0 := (($bitcast ($uint<64>) sp ) << 3 ) $buffering 5 $cut_through // bits of buffering = 320. 
    SHL_u64_u64_9490_9490_delayed_5_0 := (($bitcast ($uint<64>) head ) << 3 ) $buffering 5 $cut_through // bits of buffering = 320. 
    $volatile tmp1 := ((val_in_use << SHL_u64_u64_9485_9485_delayed_5_0) >> SHL_u64_u64_9490_9490_delayed_5_0) $buffering 1
    $volatile bytemask := (($bitcast ($uint<64>) _hFFFFFFFFFFFFFFFF  ) << (($bitcast ($uint<64>) (8  - hns) ) << 3 )) $buffering 1
    cv1_9505_delayed_5_0 := cv1 $buffering 5 $cut_through // bits of buffering = 320. 
    bytemask_9508_delayed_5_0 := bytemask $buffering 5 $cut_through // bits of buffering = 320. 
    $volatile send_data := ((cv1_9505_delayed_5_0 | tmp1) & bytemask_9508_delayed_5_0) $buffering 1
    send_9512_delayed_5_0 := send $buffering 5 $cut_through // bits of buffering = 5. 
    $volatile ncv1 := ( $mux send_9512_delayed_5_0 0   send_data )  $buffering 1
    $volatile send_to_1 := (send & (chl_3 == 1 )) $buffering 1
    $volatile send_to_2 := (send & (chl_3 == 2 )) $buffering 1
    $volatile send_to_3 := (send & (chl_3 == 3 )) $buffering 1
    $volatile send_to_4 := (send & (chl_3 == 4 )) $buffering 1
    $volatile send_to_5 := (send & (chl_3 == 5 )) $buffering 1
    $volatile send_to_6 := (send & (chl_3 == 6 )) $buffering 1
    $volatile send_to_7 := (send & (chl_3 == 7 )) $buffering 1
    $volatile send_to_8 := (send & (chl_3 == 8 )) $buffering 1
    send_to_1_9573_delayed_5_0 := send_to_1 $buffering 5 $cut_through // bits of buffering = 5. 
    $guard (send_to_1_9573_delayed_5_0) core1_kp3 := send_data $buffering 1// bits of buffering = 64. 
    send_to_2_9577_delayed_5_0 := send_to_2 $buffering 5 $cut_through // bits of buffering = 5. 
    $guard (send_to_2_9577_delayed_5_0) core2_kp3 := send_data $buffering 1// bits of buffering = 64. 
    send_to_3_9581_delayed_5_0 := send_to_3 $buffering 5 $cut_through // bits of buffering = 5. 
    $guard (send_to_3_9581_delayed_5_0) core3_kp3 := send_data $buffering 1// bits of buffering = 64. 
    send_to_4_9585_delayed_5_0 := send_to_4 $buffering 5 $cut_through // bits of buffering = 5. 
    $guard (send_to_4_9585_delayed_5_0) core4_kp3 := send_data $buffering 1// bits of buffering = 64. 
    send_to_5_9589_delayed_5_0 := send_to_5 $buffering 5 $cut_through // bits of buffering = 5. 
    $guard (send_to_5_9589_delayed_5_0) core5_kp3 := send_data $buffering 1// bits of buffering = 64. 
    send_to_6_9593_delayed_5_0 := send_to_6 $buffering 5 $cut_through // bits of buffering = 5. 
    $guard (send_to_6_9593_delayed_5_0) core6_kp3 := send_data $buffering 1// bits of buffering = 64. 
    send_to_7_9597_delayed_5_0 := send_to_7 $buffering 5 $cut_through // bits of buffering = 5. 
    $guard (send_to_7_9597_delayed_5_0) core7_kp3 := send_data $buffering 1// bits of buffering = 64. 
    send_to_8_9601_delayed_5_0 := send_to_8 $buffering 5 $cut_through // bits of buffering = 5. 
    $guard (send_to_8_9601_delayed_5_0) core8_kp3 := send_data $buffering 1// bits of buffering = 64. 
    SUB_u16_u16_9610_9610_delayed_1_0 := (ck - 1 ) $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile n_sent := ( $mux done ( $mux (sent == SUB_u16_u16_9610_9610_delayed_1_0) 0   (sent + 1 ) )   sent )  $buffering 1
    $volatile n_head := ( $mux send 0   hns )  $buffering 1
    $volatile nxt_chl := ((n_sent == 0 ) & done) $buffering 1
    $volatile n_addr1 := (addr1 + ($bitcast ($uint<32>) ( $mux nxt_chl (count_update + ns)  ns )  )) $buffering 1
    $volatile n_chl_num := ( $mux nxt_chl (chl_num + 1 )  chl_num )  $buffering 1
    $volatile na3_1 := (n_addr1 >> 3 ) $buffering 1
    $volatile n_fn := (((sns == 0 ) | nxt_chl) | (done & (na3_1 != (addr1 >> 3 )))) $buffering 1
    $volatile nfv1 := val_in_use $buffering 1
    $volatile exit_cond := (nxt_chl & (chl_num == chl_out)) $buffering 1
    $while ( ~ exit_cond )
  }
}
$module [loadKernel]
$in ( chl_in : $uint<16>   chl_out : $uint<16>   rk : $uint<16>   ck : $uint<16>   index : $uint<8>  )
$out ()
$is
{
  $volatile row_size := (chl_in * ck) $buffering 1
  $volatile mode_3 := (rk == 3 ) $buffering 1
  $volatile addr1 := 0  $buffering 1
  $volatile addr2 := ($bitcast ($uint<32>) row_size ) $buffering 1
  $volatile addr3 := ($bitcast ($uint<32>) (row_size << 1 ) ) $buffering 1
  $parallelblock[k_block]
  {
    $call loadKernel_in1 (addr1 chl_in chl_out rk ck index ) () 
    $call loadKernel_in2 (addr2 chl_in chl_out rk ck index ) () 
    $guard (mode_3) $call loadKernel_in3 (addr3 chl_in chl_out rk ck index ) () 
  }
}
$pipeline $depth 15 $buffering 1 $fullrate $module [scaler]
$in ( input : $uint<16>   scale_val_in : $uint<32>   shift_val : $uint<16>  )
$out ( output : $uint<8>  )
$is
{
  $volatile scale_val := ($cast ($int<32>) scale_val_in ) $buffering 1
  $volatile in_adj := ($cast ($int<32>) ($cast ($int<16>) input ) ) $buffering 1
  $volatile mul_output := ($bitcast ($uint<32>) (in_adj * scale_val) ) $buffering 1
  $volatile ret_val := (mul_output >> ($bitcast ($uint<32>) shift_val )) $buffering 1
  output := ($bitcast ($uint<8>) ret_val ) $buffering 1// bits of buffering = 8. 
  $attribute delay 3
}
$module [sendB]
$in ( size : $uint<32>  )
$out ()
$is
{
  $branchblock [body]
  {
    $place[forx_xbodyx_xpreheader_forx_xbody]
    $merge forx_xbody_forx_xbody forx_xbodyx_xpreheader_forx_xbody 
    $phi ix_x067 := 			  ($cast ($uint<32>) inc ) $on   forx_xbody_forx_xbody 			  0  $on   forx_xbodyx_xpreheader_forx_xbody 
    // type of target is $uint<32>
    $endmerge
    arrayidx := @(B[0 ][ix_x067]) $buffering 1// bits of buffering = 32. 
    tmp4 := ->(arrayidx) $buffering 1// bits of buffering = 64. 
    conv47 := ( $slice tmp4 63 56 )  $buffering 1// bits of buffering = 8. 
    conv41 := ( $slice tmp4 55 48 )  $buffering 1// bits of buffering = 8. 
    conv35 := ( $slice tmp4 47 40 )  $buffering 1// bits of buffering = 8. 
    conv29 := ( $slice tmp4 39 32 )  $buffering 1// bits of buffering = 8. 
    conv23 := ( $slice tmp4 31 24 )  $buffering 1// bits of buffering = 8. 
    conv17 := ( $slice tmp4 23 16 )  $buffering 1// bits of buffering = 8. 
    conv11 := ( $slice tmp4 15 8 )  $buffering 1// bits of buffering = 8. 
    conv := ( $slice tmp4 7 0 )  $buffering 1// bits of buffering = 8. 
    maxpool_output_pipe := conv47 $buffering 1// bits of buffering = 8. 
    maxpool_output_pipe := conv41 $buffering 1// bits of buffering = 8. 
    maxpool_output_pipe := conv35 $buffering 1// bits of buffering = 8. 
    maxpool_output_pipe := conv29 $buffering 1// bits of buffering = 8. 
    maxpool_output_pipe := conv23 $buffering 1// bits of buffering = 8. 
    maxpool_output_pipe := conv17 $buffering 1// bits of buffering = 8. 
    maxpool_output_pipe := conv11 $buffering 1// bits of buffering = 8. 
    maxpool_output_pipe := conv $buffering 1// bits of buffering = 8. 
    $volatile inc := (ix_x067 + 1 ) $buffering 1
    $volatile exitcond1 := (inc == size) $buffering 1
    $if exitcond1 $then 
    $place[forx_xbody_forx_xendx_xloopexit]
    $else 
    $place[forx_xbody_forx_xbody]
    $endif
    $merge forx_xbody_forx_xendx_xloopexit 
    $endmerge
  }
}
$module [sendInner1]
$in ( init_addr : $uint<32>   rb : $uint<16>   cb : $uint<16>   chl_out : $uint<16>   shift_val : $uint<16>   num_parts : $uint<8>   max_chl : $uint<16>   activation : $uint<1>   scale_val : $uint<32>  )
$out ()
$is
{
  $branchblock [SI_blk]
  {
    $volatile row_size := ($bitcast ($uint<32>) (chl_out * cb) ) $buffering 1
    $volatile apply_relu := (activation == 1 ) $buffering 1
    $merge $entry loopback 
    $phi p_cnt := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  np_cnt $on   loopback 
    // type of target is $uint<8>
    $phi chl_max_itr := 			  max_chl $on   $entry 			  n_cmi $on   loopback 
    // type of target is $uint<16>
    $phi chl_left := 			  (chl_out - max_chl) $on   $entry 			  n_chl_left $on   loopback 
    // type of target is $uint<16>
    $phi addr := 			  init_addr $on   $entry 			  n_addr $on   loopback 
    // type of target is $uint<32>
    $endmerge
    $volatile chl_change_inc := ($bitcast ($uint<32>) (chl_out - chl_max_itr) ) $buffering 1
    $volatile rs := (row_size + chl_change_inc) $buffering 1
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi row := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_row $on   $loopback 
    // type of target is $uint<16>
    $phi left := 			  chl_max_itr $on   $entry 			  n_left $on   $loopback 
    // type of target is $uint<16>
    $phi sent := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  n_sent $on   $loopback 
    // type of target is $uint<16>
    $phi fv1 := 			  ($bitcast ($uint<64>) 0  ) $on   $entry 			  nfv1 $on   $loopback 
    // type of target is $uint<64>
    $phi cv1 := 			  ($bitcast ($uint<64>) 0  ) $on   $entry 			  ncv1 $on   $loopback 
    // type of target is $uint<64>
    $phi head := 			  ($bitcast ($uint<3>) 0  ) $on   $entry 			  n_head $on   $loopback 
    // type of target is $uint<3>
    $phi addr1 := 			  addr $on   $entry 			  n_addr1 $on   $loopback 
    // type of target is $uint<32>
    $phi fn := 			  ($bitcast ($uint<1>) 1  ) $on   $entry 			  n_fn $on   $loopback 
    // type of target is $uint<1>
    $phi bm := 			  ($bitcast ($uint<64>) 0  ) $on   $entry 			  nbm $on   $loopback 
    // type of target is $uint<64>
    $endmerge
    $volatile sp := ($bitcast ($uint<3>) addr1 ) $buffering 1
    $volatile min1 := ( $mux (sp > head) sp  head )  $buffering 1
    $volatile mi71 := (8  - ($bitcast ($uint<16>) min1 )) $buffering 1
    $volatile ns := ( $mux (mi71 < left) mi71  left )  $buffering 1
    $volatile hns := (head + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile sns := (sp + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile done := (left == ns) $buffering 1
    $volatile n_fn := (done | (hns == 0 )) $buffering 1
    $volatile n_left := ( $mux done chl_max_itr  (left - ns) )  $buffering 1
    $guard (fn) read_val1 := output_pipe1_1 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val2 := output_pipe2_1 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val3 := output_pipe3_1 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val4 := output_pipe4_1 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val5 := output_pipe5_1 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val6 := output_pipe6_1 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val7 := output_pipe7_1 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val8 := output_pipe8_1 $buffering 1// bits of buffering = 16. 
    $volatile grd_cnd1 := (apply_relu & ((read_val1 [] 15 ) == 1 )) $buffering 1
    $volatile grd_cnd2 := (apply_relu & ((read_val2 [] 15 ) == 1 )) $buffering 1
    $volatile grd_cnd3 := (apply_relu & ((read_val3 [] 15 ) == 1 )) $buffering 1
    $volatile grd_cnd4 := (apply_relu & ((read_val4 [] 15 ) == 1 )) $buffering 1
    $volatile grd_cnd5 := (apply_relu & ((read_val5 [] 15 ) == 1 )) $buffering 1
    $volatile grd_cnd6 := (apply_relu & ((read_val6 [] 15 ) == 1 )) $buffering 1
    $volatile grd_cnd7 := (apply_relu & ((read_val7 [] 15 ) == 1 )) $buffering 1
    $volatile grd_cnd8 := (apply_relu & ((read_val8 [] 15 ) == 1 )) $buffering 1
    $guard (~grd_cnd1) $call scaler (read_val1 scale_val shift_val ) (scaled1 ) 
    $guard (~grd_cnd2) $call scaler (read_val2 scale_val shift_val ) (scaled2 ) 
    $guard (~grd_cnd3) $call scaler (read_val3 scale_val shift_val ) (scaled3 ) 
    $guard (~grd_cnd4) $call scaler (read_val4 scale_val shift_val ) (scaled4 ) 
    $guard (~grd_cnd5) $call scaler (read_val5 scale_val shift_val ) (scaled5 ) 
    $guard (~grd_cnd6) $call scaler (read_val6 scale_val shift_val ) (scaled6 ) 
    $guard (~grd_cnd7) $call scaler (read_val7 scale_val shift_val ) (scaled7 ) 
    $guard (~grd_cnd8) $call scaler (read_val8 scale_val shift_val ) (scaled8 ) 
    grd_cnd1_10180_delayed_3_0 := grd_cnd1 $buffering 3 $cut_through // bits of buffering = 3. 
    $volatile tmp1 := ( $mux grd_cnd1_10180_delayed_3_0 0   scaled1 )  $buffering 1
    grd_cnd2_10186_delayed_3_0 := grd_cnd2 $buffering 3 $cut_through // bits of buffering = 3. 
    $volatile tmp2 := ( $mux grd_cnd2_10186_delayed_3_0 0   scaled2 )  $buffering 1
    grd_cnd3_10192_delayed_3_0 := grd_cnd3 $buffering 3 $cut_through // bits of buffering = 3. 
    $volatile tmp3 := ( $mux grd_cnd3_10192_delayed_3_0 0   scaled3 )  $buffering 1
    grd_cnd4_10198_delayed_3_0 := grd_cnd4 $buffering 3 $cut_through // bits of buffering = 3. 
    $volatile tmp4 := ( $mux grd_cnd4_10198_delayed_3_0 0   scaled4 )  $buffering 1
    grd_cnd5_10204_delayed_3_0 := grd_cnd5 $buffering 3 $cut_through // bits of buffering = 3. 
    $volatile tmp5 := ( $mux grd_cnd5_10204_delayed_3_0 0   scaled5 )  $buffering 1
    grd_cnd6_10210_delayed_3_0 := grd_cnd6 $buffering 3 $cut_through // bits of buffering = 3. 
    $volatile tmp6 := ( $mux grd_cnd6_10210_delayed_3_0 0   scaled6 )  $buffering 1
    grd_cnd7_10216_delayed_3_0 := grd_cnd7 $buffering 3 $cut_through // bits of buffering = 3. 
    $volatile tmp7 := ( $mux grd_cnd7_10216_delayed_3_0 0   scaled7 )  $buffering 1
    grd_cnd8_10222_delayed_3_0 := grd_cnd8 $buffering 3 $cut_through // bits of buffering = 3. 
    $volatile tmp8 := ( $mux grd_cnd8_10222_delayed_3_0 0   scaled8 )  $buffering 1
    $volatile rd1 := (((tmp1 && tmp2) && (tmp3 && tmp4)) && ((tmp5 && tmp6) && (tmp7 && tmp8))) $buffering 1
    fn_10245_delayed_4_0 := fn $buffering 4 $cut_through // bits of buffering = 4. 
    fv1_10247_delayed_4_0 := fv1 $buffering 4 $cut_through // bits of buffering = 256. 
    $volatile val_in_use := ( $mux fn_10245_delayed_4_0 rd1  fv1_10247_delayed_4_0 )  $buffering 1
    SHL_u64_u64_10260_10260_delayed_4_0 := (($bitcast ($uint<64>) sp ) << 3 ) $buffering 4 $cut_through // bits of buffering = 256. 
    SHL_u64_u64_10255_10255_delayed_4_0 := (($bitcast ($uint<64>) head ) << 3 ) $buffering 4 $cut_through // bits of buffering = 256. 
    $volatile tmp := ((val_in_use << SHL_u64_u64_10255_10255_delayed_4_0) >> SHL_u64_u64_10260_10260_delayed_4_0) $buffering 1
    $volatile bm2 := ((($bitcast ($uint<64>) _hFFFFFFFFFFFFFFFF  ) >> (($bitcast ($uint<64>) sp ) << 3 )) & (($bitcast ($uint<64>) _hFFFFFFFFFFFFFFFF  ) << (($bitcast ($uint<64>) (8  - sns) ) << 3 ))) $buffering 1
    $volatile bytemask := (bm | bm2) $buffering 1
    cv1_10288_delayed_4_0 := cv1 $buffering 4 $cut_through // bits of buffering = 256. 
    bm2_10290_delayed_4_0 := bm2 $buffering 4 $cut_through // bits of buffering = 256. 
    $volatile send_data := (cv1_10288_delayed_4_0 | (tmp & bm2_10290_delayed_4_0)) $buffering 1
    SUB_u16_u16_10299_10299_delayed_1_0 := (cb - 1 ) $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile n_sent := ( $mux done ( $mux (sent == SUB_u16_u16_10299_10299_delayed_1_0) 0   (sent + 1 ) )   sent )  $buffering 1
    $volatile n_head := ( $mux n_fn 0   hns )  $buffering 1
    $volatile nxt_chl := ((n_sent == 0 ) & done) $buffering 1
    $volatile n_addr1 := ((addr1 + ($bitcast ($uint<32>) ns )) + ($bitcast ($uint<32>) ( $mux nxt_chl rs  ( $mux done chl_change_inc  0  )  )  )) $buffering 1
    $volatile na3 := (n_addr1 >> 3 ) $buffering 1
    $volatile send := (((sns == 0 ) | nxt_chl) | (done & (na3 != (addr1 >> 3 )))) $buffering 1
    $volatile nfv1 := val_in_use $buffering 1
    send_10361_delayed_4_0 := send $buffering 4 $cut_through // bits of buffering = 4. 
    $volatile ncv1 := ( $mux send_10361_delayed_4_0 0   send_data )  $buffering 1
    $volatile nbm := ( $mux send 0   bytemask )  $buffering 1
    $volatile bytefull := (bytemask == _hFFFFFFFFFFFFFFFF ) $buffering 1
    $volatile send_all := (send & bytefull) $buffering 1
    $volatile send_part := (send & ( ~ bytefull )) $buffering 1
    send_all_10388_delayed_4_0 := send_all $buffering 4 $cut_through // bits of buffering = 4. 
    LSHR_u32_u32_10392_10392_delayed_4_0 := (addr1 >> 3 ) $buffering 4 $cut_through // bits of buffering = 128. 
    $guard (send_all_10388_delayed_4_0) B[0 ][LSHR_u32_u32_10392_10392_delayed_4_0] := send_data $buffering 1// bits of buffering = 64. 
    NOT_u64_u64_10401_10401_delayed_4_0 := ( ~ bytemask ) $buffering 4 $cut_through // bits of buffering = 256. 
    send_part_10396_delayed_4_0 := send_part $buffering 4 $cut_through // bits of buffering = 4. 
    LSHR_u32_u32_10399_10399_delayed_4_0 := (addr1 >> 3 ) $buffering 4 $cut_through // bits of buffering = 128. 
    $guard (send_part_10396_delayed_4_0) $call atomicMaskedWrite (LSHR_u32_u32_10399_10399_delayed_4_0 NOT_u64_u64_10401_10401_delayed_4_0 send_data ) () 
    $volatile n_row := ( $mux nxt_chl (row + 2 )  row )  $buffering 1
    $volatile continue_flag := (n_row < rb) $buffering 1
    $while continue_flag
    $volatile np_cnt := (p_cnt + 1 ) $buffering 1
    $volatile n_cmi := ( $mux (chl_left > max_chl) max_chl  chl_left )  $buffering 1
    $volatile n_chl_left := (chl_left - n_cmi) $buffering 1
    $volatile n_addr := (addr + ($bitcast ($uint<32>) chl_max_itr )) $buffering 1
    $if (p_cnt < num_parts) $then 
    $place[loopback]
    $endif
  }
}
$module [sendInner2]
$in ( init_addr : $uint<32>   rb : $uint<16>   cb : $uint<16>   chl_out : $uint<16>   shift_val : $uint<16>   num_parts : $uint<8>   max_chl : $uint<16>   activation : $uint<1>   scale_val : $uint<32>  )
$out ()
$is
{
  $branchblock [SI_blk]
  {
    $volatile row_size := ($bitcast ($uint<32>) (chl_out * cb) ) $buffering 1
    $volatile apply_relu := (activation == 1 ) $buffering 1
    $merge $entry loopback 
    $phi p_cnt := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  np_cnt $on   loopback 
    // type of target is $uint<8>
    $phi chl_max_itr := 			  n_cmi $on   loopback 			  max_chl $on   $entry 
    // type of target is $uint<16>
    $phi chl_left := 			  n_chl_left $on   loopback 			  (chl_out - max_chl) $on   $entry 
    // type of target is $uint<16>
    $phi addr := 			  n_addr $on   loopback 			  init_addr $on   $entry 
    // type of target is $uint<32>
    $endmerge
    $volatile chl_change_inc := ($bitcast ($uint<32>) (chl_out - chl_max_itr) ) $buffering 1
    $volatile rs := (row_size + chl_change_inc) $buffering 1
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi row := 			  n_row $on   $loopback 			  ($bitcast ($uint<16>) 1  ) $on   $entry 
    // type of target is $uint<16>
    $phi left := 			  n_left $on   $loopback 			  chl_max_itr $on   $entry 
    // type of target is $uint<16>
    $phi sent := 			  n_sent $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    $phi fv1 := 			  nfv1 $on   $loopback 			  ($bitcast ($uint<64>) 0  ) $on   $entry 
    // type of target is $uint<64>
    $phi cv1 := 			  ncv1 $on   $loopback 			  ($bitcast ($uint<64>) 0  ) $on   $entry 
    // type of target is $uint<64>
    $phi head := 			  n_head $on   $loopback 			  ($bitcast ($uint<3>) 0  ) $on   $entry 
    // type of target is $uint<3>
    $phi addr1 := 			  n_addr1 $on   $loopback 			  addr $on   $entry 
    // type of target is $uint<32>
    $phi fn := 			  ($bitcast ($uint<1>) 1  ) $on   $entry 			  n_fn $on   $loopback 
    // type of target is $uint<1>
    $phi bm := 			  nbm $on   $loopback 			  ($bitcast ($uint<64>) 0  ) $on   $entry 
    // type of target is $uint<64>
    $endmerge
    $volatile sp := ($bitcast ($uint<3>) addr1 ) $buffering 1
    $volatile min1 := ( $mux (sp > head) sp  head )  $buffering 1
    $volatile mi71 := (8  - ($bitcast ($uint<16>) min1 )) $buffering 1
    $volatile ns := ( $mux (mi71 < left) mi71  left )  $buffering 1
    $volatile hns := (head + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile sns := (sp + ($bitcast ($uint<3>) ns )) $buffering 1
    $volatile done := (left == ns) $buffering 1
    $volatile n_fn := (done | (hns == 0 )) $buffering 1
    $volatile n_left := ( $mux done chl_max_itr  (left - ns) )  $buffering 1
    $guard (fn) read_val1 := output_pipe1_2 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val2 := output_pipe2_2 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val3 := output_pipe3_2 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val4 := output_pipe4_2 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val5 := output_pipe5_2 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val6 := output_pipe6_2 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val7 := output_pipe7_2 $buffering 1// bits of buffering = 16. 
    $guard (fn) read_val8 := output_pipe8_2 $buffering 1// bits of buffering = 16. 
    $volatile grd_cnd1 := (apply_relu & ((read_val1 [] 15 ) == 1 )) $buffering 1
    $volatile grd_cnd2 := (apply_relu & ((read_val2 [] 15 ) == 1 )) $buffering 1
    $volatile grd_cnd3 := (apply_relu & ((read_val3 [] 15 ) == 1 )) $buffering 1
    $volatile grd_cnd4 := (apply_relu & ((read_val4 [] 15 ) == 1 )) $buffering 1
    $volatile grd_cnd5 := (apply_relu & ((read_val5 [] 15 ) == 1 )) $buffering 1
    $volatile grd_cnd6 := (apply_relu & ((read_val6 [] 15 ) == 1 )) $buffering 1
    $volatile grd_cnd7 := (apply_relu & ((read_val7 [] 15 ) == 1 )) $buffering 1
    $volatile grd_cnd8 := (apply_relu & ((read_val8 [] 15 ) == 1 )) $buffering 1
    $guard (~grd_cnd1) $call scaler (read_val1 scale_val shift_val ) (scaled1 ) 
    $guard (~grd_cnd2) $call scaler (read_val2 scale_val shift_val ) (scaled2 ) 
    $guard (~grd_cnd3) $call scaler (read_val3 scale_val shift_val ) (scaled3 ) 
    $guard (~grd_cnd4) $call scaler (read_val4 scale_val shift_val ) (scaled4 ) 
    $guard (~grd_cnd5) $call scaler (read_val5 scale_val shift_val ) (scaled5 ) 
    $guard (~grd_cnd6) $call scaler (read_val6 scale_val shift_val ) (scaled6 ) 
    $guard (~grd_cnd7) $call scaler (read_val7 scale_val shift_val ) (scaled7 ) 
    $guard (~grd_cnd8) $call scaler (read_val8 scale_val shift_val ) (scaled8 ) 
    grd_cnd1_10762_delayed_3_0 := grd_cnd1 $buffering 3 $cut_through // bits of buffering = 3. 
    $volatile tmp1 := ( $mux grd_cnd1_10762_delayed_3_0 0   scaled1 )  $buffering 1
    grd_cnd2_10768_delayed_3_0 := grd_cnd2 $buffering 3 $cut_through // bits of buffering = 3. 
    $volatile tmp2 := ( $mux grd_cnd2_10768_delayed_3_0 0   scaled2 )  $buffering 1
    grd_cnd3_10774_delayed_3_0 := grd_cnd3 $buffering 3 $cut_through // bits of buffering = 3. 
    $volatile tmp3 := ( $mux grd_cnd3_10774_delayed_3_0 0   scaled3 )  $buffering 1
    grd_cnd4_10780_delayed_3_0 := grd_cnd4 $buffering 3 $cut_through // bits of buffering = 3. 
    $volatile tmp4 := ( $mux grd_cnd4_10780_delayed_3_0 0   scaled4 )  $buffering 1
    grd_cnd5_10786_delayed_3_0 := grd_cnd5 $buffering 3 $cut_through // bits of buffering = 3. 
    $volatile tmp5 := ( $mux grd_cnd5_10786_delayed_3_0 0   scaled5 )  $buffering 1
    grd_cnd6_10792_delayed_3_0 := grd_cnd6 $buffering 3 $cut_through // bits of buffering = 3. 
    $volatile tmp6 := ( $mux grd_cnd6_10792_delayed_3_0 0   scaled6 )  $buffering 1
    grd_cnd7_10798_delayed_3_0 := grd_cnd7 $buffering 3 $cut_through // bits of buffering = 3. 
    $volatile tmp7 := ( $mux grd_cnd7_10798_delayed_3_0 0   scaled7 )  $buffering 1
    grd_cnd8_10804_delayed_3_0 := grd_cnd8 $buffering 3 $cut_through // bits of buffering = 3. 
    $volatile tmp8 := ( $mux grd_cnd8_10804_delayed_3_0 0   scaled8 )  $buffering 1
    $volatile rd1 := (((tmp1 && tmp2) && (tmp3 && tmp4)) && ((tmp5 && tmp6) && (tmp7 && tmp8))) $buffering 1
    fn_10827_delayed_4_0 := fn $buffering 4 $cut_through // bits of buffering = 4. 
    fv1_10829_delayed_4_0 := fv1 $buffering 4 $cut_through // bits of buffering = 256. 
    $volatile val_in_use := ( $mux fn_10827_delayed_4_0 rd1  fv1_10829_delayed_4_0 )  $buffering 1
    SHL_u64_u64_10837_10837_delayed_4_0 := (($bitcast ($uint<64>) head ) << 3 ) $buffering 4 $cut_through // bits of buffering = 256. 
    SHL_u64_u64_10842_10842_delayed_4_0 := (($bitcast ($uint<64>) sp ) << 3 ) $buffering 4 $cut_through // bits of buffering = 256. 
    $volatile tmp := ((val_in_use << SHL_u64_u64_10837_10837_delayed_4_0) >> SHL_u64_u64_10842_10842_delayed_4_0) $buffering 1
    $volatile bm2 := ((($bitcast ($uint<64>) _hFFFFFFFFFFFFFFFF  ) >> (($bitcast ($uint<64>) sp ) << 3 )) & (($bitcast ($uint<64>) _hFFFFFFFFFFFFFFFF  ) << (($bitcast ($uint<64>) (8  - sns) ) << 3 ))) $buffering 1
    $volatile bytemask := (bm | bm2) $buffering 1
    cv1_10870_delayed_4_0 := cv1 $buffering 4 $cut_through // bits of buffering = 256. 
    bm2_10872_delayed_4_0 := bm2 $buffering 4 $cut_through // bits of buffering = 256. 
    $volatile send_data := (cv1_10870_delayed_4_0 | (tmp & bm2_10872_delayed_4_0)) $buffering 1
    SUB_u16_u16_10881_10881_delayed_1_0 := (cb - 1 ) $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile n_sent := ( $mux done ( $mux (sent == SUB_u16_u16_10881_10881_delayed_1_0) 0   (sent + 1 ) )   sent )  $buffering 1
    $volatile n_head := ( $mux n_fn 0   hns )  $buffering 1
    $volatile nxt_chl := ((n_sent == 0 ) & done) $buffering 1
    $volatile n_addr1 := ((addr1 + ($bitcast ($uint<32>) ns )) + ($bitcast ($uint<32>) ( $mux nxt_chl rs  ( $mux done chl_change_inc  0  )  )  )) $buffering 1
    $volatile na3 := (n_addr1 >> 3 ) $buffering 1
    $volatile send := (((sns == 0 ) | nxt_chl) | (done & (na3 != (addr1 >> 3 )))) $buffering 1
    $volatile nfv1 := val_in_use $buffering 1
    send_10943_delayed_4_0 := send $buffering 4 $cut_through // bits of buffering = 4. 
    $volatile ncv1 := ( $mux send_10943_delayed_4_0 0   send_data )  $buffering 1
    $volatile nbm := ( $mux send 0   bytemask )  $buffering 1
    $volatile bytefull := (bytemask == _hFFFFFFFFFFFFFFFF ) $buffering 1
    $volatile send_all := (send & bytefull) $buffering 1
    $volatile send_part := (send & ( ~ bytefull )) $buffering 1
    send_all_10970_delayed_4_0 := send_all $buffering 4 $cut_through // bits of buffering = 4. 
    LSHR_u32_u32_10974_10974_delayed_4_0 := (addr1 >> 3 ) $buffering 4 $cut_through // bits of buffering = 128. 
    $guard (send_all_10970_delayed_4_0) B[0 ][LSHR_u32_u32_10974_10974_delayed_4_0] := send_data $buffering 1// bits of buffering = 64. 
    NOT_u64_u64_10983_10983_delayed_4_0 := ( ~ bytemask ) $buffering 4 $cut_through // bits of buffering = 256. 
    send_part_10978_delayed_4_0 := send_part $buffering 4 $cut_through // bits of buffering = 4. 
    LSHR_u32_u32_10981_10981_delayed_4_0 := (addr1 >> 3 ) $buffering 4 $cut_through // bits of buffering = 128. 
    $guard (send_part_10978_delayed_4_0) $call atomicMaskedWrite (LSHR_u32_u32_10981_10981_delayed_4_0 NOT_u64_u64_10983_10983_delayed_4_0 send_data ) () 
    $volatile n_row := ( $mux nxt_chl (row + 2 )  row )  $buffering 1
    $volatile continue_flag := (n_row < rb) $buffering 1
    $while continue_flag
    $volatile np_cnt := (p_cnt + 1 ) $buffering 1
    $volatile n_cmi := ( $mux (chl_left > max_chl) max_chl  chl_left )  $buffering 1
    $volatile n_chl_left := (chl_left - n_cmi) $buffering 1
    $volatile n_addr := (addr + ($bitcast ($uint<32>) chl_max_itr )) $buffering 1
    $if (p_cnt < num_parts) $then 
    $place[loopback]
    $endif
  }
}
$opaque $module [sendModule]
$in ( rb : $uint<16>   cb : $uint<16>   chl_out : $uint<16>   shift_val : $uint<16>   num_parts : $uint<8>   max_chl : $uint<16>   activation : $uint<1>   scale_val : $uint<32>  )
$out ()
$is
{
  $parallelblock[sendBlock]
  {
    $call sendInner1 (0  rb cb chl_out shift_val num_parts max_chl activation scale_val ) () 
    $call sendInner2 (($bitcast ($uint<32>) (chl_out * cb) ) rb cb chl_out shift_val num_parts max_chl activation scale_val ) () 
  }
}
$opaque $module [sendPool]
$in ( rb : $uint<16>   cb : $uint<16>   chl_out : $uint<16>   shift_val : $uint<16>   num_parts : $uint<8>   max_chl : $uint<16>   activation : $uint<1>  )
$out ()
$is
{
  $branchblock [sendBlock]
  {
    $volatile apply_relu := (activation == 1 ) $buffering 1
    $merge $entry loopback 
    $phi p_cnt := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  np_cnt $on   loopback 
    // type of target is $uint<8>
    $phi chl_max_itr := 			  max_chl $on   $entry 			  n_cmi $on   loopback 
    // type of target is $uint<16>
    $phi chl_left := 			  (chl_out - max_chl) $on   $entry 			  n_chl_left $on   loopback 
    // type of target is $uint<16>
    $phi addr := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  n_addr $on   loopback 
    // type of target is $uint<32>
    $endmerge
    $volatile chl_change_inc := ($bitcast ($uint<32>) (chl_out - chl_max_itr) ) $buffering 1
    $volatile rs_1 := chl_change_inc $buffering 1
    $dopipeline $depth 15 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $phi address1 := 			  ($bitcast ($uint<32>) addr ) $on   $entry 			  n_address1 $on   $loopback 
    // type of target is $uint<32>
    $phi chl := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_chl $on   $loopback 
    // type of target is $uint<16>
    $phi col := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_col $on   $loopback 
    // type of target is $uint<16>
    $phi row := 			  ($bitcast ($uint<16>) 1  ) $on   $entry 			  n_row $on   $loopback 
    // type of target is $uint<16>
    $endmerge
    $volatile chl_change := (chl == chl_max_itr) $buffering 1
    $volatile row_change := ((col == cb) & chl_change) $buffering 1
    $volatile n_chl := ( $mux chl_change 1   (chl + 1 ) )  $buffering 1
    $volatile n_col := ( $mux row_change 1   ( $mux chl_change (col + 1 )  col )  )  $buffering 1
    $volatile n_row := ( $mux row_change (row + 2 )  row )  $buffering 1
    read_val1_1 := output_pipe1_1 $buffering 1// bits of buffering = 16. 
    read_val2_1 := output_pipe2_1 $buffering 1// bits of buffering = 16. 
    read_val3_1 := output_pipe3_1 $buffering 1// bits of buffering = 16. 
    read_val4_1 := output_pipe4_1 $buffering 1// bits of buffering = 16. 
    read_val5_1 := output_pipe5_1 $buffering 1// bits of buffering = 16. 
    read_val6_1 := output_pipe6_1 $buffering 1// bits of buffering = 16. 
    read_val7_1 := output_pipe7_1 $buffering 1// bits of buffering = 16. 
    read_val8_1 := output_pipe8_1 $buffering 1// bits of buffering = 16. 
    read_val1_2 := output_pipe1_2 $buffering 1// bits of buffering = 16. 
    read_val2_2 := output_pipe2_2 $buffering 1// bits of buffering = 16. 
    read_val3_2 := output_pipe3_2 $buffering 1// bits of buffering = 16. 
    read_val4_2 := output_pipe4_2 $buffering 1// bits of buffering = 16. 
    read_val5_2 := output_pipe5_2 $buffering 1// bits of buffering = 16. 
    read_val6_2 := output_pipe6_2 $buffering 1// bits of buffering = 16. 
    read_val7_2 := output_pipe7_2 $buffering 1// bits of buffering = 16. 
    read_val8_2 := output_pipe8_2 $buffering 1// bits of buffering = 16. 
    $volatile tmp1_1 := ( $mux (apply_relu & ((read_val1_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val1_1 >> shift_val) ) )  $buffering 1
    $volatile tmp2_1 := ( $mux (apply_relu & ((read_val2_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val2_1 >> shift_val) ) )  $buffering 1
    $volatile tmp3_1 := ( $mux (apply_relu & ((read_val3_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val3_1 >> shift_val) ) )  $buffering 1
    $volatile tmp4_1 := ( $mux (apply_relu & ((read_val4_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val4_1 >> shift_val) ) )  $buffering 1
    $volatile tmp5_1 := ( $mux (apply_relu & ((read_val5_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val5_1 >> shift_val) ) )  $buffering 1
    $volatile tmp6_1 := ( $mux (apply_relu & ((read_val6_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val6_1 >> shift_val) ) )  $buffering 1
    $volatile tmp7_1 := ( $mux (apply_relu & ((read_val7_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val7_1 >> shift_val) ) )  $buffering 1
    $volatile tmp8_1 := ( $mux (apply_relu & ((read_val8_1 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val8_1 >> shift_val) ) )  $buffering 1
    $volatile tmp1_2 := ( $mux (apply_relu & ((read_val1_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val1_2 >> shift_val) ) )  $buffering 1
    $volatile tmp2_2 := ( $mux (apply_relu & ((read_val2_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val2_2 >> shift_val) ) )  $buffering 1
    $volatile tmp3_2 := ( $mux (apply_relu & ((read_val3_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val3_2 >> shift_val) ) )  $buffering 1
    $volatile tmp4_2 := ( $mux (apply_relu & ((read_val4_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val4_2 >> shift_val) ) )  $buffering 1
    $volatile tmp5_2 := ( $mux (apply_relu & ((read_val5_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val5_2 >> shift_val) ) )  $buffering 1
    $volatile tmp6_2 := ( $mux (apply_relu & ((read_val6_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val6_2 >> shift_val) ) )  $buffering 1
    $volatile tmp7_2 := ( $mux (apply_relu & ((read_val7_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val7_2 >> shift_val) ) )  $buffering 1
    $volatile tmp8_2 := ( $mux (apply_relu & ((read_val8_2 [] 15 ) == 1 )) 0   ($bitcast ($uint<8>) (read_val8_2 >> shift_val) ) )  $buffering 1
    $volatile mx1 := ( $mux (($bitcast ($int<8>) tmp1_1 ) > ($bitcast ($int<8>) tmp1_2 )) tmp1_1  tmp1_2 )  $buffering 1
    $volatile mx2 := ( $mux (($bitcast ($int<8>) tmp2_1 ) > ($bitcast ($int<8>) tmp2_2 )) tmp2_1  tmp2_2 )  $buffering 1
    $volatile mx3 := ( $mux (($bitcast ($int<8>) tmp3_1 ) > ($bitcast ($int<8>) tmp3_2 )) tmp3_1  tmp3_2 )  $buffering 1
    $volatile mx4 := ( $mux (($bitcast ($int<8>) tmp4_1 ) > ($bitcast ($int<8>) tmp4_2 )) tmp4_1  tmp4_2 )  $buffering 1
    $volatile mx5 := ( $mux (($bitcast ($int<8>) tmp5_1 ) > ($bitcast ($int<8>) tmp5_2 )) tmp5_1  tmp5_2 )  $buffering 1
    $volatile mx6 := ( $mux (($bitcast ($int<8>) tmp6_1 ) > ($bitcast ($int<8>) tmp6_2 )) tmp6_1  tmp6_2 )  $buffering 1
    $volatile mx7 := ( $mux (($bitcast ($int<8>) tmp7_1 ) > ($bitcast ($int<8>) tmp7_2 )) tmp7_1  tmp7_2 )  $buffering 1
    $volatile mx8 := ( $mux (($bitcast ($int<8>) tmp8_1 ) > ($bitcast ($int<8>) tmp8_2 )) tmp8_1  tmp8_2 )  $buffering 1
    $volatile rd1 := (((mx1 && mx2) && (mx3 && mx4)) && ((mx5 && mx6) && (mx7 && mx8))) $buffering 1
    $volatile pool_stage := (col [] 0 ) $buffering 1
    $volatile tmp_sum := (1  + ( $mux row_change rs_1  ( $mux chl_change chl_change_inc  0  )  ) ) $buffering 1
    $volatile n_address1 := ( $mux pool_stage address1  (address1 + tmp_sum) )  $buffering 1
    $guard (pool_stage) pool_buffer := rd1 $buffering 1// bits of buffering = 64. 
    $guard (~pool_stage) val := pool_buffer $buffering 1// bits of buffering = 64. 
    v1 := ( $slice val 63 56 )  $buffering 1// bits of buffering = 8. 
    v2 := ( $slice val 55 48 )  $buffering 1// bits of buffering = 8. 
    v3 := ( $slice val 47 40 )  $buffering 1// bits of buffering = 8. 
    v4 := ( $slice val 39 32 )  $buffering 1// bits of buffering = 8. 
    v5 := ( $slice val 31 24 )  $buffering 1// bits of buffering = 8. 
    v6 := ( $slice val 23 16 )  $buffering 1// bits of buffering = 8. 
    v7 := ( $slice val 15 8 )  $buffering 1// bits of buffering = 8. 
    v8 := ( $slice val 7 0 )  $buffering 1// bits of buffering = 8. 
    type_cast_11626_11626_delayed_2_0 := ($bitcast ($int<8>) mx1 ) $buffering 2 $cut_through // bits of buffering = 16. 
    mx1_11630_delayed_2_0 := mx1 $buffering 2 $cut_through // bits of buffering = 16. 
    $volatile mv1 := ( $mux (type_cast_11626_11626_delayed_2_0 > ($bitcast ($int<8>) v1 )) mx1_11630_delayed_2_0  v1 )  $buffering 1
    type_cast_11636_11636_delayed_2_0 := ($bitcast ($int<8>) mx2 ) $buffering 2 $cut_through // bits of buffering = 16. 
    mx2_11640_delayed_2_0 := mx2 $buffering 2 $cut_through // bits of buffering = 16. 
    $volatile mv2 := ( $mux (type_cast_11636_11636_delayed_2_0 > ($bitcast ($int<8>) v2 )) mx2_11640_delayed_2_0  v2 )  $buffering 1
    type_cast_11646_11646_delayed_2_0 := ($bitcast ($int<8>) mx3 ) $buffering 2 $cut_through // bits of buffering = 16. 
    mx3_11650_delayed_2_0 := mx3 $buffering 2 $cut_through // bits of buffering = 16. 
    $volatile mv3 := ( $mux (type_cast_11646_11646_delayed_2_0 > ($bitcast ($int<8>) v3 )) mx3_11650_delayed_2_0  v3 )  $buffering 1
    type_cast_11656_11656_delayed_2_0 := ($bitcast ($int<8>) mx4 ) $buffering 2 $cut_through // bits of buffering = 16. 
    mx4_11660_delayed_2_0 := mx4 $buffering 2 $cut_through // bits of buffering = 16. 
    $volatile mv4 := ( $mux (type_cast_11656_11656_delayed_2_0 > ($bitcast ($int<8>) v4 )) mx4_11660_delayed_2_0  v4 )  $buffering 1
    type_cast_11666_11666_delayed_2_0 := ($bitcast ($int<8>) mx5 ) $buffering 2 $cut_through // bits of buffering = 16. 
    mx5_11670_delayed_2_0 := mx5 $buffering 2 $cut_through // bits of buffering = 16. 
    $volatile mv5 := ( $mux (type_cast_11666_11666_delayed_2_0 > ($bitcast ($int<8>) v5 )) mx5_11670_delayed_2_0  v5 )  $buffering 1
    type_cast_11676_11676_delayed_2_0 := ($bitcast ($int<8>) mx6 ) $buffering 2 $cut_through // bits of buffering = 16. 
    mx6_11680_delayed_2_0 := mx6 $buffering 2 $cut_through // bits of buffering = 16. 
    $volatile mv6 := ( $mux (type_cast_11676_11676_delayed_2_0 > ($bitcast ($int<8>) v6 )) mx6_11680_delayed_2_0  v6 )  $buffering 1
    type_cast_11686_11686_delayed_2_0 := ($bitcast ($int<8>) mx7 ) $buffering 2 $cut_through // bits of buffering = 16. 
    mx7_11690_delayed_2_0 := mx7 $buffering 2 $cut_through // bits of buffering = 16. 
    $volatile mv7 := ( $mux (type_cast_11686_11686_delayed_2_0 > ($bitcast ($int<8>) v7 )) mx7_11690_delayed_2_0  v7 )  $buffering 1
    type_cast_11696_11696_delayed_2_0 := ($bitcast ($int<8>) mx8 ) $buffering 2 $cut_through // bits of buffering = 16. 
    mx8_11700_delayed_2_0 := mx8 $buffering 2 $cut_through // bits of buffering = 16. 
    $volatile mv8 := ( $mux (type_cast_11696_11696_delayed_2_0 > ($bitcast ($int<8>) v8 )) mx8_11700_delayed_2_0  v8 )  $buffering 1
    $volatile max_val := (((mv1 && mv2) && (mv3 && mv4)) && ((mv5 && mv6) && (mv7 && mv8))) $buffering 1
    $volatile data_to_send := max_val $buffering 1
    pool_stage_11724_delayed_2_0 := pool_stage $buffering 2 $cut_through // bits of buffering = 2. 
    address1_11726_delayed_2_0 := address1 $buffering 2 $cut_through // bits of buffering = 64. 
    $guard (~pool_stage_11724_delayed_2_0) B[0 ][address1_11726_delayed_2_0] := data_to_send $buffering 1// bits of buffering = 64. 
    SUB_u16_u16_11734_11734_delayed_1_0 := (rb - 1 ) $buffering 1 $cut_through // bits of buffering = 16. 
    $volatile continue_flag := ((row >= SUB_u16_u16_11734_11734_delayed_1_0) ~& row_change) $buffering 1
    $while continue_flag
    $volatile np_cnt := (p_cnt + 1 ) $buffering 1
    $volatile n_cmi := ( $mux (chl_left > max_chl) max_chl  chl_left )  $buffering 1
    $volatile n_chl_left := (chl_left - n_cmi) $buffering 1
    $volatile n_addr := (addr + ($bitcast ($uint<32>) chl_max_itr )) $buffering 1
    $if (p_cnt < num_parts) $then 
    $place[loopback]
    $endif
  }
}
$pipeline $depth 7 $buffering 1 $fullrate $module [timer]
$in ( index : $uint<8>  )
$out ( T : $uint<64>  )
$is
{
  timer_req := ($bitcast ($uint<1>) _b1  ) $buffering 1// bits of buffering = 1. 
  type_cast_11782_11782_delayed_1_0 := ($bitcast ($uint<32>) index ) $buffering 1 $cut_through // bits of buffering = 32. 
  T := (type_cast_11782_11782_delayed_1_0 && ($bitcast ($uint<32>) timer_resp )) $buffering 1// bits of buffering = 64. 
  $attribute delay 4
}
$module [timerDaemon]
$in ()
$out ()
$is
{
  $branchblock [loop]
  {
    $dopipeline $depth 7 $buffering 1
    $fullrate 
    $merge $entry $loopback 
    $phi COUNTER := 			  ($bitcast ($uint<64>) _b0  ) $on   $entry 			  nCOUNTER $on   $loopback 
    // type of target is $uint<64>
    $phi req := 			  timer_req $on   $entry ,   $loopback 
    // type of target is $uint<1>
    $endmerge
    $volatile nCOUNTER := (COUNTER + 1 ) $buffering 1
    $guard (req) timer_resp := COUNTER $buffering 1// bits of buffering = 64. 
    $while 1 
  }
}
$module [topModule]
$in ()
$out ()
$is
{
  $seriesblock[seriesBlock]
  {
    $call configureConvolution () (rt ct chl_in rb cb chl_out rk ck shift_val pad op_size scale_val ) 
    $volatile chl_out_ceil := ((chl_out + 7 ) >> 3 ) $buffering 1
    $volatile chl_in_ceil := ((chl_in + 7 ) >> 3 ) $buffering 1
    $call Divider (256  (chl_in_ceil * ck) ) (alpha ) 
    $volatile cnd_partition := (alpha < chl_out_ceil) $buffering 1
    $guard (cnd_partition) $call Divider ((chl_out_ceil - 1 ) alpha ) (tmp1 ) 
    $volatile parts := ($bitcast ($uint<8>) ( $mux cnd_partition tmp1  0  )  ) $buffering 1
    $volatile max_per_part := ( $mux cnd_partition (alpha << 3 )  chl_out )  $buffering 1
    $parallelblock[topBlocks]
    {
      $branchblock [time_start_block]
      {
        $call timer (1  ) (start_time ) 
        time_pipe := start_time $buffering 1// bits of buffering = 64. 
      }
      ( start_time => start_time )
      $call loadKernel (chl_in chl_out rk ck 1  ) () 
      $call inputModule8 (rb ct chl_in_ceil rk pad parts ) () 
      $call convolveCore (rb cb chl_in_ceil chl_out rk ck parts max_per_part ) () 
      $call accumulator (chl_in_ceil ck (op_size >> 1 ) ) () 
      $call sendModule (rb cb chl_out shift_val parts max_per_part 1  scale_val ) () 
    }
    ( start_time => start_time )
    $call timer (2  ) (end_time ) 
    time_pipe := end_time $buffering 1// bits of buffering = 64. 
    $call sendB (op_size ) () 
    $volatile net_time := (end_time - start_time) $buffering 1
    t4 := ( $slice net_time 31 24 )  $buffering 1// bits of buffering = 8. 
    t3 := ( $slice net_time 23 16 )  $buffering 1// bits of buffering = 8. 
    t2 := ( $slice net_time 15 8 )  $buffering 1// bits of buffering = 8. 
    t1 := ( $slice net_time 7 0 )  $buffering 1// bits of buffering = 8. 
    maxpool_output_pipe := t4 $buffering 1// bits of buffering = 8. 
    maxpool_output_pipe := t3 $buffering 1// bits of buffering = 8. 
    maxpool_output_pipe := t2 $buffering 1// bits of buffering = 8. 
    maxpool_output_pipe := t1 $buffering 1// bits of buffering = 8. 
  }
}
// Memory space 0: B 
// Memory space 1: K 
// Memory space 2: T 
// use of gated clocks in modules 
