$opaque $module [readModule1]
$in (address : $uint<32>)
$out (data : $uint<64>)
$is
{
	$call memoryModule (1 (T1_base + address) 0 255) (data)
}

$opaque $module [writeModule1]
$in (index : $uint<8> address : $uint<32> data : $uint<64>)
$out ()
$is
{
	$volatile cnd1 := (index == 0)
	$volatile cnd2 := (index == 1)
	$volatile cnd3 := (index == 2)
	$volatile cnd4 := (index == 3)
	$volatile cnd5 := (index == 4)
	$volatile cnd6 := (index == 5)
	$volatile cnd7 := (index == 6)
	$volatile cnd8 := (index == 7)
	$volatile cnd9 := (index == 8)
	$volatile cnd10 := (index == 9)
	$volatile cnd11 := (index == 10)
	$volatile cnd12 := (index == 11)
	$volatile cnd13 := (index == 12)
	$volatile cnd14 := (index == 13)
	$volatile cnd15 := (index == 14)
	$volatile cnd16 := (index == 15)
	$volatile cnd17 := (index == 16)
	$volatile cnd18 := (index == 17)
	$volatile cnd19 := (index == 18)
	addr := ($excmux 
			cnd1 (K0_base + address)
			cnd2 (K1_base + address)
			cnd3 (K2_base + address)
			cnd4 (K3_base + address)
			cnd5 (K4_base + address)
			cnd6 (K5_base + address)
			cnd7 (K6_base + address)
			cnd8 (K7_base + address)
			cnd9 (K8_base + address)
			cnd10 (K9_base + address)
			cnd11 (K10_base + address)
			cnd12 (K11_base + address)
			cnd13 (K12_base + address)
			cnd14 (K13_base + address)
			cnd15 (K14_base + address)
			cnd16 (K15_base + address)
			cnd17 (K16_base + address)
			cnd18 (K17_base + address)
			cnd19 (T0_base + address)
			)
	$call memoryModule (0 addr data 255) (out)
}

$pipeline $depth 7 $buffering 1 $fullrate
$opaque $module [readModule_convolution]
$in (index : $uint<8> address : $uint<32>)
$out (data : $uint<64>)
$is
{
	$volatile cnd1 := (index == 0)
	$volatile cnd2 := (index == 1)
	$volatile cnd3 := (index == 2)
	$volatile cnd4 := (index == 3)
	$volatile cnd5 := (index == 4)
	addr := ($excmux 
			cnd1 (T0_base + address)
			cnd2 (T1_base + address)
			cnd3 (T2_base + address)
			cnd4 (T3_base + address)
			cnd5 (T4_base + address)
			)
	$call readModule_convolution2 (addr) (done)
	data := READ_T_RESP_QUEUE

}

$pipeline $depth 7 $buffering 1 $fullrate
$opaque $module [readModule_convolution2]
$in (addr : $uint<32>) $out (done : $uint<1>)
$is
{
	$call memoryModule (1 addr 0 255) (data)
	READ_T_RESP_QUEUE := data
	done := (data [] 0)
}

$pipeline $depth 7 $buffering 1 $fullrate
$opaque $module [readModule_convolutionk]
$in (index : $uint<8> address : $uint<32>)
$out (data : $uint<64>)
$is
{
	$volatile cnd1 := (index == 0)
	$volatile cnd2 := (index == 1)
	$volatile cnd3 := (index == 2)
	$volatile cnd4 := (index == 3)
	$volatile cnd5 := (index == 4)
	$volatile cnd6 := (index == 5)
	$volatile cnd7 := (index == 6)
	$volatile cnd8 := (index == 7)
	$volatile cnd9 := (index == 8)
	$volatile cnd10 := (index == 9)
	$volatile cnd11 := (index == 10)
	$volatile cnd12 := (index == 11)
	$volatile cnd13 := (index == 12)
	$volatile cnd14 := (index == 13)
	$volatile cnd15 := (index == 14)
	$volatile cnd16 := (index == 15)
	$volatile cnd17 := (index == 16)
	$volatile cnd18 := (index == 17)
	addr := ($excmux 
			cnd1 (K0_base + address)
			cnd2 (K1_base + address)
			cnd3 (K2_base + address)
			cnd4 (K3_base + address)
			cnd5 (K4_base + address)
			cnd6 (K5_base + address)
			cnd7 (K6_base + address)
			cnd8 (K7_base + address)
			cnd9 (K8_base + address)
			cnd10 (K9_base + address)
			cnd11 (K10_base + address)
			cnd12 (K11_base + address)
			cnd13 (K12_base + address)
			cnd14 (K13_base + address)
			cnd15 (K14_base + address)
			cnd16 (K15_base + address)
			cnd17 (K16_base + address)
			cnd18 (K17_base + address)
			)
	$call readModule_convolutionk2 (addr) (done)
	data := READ_K_RESP_QUEUE
}

$pipeline $depth 7 $buffering 1 $fullrate
$opaque $module [readModule_convolutionk2]
$in (addr : $uint<32>) $out (done : $uint<1>)
$is
{
	$call memoryModule (1 addr 0 255) (data)
	READ_K_RESP_QUEUE := data
	done := (data [] 0)
}

$pipeline $depth 7 $buffering 1 $fullrate
$opaque $module [writeModule_convolution]
$in (index : $uint<8> address : $uint<32> data : $uint<64> bm : $uint<8>)
$out (done : $uint<1>)
$is
{
	$volatile cnd1 := (index == 0)
	$volatile cnd2 := (index == 1)
	$volatile cnd3 := (index == 2)
	$volatile cnd4 := (index == 3)
	$volatile cnd5 := (index == 4)
	addr := ($excmux 
			cnd1 (T0_base + address)
			cnd2 (T1_base + address)
			cnd3 (T2_base + address)
			cnd4 (T3_base + address)
			cnd5 (T4_base + address)
			)
	$call memoryModule (0 addr data bm) (out)
	done := (index [] 0)
}
